var liblouisBuild = function(liblouisBuild) {
  liblouisBuild = liblouisBuild || {};
  var Module = liblouisBuild;


// The Module object: Our interface to the outside world. We import
// and export values on it, and do the work to get that through
// closure compiler if necessary. There are various ways Module can be used:
// 1. Not defined. We create it here
// 2. A function parameter, function(Module) { ..generated code.. }
// 3. pre-run appended it, var Module = {}; ..generated code..
// 4. External script tag defines var Module.
// We need to do an eval in order to handle the closure compiler
// case, where this code here is minified but Module was defined
// elsewhere (e.g. case 4 above). We also need to check if Module
// already exists (e.g. case 3 above).
// Note that if you want to run closure, and also to use Module
// after the generated code, you will need to define   var Module = {};
// before the code. Then that object will be used in the code, and you
// can continue to use Module afterwards as well.
var Module;
if (!Module) Module = (typeof liblouisBuild !== 'undefined' ? liblouisBuild : null) || {};

// Sometimes an existing Module object exists with properties
// meant to overwrite the default module functionality. Here
// we collect those properties and reapply _after_ we configure
// the current environment's defaults to avoid having to be so
// defensive during initialization.
var moduleOverrides = {};
for (var key in Module) {
  if (Module.hasOwnProperty(key)) {
    moduleOverrides[key] = Module[key];
  }
}

// The environment setup code below is customized to use Module.
// *** Environment setup code ***
var ENVIRONMENT_IS_WEB = false;
var ENVIRONMENT_IS_WORKER = false;
var ENVIRONMENT_IS_NODE = false;
var ENVIRONMENT_IS_SHELL = false;

// Three configurations we can be running in:
// 1) We could be the application main() thread running in the main JS UI thread. (ENVIRONMENT_IS_WORKER == false and ENVIRONMENT_IS_PTHREAD == false)
// 2) We could be the application main() thread proxied to worker. (with Emscripten -s PROXY_TO_WORKER=1) (ENVIRONMENT_IS_WORKER == true, ENVIRONMENT_IS_PTHREAD == false)
// 3) We could be an application pthread running in a worker. (ENVIRONMENT_IS_WORKER == true and ENVIRONMENT_IS_PTHREAD == true)

if (Module['ENVIRONMENT']) {
  if (Module['ENVIRONMENT'] === 'WEB') {
    ENVIRONMENT_IS_WEB = true;
  } else if (Module['ENVIRONMENT'] === 'WORKER') {
    ENVIRONMENT_IS_WORKER = true;
  } else if (Module['ENVIRONMENT'] === 'NODE') {
    ENVIRONMENT_IS_NODE = true;
  } else if (Module['ENVIRONMENT'] === 'SHELL') {
    ENVIRONMENT_IS_SHELL = true;
  } else {
    throw new Error('The provided Module[\'ENVIRONMENT\'] value is not valid. It must be one of: WEB|WORKER|NODE|SHELL.');
  }
} else {
  ENVIRONMENT_IS_WEB = typeof window === 'object';
  ENVIRONMENT_IS_WORKER = typeof importScripts === 'function';
  ENVIRONMENT_IS_NODE = typeof process === 'object' && typeof require === 'function' && !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_WORKER;
  ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;
}


if (ENVIRONMENT_IS_NODE) {
  // Expose functionality in the same simple way that the shells work
  // Note that we pollute the global namespace here, otherwise we break in node
  if (!Module['print']) Module['print'] = console.log;
  if (!Module['printErr']) Module['printErr'] = console.warn;

  var nodeFS;
  var nodePath;

  Module['read'] = function read(filename, binary) {
    if (!nodeFS) nodeFS = require('fs');
    if (!nodePath) nodePath = require('path');
    filename = nodePath['normalize'](filename);
    var ret = nodeFS['readFileSync'](filename);
    return binary ? ret : ret.toString();
  };

  Module['readBinary'] = function readBinary(filename) {
    var ret = Module['read'](filename, true);
    if (!ret.buffer) {
      ret = new Uint8Array(ret);
    }
    assert(ret.buffer);
    return ret;
  };

  Module['load'] = function load(f) {
    globalEval(read(f));
  };

  if (!Module['thisProgram']) {
    if (process['argv'].length > 1) {
      Module['thisProgram'] = process['argv'][1].replace(/\\/g, '/');
    } else {
      Module['thisProgram'] = 'unknown-program';
    }
  }

  Module['arguments'] = process['argv'].slice(2);

  if (typeof module !== 'undefined') {
    module['exports'] = Module;
  }

  process['on']('uncaughtException', function(ex) {
    // suppress ExitStatus exceptions from showing an error
    if (!(ex instanceof ExitStatus)) {
      throw ex;
    }
  });

  Module['inspect'] = function () { return '[Emscripten Module object]'; };
}
else if (ENVIRONMENT_IS_SHELL) {
  if (!Module['print']) Module['print'] = print;
  if (typeof printErr != 'undefined') Module['printErr'] = printErr; // not present in v8 or older sm

  if (typeof read != 'undefined') {
    Module['read'] = read;
  } else {
    Module['read'] = function read() { throw 'no read() available' };
  }

  Module['readBinary'] = function readBinary(f) {
    if (typeof readbuffer === 'function') {
      return new Uint8Array(readbuffer(f));
    }
    var data = read(f, 'binary');
    assert(typeof data === 'object');
    return data;
  };

  if (typeof scriptArgs != 'undefined') {
    Module['arguments'] = scriptArgs;
  } else if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

}
else if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
  Module['read'] = function read(url) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, false);
    xhr.send(null);
    return xhr.responseText;
  };

  Module['readAsync'] = function readAsync(url, onload, onerror) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, true);
    xhr.responseType = 'arraybuffer';
    xhr.onload = function xhr_onload() {
      if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
        onload(xhr.response);
      } else {
        onerror();
      }
    };
    xhr.onerror = onerror;
    xhr.send(null);
  };

  if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  if (typeof console !== 'undefined') {
    if (!Module['print']) Module['print'] = function print(x) {
      console.log(x);
    };
    if (!Module['printErr']) Module['printErr'] = function printErr(x) {
      console.warn(x);
    };
  } else {
    // Probably a worker, and without console.log. We can do very little here...
    var TRY_USE_DUMP = false;
    if (!Module['print']) Module['print'] = (TRY_USE_DUMP && (typeof(dump) !== "undefined") ? (function(x) {
      dump(x);
    }) : (function(x) {
      // self.postMessage(x); // enable this if you want stdout to be sent as messages
    }));
  }

  if (ENVIRONMENT_IS_WORKER) {
    Module['load'] = importScripts;
  }

  if (typeof Module['setWindowTitle'] === 'undefined') {
    Module['setWindowTitle'] = function(title) { document.title = title };
  }
}
else {
  // Unreachable because SHELL is dependant on the others
  throw 'Unknown runtime environment. Where are we?';
}

function globalEval(x) {
  eval.call(null, x);
}
if (!Module['load'] && Module['read']) {
  Module['load'] = function load(f) {
    globalEval(Module['read'](f));
  };
}
if (!Module['print']) {
  Module['print'] = function(){};
}
if (!Module['printErr']) {
  Module['printErr'] = Module['print'];
}
if (!Module['arguments']) {
  Module['arguments'] = [];
}
if (!Module['thisProgram']) {
  Module['thisProgram'] = './this.program';
}

// *** Environment setup code ***

// Closure helpers
Module.print = Module['print'];
Module.printErr = Module['printErr'];

// Callbacks
Module['preRun'] = [];
Module['postRun'] = [];

// Merge back in the overrides
for (var key in moduleOverrides) {
  if (moduleOverrides.hasOwnProperty(key)) {
    Module[key] = moduleOverrides[key];
  }
}
// Free the object hierarchy contained in the overrides, this lets the GC
// reclaim data used e.g. in memoryInitializerRequest, which is a large typed array.
moduleOverrides = undefined;



// {{PREAMBLE_ADDITIONS}}

// === Preamble library stuff ===

// Documentation for the public APIs defined in this file must be updated in:
//    site/source/docs/api_reference/preamble.js.rst
// A prebuilt local version of the documentation is available at:
//    site/build/text/docs/api_reference/preamble.js.txt
// You can also build docs locally as HTML or other formats in site/
// An online HTML version (which may be of a different version of Emscripten)
//    is up at http://kripken.github.io/emscripten-site/docs/api_reference/preamble.js.html

//========================================
// Runtime code shared with compiler
//========================================

var Runtime = {
  setTempRet0: function (value) {
    tempRet0 = value;
    return value;
  },
  getTempRet0: function () {
    return tempRet0;
  },
  stackSave: function () {
    return STACKTOP;
  },
  stackRestore: function (stackTop) {
    STACKTOP = stackTop;
  },
  getNativeTypeSize: function (type) {
    switch (type) {
      case 'i1': case 'i8': return 1;
      case 'i16': return 2;
      case 'i32': return 4;
      case 'i64': return 8;
      case 'float': return 4;
      case 'double': return 8;
      default: {
        if (type[type.length-1] === '*') {
          return Runtime.QUANTUM_SIZE; // A pointer
        } else if (type[0] === 'i') {
          var bits = parseInt(type.substr(1));
          assert(bits % 8 === 0);
          return bits/8;
        } else {
          return 0;
        }
      }
    }
  },
  getNativeFieldSize: function (type) {
    return Math.max(Runtime.getNativeTypeSize(type), Runtime.QUANTUM_SIZE);
  },
  STACK_ALIGN: 16,
  prepVararg: function (ptr, type) {
    if (type === 'double' || type === 'i64') {
      // move so the load is aligned
      if (ptr & 7) {
        assert((ptr & 7) === 4);
        ptr += 4;
      }
    } else {
      assert((ptr & 3) === 0);
    }
    return ptr;
  },
  getAlignSize: function (type, size, vararg) {
    // we align i64s and doubles on 64-bit boundaries, unlike x86
    if (!vararg && (type == 'i64' || type == 'double')) return 8;
    if (!type) return Math.min(size, 8); // align structures internally to 64 bits
    return Math.min(size || (type ? Runtime.getNativeFieldSize(type) : 0), Runtime.QUANTUM_SIZE);
  },
  dynCall: function (sig, ptr, args) {
    if (args && args.length) {
      assert(args.length == sig.length-1);
      assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
      return Module['dynCall_' + sig].apply(null, [ptr].concat(args));
    } else {
      assert(sig.length == 1);
      assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
      return Module['dynCall_' + sig].call(null, ptr);
    }
  },
  functionPointers: [null],
  addFunction: function (func) {
    for (var i = 0; i < Runtime.functionPointers.length; i++) {
      if (!Runtime.functionPointers[i]) {
        Runtime.functionPointers[i] = func;
        return 2*(1 + i);
      }
    }
    throw 'Finished up all reserved function pointers. Use a higher value for RESERVED_FUNCTION_POINTERS.';
  },
  removeFunction: function (index) {
    Runtime.functionPointers[(index-2)/2] = null;
  },
  warnOnce: function (text) {
    if (!Runtime.warnOnce.shown) Runtime.warnOnce.shown = {};
    if (!Runtime.warnOnce.shown[text]) {
      Runtime.warnOnce.shown[text] = 1;
      Module.printErr(text);
    }
  },
  funcWrappers: {},
  getFuncWrapper: function (func, sig) {
    assert(sig);
    if (!Runtime.funcWrappers[sig]) {
      Runtime.funcWrappers[sig] = {};
    }
    var sigCache = Runtime.funcWrappers[sig];
    if (!sigCache[func]) {
      // optimize away arguments usage in common cases
      if (sig.length === 1) {
        sigCache[func] = function dynCall_wrapper() {
          return Runtime.dynCall(sig, func);
        };
      } else if (sig.length === 2) {
        sigCache[func] = function dynCall_wrapper(arg) {
          return Runtime.dynCall(sig, func, [arg]);
        };
      } else {
        // general case
        sigCache[func] = function dynCall_wrapper() {
          return Runtime.dynCall(sig, func, Array.prototype.slice.call(arguments));
        };
      }
    }
    return sigCache[func];
  },
  getCompilerSetting: function (name) {
    throw 'You must build with -s RETAIN_COMPILER_SETTINGS=1 for Runtime.getCompilerSetting or emscripten_get_compiler_setting to work';
  },
  stackAlloc: function (size) { var ret = STACKTOP;STACKTOP = (STACKTOP + size)|0;STACKTOP = (((STACKTOP)+15)&-16);(assert((((STACKTOP|0) < (STACK_MAX|0))|0))|0); return ret; },
  staticAlloc: function (size) { var ret = STATICTOP;STATICTOP = (STATICTOP + (assert(!staticSealed),size))|0;STATICTOP = (((STATICTOP)+15)&-16); return ret; },
  dynamicAlloc: function (size) { assert(DYNAMICTOP_PTR);var ret = HEAP32[DYNAMICTOP_PTR>>2];var end = (((ret + size + 15)|0) & -16);HEAP32[DYNAMICTOP_PTR>>2] = end;if (end >= TOTAL_MEMORY) {var success = enlargeMemory();if (!success) {HEAP32[DYNAMICTOP_PTR>>2] = ret;return 0;}}return ret;},
  alignMemory: function (size,quantum) { var ret = size = Math.ceil((size)/(quantum ? quantum : 16))*(quantum ? quantum : 16); return ret; },
  makeBigInt: function (low,high,unsigned) { var ret = (unsigned ? ((+((low>>>0)))+((+((high>>>0)))*4294967296.0)) : ((+((low>>>0)))+((+((high|0)))*4294967296.0))); return ret; },
  GLOBAL_BASE: 8,
  QUANTUM_SIZE: 4,
  __dummy__: 0
}



Module["Runtime"] = Runtime;



//========================================
// Runtime essentials
//========================================

var ABORT = 0; // whether we are quitting the application. no code should run after this. set in exit() and abort()
var EXITSTATUS = 0;

function assert(condition, text) {
  if (!condition) {
    abort('Assertion failed: ' + text);
  }
}

var globalScope = this;

// Returns the C function with a specified identifier (for C++, you need to do manual name mangling)
function getCFunc(ident) {
  var func = Module['_' + ident]; // closure exported function
  if (!func) {
    try { func = eval('_' + ident); } catch(e) {}
  }
  assert(func, 'Cannot call unknown function ' + ident + ' (perhaps LLVM optimizations or closure removed it?)');
  return func;
}

var cwrap, ccall;
(function(){
  var JSfuncs = {
    // Helpers for cwrap -- it can't refer to Runtime directly because it might
    // be renamed by closure, instead it calls JSfuncs['stackSave'].body to find
    // out what the minified function name is.
    'stackSave': function() {
      Runtime.stackSave()
    },
    'stackRestore': function() {
      Runtime.stackRestore()
    },
    // type conversion from js to c
    'arrayToC' : function(arr) {
      var ret = Runtime.stackAlloc(arr.length);
      writeArrayToMemory(arr, ret);
      return ret;
    },
    'stringToC' : function(str) {
      var ret = 0;
      if (str !== null && str !== undefined && str !== 0) { // null string
        // at most 4 bytes per UTF-8 code point, +1 for the trailing '\0'
        var len = (str.length << 2) + 1;
        ret = Runtime.stackAlloc(len);
        stringToUTF8(str, ret, len);
      }
      return ret;
    }
  };
  // For fast lookup of conversion functions
  var toC = {'string' : JSfuncs['stringToC'], 'array' : JSfuncs['arrayToC']};

  // C calling interface.
  ccall = function ccallFunc(ident, returnType, argTypes, args, opts) {
    var func = getCFunc(ident);
    var cArgs = [];
    var stack = 0;
    assert(returnType !== 'array', 'Return type should not be "array".');
    if (args) {
      for (var i = 0; i < args.length; i++) {
        var converter = toC[argTypes[i]];
        if (converter) {
          if (stack === 0) stack = Runtime.stackSave();
          cArgs[i] = converter(args[i]);
        } else {
          cArgs[i] = args[i];
        }
      }
    }
    var ret = func.apply(null, cArgs);
    if ((!opts || !opts.async) && typeof EmterpreterAsync === 'object') {
      assert(!EmterpreterAsync.state, 'cannot start async op with normal JS calling ccall');
    }
    if (opts && opts.async) assert(!returnType, 'async ccalls cannot return values');
    if (returnType === 'string') ret = Pointer_stringify(ret);
    if (stack !== 0) {
      if (opts && opts.async) {
        EmterpreterAsync.asyncFinalizers.push(function() {
          Runtime.stackRestore(stack);
        });
        return;
      }
      Runtime.stackRestore(stack);
    }
    return ret;
  }

  var sourceRegex = /^function\s*[a-zA-Z$_0-9]*\s*\(([^)]*)\)\s*{\s*([^*]*?)[\s;]*(?:return\s*(.*?)[;\s]*)?}$/;
  function parseJSFunc(jsfunc) {
    // Match the body and the return value of a javascript function source
    var parsed = jsfunc.toString().match(sourceRegex).slice(1);
    return {arguments : parsed[0], body : parsed[1], returnValue: parsed[2]}
  }

  // sources of useful functions. we create this lazily as it can trigger a source decompression on this entire file
  var JSsource = null;
  function ensureJSsource() {
    if (!JSsource) {
      JSsource = {};
      for (var fun in JSfuncs) {
        if (JSfuncs.hasOwnProperty(fun)) {
          // Elements of toCsource are arrays of three items:
          // the code, and the return value
          JSsource[fun] = parseJSFunc(JSfuncs[fun]);
        }
      }
    }
  }

  cwrap = function cwrap(ident, returnType, argTypes) {
    argTypes = argTypes || [];
    var cfunc = getCFunc(ident);
    // When the function takes numbers and returns a number, we can just return
    // the original function
    var numericArgs = argTypes.every(function(type){ return type === 'number'});
    var numericRet = (returnType !== 'string');
    if ( numericRet && numericArgs) {
      return cfunc;
    }
    // Creation of the arguments list (["$1","$2",...,"$nargs"])
    var argNames = argTypes.map(function(x,i){return '$'+i});
    var funcstr = "(function(" + argNames.join(',') + ") {";
    var nargs = argTypes.length;
    if (!numericArgs) {
      // Generate the code needed to convert the arguments from javascript
      // values to pointers
      ensureJSsource();
      funcstr += 'var stack = ' + JSsource['stackSave'].body + ';';
      for (var i = 0; i < nargs; i++) {
        var arg = argNames[i], type = argTypes[i];
        if (type === 'number') continue;
        var convertCode = JSsource[type + 'ToC']; // [code, return]
        funcstr += 'var ' + convertCode.arguments + ' = ' + arg + ';';
        funcstr += convertCode.body + ';';
        funcstr += arg + '=(' + convertCode.returnValue + ');';
      }
    }

    // When the code is compressed, the name of cfunc is not literally 'cfunc' anymore
    var cfuncname = parseJSFunc(function(){return cfunc}).returnValue;
    // Call the function
    funcstr += 'var ret = ' + cfuncname + '(' + argNames.join(',') + ');';
    if (!numericRet) { // Return type can only by 'string' or 'number'
      // Convert the result to a string
      var strgfy = parseJSFunc(function(){return Pointer_stringify}).returnValue;
      funcstr += 'ret = ' + strgfy + '(ret);';
    }
    funcstr += "if (typeof EmterpreterAsync === 'object') { assert(!EmterpreterAsync.state, 'cannot start async op with normal JS calling cwrap') }";
    if (!numericArgs) {
      // If we had a stack, restore it
      ensureJSsource();
      funcstr += JSsource['stackRestore'].body.replace('()', '(stack)') + ';';
    }
    funcstr += 'return ret})';
    return eval(funcstr);
  };
})();
Module["ccall"] = ccall;
Module["cwrap"] = cwrap;

function setValue(ptr, value, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': HEAP8[((ptr)>>0)]=value; break;
      case 'i8': HEAP8[((ptr)>>0)]=value; break;
      case 'i16': HEAP16[((ptr)>>1)]=value; break;
      case 'i32': HEAP32[((ptr)>>2)]=value; break;
      case 'i64': (tempI64 = [value>>>0,(tempDouble=value,(+(Math_abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math_min((+(Math_floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[((ptr)>>2)]=tempI64[0],HEAP32[(((ptr)+(4))>>2)]=tempI64[1]); break;
      case 'float': HEAPF32[((ptr)>>2)]=value; break;
      case 'double': HEAPF64[((ptr)>>3)]=value; break;
      default: abort('invalid type for setValue: ' + type);
    }
}
Module["setValue"] = setValue;


function getValue(ptr, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': return HEAP8[((ptr)>>0)];
      case 'i8': return HEAP8[((ptr)>>0)];
      case 'i16': return HEAP16[((ptr)>>1)];
      case 'i32': return HEAP32[((ptr)>>2)];
      case 'i64': return HEAP32[((ptr)>>2)];
      case 'float': return HEAPF32[((ptr)>>2)];
      case 'double': return HEAPF64[((ptr)>>3)];
      default: abort('invalid type for setValue: ' + type);
    }
  return null;
}
Module["getValue"] = getValue;

var ALLOC_NORMAL = 0; // Tries to use _malloc()
var ALLOC_STACK = 1; // Lives for the duration of the current function call
var ALLOC_STATIC = 2; // Cannot be freed
var ALLOC_DYNAMIC = 3; // Cannot be freed except through sbrk
var ALLOC_NONE = 4; // Do not allocate
Module["ALLOC_NORMAL"] = ALLOC_NORMAL;
Module["ALLOC_STACK"] = ALLOC_STACK;
Module["ALLOC_STATIC"] = ALLOC_STATIC;
Module["ALLOC_DYNAMIC"] = ALLOC_DYNAMIC;
Module["ALLOC_NONE"] = ALLOC_NONE;

// allocate(): This is for internal use. You can use it yourself as well, but the interface
//             is a little tricky (see docs right below). The reason is that it is optimized
//             for multiple syntaxes to save space in generated code. So you should
//             normally not use allocate(), and instead allocate memory using _malloc(),
//             initialize it with setValue(), and so forth.
// @slab: An array of data, or a number. If a number, then the size of the block to allocate,
//        in *bytes* (note that this is sometimes confusing: the next parameter does not
//        affect this!)
// @types: Either an array of types, one for each byte (or 0 if no type at that position),
//         or a single type which is used for the entire block. This only matters if there
//         is initial data - if @slab is a number, then this does not matter at all and is
//         ignored.
// @allocator: How to allocate memory, see ALLOC_*
function allocate(slab, types, allocator, ptr) {
  var zeroinit, size;
  if (typeof slab === 'number') {
    zeroinit = true;
    size = slab;
  } else {
    zeroinit = false;
    size = slab.length;
  }

  var singleType = typeof types === 'string' ? types : null;

  var ret;
  if (allocator == ALLOC_NONE) {
    ret = ptr;
  } else {
    ret = [typeof _malloc === 'function' ? _malloc : Runtime.staticAlloc, Runtime.stackAlloc, Runtime.staticAlloc, Runtime.dynamicAlloc][allocator === undefined ? ALLOC_STATIC : allocator](Math.max(size, singleType ? 1 : types.length));
  }

  if (zeroinit) {
    var ptr = ret, stop;
    assert((ret & 3) == 0);
    stop = ret + (size & ~3);
    for (; ptr < stop; ptr += 4) {
      HEAP32[((ptr)>>2)]=0;
    }
    stop = ret + size;
    while (ptr < stop) {
      HEAP8[((ptr++)>>0)]=0;
    }
    return ret;
  }

  if (singleType === 'i8') {
    if (slab.subarray || slab.slice) {
      HEAPU8.set(slab, ret);
    } else {
      HEAPU8.set(new Uint8Array(slab), ret);
    }
    return ret;
  }

  var i = 0, type, typeSize, previousType;
  while (i < size) {
    var curr = slab[i];

    if (typeof curr === 'function') {
      curr = Runtime.getFunctionIndex(curr);
    }

    type = singleType || types[i];
    if (type === 0) {
      i++;
      continue;
    }
    assert(type, 'Must know what type to store in allocate!');

    if (type == 'i64') type = 'i32'; // special case: we have one i32 here, and one i32 later

    setValue(ret+i, curr, type);

    // no need to look up size unless type changes, so cache it
    if (previousType !== type) {
      typeSize = Runtime.getNativeTypeSize(type);
      previousType = type;
    }
    i += typeSize;
  }

  return ret;
}
Module["allocate"] = allocate;

// Allocate memory during any stage of startup - static memory early on, dynamic memory later, malloc when ready
function getMemory(size) {
  if (!staticSealed) return Runtime.staticAlloc(size);
  if (!runtimeInitialized) return Runtime.dynamicAlloc(size);
  return _malloc(size);
}
Module["getMemory"] = getMemory;

function Pointer_stringify(ptr, /* optional */ length) {
  if (length === 0 || !ptr) return '';
  // TODO: use TextDecoder
  // Find the length, and check for UTF while doing so
  var hasUtf = 0;
  var t;
  var i = 0;
  while (1) {
    assert(ptr + i < TOTAL_MEMORY);
    t = HEAPU8[(((ptr)+(i))>>0)];
    hasUtf |= t;
    if (t == 0 && !length) break;
    i++;
    if (length && i == length) break;
  }
  if (!length) length = i;

  var ret = '';

  if (hasUtf < 128) {
    var MAX_CHUNK = 1024; // split up into chunks, because .apply on a huge string can overflow the stack
    var curr;
    while (length > 0) {
      curr = String.fromCharCode.apply(String, HEAPU8.subarray(ptr, ptr + Math.min(length, MAX_CHUNK)));
      ret = ret ? ret + curr : curr;
      ptr += MAX_CHUNK;
      length -= MAX_CHUNK;
    }
    return ret;
  }
  return Module['UTF8ToString'](ptr);
}
Module["Pointer_stringify"] = Pointer_stringify;

// Given a pointer 'ptr' to a null-terminated ASCII-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function AsciiToString(ptr) {
  var str = '';
  while (1) {
    var ch = HEAP8[((ptr++)>>0)];
    if (!ch) return str;
    str += String.fromCharCode(ch);
  }
}
Module["AsciiToString"] = AsciiToString;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in ASCII form. The copy will require at most str.length+1 bytes of space in the HEAP.

function stringToAscii(str, outPtr) {
  return writeAsciiToMemory(str, outPtr, false);
}
Module["stringToAscii"] = stringToAscii;

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the given array that contains uint8 values, returns
// a copy of that string as a Javascript String object.

var UTF8Decoder = typeof TextDecoder !== 'undefined' ? new TextDecoder('utf8') : undefined;
function UTF8ArrayToString(u8Array, idx) {
  var endPtr = idx;
  // TextDecoder needs to know the byte length in advance, it doesn't stop on null terminator by itself.
  // Also, use the length info to avoid running tiny strings through TextDecoder, since .subarray() allocates garbage.
  while (u8Array[endPtr]) ++endPtr;

  if (endPtr - idx > 16 && u8Array.subarray && UTF8Decoder) {
    return UTF8Decoder.decode(u8Array.subarray(idx, endPtr));
  } else {
    var u0, u1, u2, u3, u4, u5;

    var str = '';
    while (1) {
      // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
      u0 = u8Array[idx++];
      if (!u0) return str;
      if (!(u0 & 0x80)) { str += String.fromCharCode(u0); continue; }
      u1 = u8Array[idx++] & 63;
      if ((u0 & 0xE0) == 0xC0) { str += String.fromCharCode(((u0 & 31) << 6) | u1); continue; }
      u2 = u8Array[idx++] & 63;
      if ((u0 & 0xF0) == 0xE0) {
        u0 = ((u0 & 15) << 12) | (u1 << 6) | u2;
      } else {
        u3 = u8Array[idx++] & 63;
        if ((u0 & 0xF8) == 0xF0) {
          u0 = ((u0 & 7) << 18) | (u1 << 12) | (u2 << 6) | u3;
        } else {
          u4 = u8Array[idx++] & 63;
          if ((u0 & 0xFC) == 0xF8) {
            u0 = ((u0 & 3) << 24) | (u1 << 18) | (u2 << 12) | (u3 << 6) | u4;
          } else {
            u5 = u8Array[idx++] & 63;
            u0 = ((u0 & 1) << 30) | (u1 << 24) | (u2 << 18) | (u3 << 12) | (u4 << 6) | u5;
          }
        }
      }
      if (u0 < 0x10000) {
        str += String.fromCharCode(u0);
      } else {
        var ch = u0 - 0x10000;
        str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
      }
    }
  }
}
Module["UTF8ArrayToString"] = UTF8ArrayToString;

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function UTF8ToString(ptr) {
  return UTF8ArrayToString(HEAPU8,ptr);
}
Module["UTF8ToString"] = UTF8ToString;

// Copies the given Javascript String object 'str' to the given byte array at address 'outIdx',
// encoded in UTF8 form and null-terminated. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8 to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outU8Array: the array to copy to. Each index in this array is assumed to be one 8-byte element.
//   outIdx: The starting offset in the array to begin the copying.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=1, only the null terminator will be written and nothing else.
//                    maxBytesToWrite=0 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8Array(str, outU8Array, outIdx, maxBytesToWrite) {
  if (!(maxBytesToWrite > 0)) // Parameter maxBytesToWrite is not optional. Negative values, 0, null, undefined and false each don't write out any bytes.
    return 0;

  var startIdx = outIdx;
  var endIdx = outIdx + maxBytesToWrite - 1; // -1 for string null terminator.
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) {
      if (outIdx >= endIdx) break;
      outU8Array[outIdx++] = u;
    } else if (u <= 0x7FF) {
      if (outIdx + 1 >= endIdx) break;
      outU8Array[outIdx++] = 0xC0 | (u >> 6);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0xFFFF) {
      if (outIdx + 2 >= endIdx) break;
      outU8Array[outIdx++] = 0xE0 | (u >> 12);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0x1FFFFF) {
      if (outIdx + 3 >= endIdx) break;
      outU8Array[outIdx++] = 0xF0 | (u >> 18);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0x3FFFFFF) {
      if (outIdx + 4 >= endIdx) break;
      outU8Array[outIdx++] = 0xF8 | (u >> 24);
      outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else {
      if (outIdx + 5 >= endIdx) break;
      outU8Array[outIdx++] = 0xFC | (u >> 30);
      outU8Array[outIdx++] = 0x80 | ((u >> 24) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    }
  }
  // Null-terminate the pointer to the buffer.
  outU8Array[outIdx] = 0;
  return outIdx - startIdx;
}
Module["stringToUTF8Array"] = stringToUTF8Array;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF8 form. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8 to compute the exact number of bytes (excluding null terminator) that this function will write.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8(str, outPtr, maxBytesToWrite) {
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF8(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  return stringToUTF8Array(str, HEAPU8,outPtr, maxBytesToWrite);
}
Module["stringToUTF8"] = stringToUTF8;

// Returns the number of bytes the given Javascript string takes if encoded as a UTF8 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF8(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) {
      ++len;
    } else if (u <= 0x7FF) {
      len += 2;
    } else if (u <= 0xFFFF) {
      len += 3;
    } else if (u <= 0x1FFFFF) {
      len += 4;
    } else if (u <= 0x3FFFFFF) {
      len += 5;
    } else {
      len += 6;
    }
  }
  return len;
}
Module["lengthBytesUTF8"] = lengthBytesUTF8;

// Given a pointer 'ptr' to a null-terminated UTF16LE-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

var UTF16Decoder = typeof TextDecoder !== 'undefined' ? new TextDecoder('utf-16le') : undefined;
function UTF16ToString(ptr) {
  assert(ptr % 2 == 0, 'Pointer passed to UTF16ToString must be aligned to two bytes!');
  var endPtr = ptr;
  // TextDecoder needs to know the byte length in advance, it doesn't stop on null terminator by itself.
  // Also, use the length info to avoid running tiny strings through TextDecoder, since .subarray() allocates garbage.
  var idx = endPtr >> 1;
  while (HEAP16[idx]) ++idx;
  endPtr = idx << 1;

  if (endPtr - ptr > 32 && UTF16Decoder) {
    return UTF16Decoder.decode(HEAPU8.subarray(ptr, endPtr));
  } else {
    var i = 0;

    var str = '';
    while (1) {
      var codeUnit = HEAP16[(((ptr)+(i*2))>>1)];
      if (codeUnit == 0) return str;
      ++i;
      // fromCharCode constructs a character from a UTF-16 code unit, so we can pass the UTF16 string right through.
      str += String.fromCharCode(codeUnit);
    }
  }
}


// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF16 form. The copy will require at most str.length*4+2 bytes of space in the HEAP.
// Use the function lengthBytesUTF16() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=2, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<2 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF16(str, outPtr, maxBytesToWrite) {
  assert(outPtr % 2 == 0, 'Pointer passed to stringToUTF16 must be aligned to two bytes!');
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF16(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 2) return 0;
  maxBytesToWrite -= 2; // Null terminator.
  var startPtr = outPtr;
  var numCharsToWrite = (maxBytesToWrite < str.length*2) ? (maxBytesToWrite / 2) : str.length;
  for (var i = 0; i < numCharsToWrite; ++i) {
    // charCodeAt returns a UTF-16 encoded code unit, so it can be directly written to the HEAP.
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    HEAP16[((outPtr)>>1)]=codeUnit;
    outPtr += 2;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP16[((outPtr)>>1)]=0;
  return outPtr - startPtr;
}
Module["stringToUTF16"] = stringToUTF16;

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF16(str) {
  return str.length*2;
}


function UTF32ToString(ptr) {
  assert(ptr % 4 == 0, 'Pointer passed to UTF32ToString must be aligned to four bytes!');
  var i = 0;

  var str = '';
  while (1) {
    var utf32 = HEAP32[(((ptr)+(i*4))>>2)];
    if (utf32 == 0)
      return str;
    ++i;
    // Gotcha: fromCharCode constructs a character from a UTF-16 encoded code (pair), not from a Unicode code point! So encode the code point to UTF-16 for constructing.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    if (utf32 >= 0x10000) {
      var ch = utf32 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    } else {
      str += String.fromCharCode(utf32);
    }
  }
}


// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF32 form. The copy will require at most str.length*4+4 bytes of space in the HEAP.
// Use the function lengthBytesUTF32() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=4, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<4 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF32(str, outPtr, maxBytesToWrite) {
  assert(outPtr % 4 == 0, 'Pointer passed to stringToUTF32 must be aligned to four bytes!');
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF32(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 4) return 0;
  var startPtr = outPtr;
  var endPtr = startPtr + maxBytesToWrite - 4;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) {
      var trailSurrogate = str.charCodeAt(++i);
      codeUnit = 0x10000 + ((codeUnit & 0x3FF) << 10) | (trailSurrogate & 0x3FF);
    }
    HEAP32[((outPtr)>>2)]=codeUnit;
    outPtr += 4;
    if (outPtr + 4 > endPtr) break;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP32[((outPtr)>>2)]=0;
  return outPtr - startPtr;
}
Module["stringToUTF32"] = stringToUTF32;

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF32(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i);
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) ++i; // possibly a lead surrogate, so skip over the tail surrogate.
    len += 4;
  }

  return len;
}


function demangle(func) {
  var __cxa_demangle_func = Module['___cxa_demangle'] || Module['__cxa_demangle'];
  if (__cxa_demangle_func) {
    try {
      var s =
        func.substr(1);
      var len = lengthBytesUTF8(s)+1;
      var buf = _malloc(len);
      stringToUTF8(s, buf, len);
      var status = _malloc(4);
      var ret = __cxa_demangle_func(buf, 0, 0, status);
      if (getValue(status, 'i32') === 0 && ret) {
        return Pointer_stringify(ret);
      }
      // otherwise, libcxxabi failed
    } catch(e) {
      // ignore problems here
    } finally {
      if (buf) _free(buf);
      if (status) _free(status);
      if (ret) _free(ret);
    }
    // failure when using libcxxabi, don't demangle
    return func;
  }
  Runtime.warnOnce('warning: build with  -s DEMANGLE_SUPPORT=1  to link in libcxxabi demangling');
  return func;
}

function demangleAll(text) {
  var regex =
    /__Z[\w\d_]+/g;
  return text.replace(regex,
    function(x) {
      var y = demangle(x);
      return x === y ? x : (x + ' [' + y + ']');
    });
}

function jsStackTrace() {
  var err = new Error();
  if (!err.stack) {
    // IE10+ special cases: It does have callstack info, but it is only populated if an Error object is thrown,
    // so try that as a special-case.
    try {
      throw new Error(0);
    } catch(e) {
      err = e;
    }
    if (!err.stack) {
      return '(no stack trace available)';
    }
  }
  return err.stack.toString();
}

function stackTrace() {
  var js = jsStackTrace();
  if (Module['extraStackTrace']) js += '\n' + Module['extraStackTrace']();
  return demangleAll(js);
}
Module["stackTrace"] = stackTrace;

// Memory management

var PAGE_SIZE = 16384;
var WASM_PAGE_SIZE = 65536;
var ASMJS_PAGE_SIZE = 16777216;
var MIN_TOTAL_MEMORY = 16777216;

function alignUp(x, multiple) {
  if (x % multiple > 0) {
    x += multiple - (x % multiple);
  }
  return x;
}

var HEAP;
var buffer;
var HEAP8, HEAPU8, HEAP16, HEAPU16, HEAP32, HEAPU32, HEAPF32, HEAPF64;

function updateGlobalBuffer(buf) {
  Module['buffer'] = buffer = buf;
}

function updateGlobalBufferViews() {
  Module['HEAP8'] = HEAP8 = new Int8Array(buffer);
  Module['HEAP16'] = HEAP16 = new Int16Array(buffer);
  Module['HEAP32'] = HEAP32 = new Int32Array(buffer);
  Module['HEAPU8'] = HEAPU8 = new Uint8Array(buffer);
  Module['HEAPU16'] = HEAPU16 = new Uint16Array(buffer);
  Module['HEAPU32'] = HEAPU32 = new Uint32Array(buffer);
  Module['HEAPF32'] = HEAPF32 = new Float32Array(buffer);
  Module['HEAPF64'] = HEAPF64 = new Float64Array(buffer);
}

var STATIC_BASE, STATICTOP, staticSealed; // static area
var STACK_BASE, STACKTOP, STACK_MAX; // stack area
var DYNAMIC_BASE, DYNAMICTOP_PTR; // dynamic area handled by sbrk

  STATIC_BASE = STATICTOP = STACK_BASE = STACKTOP = STACK_MAX = DYNAMIC_BASE = DYNAMICTOP_PTR = 0;
  staticSealed = false;


// Initializes the stack cookie. Called at the startup of main and at the startup of each thread in pthreads mode.
function writeStackCookie() {
  assert((STACK_MAX & 3) == 0);
  HEAPU32[(STACK_MAX >> 2)-1] = 0x02135467;
  HEAPU32[(STACK_MAX >> 2)-2] = 0x89BACDFE;
}

function checkStackCookie() {
  if (HEAPU32[(STACK_MAX >> 2)-1] != 0x02135467 || HEAPU32[(STACK_MAX >> 2)-2] != 0x89BACDFE) {
    abort('Stack overflow! Stack cookie has been overwritten, expected hex dwords 0x89BACDFE and 0x02135467, but received 0x' + HEAPU32[(STACK_MAX >> 2)-2].toString(16) + ' ' + HEAPU32[(STACK_MAX >> 2)-1].toString(16));
  }
  // Also test the global address 0 for integrity. This check is not compatible with SAFE_SPLIT_MEMORY though, since that mode already tests all address 0 accesses on its own.
  if (HEAP32[0] !== 0x63736d65 /* 'emsc' */) throw 'Runtime error: The application has corrupted its heap memory area (address zero)!';
}

function abortStackOverflow(allocSize) {
  abort('Stack overflow! Attempted to allocate ' + allocSize + ' bytes on the stack, but stack has only ' + (STACK_MAX - asm.stackSave() + allocSize) + ' bytes available!');
}

function abortOnCannotGrowMemory() {
  abort('Cannot enlarge memory arrays. Either (1) compile with  -s TOTAL_MEMORY=X  with X higher than the current value ' + TOTAL_MEMORY + ', (2) compile with  -s ALLOW_MEMORY_GROWTH=1  which adjusts the size at runtime but prevents some optimizations, (3) set Module.TOTAL_MEMORY to a higher value before the program runs, or if you want malloc to return NULL (0) instead of this abort, compile with  -s ABORTING_MALLOC=0 ');
}


function enlargeMemory() {
  abortOnCannotGrowMemory();
}


var TOTAL_STACK = Module['TOTAL_STACK'] || 5242880;
var TOTAL_MEMORY = Module['TOTAL_MEMORY'] || 16777216;
if (TOTAL_MEMORY < TOTAL_STACK) Module.printErr('TOTAL_MEMORY should be larger than TOTAL_STACK, was ' + TOTAL_MEMORY + '! (TOTAL_STACK=' + TOTAL_STACK + ')');

// Initialize the runtime's memory
// check for full engine support (use string 'subarray' to avoid closure compiler confusion)
assert(typeof Int32Array !== 'undefined' && typeof Float64Array !== 'undefined' && !!(new Int32Array(1)['subarray']) && !!(new Int32Array(1)['set']),
       'JS engine does not provide full typed array support');



// Use a provided buffer, if there is one, or else allocate a new one
if (Module['buffer']) {
  buffer = Module['buffer'];
  assert(buffer.byteLength === TOTAL_MEMORY, 'provided buffer should be ' + TOTAL_MEMORY + ' bytes, but it is ' + buffer.byteLength);
} else {
  // Use a WebAssembly memory where available
  {
    buffer = new ArrayBuffer(TOTAL_MEMORY);
  }
  assert(buffer.byteLength === TOTAL_MEMORY);
}
updateGlobalBufferViews();


function getTotalMemory() {
  return TOTAL_MEMORY;
}

// Endianness check (note: assumes compiler arch was little-endian)
  HEAP32[0] = 0x63736d65; /* 'emsc' */
HEAP16[1] = 0x6373;
if (HEAPU8[2] !== 0x73 || HEAPU8[3] !== 0x63) throw 'Runtime error: expected the system to be little-endian!';

Module['HEAP'] = HEAP;
Module['buffer'] = buffer;
Module['HEAP8'] = HEAP8;
Module['HEAP16'] = HEAP16;
Module['HEAP32'] = HEAP32;
Module['HEAPU8'] = HEAPU8;
Module['HEAPU16'] = HEAPU16;
Module['HEAPU32'] = HEAPU32;
Module['HEAPF32'] = HEAPF32;
Module['HEAPF64'] = HEAPF64;

function callRuntimeCallbacks(callbacks) {
  while(callbacks.length > 0) {
    var callback = callbacks.shift();
    if (typeof callback == 'function') {
      callback();
      continue;
    }
    var func = callback.func;
    if (typeof func === 'number') {
      if (callback.arg === undefined) {
        Module['dynCall_v'](func);
      } else {
        Module['dynCall_vi'](func, callback.arg);
      }
    } else {
      func(callback.arg === undefined ? null : callback.arg);
    }
  }
}

var __ATPRERUN__  = []; // functions called before the runtime is initialized
var __ATINIT__    = []; // functions called during startup
var __ATMAIN__    = []; // functions called when main() is to be run
var __ATEXIT__    = []; // functions called during shutdown
var __ATPOSTRUN__ = []; // functions called after the runtime has exited

var runtimeInitialized = false;
var runtimeExited = false;


function preRun() {
  // compatibility - merge in anything from Module['preRun'] at this time
  if (Module['preRun']) {
    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
    while (Module['preRun'].length) {
      addOnPreRun(Module['preRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPRERUN__);
}

function ensureInitRuntime() {
  checkStackCookie();
  if (runtimeInitialized) return;
  runtimeInitialized = true;
  callRuntimeCallbacks(__ATINIT__);
}

function preMain() {
  checkStackCookie();
  callRuntimeCallbacks(__ATMAIN__);
}

function exitRuntime() {
  checkStackCookie();
  callRuntimeCallbacks(__ATEXIT__);
  runtimeExited = true;
}

function postRun() {
  checkStackCookie();
  // compatibility - merge in anything from Module['postRun'] at this time
  if (Module['postRun']) {
    if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
    while (Module['postRun'].length) {
      addOnPostRun(Module['postRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPOSTRUN__);
}

function addOnPreRun(cb) {
  __ATPRERUN__.unshift(cb);
}
Module["addOnPreRun"] = addOnPreRun;

function addOnInit(cb) {
  __ATINIT__.unshift(cb);
}
Module["addOnInit"] = addOnInit;

function addOnPreMain(cb) {
  __ATMAIN__.unshift(cb);
}
Module["addOnPreMain"] = addOnPreMain;

function addOnExit(cb) {
  __ATEXIT__.unshift(cb);
}
Module["addOnExit"] = addOnExit;

function addOnPostRun(cb) {
  __ATPOSTRUN__.unshift(cb);
}
Module["addOnPostRun"] = addOnPostRun;

// Tools


function intArrayFromString(stringy, dontAddNull, length /* optional */) {
  var len = length > 0 ? length : lengthBytesUTF8(stringy)+1;
  var u8array = new Array(len);
  var numBytesWritten = stringToUTF8Array(stringy, u8array, 0, u8array.length);
  if (dontAddNull) u8array.length = numBytesWritten;
  return u8array;
}
Module["intArrayFromString"] = intArrayFromString;

function intArrayToString(array) {
  var ret = [];
  for (var i = 0; i < array.length; i++) {
    var chr = array[i];
    if (chr > 0xFF) {
      assert(false, 'Character code ' + chr + ' (' + String.fromCharCode(chr) + ')  at offset ' + i + ' not in 0x00-0xFF.');
      chr &= 0xFF;
    }
    ret.push(String.fromCharCode(chr));
  }
  return ret.join('');
}
Module["intArrayToString"] = intArrayToString;

// Deprecated: This function should not be called because it is unsafe and does not provide
// a maximum length limit of how many bytes it is allowed to write. Prefer calling the
// function stringToUTF8Array() instead, which takes in a maximum length that can be used
// to be secure from out of bounds writes.
function writeStringToMemory(string, buffer, dontAddNull) {
  Runtime.warnOnce('writeStringToMemory is deprecated and should not be called! Use stringToUTF8() instead!');

  var lastChar, end;
  if (dontAddNull) {
    // stringToUTF8Array always appends null. If we don't want to do that, remember the
    // character that existed at the location where the null will be placed, and restore
    // that after the write (below).
    end = buffer + lengthBytesUTF8(string);
    lastChar = HEAP8[end];
  }
  stringToUTF8(string, buffer, Infinity);
  if (dontAddNull) HEAP8[end] = lastChar; // Restore the value under the null character.
}
Module["writeStringToMemory"] = writeStringToMemory;

function writeArrayToMemory(array, buffer) {
  assert(array.length >= 0, 'writeArrayToMemory array must have a length (should be an array or typed array)')
  HEAP8.set(array, buffer);
}
Module["writeArrayToMemory"] = writeArrayToMemory;

function writeAsciiToMemory(str, buffer, dontAddNull) {
  for (var i = 0; i < str.length; ++i) {
    assert(str.charCodeAt(i) === str.charCodeAt(i)&0xff);
    HEAP8[((buffer++)>>0)]=str.charCodeAt(i);
  }
  // Null-terminate the pointer to the HEAP.
  if (!dontAddNull) HEAP8[((buffer)>>0)]=0;
}
Module["writeAsciiToMemory"] = writeAsciiToMemory;

function unSign(value, bits, ignore) {
  if (value >= 0) {
    return value;
  }
  return bits <= 32 ? 2*Math.abs(1 << (bits-1)) + value // Need some trickery, since if bits == 32, we are right at the limit of the bits JS uses in bitshifts
                    : Math.pow(2, bits)         + value;
}
function reSign(value, bits, ignore) {
  if (value <= 0) {
    return value;
  }
  var half = bits <= 32 ? Math.abs(1 << (bits-1)) // abs is needed if bits == 32
                        : Math.pow(2, bits-1);
  if (value >= half && (bits <= 32 || value > half)) { // for huge values, we can hit the precision limit and always get true here. so don't do that
                                                       // but, in general there is no perfect solution here. With 64-bit ints, we get rounding and errors
                                                       // TODO: In i64 mode 1, resign the two parts separately and safely
    value = -2*half + value; // Cannot bitshift half, as it may be at the limit of the bits JS uses in bitshifts
  }
  return value;
}


// check for imul support, and also for correctness ( https://bugs.webkit.org/show_bug.cgi?id=126345 )
if (!Math['imul'] || Math['imul'](0xffffffff, 5) !== -5) Math['imul'] = function imul(a, b) {
  var ah  = a >>> 16;
  var al = a & 0xffff;
  var bh  = b >>> 16;
  var bl = b & 0xffff;
  return (al*bl + ((ah*bl + al*bh) << 16))|0;
};
Math.imul = Math['imul'];


if (!Math['clz32']) Math['clz32'] = function(x) {
  x = x >>> 0;
  for (var i = 0; i < 32; i++) {
    if (x & (1 << (31 - i))) return i;
  }
  return 32;
};
Math.clz32 = Math['clz32']

if (!Math['trunc']) Math['trunc'] = function(x) {
  return x < 0 ? Math.ceil(x) : Math.floor(x);
};
Math.trunc = Math['trunc'];

var Math_abs = Math.abs;
var Math_cos = Math.cos;
var Math_sin = Math.sin;
var Math_tan = Math.tan;
var Math_acos = Math.acos;
var Math_asin = Math.asin;
var Math_atan = Math.atan;
var Math_atan2 = Math.atan2;
var Math_exp = Math.exp;
var Math_log = Math.log;
var Math_sqrt = Math.sqrt;
var Math_ceil = Math.ceil;
var Math_floor = Math.floor;
var Math_pow = Math.pow;
var Math_imul = Math.imul;
var Math_fround = Math.fround;
var Math_round = Math.round;
var Math_min = Math.min;
var Math_clz32 = Math.clz32;
var Math_trunc = Math.trunc;

// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// PRE_RUN_ADDITIONS (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var runDependencyWatcher = null;
var dependenciesFulfilled = null; // overridden to take different actions when all run dependencies are fulfilled
var runDependencyTracking = {};

function getUniqueRunDependency(id) {
  var orig = id;
  while (1) {
    if (!runDependencyTracking[id]) return id;
    id = orig + Math.random();
  }
  return id;
}

function addRunDependency(id) {
  runDependencies++;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(!runDependencyTracking[id]);
    runDependencyTracking[id] = 1;
    if (runDependencyWatcher === null && typeof setInterval !== 'undefined') {
      // Check for missing dependencies every few seconds
      runDependencyWatcher = setInterval(function() {
        if (ABORT) {
          clearInterval(runDependencyWatcher);
          runDependencyWatcher = null;
          return;
        }
        var shown = false;
        for (var dep in runDependencyTracking) {
          if (!shown) {
            shown = true;
            Module.printErr('still waiting on run dependencies:');
          }
          Module.printErr('dependency: ' + dep);
        }
        if (shown) {
          Module.printErr('(end of list)');
        }
      }, 10000);
    }
  } else {
    Module.printErr('warning: run dependency added without ID');
  }
}
Module["addRunDependency"] = addRunDependency;

function removeRunDependency(id) {
  runDependencies--;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(runDependencyTracking[id]);
    delete runDependencyTracking[id];
  } else {
    Module.printErr('warning: run dependency removed without ID');
  }
  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      runDependencyWatcher = null;
    }
    if (dependenciesFulfilled) {
      var callback = dependenciesFulfilled;
      dependenciesFulfilled = null;
      callback(); // can add another dependenciesFulfilled
    }
  }
}
Module["removeRunDependency"] = removeRunDependency;

Module["preloadedImages"] = {}; // maps url to image data
Module["preloadedAudios"] = {}; // maps url to audio data



var memoryInitializer = null;






// === Body ===

var ASM_CONSTS = [];




STATIC_BASE = 8;

STATICTOP = STATIC_BASE + 58448;
  /* global initializers */  __ATINIT__.push();
  

/* memory initializer */ allocate([104,6,0,0,112,6,0,0,119,6,0,0,129,6,0,0,140,6,0,0,152,6,0,0,164,6,0,0,172,6,0,0,180,6,0,0,194,6,0,0,208,6,0,0,222,6,0,0,230,6,0,0,246,6,0,0,0,7,0,0,15,7,0,0,23,7,0,0,40,7,0,0,59,7,0,0,72,7,0,0,87,7,0,0,101,7,0,0,117,7,0,0,136,7,0,0,146,7,0,0,157,7,0,0,169,7,0,0,181,7,0,0,189,7,0,0,197,7,0,0,211,7,0,0,225,7,0,0,239,7,0,0,253,7,0,0,5,8,0,0,18,8,0,0,31,8,0,0,44,8,0,0,57,8,0,0,70,8,0,0,83,8,0,0,95,8,0,0,107,8,0,0,119,8,0,0,127,8,0,0,135,8,0,0,144,8,0,0,150,8,0,0,156,8,0,0,162,8,0,0,169,8,0,0,176,8,0,0,182,8,0,0,197,8,0,0,211,8,0,0,218,8,0,0,225,8,0,0,232,8,0,0,238,8,0,0,244,8,0,0,0,9,0,0,5,9,0,0,10,9,0,0,17,9,0,0,27,9,0,0,37,9,0,0,46,9,0,0,52,9,0,0,61,9,0,0,69,9,0,0,77,9,0,0,85,9,0,0,93,9,0,0,99,9,0,0,105,9,0,0,111,9,0,0,120,9,0,0,128,9,0,0,139,9,0,0,146,9,0,0,156,9,0,0,164,9,0,0,173,9,0,0,188,9,0,0,195,9,0,0,203,9,0,0,211,9,0,0,221,9,0,0,226,9,0,0,235,9,0,0,243,9,0,0,252,9,0,0,4,10,0,0,16,10,0,0,24,10,0,0,32,10,0,0,40,10,0,0,51,10,0,0,59,10,0,0,70,10,0,0,78,10,0,0,86,10,0,0,95,10,0,0,102,10,0,0,109,10,0,0,116,10,0,0,125,10,0,0,132,10,0,0,140,10,0,0,146,10,0,0,156,10,0,0,128,0,0,0,192,0,0,0,224,0,0,0,240,0,0,0,248,0,0,0,252,0,0,0,254,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,32,0,0,0,32,0,0,0,32,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,128,0,0,0,128,0,0,0,128,0,0,232,8,0,0,10,9,0,0,238,8,0,0,244,8,0,0,17,9,0,0,27,9,0,0,0,9,0,0,5,9,0,0,52,9,0,0,0,0,0,0,41,28,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,32,0,0,0,32,0,0,0,32,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,128,0,0,0,128,0,0,0,128,0,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,32,0,0,0,32,0,0,0,32,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,128,0,0,0,128,0,0,0,128,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,32,0,0,0,32,0,0,0,32,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,128,0,0,0,128,0,0,0,128,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,32,0,0,0,32,0,0,0,32,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,128,0,0,0,128,0,0,0,128,0,0,32,78,0,0,5,0,0,0,216,28,0,0,223,28,0,0,225,28,0,0,234,28,0,0,236,28,0,0,243,28,0,0,0,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,0,0,0,8,0,0,0,72,224,0,0,0,4,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,56,204,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,3,0,0,248,4,0,0,5,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,0,0,0,8,0,0,0,80,228,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,108,105,98,108,111,117,105,115,58,32,73,110,115,117,102,102,105,99,105,101,110,116,32,109,101,109,111,114,121,10,0,37,120,0,101,110,99,111,100,105,110,103,32,105,115,32,110,101,105,116,104,101,114,32,98,105,103,45,101,110,100,105,97,110,44,32,108,105,116,116,108,101,45,101,110,100,105,97,110,32,110,111,114,32,65,83,67,73,73,32,56,46,0,37,115,58,37,100,58,32,101,114,114,111,114,58,32,37,115,0,101,114,114,111,114,58,32,37,115,0,105,110,99,108,117,100,101,0,108,111,99,97,108,101,0,117,110,100,101,102,105,110,101,100,0,99,97,112,115,108,101,116,116,101,114,0,98,101,103,99,97,112,115,119,111,114,100,0,101,110,100,99,97,112,115,119,111,114,100,0,98,101,103,99,97,112,115,0,101,110,100,99,97,112,115,0,98,101,103,99,97,112,115,112,104,114,97,115,101,0,101,110,100,99,97,112,115,112,104,114,97,115,101,0,108,101,110,99,97,112,115,112,104,114,97,115,101,0,108,101,116,115,105,103,110,0,110,111,108,101,116,115,105,103,110,98,101,102,111,114,101,0,110,111,108,101,116,115,105,103,110,0,110,111,108,101,116,115,105,103,110,97,102,116,101,114,0,110,117,109,115,105,103,110,0,110,117,109,101,114,105,99,109,111,100,101,99,104,97,114,115,0,110,117,109,101,114,105,99,110,111,99,111,110,116,99,104,97,114,115,0,115,101,113,100,101,108,105,109,105,116,101,114,0,115,101,113,98,101,102,111,114,101,99,104,97,114,115,0,115,101,113,97,102,116,101,114,99,104,97,114,115,0,115,101,113,97,102,116,101,114,112,97,116,116,101,114,110,0,115,101,113,97,102,116,101,114,101,120,112,114,101,115,115,105,111,110,0,101,109,112,104,99,108,97,115,115,0,101,109,112,104,108,101,116,116,101,114,0,98,101,103,101,109,112,104,119,111,114,100,0,101,110,100,101,109,112,104,119,111,114,100,0,98,101,103,101,109,112,104,0,101,110,100,101,109,112,104,0,98,101,103,101,109,112,104,112,104,114,97,115,101,0,101,110,100,101,109,112,104,112,104,114,97,115,101,0,108,101,110,101,109,112,104,112,104,114,97,115,101,0,99,97,112,115,109,111,100,101,99,104,97,114,115,0,98,101,103,99,111,109,112,0,99,111,109,112,98,101,103,101,109,112,104,49,0,99,111,109,112,101,110,100,101,109,112,104,49,0,99,111,109,112,98,101,103,101,109,112,104,50,0,99,111,109,112,101,110,100,101,109,112,104,50,0,99,111,109,112,98,101,103,101,109,112,104,51,0,99,111,109,112,101,110,100,101,109,112,104,51,0,99,111,109,112,99,97,112,115,105,103,110,0,99,111,109,112,98,101,103,99,97,112,115,0,99,111,109,112,101,110,100,99,97,112,115,0,101,110,100,99,111,109,112,0,109,117,108,116,105,110,100,0,99,111,109,112,100,111,116,115,0,99,111,109,112,54,0,99,108,97,115,115,0,97,102,116,101,114,0,98,101,102,111,114,101,0,110,111,98,97,99,107,0,110,111,102,111,114,0,101,109,112,109,97,116,99,104,98,101,102,111,114,101,0,101,109,112,109,97,116,99,104,97,102,116,101,114,0,115,119,97,112,99,99,0,115,119,97,112,99,100,0,115,119,97,112,100,100,0,115,112,97,99,101,0,100,105,103,105,116,0,112,117,110,99,116,117,97,116,105,111,110,0,109,97,116,104,0,115,105,103,110,0,108,101,116,116,101,114,0,117,112,112,101,114,99,97,115,101,0,108,111,119,101,114,99,97,115,101,0,103,114,111,117,112,105,110,103,0,117,112,108,111,119,0,108,105,116,100,105,103,105,116,0,100,105,115,112,108,97,121,0,114,101,112,108,97,99,101,0,99,111,110,116,101,120,116,0,99,111,114,114,101,99,116,0,112,97,115,115,50,0,112,97,115,115,51,0,112,97,115,115,52,0,114,101,112,101,97,116,101,100,0,114,101,112,119,111,114,100,0,99,97,112,115,110,111,99,111,110,116,0,97,108,119,97,121,115,0,101,120,97,99,116,100,111,116,115,0,110,111,99,114,111,115,115,0,115,121,108,108,97,98,108,101,0,110,111,99,111,110,116,114,97,99,116,115,105,103,110,0,110,111,99,111,110,116,0,99,111,109,112,98,114,108,0,108,105,116,101,114,97,108,0,108,97,114,103,101,115,105,103,110,0,119,111,114,100,0,112,97,114,116,119,111,114,100,0,106,111,105,110,110,117,109,0,106,111,105,110,119,111,114,100,0,108,111,119,119,111,114,100,0,99,111,110,116,114,97,99,116,105,111,110,0,115,117,102,119,111,114,100,0,112,114,102,119,111,114,100,0,98,101,103,119,111,114,100,0,98,101,103,109,105,100,119,111,114,100,0,109,105,100,119,111,114,100,0,109,105,100,101,110,100,119,111,114,100,0,101,110,100,119,111,114,100,0,112,114,101,112,117,110,99,0,112,111,115,116,112,117,110,99,0,98,101,103,110,117,109,0,109,105,100,110,117,109,0,101,110,100,110,117,109,0,100,101,99,112,111,105,110,116,0,104,121,112,104,101,110,0,110,111,98,114,101,97,107,0,109,97,116,99,104,0,98,97,99,107,109,97,116,99,104,0,97,116,116,114,105,98,117,116,101,0,37,100,0,105,110,118,97,108,105,100,32,101,115,99,97,112,101,32,115,101,113,117,101,110,99,101,32,39,92,37,99,39,0,105,110,118,97,108,105,100,32,85,84,70,45,56,46,32,65,115,115,117,109,105,110,103,32,76,97,116,105,110,45,49,46,0,37,115,58,37,100,58,32,119,97,114,110,105,110,103,58,32,37,115,0,119,97,114,110,105,110,103,58,32,37,115,0,105,110,118,97,108,105,100,32,37,100,45,100,105,103,105,116,32,104,101,120,97,100,101,99,105,109,97,108,32,110,117,109,98,101,114,0,100,111,116,32,115,112,101,99,105,102,105,101,100,32,109,111,114,101,32,116,104,97,110,32,111,110,99,101,46,0,109,105,115,115,105,110,103,32,99,101,108,108,32,115,112,101,99,105,102,105,99,97,116,105,111,110,46,0,105,110,118,97,108,105,100,32,100,111,116,32,110,117,109,98,101,114,32,37,115,46,0,114,0,67,97,110,110,111,116,32,111,112,101,110,32,102,105,108,101,32,39,37,115,39,0,76,79,85,73,83,95,84,65,66,76,69,80,65,84,72,0,44,37,115,0,44,37,115,37,99,37,115,37,99,37,115,0,108,105,98,108,111,117,105,115,0,116,97,98,108,101,115,0,47,117,115,114,47,108,111,99,97,108,47,115,104,97,114,101,47,108,105,98,108,111,117,105,115,47,116,97,98,108,101,115,0,67,97,110,110,111,116,32,114,101,115,111,108,118,101,32,116,97,98,108,101,32,39,37,115,39,0,102,111,117,110,100,32,116,97,98,108,101,32,37,115,0,37,115,37,99,37,115,0,37,115,37,99,37,115,37,99,37,115,37,99,37,115,0,37,115,32,99,111,117,108,100,32,110,111,116,32,98,101,32,102,111,117,110,100,0,115,112,97,99,101,32,92,115,32,48,0,110,111,98,97,99,107,32,115,105,103,110,32,92,120,48,48,48,48,32,48,0,115,112,97,99,101,32,92,120,48,48,97,48,32,97,32,117,110,98,114,101,97,107,97,98,108,101,32,115,112,97,99,101,0,115,112,97,99,101,32,92,120,48,48,49,98,32,49,98,32,101,115,99,97,112,101,0,115,112,97,99,101,32,92,120,102,102,102,102,32,49,50,51,52,53,54,55,56,57,97,98,99,100,101,102,32,69,78,68,83,69,71,77,69,78,84,0,37,100,32,119,97,114,110,105,110,103,115,32,105,115,115,117,101,100,0,37,100,32,101,114,114,111,114,115,32,102,111,117,110,100,46,0,114,98,0,67,97,110,110,111,116,32,111,112,101,110,32,116,97,98,108,101,32,39,37,115,39,0,73,83,79,0,85,84,70,45,56,0,105,110,99,108,117,100,101,32,102,105,108,101,32,110,97,109,101,0,117,110,100,101,102,105,110,101,100,32,99,104,97,114,97,99,116,101,114,32,111,112,99,111,100,101,0,102,105,114,115,116,32,119,111,114,100,32,99,97,112,105,116,97,108,32,115,105,103,110,0,67,97,112,105,116,97,108,32,115,105,103,110,32,97,102,116,101,114,32,108,97,115,116,32,119,111,114,100,32,97,108,114,101,97,100,121,32,100,101,102,105,110,101,100,46,0,99,97,112,105,116,97,108,32,115,105,103,110,32,98,101,102,111,114,101,32,108,97,115,116,32,119,111,114,100,0,67,97,112,105,116,97,108,32,115,105,103,110,32,98,101,102,111,114,101,32,108,97,115,116,32,119,111,114,100,32,97,108,114,101,97,100,121,32,100,101,102,105,110,101,100,46,0,99,97,112,105,116,97,108,32,115,105,103,110,32,97,102,116,101,114,32,108,97,115,116,32,119,111,114,100,0,73,110,118,97,108,105,100,32,108,97,115,116,119,111,114,100,32,105,110,100,105,99,97,116,111,114,32,108,111,99,97,116,105,111,110,46,0,102,105,114,115,116,32,108,101,116,116,101,114,32,99,97,112,105,116,97,108,32,115,105,103,110,0,108,97,115,116,32,108,101,116,116,101,114,32,99,97,112,105,116,97,108,32,115,105,103,110,0,115,105,110,103,108,101,32,108,101,116,116,101,114,32,99,97,112,105,116,97,108,32,115,105,103,110,0,99,97,112,105,116,97,108,32,119,111,114,100,0,99,97,112,105,116,97,108,32,119,111,114,100,32,115,116,111,112,0,101,109,112,104,97,115,105,115,32,99,108,97,115,115,0,68,117,112,108,105,99,97,116,101,32,101,109,112,104,97,115,105,115,32,99,108,97,115,115,58,32,37,115,0,105,116,97,108,105,99,0,70,105,114,115,116,32,101,109,112,104,97,115,105,115,32,99,108,97,115,115,32,109,117,115,116,32,98,101,32,34,105,116,97,108,105,99,34,32,98,117,116,32,103,111,116,32,37,115,0,117,110,100,101,114,108,105,110,101,0,83,101,99,111,110,100,32,101,109,112,104,97,115,105,115,32,99,108,97,115,115,32,109,117,115,116,32,98,101,32,34,117,110,100,101,114,108,105,110,101,34,32,98,117,116,32,103,111,116,32,37,115,0,98,111,108,100,0,84,104,105,114,100,32,101,109,112,104,97,115,105,115,32,99,108,97,115,115,32,109,117,115,116,32,98,101,32,34,98,111,108,100,34,32,98,117,116,32,103,111,116,32,37,115,0,77,97,120,32,110,117,109,98,101,114,32,111,102,32,101,109,112,104,97,115,105,115,32,99,108,97,115,115,101,115,32,40,37,105,41,32,114,101,97,99,104,101,100,0,101,109,112,104,99,108,97,115,115,32,109,117,115,116,32,98,101,32,102,111,108,108,111,119,101,100,32,98,121,32,97,32,118,97,108,105,100,32,99,108,97,115,115,32,110,97,109,101,46,0,69,109,112,104,97,115,105,115,32,99,108,97,115,115,32,37,115,32,110,111,116,32,100,101,99,108,97,114,101,100,0,115,105,110,103,108,101,32,108,101,116,116,101,114,0,119,111,114,100,32,115,116,111,112,0,67,97,110,110,111,116,32,100,101,102,105,110,101,32,101,109,112,104,97,115,105,115,32,102,111,114,32,98,111,116,104,32,110,111,32,99,111,110,116,101,120,116,32,97,110,100,32,119,111,114,100,32,111,114,32,112,104,114,97,115,101,32,99,111,110,116,101,120,116,44,32,105,46,101,46,32,99,97,110,110,111,116,32,104,97,118,101,32,98,111,116,104,32,98,101,103,101,109,112,104,32,97,110,100,32,98,101,103,101,109,112,104,119,111,114,100,32,111,114,32,98,101,103,101,109,112,104,112,104,114,97,115,101,46,0,102,105,114,115,116,32,108,101,116,116,101,114,0,67,97,110,110,111,116,32,100,101,102,105,110,101,32,101,109,112,104,97,115,105,115,32,102,111,114,32,98,111,116,104,32,110,111,32,99,111,110,116,101,120,116,32,97,110,100,32,119,111,114,100,32,111,114,32,112,104,114,97,115,101,32,99,111,110,116,101,120,116,44,32,105,46,101,46,32,99,97,110,110,111,116,32,104,97,118,101,32,98,111,116,104,32,101,110,100,101,109,112,104,32,97,110,100,32,101,110,100,101,109,112,104,119,111,114,100,32,111,114,32,101,110,100,101,109,112,104,112,104,114,97,115,101,46,0,108,97,115,116,32,108,101,116,116,101,114,0,102,105,114,115,116,32,119,111,114,100,0,108,97,115,116,32,119,111,114,100,32,97,102,116,101,114,32,97,108,114,101,97,100,121,32,100,101,102,105,110,101,100,46,0,108,97,115,116,32,119,111,114,100,32,98,101,102,111,114,101,0,108,97,115,116,32,119,111,114,100,32,98,101,102,111,114,101,32,97,108,114,101,97,100,121,32,100,101,102,105,110,101,100,46,0,108,97,115,116,32,119,111,114,100,32,97,102,116,101,114,0,108,101,116,116,101,114,32,115,105,103,110,0,77,111,114,101,32,116,104,97,110,32,37,100,32,99,104,97,114,97,99,116,101,114,115,0,110,117,109,98,101,114,32,115,105,103,110,0,97,116,116,114,105,98,117,116,101,32,110,117,109,98,101,114,0,69,120,112,101,99,116,101,100,32,97,116,116,114,105,98,117,116,101,32,110,117,109,98,101,114,46,0,73,110,118,97,108,105,100,32,97,116,116,114,105,98,117,116,101,32,110,117,109,98,101,114,46,0,65,116,116,114,105,98,117,116,101,32,99,104,97,114,97,99,116,101,114,32,117,110,100,101,102,105,110,101,100,0,78,117,109,101,114,105,99,32,109,111,100,101,32,99,104,97,114,97,99,116,101,114,32,117,110,100,101,102,105,110,101,100,0,78,117,109,101,114,105,99,32,110,111,32,99,111,110,116,114,97,99,116,105,111,110,32,99,104,97,114,97,99,116,101,114,32,117,110,100,101,102,105,110,101,100,0,110,111,32,99,111,110,116,114,97,99,116,105,111,110,115,32,115,105,103,110,0,83,101,113,117,101,110,99,101,32,100,101,108,105,109,105,116,101,114,32,99,104,97,114,97,99,116,101,114,32,117,110,100,101,102,105,110,101,100,0,83,101,113,117,101,110,99,101,32,98,101,102,111,114,101,32,99,104,97,114,97,99,116,101,114,32,117,110,100,101,102,105,110,101,100,0,83,101,113,117,101,110,99,101,32,97,102,116,101,114,32,99,104,97,114,97,99,116,101,114,32,117,110,100,101,102,105,110,101,100,0,67,97,112,105,116,97,108,32,109,111,100,101,32,99,104,97,114,97,99,116,101,114,32,117,110,100,101,102,105,110,101,100,0,98,101,103,105,110,32,99,111,109,112,117,116,101,114,32,98,114,97,105,108,108,101,0,101,110,100,32,99,111,109,112,117,116,101,114,32,98,114,97,115,108,108,101,0,102,105,114,115,116,32,111,112,101,114,97,110,100,32,109,117,115,116,32,98,101,32,49,32,99,104,97,114,97,99,116,101,114,32,97,110,100,32,60,32,50,53,54,0,84,104,101,32,111,112,101,114,97,110,100,32,109,117,115,116,32,98,101,103,105,110,32,119,105,116,104,32,97,110,32,97,116,32,115,105,103,110,32,40,64,41,0,37,115,32,111,114,32,37,115,32,109,117,115,116,32,98,101,32,115,112,101,99,105,102,105,101,100,46,0,109,117,108,116,105,112,108,101,32,98,114,97,105,108,108,101,32,105,110,100,105,99,97,116,111,114,115,0,109,117,108,116,105,110,100,32,111,112,99,111,100,101,115,0,78,111,116,32,97,32,98,114,97,105,108,108,101,32,105,110,100,105,99,97,116,111,114,32,111,112,99,111,100,101,46,0,99,104,97,114,97,99,116,101,114,32,99,108,97,115,115,32,110,97,109,101,0,99,104,97,114,97,99,116,101,114,32,99,108,97,115,115,32,97,108,114,101,97,100,121,32,100,101,102,105,110,101,100,46,0,37,115,32,97,108,114,101,97,100,121,32,115,112,101,99,105,102,105,101,100,46,0,79,110,101,32,85,110,105,99,111,100,101,32,99,104,97,114,97,99,116,101,114,32,97,110,100,32,97,116,32,108,101,97,115,116,32,111,110,101,32,99,101,108,108,32,97,114,101,32,114,101,113,117,105,114,101,100,46,0,69,120,97,99,116,108,121,32,111,110,101,32,99,104,97,114,97,99,116,101,114,32,97,110,100,32,111,110,101,32,99,101,108,108,32,97,114,101,32,114,101,113,117,105,114,101,100,46,0,117,110,105,109,112,108,101,109,101,110,116,101,100,32,111,112,99,111,100,101,46,0,100,111,116,115,32,111,112,101,114,97,110,100,0,69,120,97,99,116,108,121,32,116,119,111,32,85,110,105,99,111,100,101,32,99,104,97,114,97,99,116,101,114,115,32,97,110,100,32,97,116,32,108,101,97,115,116,32,111,110,101,32,99,101,108,108,32,97,114,101,32,114,101,113,117,105,114,101,100,46,0,97,116,32,108,101,97,115,116,32,111,110,101,32,99,101,108,108,32,105,115,32,114,101,113,117,105,114,101,100,32,97,102,116,101,114,32,116,104,101,32,99,111,109,109,97,46,0,110,97,109,101,32,111,112,101,114,97,110,100,0,68,111,116,115,32,111,112,101,114,97,110,100,32,109,117,115,116,32,99,111,110,115,105,115,116,32,111,102,32,116,119,111,32,99,101,108,108,115,32,115,101,112,97,114,97,116,101,100,32,98,121,32,97,32,99,111,109,109,97,0,116,119,111,32,85,110,105,99,111,100,101,32,99,104,97,114,97,99,116,101,114,115,32,97,110,100,32,116,119,111,32,99,101,108,108,115,32,115,101,112,97,114,97,116,101,100,32,98,121,32,97,32,99,111,109,109,97,32,97,114,101,32,110,101,101,100,101,100,46,0,110,111,116,32,101,110,111,117,103,104,32,109,101,109,111,114,121,0,97,32,110,97,109,101,32,109,97,121,32,99,111,110,116,97,105,110,32,111,110,108,121,32,108,101,116,116,101,114,115,0,69,120,97,99,116,108,121,32,111,110,101,32,99,104,97,114,97,99,116,101,114,32,105,115,32,114,101,113,117,105,114,101,100,46,0,65,116,32,108,101,97,115,116,32,111,110,101,32,99,101,108,108,32,105,115,32,114,101,113,117,105,114,101,100,46,0,109,97,116,99,104,101,115,32,111,112,101,114,97,110,100,0,114,101,112,108,97,99,101,109,101,110,116,115,32,111,112,101,114,97,110,100,0,99,104,97,114,97,99,116,101,114,32,99,108,97,115,115,32,110,111,116,32,100,101,102,105,110,101,100,46,0,99,104,97,114,97,99,116,101,114,32,37,115,32,115,104,111,117,108,100,32,98,101,32,100,101,102,105,110,101,100,32,97,116,32,116,104,105,115,32,112,111,105,110,116,32,98,117,116,32,105,115,32,110,111,116,0,99,101,108,108,32,37,115,32,115,104,111,117,108,100,32,98,101,32,100,101,102,105,110,101,100,32,97,116,32,116,104,105,115,32,112,111,105,110,116,32,98,117,116,32,105,115,32,110,111,116,0,99,104,97,114,97,99,116,101,114,32,99,108,97,115,115,32,116,97,98,108,101,32,111,118,101,114,102,108,111,119,46,0,115,99,114,105,112,116,0,73,110,118,97,108,105,100,32,109,117,108,116,105,112,97,115,115,32,111,112,101,114,97,110,100,115,0,73,110,118,97,108,105,100,32,109,117,108,116,105,112,97,115,115,32,115,116,97,116,101,109,101,110,116,0,105,110,118,97,108,105,100,32,100,101,102,105,110,105,116,105,111,110,32,105,110,32,100,101,99,108,97,114,97,116,105,118,101,32,112,97,114,116,0,37,115,32,105,115,32,110,111,116,32,97,32,103,114,111,117,112,105,110,103,32,110,97,109,101,0,37,115,32,105,115,32,110,111,116,32,97,32,115,119,97,112,32,110,97,109,101,46,0,105,110,118,97,108,105,100,32,99,111,109,112,97,114,105,115,111,110,32,111,112,101,114,97,116,111,114,32,105,110,32,105,102,32,112,97,114,116,0,105,110,118,97,108,105,100,32,99,104,111,105,99,101,32,105,110,32,105,102,32,112,97,114,116,0,73,110,118,97,108,105,100,32,118,97,114,105,97,98,108,101,32,111,112,101,114,97,116,111,114,32,105,110,32,116,104,101,110,32,112,97,114,116,0,105,110,118,97,108,105,100,32,97,99,116,105,111,110,32,105,110,32,116,104,101,110,32,112,97,114,116,0,105,110,99,111,114,114,101,99,116,32,99,111,109,112,97,114,105,115,111,110,32,111,112,101,114,97,116,111,114,0,105,110,118,97,108,105,100,32,114,97,110,103,101,0,37,115,32,105,115,32,110,101,105,116,104,101,114,32,97,32,99,108,97,115,115,32,110,97,109,101,32,110,111,114,32,97,32,115,119,97,112,32,110,97,109,101,46,0,105,110,99,111,114,114,101,99,116,32,111,112,101,114,97,116,111,114,32,39,37,99,32,39,32,105,110,32,116,101,115,116,32,112,97,114,116,0,105,110,99,111,114,114,101,99,116,32,118,97,114,105,97,98,108,101,32,111,112,101,114,97,116,111,114,32,105,110,32,97,99,116,105,111,110,32,112,97,114,116,0,105,110,99,111,114,114,101,99,116,32,111,112,101,114,97,116,111,114,32,105,110,32,97,99,116,105,111,110,32,112,97,114,116,0,117,110,104,97,110,100,108,101,100,32,37,115,32,115,117,98,111,112,101,114,97,110,100,58,32,92,120,37,48,50,120,0,99,104,97,114,97,99,116,101,114,115,44,32,100,111,116,115,44,32,97,116,116,114,105,98,117,116,101,115,44,32,111,114,32,99,108,97,115,115,32,115,119,97,112,32,110,111,116,32,102,111,117,110,100,32,105,110,32,37,115,32,112,97,114,116,0,97,99,116,105,111,110,0,116,101,115,116,0,118,97,114,105,97,98,108,101,32,110,117,109,98,101,114,32,111,117,116,32,111,102,32,114,97,110,103,101,0,117,110,116,101,114,109,105,110,97,116,101,100,32,115,116,114,105,110,103,0,110,97,109,101,32,110,111,116,32,102,111,117,110,100,0,101,109,112,104,97,115,105,115,32,105,110,100,105,99,97,116,111,114,115,32,101,120,112,101,99,116,101,100,0,109,105,115,115,105,110,103,32,97,116,116,114,105,98,117,116,101,0,115,116,114,105,110,103,115,0,100,111,116,115,0,98,97,99,107,119,97,114,100,0,102,111,114,119,97,114,100,0,37,115,32,97,114,101,32,110,111,116,32,97,108,108,111,119,101,100,32,105,110,32,116,104,101,32,37,115,32,112,97,114,116,32,111,102,32,97,32,37,115,32,116,114,97,110,115,108,97,116,105,111,110,32,37,115,32,114,117,108,101,46,0,39,41,39,32,101,120,112,101,99,116,101,100,0,97,32,110,117,109,98,101,114,32,101,120,112,101,99,116,101,100,0,39,44,39,32,101,120,112,101,99,116,101,100,0,97,32,110,97,109,101,32,101,120,112,101,99,116,101,100,0,39,40,39,32,101,120,112,101,99,116,101,100,0,116,116,114,0,97,99,107,0,111,111,108,0,108,97,115,115,0,101,102,0,109,112,104,0,105,110,100,0,105,114,115,116,0,114,111,117,112,0,102,0,97,115,116,0,97,114,107,0,101,112,103,114,111,117,112,0,101,112,99,111,112,121,0,101,112,111,109,105,116,0,101,112,0,99,114,105,112,116,0,119,97,112,0,104,101,110,0,99,104,97,114,97,99,116,101,114,115,0,110,117,109,98,101,114,0,97,32,110,111,110,122,101,114,111,32,112,111,115,105,116,105,118,101,32,110,117,109,98,101,114,32,105,115,32,114,101,113,117,105,114,101,100,0,108,97,115,116,32,119,111,114,100,32,98,101,102,111,114,101,32,111,114,32,97,102,116,101,114,0,78,111,116,32,101,110,111,117,103,104,32,109,101,109,111,114,121,32,102,111,114,32,116,114,97,110,115,108,97,116,105,111,110,32,116,97,98,108,101,46,0,67,104,97,114,97,99,116,101,114,32,37,115,32,105,115,32,110,111,116,32,100,101,102,105,110,101,100,0,68,111,116,32,112,97,116,116,101,114,110,32,37,115,32,105,115,32,110,111,116,32,100,101,102,105,110,101,100,46,0,68,111,116,115,32,111,112,101,114,97,110,100,0,67,104,97,114,97,99,116,101,114,115,32,111,112,101,114,97,110,100,0,84,97,98,108,101,32,108,105,115,116,32,110,111,116,32,115,117,112,112,111,114,116,101,100,32,105,110,32,105,110,99,108,117,100,101,32,115,116,97,116,101,109,101,110,116,58,32,39,105,110,99,108,117,100,101,32,37,115,39,0,111,112,99,111,100,101,32,37,115,32,110,111,116,32,100,101,102,105,110,101,100,46,0,109,111,114,101,32,116,104,97,110,32,37,100,32,99,104,97,114,97,99,116,101,114,115,32,40,98,121,116,101,115,41,0,37,115,32,110,111,116,32,115,112,101,99,105,102,105,101,100,46,0,78,111,116,32,101,110,111,117,103,104,32,109,101,109,111,114,121,0,51,46,49,46,48,0,80,101,114,102,111,114,109,105,110,103,32,116,114,97,110,115,108,97,116,105,111,110,58,32,116,97,98,108,101,76,105,115,116,61,37,115,44,32,105,110,108,101,110,61,37,100,0,73,110,98,117,102,61,0,84,114,97,110,115,108,97,116,105,111,110,32,99,111,109,112,108,101,116,101,58,32,111,117,116,108,101,110,61,37,100,0,79,117,116,98,117,102,61,0,48,120,37,48,56,88,32,0,37,115,0,97,0,10,0,67,97,110,110,111,116,32,111,112,101,110,32,108,111,103,32,102,105,108,101,32,37,115,10,0,84,104,101,114,101,32,105,115,32,110,111,32,116,114,97,110,115,108,97,116,111,114,32,99,97,108,108,101,100,32,39,37,115,39,0,107,111,114,101,97,110,0,49,0,106,97,112,97,110,101,115,101,0,50,0,103,101,114,109,97,110,0,51,0,17,0,10,0,17,17,17,0,0,0,0,5,0,0,0,0,0,0,9,0,0,0,0,11,0,0,0,0,0,0,0,0,17,0,15,10,17,17,17,3,10,7,0,1,19,9,11,11,0,0,9,6,11,0,0,11,0,6,17,0,0,0,17,17,17,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,0,17,0,10,10,17,17,17,0,10,0,0,2,0,9,11,0,0,0,9,0,11,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,12,0,0,0,0,9,12,0,0,0,0,0,12,0,0,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,14,0,0,0,0,0,0,0,0,0,0,0,13,0,0,0,4,13,0,0,0,0,9,14,0,0,0,0,0,14,0,0,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,0,0,0,0,0,0,0,0,0,0,0,15,0,0,0,0,15,0,0,0,0,9,16,0,0,0,0,0,16,0,0,16,0,0,18,0,0,0,18,18,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,18,0,0,0,18,18,18,0,0,0,0,0,0,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,0,0,0,0,10,0,0,0,0,10,0,0,0,0,9,11,0,0,0,0,0,11,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,12,0,0,0,0,9,12,0,0,0,0,0,12,0,0,12,0,0,48,49,50,51,52,53,54,55,56,57,65,66,67,68,69,70,45,43,32,32,32,48,88,48,120,0,40,110,117,108,108,41,0,45,48,88,43,48,88,32,48,88,45,48,120,43,48,120,32,48,120,0,105,110,102,0,73,78,70,0,110,97,110,0,78,65,78,0,46,0,84,33,34,25,13,1,2,3,17,75,28,12,16,4,11,29,18,30,39,104,110,111,112,113,98,32,5,6,15,19,20,21,26,8,22,7,40,36,23,24,9,10,14,27,31,37,35,131,130,125,38,42,43,60,61,62,63,67,71,74,77,88,89,90,91,92,93,94,95,96,97,99,100,101,102,103,105,106,107,108,114,115,116,121,122,123,124,0,73,108,108,101,103,97,108,32,98,121,116,101,32,115,101,113,117,101,110,99,101,0,68,111,109,97,105,110,32,101,114,114,111,114,0,82,101,115,117,108,116,32,110,111,116,32,114,101,112,114,101,115,101,110,116,97,98,108,101,0,78,111,116,32,97,32,116,116,121,0,80,101,114,109,105,115,115,105,111,110,32,100,101,110,105,101,100,0,79,112,101,114,97,116,105,111,110,32,110,111,116,32,112,101,114,109,105,116,116,101,100,0,78,111,32,115,117,99,104,32,102,105,108,101,32,111,114,32,100,105,114,101,99,116,111,114,121,0,78,111,32,115,117,99,104,32,112,114,111,99,101,115,115,0,70,105,108,101,32,101,120,105,115,116,115,0,86,97,108,117,101,32,116,111,111,32,108,97,114,103,101,32,102,111,114,32,100,97,116,97,32,116,121,112,101,0,78,111,32,115,112,97,99,101,32,108,101,102,116,32,111,110,32,100,101,118,105,99,101,0,79,117,116,32,111,102,32,109,101,109,111,114,121,0,82,101,115,111,117,114,99,101,32,98,117,115,121,0,73,110,116,101,114,114,117,112,116,101,100,32,115,121,115,116,101,109,32,99,97,108,108,0,82,101,115,111,117,114,99,101,32,116,101,109,112,111,114,97,114,105,108,121,32,117,110,97,118,97,105,108,97,98,108,101,0,73,110,118,97,108,105,100,32,115,101,101,107,0,67,114,111,115,115,45,100,101,118,105,99,101,32,108,105,110,107,0,82,101,97,100,45,111,110,108,121,32,102,105,108,101,32,115,121,115,116,101,109,0,68,105,114,101,99,116,111,114,121,32,110,111,116,32,101,109,112,116,121,0,67,111,110,110,101,99,116,105,111,110,32,114,101,115,101,116,32,98,121,32,112,101,101,114,0,79,112,101,114,97,116,105,111,110,32,116,105,109,101,100,32,111,117,116,0,67,111,110,110,101,99,116,105,111,110,32,114,101,102,117,115,101,100,0,72,111,115,116,32,105,115,32,100,111,119,110,0,72,111,115,116,32,105,115,32,117,110,114,101,97,99,104,97,98,108,101,0,65,100,100,114,101,115,115,32,105,110,32,117,115,101,0,66,114,111,107,101,110,32,112,105,112,101,0,73,47,79,32,101,114,114,111,114,0,78,111,32,115,117,99,104,32,100,101,118,105,99,101,32,111,114,32,97,100,100,114,101,115,115,0,66,108,111,99,107,32,100,101,118,105,99,101,32,114,101,113,117,105,114,101,100,0,78,111,32,115,117,99,104,32,100,101,118,105,99,101,0,78,111,116,32,97,32,100,105,114,101,99,116,111,114,121,0,73,115,32,97,32,100,105,114,101,99,116,111,114,121,0,84,101,120,116,32,102,105,108,101,32,98,117,115,121,0,69,120,101,99,32,102,111,114,109,97,116,32,101,114,114,111,114,0,73,110,118,97,108,105,100,32,97,114,103,117,109,101,110,116,0,65,114,103,117,109,101,110,116,32,108,105,115,116,32,116,111,111,32,108,111,110,103,0,83,121,109,98,111,108,105,99,32,108,105,110,107,32,108,111,111,112,0,70,105,108,101,110,97,109,101,32,116,111,111,32,108,111,110,103,0,84,111,111,32,109,97,110,121,32,111,112,101,110,32,102,105,108,101,115,32,105,110,32,115,121,115,116,101,109,0,78,111,32,102,105,108,101,32,100,101,115,99,114,105,112,116,111,114,115,32,97,118,97,105,108,97,98,108,101,0,66,97,100,32,102,105,108,101,32,100,101,115,99,114,105,112,116,111,114,0,78,111,32,99,104,105,108,100,32,112,114,111,99,101,115,115,0,66,97,100,32,97,100,100,114,101,115,115,0,70,105,108,101,32,116,111,111,32,108,97,114,103,101,0,84,111,111,32,109,97,110,121,32,108,105,110,107,115,0,78,111,32,108,111,99,107,115,32,97,118,97,105,108,97,98,108,101,0,82,101,115,111,117,114,99,101,32,100,101,97,100,108,111,99,107,32,119,111,117,108,100,32,111,99,99,117,114,0,83,116,97,116,101,32,110,111,116,32,114,101,99,111,118,101,114,97,98,108,101,0,80,114,101,118,105,111,117,115,32,111,119,110,101,114,32,100,105,101,100,0,79,112,101,114,97,116,105,111,110,32,99,97,110,99,101,108,101,100,0,70,117,110,99,116,105,111,110,32,110,111,116,32,105,109,112,108,101,109,101,110,116,101,100,0,78,111,32,109,101,115,115,97,103,101,32,111,102,32,100,101,115,105,114,101,100,32,116,121,112,101,0,73,100,101,110,116,105,102,105,101,114,32,114,101,109,111,118,101,100,0,68,101,118,105,99,101,32,110,111,116,32,97,32,115,116,114,101,97,109,0,78,111,32,100,97,116,97,32,97,118,97,105,108,97,98,108,101,0,68,101,118,105,99,101,32,116,105,109,101,111,117,116,0,79,117,116,32,111,102,32,115,116,114,101,97,109,115,32,114,101,115,111,117,114,99,101,115,0,76,105,110,107,32,104,97,115,32,98,101,101,110,32,115,101,118,101,114,101,100,0,80,114,111,116,111,99,111,108,32,101,114,114,111,114,0,66,97,100,32,109,101,115,115,97,103,101,0,70,105,108,101,32,100,101,115,99,114,105,112,116,111,114,32,105,110,32,98,97,100,32,115,116,97,116,101,0,78,111,116,32,97,32,115,111,99,107,101,116,0,68,101,115,116,105,110,97,116,105,111,110,32,97,100,100,114,101,115,115,32,114,101,113,117,105,114,101,100,0,77,101,115,115,97,103,101,32,116,111,111,32,108,97,114,103,101,0,80,114,111,116,111,99,111,108,32,119,114,111,110,103,32,116,121,112,101,32,102,111,114,32,115,111,99,107,101,116,0,80,114,111,116,111,99,111,108,32,110,111,116,32,97,118,97,105,108,97,98,108,101,0,80,114,111,116,111,99,111,108,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0,83,111,99,107,101,116,32,116,121,112,101,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0,78,111,116,32,115,117,112,112,111,114,116,101,100,0,80,114,111,116,111,99,111,108,32,102,97,109,105,108,121,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0,65,100,100,114,101,115,115,32,102,97,109,105,108,121,32,110,111,116,32,115,117,112,112,111,114,116,101,100,32,98,121,32,112,114,111,116,111,99,111,108,0,65,100,100,114,101,115,115,32,110,111,116,32,97,118,97,105,108,97,98,108,101,0,78,101,116,119,111,114,107,32,105,115,32,100,111,119,110,0,78,101,116,119,111,114,107,32,117,110,114,101,97,99,104,97,98,108,101,0,67,111,110,110,101,99,116,105,111,110,32,114,101,115,101,116,32,98,121,32,110,101,116,119,111,114,107,0,67,111,110,110,101,99,116,105,111,110,32,97,98,111,114,116,101,100,0,78,111,32,98,117,102,102,101,114,32,115,112,97,99,101,32,97,118,97,105,108,97,98,108,101,0,83,111,99,107,101,116,32,105,115,32,99,111,110,110,101,99,116,101,100,0,83,111,99,107,101,116,32,110,111,116,32,99,111,110,110,101,99,116,101,100,0,67,97,110,110,111,116,32,115,101,110,100,32,97,102,116,101,114,32,115,111,99,107,101,116,32,115,104,117,116,100,111,119,110,0,79,112,101,114,97,116,105,111,110,32,97,108,114,101,97,100,121,32,105,110,32,112,114,111,103,114,101,115,115,0,79,112,101,114,97,116,105,111,110,32,105,110,32,112,114,111,103,114,101,115,115,0,83,116,97,108,101,32,102,105,108,101,32,104,97,110,100,108,101,0,82,101,109,111,116,101,32,73,47,79,32,101,114,114,111,114,0,81,117,111,116,97,32,101,120,99,101,101,100,101,100,0,78,111,32,109,101,100,105,117,109,32,102,111,117,110,100,0,87,114,111,110,103,32,109,101,100,105,117,109,32,116,121,112,101,0,78,111,32,101,114,114,111,114,32,105,110,102,111,114,109,97,116,105,111,110,0,0,114,119,97,0], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE);





/* no memory initializer */
var tempDoublePtr = STATICTOP; STATICTOP += 16;

assert(tempDoublePtr % 8 == 0);

function copyTempFloat(ptr) { // functions, because inlining this code increases code size too much

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

}

function copyTempDouble(ptr) {

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

  HEAP8[tempDoublePtr+4] = HEAP8[ptr+4];

  HEAP8[tempDoublePtr+5] = HEAP8[ptr+5];

  HEAP8[tempDoublePtr+6] = HEAP8[ptr+6];

  HEAP8[tempDoublePtr+7] = HEAP8[ptr+7];

}

// {{PRE_LIBRARY}}


   
  Module["_i64Subtract"] = _i64Subtract;

   
  Module["_i64Add"] = _i64Add;

   
  Module["_memset"] = _memset;

   
  Module["_bitshift64Lshr"] = _bitshift64Lshr;

  
  
  
  
  var _environ=STATICTOP; STATICTOP += 16;;var ___environ=_environ;function ___buildEnvironment(env) {
      // WARNING: Arbitrary limit!
      var MAX_ENV_VALUES = 64;
      var TOTAL_ENV_SIZE = 1024;
  
      // Statically allocate memory for the environment.
      var poolPtr;
      var envPtr;
      if (!___buildEnvironment.called) {
        ___buildEnvironment.called = true;
        // Set default values. Use string keys for Closure Compiler compatibility.
        ENV['USER'] = ENV['LOGNAME'] = 'web_user';
        ENV['PATH'] = '/';
        ENV['PWD'] = '/';
        ENV['HOME'] = '/home/web_user';
        ENV['LANG'] = 'C';
        ENV['_'] = Module['thisProgram'];
        // Allocate memory.
        poolPtr = allocate(TOTAL_ENV_SIZE, 'i8', ALLOC_STATIC);
        envPtr = allocate(MAX_ENV_VALUES * 4,
                          'i8*', ALLOC_STATIC);
        HEAP32[((envPtr)>>2)]=poolPtr;
        HEAP32[((_environ)>>2)]=envPtr;
      } else {
        envPtr = HEAP32[((_environ)>>2)];
        poolPtr = HEAP32[((envPtr)>>2)];
      }
  
      // Collect key=value lines.
      var strings = [];
      var totalSize = 0;
      for (var key in env) {
        if (typeof env[key] === 'string') {
          var line = key + '=' + env[key];
          strings.push(line);
          totalSize += line.length;
        }
      }
      if (totalSize > TOTAL_ENV_SIZE) {
        throw new Error('Environment size exceeded TOTAL_ENV_SIZE!');
      }
  
      // Make new.
      var ptrSize = 4;
      for (var i = 0; i < strings.length; i++) {
        var line = strings[i];
        writeAsciiToMemory(line, poolPtr);
        HEAP32[(((envPtr)+(i * ptrSize))>>2)]=poolPtr;
        poolPtr += line.length + 1;
      }
      HEAP32[(((envPtr)+(strings.length * ptrSize))>>2)]=0;
    }var ENV={};function _getenv(name) {
      // char *getenv(const char *name);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/getenv.html
      if (name === 0) return 0;
      name = Pointer_stringify(name);
      if (!ENV.hasOwnProperty(name)) return 0;
  
      if (_getenv.ret) _free(_getenv.ret);
      _getenv.ret = allocate(intArrayFromString(ENV[name]), 'i8', ALLOC_NORMAL);
      return _getenv.ret;
    }

   
  Module["_bitshift64Shl"] = _bitshift64Shl;

  function _abort() {
      Module['abort']();
    }

  
  
  
  var ERRNO_CODES={EPERM:1,ENOENT:2,ESRCH:3,EINTR:4,EIO:5,ENXIO:6,E2BIG:7,ENOEXEC:8,EBADF:9,ECHILD:10,EAGAIN:11,EWOULDBLOCK:11,ENOMEM:12,EACCES:13,EFAULT:14,ENOTBLK:15,EBUSY:16,EEXIST:17,EXDEV:18,ENODEV:19,ENOTDIR:20,EISDIR:21,EINVAL:22,ENFILE:23,EMFILE:24,ENOTTY:25,ETXTBSY:26,EFBIG:27,ENOSPC:28,ESPIPE:29,EROFS:30,EMLINK:31,EPIPE:32,EDOM:33,ERANGE:34,ENOMSG:42,EIDRM:43,ECHRNG:44,EL2NSYNC:45,EL3HLT:46,EL3RST:47,ELNRNG:48,EUNATCH:49,ENOCSI:50,EL2HLT:51,EDEADLK:35,ENOLCK:37,EBADE:52,EBADR:53,EXFULL:54,ENOANO:55,EBADRQC:56,EBADSLT:57,EDEADLOCK:35,EBFONT:59,ENOSTR:60,ENODATA:61,ETIME:62,ENOSR:63,ENONET:64,ENOPKG:65,EREMOTE:66,ENOLINK:67,EADV:68,ESRMNT:69,ECOMM:70,EPROTO:71,EMULTIHOP:72,EDOTDOT:73,EBADMSG:74,ENOTUNIQ:76,EBADFD:77,EREMCHG:78,ELIBACC:79,ELIBBAD:80,ELIBSCN:81,ELIBMAX:82,ELIBEXEC:83,ENOSYS:38,ENOTEMPTY:39,ENAMETOOLONG:36,ELOOP:40,EOPNOTSUPP:95,EPFNOSUPPORT:96,ECONNRESET:104,ENOBUFS:105,EAFNOSUPPORT:97,EPROTOTYPE:91,ENOTSOCK:88,ENOPROTOOPT:92,ESHUTDOWN:108,ECONNREFUSED:111,EADDRINUSE:98,ECONNABORTED:103,ENETUNREACH:101,ENETDOWN:100,ETIMEDOUT:110,EHOSTDOWN:112,EHOSTUNREACH:113,EINPROGRESS:115,EALREADY:114,EDESTADDRREQ:89,EMSGSIZE:90,EPROTONOSUPPORT:93,ESOCKTNOSUPPORT:94,EADDRNOTAVAIL:99,ENETRESET:102,EISCONN:106,ENOTCONN:107,ETOOMANYREFS:109,EUSERS:87,EDQUOT:122,ESTALE:116,ENOTSUP:95,ENOMEDIUM:123,EILSEQ:84,EOVERFLOW:75,ECANCELED:125,ENOTRECOVERABLE:131,EOWNERDEAD:130,ESTRPIPE:86};
  
  var ERRNO_MESSAGES={0:"Success",1:"Not super-user",2:"No such file or directory",3:"No such process",4:"Interrupted system call",5:"I/O error",6:"No such device or address",7:"Arg list too long",8:"Exec format error",9:"Bad file number",10:"No children",11:"No more processes",12:"Not enough core",13:"Permission denied",14:"Bad address",15:"Block device required",16:"Mount device busy",17:"File exists",18:"Cross-device link",19:"No such device",20:"Not a directory",21:"Is a directory",22:"Invalid argument",23:"Too many open files in system",24:"Too many open files",25:"Not a typewriter",26:"Text file busy",27:"File too large",28:"No space left on device",29:"Illegal seek",30:"Read only file system",31:"Too many links",32:"Broken pipe",33:"Math arg out of domain of func",34:"Math result not representable",35:"File locking deadlock error",36:"File or path name too long",37:"No record locks available",38:"Function not implemented",39:"Directory not empty",40:"Too many symbolic links",42:"No message of desired type",43:"Identifier removed",44:"Channel number out of range",45:"Level 2 not synchronized",46:"Level 3 halted",47:"Level 3 reset",48:"Link number out of range",49:"Protocol driver not attached",50:"No CSI structure available",51:"Level 2 halted",52:"Invalid exchange",53:"Invalid request descriptor",54:"Exchange full",55:"No anode",56:"Invalid request code",57:"Invalid slot",59:"Bad font file fmt",60:"Device not a stream",61:"No data (for no delay io)",62:"Timer expired",63:"Out of streams resources",64:"Machine is not on the network",65:"Package not installed",66:"The object is remote",67:"The link has been severed",68:"Advertise error",69:"Srmount error",70:"Communication error on send",71:"Protocol error",72:"Multihop attempted",73:"Cross mount point (not really error)",74:"Trying to read unreadable message",75:"Value too large for defined data type",76:"Given log. name not unique",77:"f.d. invalid for this operation",78:"Remote address changed",79:"Can   access a needed shared lib",80:"Accessing a corrupted shared lib",81:".lib section in a.out corrupted",82:"Attempting to link in too many libs",83:"Attempting to exec a shared library",84:"Illegal byte sequence",86:"Streams pipe error",87:"Too many users",88:"Socket operation on non-socket",89:"Destination address required",90:"Message too long",91:"Protocol wrong type for socket",92:"Protocol not available",93:"Unknown protocol",94:"Socket type not supported",95:"Not supported",96:"Protocol family not supported",97:"Address family not supported by protocol family",98:"Address already in use",99:"Address not available",100:"Network interface is not configured",101:"Network is unreachable",102:"Connection reset by network",103:"Connection aborted",104:"Connection reset by peer",105:"No buffer space available",106:"Socket is already connected",107:"Socket is not connected",108:"Can't send after socket shutdown",109:"Too many references",110:"Connection timed out",111:"Connection refused",112:"Host is down",113:"Host is unreachable",114:"Socket already connected",115:"Connection already in progress",116:"Stale file handle",122:"Quota exceeded",123:"No medium (in tape drive)",125:"Operation canceled",130:"Previous owner died",131:"State not recoverable"};
  
  function ___setErrNo(value) {
      if (Module['___errno_location']) HEAP32[((Module['___errno_location']())>>2)]=value;
      else Module.printErr('failed to set errno from JS');
      return value;
    }
  
  var PATH={splitPath:function (filename) {
        var splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
        return splitPathRe.exec(filename).slice(1);
      },normalizeArray:function (parts, allowAboveRoot) {
        // if the path tries to go above the root, `up` ends up > 0
        var up = 0;
        for (var i = parts.length - 1; i >= 0; i--) {
          var last = parts[i];
          if (last === '.') {
            parts.splice(i, 1);
          } else if (last === '..') {
            parts.splice(i, 1);
            up++;
          } else if (up) {
            parts.splice(i, 1);
            up--;
          }
        }
        // if the path is allowed to go above the root, restore leading ..s
        if (allowAboveRoot) {
          for (; up--; up) {
            parts.unshift('..');
          }
        }
        return parts;
      },normalize:function (path) {
        var isAbsolute = path.charAt(0) === '/',
            trailingSlash = path.substr(-1) === '/';
        // Normalize the path
        path = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), !isAbsolute).join('/');
        if (!path && !isAbsolute) {
          path = '.';
        }
        if (path && trailingSlash) {
          path += '/';
        }
        return (isAbsolute ? '/' : '') + path;
      },dirname:function (path) {
        var result = PATH.splitPath(path),
            root = result[0],
            dir = result[1];
        if (!root && !dir) {
          // No dirname whatsoever
          return '.';
        }
        if (dir) {
          // It has a dirname, strip trailing slash
          dir = dir.substr(0, dir.length - 1);
        }
        return root + dir;
      },basename:function (path) {
        // EMSCRIPTEN return '/'' for '/', not an empty string
        if (path === '/') return '/';
        var lastSlash = path.lastIndexOf('/');
        if (lastSlash === -1) return path;
        return path.substr(lastSlash+1);
      },extname:function (path) {
        return PATH.splitPath(path)[3];
      },join:function () {
        var paths = Array.prototype.slice.call(arguments, 0);
        return PATH.normalize(paths.join('/'));
      },join2:function (l, r) {
        return PATH.normalize(l + '/' + r);
      },resolve:function () {
        var resolvedPath = '',
          resolvedAbsolute = false;
        for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
          var path = (i >= 0) ? arguments[i] : FS.cwd();
          // Skip empty and invalid entries
          if (typeof path !== 'string') {
            throw new TypeError('Arguments to path.resolve must be strings');
          } else if (!path) {
            return ''; // an invalid portion invalidates the whole thing
          }
          resolvedPath = path + '/' + resolvedPath;
          resolvedAbsolute = path.charAt(0) === '/';
        }
        // At this point the path should be resolved to a full absolute path, but
        // handle relative paths to be safe (might happen when process.cwd() fails)
        resolvedPath = PATH.normalizeArray(resolvedPath.split('/').filter(function(p) {
          return !!p;
        }), !resolvedAbsolute).join('/');
        return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
      },relative:function (from, to) {
        from = PATH.resolve(from).substr(1);
        to = PATH.resolve(to).substr(1);
        function trim(arr) {
          var start = 0;
          for (; start < arr.length; start++) {
            if (arr[start] !== '') break;
          }
          var end = arr.length - 1;
          for (; end >= 0; end--) {
            if (arr[end] !== '') break;
          }
          if (start > end) return [];
          return arr.slice(start, end - start + 1);
        }
        var fromParts = trim(from.split('/'));
        var toParts = trim(to.split('/'));
        var length = Math.min(fromParts.length, toParts.length);
        var samePartsLength = length;
        for (var i = 0; i < length; i++) {
          if (fromParts[i] !== toParts[i]) {
            samePartsLength = i;
            break;
          }
        }
        var outputParts = [];
        for (var i = samePartsLength; i < fromParts.length; i++) {
          outputParts.push('..');
        }
        outputParts = outputParts.concat(toParts.slice(samePartsLength));
        return outputParts.join('/');
      }};
  
  var TTY={ttys:[],init:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // currently, FS.init does not distinguish if process.stdin is a file or TTY
        //   // device, it always assumes it's a TTY device. because of this, we're forcing
        //   // process.stdin to UTF8 encoding to at least make stdin reading compatible
        //   // with text files until FS.init can be refactored.
        //   process['stdin']['setEncoding']('utf8');
        // }
      },shutdown:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // inolen: any idea as to why node -e 'process.stdin.read()' wouldn't exit immediately (with process.stdin being a tty)?
        //   // isaacs: because now it's reading from the stream, you've expressed interest in it, so that read() kicks off a _read() which creates a ReadReq operation
        //   // inolen: I thought read() in that case was a synchronous operation that just grabbed some amount of buffered data if it exists?
        //   // isaacs: it is. but it also triggers a _read() call, which calls readStart() on the handle
        //   // isaacs: do process.stdin.pause() and i'd think it'd probably close the pending call
        //   process['stdin']['pause']();
        // }
      },register:function (dev, ops) {
        TTY.ttys[dev] = { input: [], output: [], ops: ops };
        FS.registerDevice(dev, TTY.stream_ops);
      },stream_ops:{open:function (stream) {
          var tty = TTY.ttys[stream.node.rdev];
          if (!tty) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          stream.tty = tty;
          stream.seekable = false;
        },close:function (stream) {
          // flush any pending line data
          stream.tty.ops.flush(stream.tty);
        },flush:function (stream) {
          stream.tty.ops.flush(stream.tty);
        },read:function (stream, buffer, offset, length, pos /* ignored */) {
          if (!stream.tty || !stream.tty.ops.get_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          var bytesRead = 0;
          for (var i = 0; i < length; i++) {
            var result;
            try {
              result = stream.tty.ops.get_char(stream.tty);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            if (result === undefined && bytesRead === 0) {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
            if (result === null || result === undefined) break;
            bytesRead++;
            buffer[offset+i] = result;
          }
          if (bytesRead) {
            stream.node.timestamp = Date.now();
          }
          return bytesRead;
        },write:function (stream, buffer, offset, length, pos) {
          if (!stream.tty || !stream.tty.ops.put_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          for (var i = 0; i < length; i++) {
            try {
              stream.tty.ops.put_char(stream.tty, buffer[offset+i]);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
          }
          if (length) {
            stream.node.timestamp = Date.now();
          }
          return i;
        }},default_tty_ops:{get_char:function (tty) {
          if (!tty.input.length) {
            var result = null;
            if (ENVIRONMENT_IS_NODE) {
              // we will read data by chunks of BUFSIZE
              var BUFSIZE = 256;
              var buf = new Buffer(BUFSIZE);
              var bytesRead = 0;
  
              var isPosixPlatform = (process.platform != 'win32'); // Node doesn't offer a direct check, so test by exclusion
  
              var fd = process.stdin.fd;
              if (isPosixPlatform) {
                // Linux and Mac cannot use process.stdin.fd (which isn't set up as sync)
                var usingDevice = false;
                try {
                  fd = fs.openSync('/dev/stdin', 'r');
                  usingDevice = true;
                } catch (e) {}
              }
  
              try {
                bytesRead = fs.readSync(fd, buf, 0, BUFSIZE, null);
              } catch(e) {
                // Cross-platform differences: on Windows, reading EOF throws an exception, but on other OSes,
                // reading EOF returns 0. Uniformize behavior by treating the EOF exception to return 0.
                if (e.toString().indexOf('EOF') != -1) bytesRead = 0;
                else throw e;
              }
  
              if (usingDevice) { fs.closeSync(fd); }
              if (bytesRead > 0) {
                result = buf.slice(0, bytesRead).toString('utf-8');
              } else {
                result = null;
              }
  
            } else if (typeof window != 'undefined' &&
              typeof window.prompt == 'function') {
              // Browser.
              result = window.prompt('Input: ');  // returns null on cancel
              if (result !== null) {
                result += '\n';
              }
            } else if (typeof readline == 'function') {
              // Command line.
              result = readline();
              if (result !== null) {
                result += '\n';
              }
            }
            if (!result) {
              return null;
            }
            tty.input = intArrayFromString(result, true);
          }
          return tty.input.shift();
        },put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['print'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val); // val == 0 would cut text output off in the middle.
          }
        },flush:function (tty) {
          if (tty.output && tty.output.length > 0) {
            Module['print'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        }},default_tty1_ops:{put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['printErr'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val);
          }
        },flush:function (tty) {
          if (tty.output && tty.output.length > 0) {
            Module['printErr'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        }}};
  
  var MEMFS={ops_table:null,mount:function (mount) {
        return MEMFS.createNode(null, '/', 16384 | 511 /* 0777 */, 0);
      },createNode:function (parent, name, mode, dev) {
        if (FS.isBlkdev(mode) || FS.isFIFO(mode)) {
          // no supported
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (!MEMFS.ops_table) {
          MEMFS.ops_table = {
            dir: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                lookup: MEMFS.node_ops.lookup,
                mknod: MEMFS.node_ops.mknod,
                rename: MEMFS.node_ops.rename,
                unlink: MEMFS.node_ops.unlink,
                rmdir: MEMFS.node_ops.rmdir,
                readdir: MEMFS.node_ops.readdir,
                symlink: MEMFS.node_ops.symlink
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek
              }
            },
            file: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek,
                read: MEMFS.stream_ops.read,
                write: MEMFS.stream_ops.write,
                allocate: MEMFS.stream_ops.allocate,
                mmap: MEMFS.stream_ops.mmap,
                msync: MEMFS.stream_ops.msync
              }
            },
            link: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                readlink: MEMFS.node_ops.readlink
              },
              stream: {}
            },
            chrdev: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: FS.chrdev_stream_ops
            }
          };
        }
        var node = FS.createNode(parent, name, mode, dev);
        if (FS.isDir(node.mode)) {
          node.node_ops = MEMFS.ops_table.dir.node;
          node.stream_ops = MEMFS.ops_table.dir.stream;
          node.contents = {};
        } else if (FS.isFile(node.mode)) {
          node.node_ops = MEMFS.ops_table.file.node;
          node.stream_ops = MEMFS.ops_table.file.stream;
          node.usedBytes = 0; // The actual number of bytes used in the typed array, as opposed to contents.length which gives the whole capacity.
          // When the byte data of the file is populated, this will point to either a typed array, or a normal JS array. Typed arrays are preferred
          // for performance, and used by default. However, typed arrays are not resizable like normal JS arrays are, so there is a small disk size
          // penalty involved for appending file writes that continuously grow a file similar to std::vector capacity vs used -scheme.
          node.contents = null; 
        } else if (FS.isLink(node.mode)) {
          node.node_ops = MEMFS.ops_table.link.node;
          node.stream_ops = MEMFS.ops_table.link.stream;
        } else if (FS.isChrdev(node.mode)) {
          node.node_ops = MEMFS.ops_table.chrdev.node;
          node.stream_ops = MEMFS.ops_table.chrdev.stream;
        }
        node.timestamp = Date.now();
        // add the new node to the parent
        if (parent) {
          parent.contents[name] = node;
        }
        return node;
      },getFileDataAsRegularArray:function (node) {
        if (node.contents && node.contents.subarray) {
          var arr = [];
          for (var i = 0; i < node.usedBytes; ++i) arr.push(node.contents[i]);
          return arr; // Returns a copy of the original data.
        }
        return node.contents; // No-op, the file contents are already in a JS array. Return as-is.
      },getFileDataAsTypedArray:function (node) {
        if (!node.contents) return new Uint8Array;
        if (node.contents.subarray) return node.contents.subarray(0, node.usedBytes); // Make sure to not return excess unused bytes.
        return new Uint8Array(node.contents);
      },expandFileStorage:function (node, newCapacity) {
        // If we are asked to expand the size of a file that already exists, revert to using a standard JS array to store the file
        // instead of a typed array. This makes resizing the array more flexible because we can just .push() elements at the back to
        // increase the size.
        if (node.contents && node.contents.subarray && newCapacity > node.contents.length) {
          node.contents = MEMFS.getFileDataAsRegularArray(node);
          node.usedBytes = node.contents.length; // We might be writing to a lazy-loaded file which had overridden this property, so force-reset it.
        }
  
        if (!node.contents || node.contents.subarray) { // Keep using a typed array if creating a new storage, or if old one was a typed array as well.
          var prevCapacity = node.contents ? node.contents.length : 0;
          if (prevCapacity >= newCapacity) return; // No need to expand, the storage was already large enough.
          // Don't expand strictly to the given requested limit if it's only a very small increase, but instead geometrically grow capacity.
          // For small filesizes (<1MB), perform size*2 geometric increase, but for large sizes, do a much more conservative size*1.125 increase to
          // avoid overshooting the allocation cap by a very large margin.
          var CAPACITY_DOUBLING_MAX = 1024 * 1024;
          newCapacity = Math.max(newCapacity, (prevCapacity * (prevCapacity < CAPACITY_DOUBLING_MAX ? 2.0 : 1.125)) | 0);
          if (prevCapacity != 0) newCapacity = Math.max(newCapacity, 256); // At minimum allocate 256b for each file when expanding.
          var oldContents = node.contents;
          node.contents = new Uint8Array(newCapacity); // Allocate new storage.
          if (node.usedBytes > 0) node.contents.set(oldContents.subarray(0, node.usedBytes), 0); // Copy old data over to the new storage.
          return;
        }
        // Not using a typed array to back the file storage. Use a standard JS array instead.
        if (!node.contents && newCapacity > 0) node.contents = [];
        while (node.contents.length < newCapacity) node.contents.push(0);
      },resizeFileStorage:function (node, newSize) {
        if (node.usedBytes == newSize) return;
        if (newSize == 0) {
          node.contents = null; // Fully decommit when requesting a resize to zero.
          node.usedBytes = 0;
          return;
        }
        if (!node.contents || node.contents.subarray) { // Resize a typed array if that is being used as the backing store.
          var oldContents = node.contents;
          node.contents = new Uint8Array(new ArrayBuffer(newSize)); // Allocate new storage.
          if (oldContents) {
            node.contents.set(oldContents.subarray(0, Math.min(newSize, node.usedBytes))); // Copy old data over to the new storage.
          }
          node.usedBytes = newSize;
          return;
        }
        // Backing with a JS array.
        if (!node.contents) node.contents = [];
        if (node.contents.length > newSize) node.contents.length = newSize;
        else while (node.contents.length < newSize) node.contents.push(0);
        node.usedBytes = newSize;
      },node_ops:{getattr:function (node) {
          var attr = {};
          // device numbers reuse inode numbers.
          attr.dev = FS.isChrdev(node.mode) ? node.id : 1;
          attr.ino = node.id;
          attr.mode = node.mode;
          attr.nlink = 1;
          attr.uid = 0;
          attr.gid = 0;
          attr.rdev = node.rdev;
          if (FS.isDir(node.mode)) {
            attr.size = 4096;
          } else if (FS.isFile(node.mode)) {
            attr.size = node.usedBytes;
          } else if (FS.isLink(node.mode)) {
            attr.size = node.link.length;
          } else {
            attr.size = 0;
          }
          attr.atime = new Date(node.timestamp);
          attr.mtime = new Date(node.timestamp);
          attr.ctime = new Date(node.timestamp);
          // NOTE: In our implementation, st_blocks = Math.ceil(st_size/st_blksize),
          //       but this is not required by the standard.
          attr.blksize = 4096;
          attr.blocks = Math.ceil(attr.size / attr.blksize);
          return attr;
        },setattr:function (node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
          if (attr.size !== undefined) {
            MEMFS.resizeFileStorage(node, attr.size);
          }
        },lookup:function (parent, name) {
          throw FS.genericErrors[ERRNO_CODES.ENOENT];
        },mknod:function (parent, name, mode, dev) {
          return MEMFS.createNode(parent, name, mode, dev);
        },rename:function (old_node, new_dir, new_name) {
          // if we're overwriting a directory at new_name, make sure it's empty.
          if (FS.isDir(old_node.mode)) {
            var new_node;
            try {
              new_node = FS.lookupNode(new_dir, new_name);
            } catch (e) {
            }
            if (new_node) {
              for (var i in new_node.contents) {
                throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
              }
            }
          }
          // do the internal rewiring
          delete old_node.parent.contents[old_node.name];
          old_node.name = new_name;
          new_dir.contents[new_name] = old_node;
          old_node.parent = new_dir;
        },unlink:function (parent, name) {
          delete parent.contents[name];
        },rmdir:function (parent, name) {
          var node = FS.lookupNode(parent, name);
          for (var i in node.contents) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
          }
          delete parent.contents[name];
        },readdir:function (node) {
          var entries = ['.', '..']
          for (var key in node.contents) {
            if (!node.contents.hasOwnProperty(key)) {
              continue;
            }
            entries.push(key);
          }
          return entries;
        },symlink:function (parent, newname, oldpath) {
          var node = MEMFS.createNode(parent, newname, 511 /* 0777 */ | 40960, 0);
          node.link = oldpath;
          return node;
        },readlink:function (node) {
          if (!FS.isLink(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return node.link;
        }},stream_ops:{read:function (stream, buffer, offset, length, position) {
          var contents = stream.node.contents;
          if (position >= stream.node.usedBytes) return 0;
          var size = Math.min(stream.node.usedBytes - position, length);
          assert(size >= 0);
          if (size > 8 && contents.subarray) { // non-trivial, and typed array
            buffer.set(contents.subarray(position, position + size), offset);
          } else {
            for (var i = 0; i < size; i++) buffer[offset + i] = contents[position + i];
          }
          return size;
        },write:function (stream, buffer, offset, length, position, canOwn) {
          if (!length) return 0;
          var node = stream.node;
          node.timestamp = Date.now();
  
          if (buffer.subarray && (!node.contents || node.contents.subarray)) { // This write is from a typed array to a typed array?
            if (canOwn) {
              assert(position === 0, 'canOwn must imply no weird position inside the file');
              node.contents = buffer.subarray(offset, offset + length);
              node.usedBytes = length;
              return length;
            } else if (node.usedBytes === 0 && position === 0) { // If this is a simple first write to an empty file, do a fast set since we don't need to care about old data.
              node.contents = new Uint8Array(buffer.subarray(offset, offset + length));
              node.usedBytes = length;
              return length;
            } else if (position + length <= node.usedBytes) { // Writing to an already allocated and used subrange of the file?
              node.contents.set(buffer.subarray(offset, offset + length), position);
              return length;
            }
          }
  
          // Appending to an existing file and we need to reallocate, or source data did not come as a typed array.
          MEMFS.expandFileStorage(node, position+length);
          if (node.contents.subarray && buffer.subarray) node.contents.set(buffer.subarray(offset, offset + length), position); // Use typed array write if available.
          else {
            for (var i = 0; i < length; i++) {
             node.contents[position + i] = buffer[offset + i]; // Or fall back to manual write if not.
            }
          }
          node.usedBytes = Math.max(node.usedBytes, position+length);
          return length;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.usedBytes;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return position;
        },allocate:function (stream, offset, length) {
          MEMFS.expandFileStorage(stream.node, offset + length);
          stream.node.usedBytes = Math.max(stream.node.usedBytes, offset + length);
        },mmap:function (stream, buffer, offset, length, position, prot, flags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          var ptr;
          var allocated;
          var contents = stream.node.contents;
          // Only make a new copy when MAP_PRIVATE is specified.
          if ( !(flags & 2) &&
                (contents.buffer === buffer || contents.buffer === buffer.buffer) ) {
            // We can't emulate MAP_SHARED when the file is not backed by the buffer
            // we're mapping to (e.g. the HEAP buffer).
            allocated = false;
            ptr = contents.byteOffset;
          } else {
            // Try to avoid unnecessary slices.
            if (position > 0 || position + length < stream.node.usedBytes) {
              if (contents.subarray) {
                contents = contents.subarray(position, position + length);
              } else {
                contents = Array.prototype.slice.call(contents, position, position + length);
              }
            }
            allocated = true;
            ptr = _malloc(length);
            if (!ptr) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOMEM);
            }
            buffer.set(contents, ptr);
          }
          return { ptr: ptr, allocated: allocated };
        },msync:function (stream, buffer, offset, length, mmapFlags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          if (mmapFlags & 2) {
            // MAP_PRIVATE calls need not to be synced back to underlying fs
            return 0;
          }
  
          var bytesWritten = MEMFS.stream_ops.write(stream, buffer, 0, length, offset, false);
          // should we check if bytesWritten and length are the same?
          return 0;
        }}};
  
  var IDBFS={dbs:{},indexedDB:function () {
        if (typeof indexedDB !== 'undefined') return indexedDB;
        var ret = null;
        if (typeof window === 'object') ret = window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
        assert(ret, 'IDBFS used, but indexedDB not supported');
        return ret;
      },DB_VERSION:21,DB_STORE_NAME:"FILE_DATA",mount:function (mount) {
        // reuse all of the core MEMFS functionality
        return MEMFS.mount.apply(null, arguments);
      },syncfs:function (mount, populate, callback) {
        IDBFS.getLocalSet(mount, function(err, local) {
          if (err) return callback(err);
  
          IDBFS.getRemoteSet(mount, function(err, remote) {
            if (err) return callback(err);
  
            var src = populate ? remote : local;
            var dst = populate ? local : remote;
  
            IDBFS.reconcile(src, dst, callback);
          });
        });
      },getDB:function (name, callback) {
        // check the cache first
        var db = IDBFS.dbs[name];
        if (db) {
          return callback(null, db);
        }
  
        var req;
        try {
          req = IDBFS.indexedDB().open(name, IDBFS.DB_VERSION);
        } catch (e) {
          return callback(e);
        }
        if (!req) {
          return callback("Unable to connect to IndexedDB");
        }
        req.onupgradeneeded = function(e) {
          var db = e.target.result;
          var transaction = e.target.transaction;
  
          var fileStore;
  
          if (db.objectStoreNames.contains(IDBFS.DB_STORE_NAME)) {
            fileStore = transaction.objectStore(IDBFS.DB_STORE_NAME);
          } else {
            fileStore = db.createObjectStore(IDBFS.DB_STORE_NAME);
          }
  
          if (!fileStore.indexNames.contains('timestamp')) {
            fileStore.createIndex('timestamp', 'timestamp', { unique: false });
          }
        };
        req.onsuccess = function() {
          db = req.result;
  
          // add to the cache
          IDBFS.dbs[name] = db;
          callback(null, db);
        };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },getLocalSet:function (mount, callback) {
        var entries = {};
  
        function isRealDir(p) {
          return p !== '.' && p !== '..';
        };
        function toAbsolute(root) {
          return function(p) {
            return PATH.join2(root, p);
          }
        };
  
        var check = FS.readdir(mount.mountpoint).filter(isRealDir).map(toAbsolute(mount.mountpoint));
  
        while (check.length) {
          var path = check.pop();
          var stat;
  
          try {
            stat = FS.stat(path);
          } catch (e) {
            return callback(e);
          }
  
          if (FS.isDir(stat.mode)) {
            check.push.apply(check, FS.readdir(path).filter(isRealDir).map(toAbsolute(path)));
          }
  
          entries[path] = { timestamp: stat.mtime };
        }
  
        return callback(null, { type: 'local', entries: entries });
      },getRemoteSet:function (mount, callback) {
        var entries = {};
  
        IDBFS.getDB(mount.mountpoint, function(err, db) {
          if (err) return callback(err);
  
          var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readonly');
          transaction.onerror = function(e) {
            callback(this.error);
            e.preventDefault();
          };
  
          var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
          var index = store.index('timestamp');
  
          index.openKeyCursor().onsuccess = function(event) {
            var cursor = event.target.result;
  
            if (!cursor) {
              return callback(null, { type: 'remote', db: db, entries: entries });
            }
  
            entries[cursor.primaryKey] = { timestamp: cursor.key };
  
            cursor.continue();
          };
        });
      },loadLocalEntry:function (path, callback) {
        var stat, node;
  
        try {
          var lookup = FS.lookupPath(path);
          node = lookup.node;
          stat = FS.stat(path);
        } catch (e) {
          return callback(e);
        }
  
        if (FS.isDir(stat.mode)) {
          return callback(null, { timestamp: stat.mtime, mode: stat.mode });
        } else if (FS.isFile(stat.mode)) {
          // Performance consideration: storing a normal JavaScript array to a IndexedDB is much slower than storing a typed array.
          // Therefore always convert the file contents to a typed array first before writing the data to IndexedDB.
          node.contents = MEMFS.getFileDataAsTypedArray(node);
          return callback(null, { timestamp: stat.mtime, mode: stat.mode, contents: node.contents });
        } else {
          return callback(new Error('node type not supported'));
        }
      },storeLocalEntry:function (path, entry, callback) {
        try {
          if (FS.isDir(entry.mode)) {
            FS.mkdir(path, entry.mode);
          } else if (FS.isFile(entry.mode)) {
            FS.writeFile(path, entry.contents, { encoding: 'binary', canOwn: true });
          } else {
            return callback(new Error('node type not supported'));
          }
  
          FS.chmod(path, entry.mode);
          FS.utime(path, entry.timestamp, entry.timestamp);
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },removeLocalEntry:function (path, callback) {
        try {
          var lookup = FS.lookupPath(path);
          var stat = FS.stat(path);
  
          if (FS.isDir(stat.mode)) {
            FS.rmdir(path);
          } else if (FS.isFile(stat.mode)) {
            FS.unlink(path);
          }
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },loadRemoteEntry:function (store, path, callback) {
        var req = store.get(path);
        req.onsuccess = function(event) { callback(null, event.target.result); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },storeRemoteEntry:function (store, path, entry, callback) {
        var req = store.put(entry, path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },removeRemoteEntry:function (store, path, callback) {
        var req = store.delete(path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },reconcile:function (src, dst, callback) {
        var total = 0;
  
        var create = [];
        Object.keys(src.entries).forEach(function (key) {
          var e = src.entries[key];
          var e2 = dst.entries[key];
          if (!e2 || e.timestamp > e2.timestamp) {
            create.push(key);
            total++;
          }
        });
  
        var remove = [];
        Object.keys(dst.entries).forEach(function (key) {
          var e = dst.entries[key];
          var e2 = src.entries[key];
          if (!e2) {
            remove.push(key);
            total++;
          }
        });
  
        if (!total) {
          return callback(null);
        }
  
        var errored = false;
        var completed = 0;
        var db = src.type === 'remote' ? src.db : dst.db;
        var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readwrite');
        var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return callback(err);
            }
            return;
          }
          if (++completed >= total) {
            return callback(null);
          }
        };
  
        transaction.onerror = function(e) {
          done(this.error);
          e.preventDefault();
        };
  
        // sort paths in ascending order so directory entries are created
        // before the files inside them
        create.sort().forEach(function (path) {
          if (dst.type === 'local') {
            IDBFS.loadRemoteEntry(store, path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeLocalEntry(path, entry, done);
            });
          } else {
            IDBFS.loadLocalEntry(path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeRemoteEntry(store, path, entry, done);
            });
          }
        });
  
        // sort paths in descending order so files are deleted before their
        // parent directories
        remove.sort().reverse().forEach(function(path) {
          if (dst.type === 'local') {
            IDBFS.removeLocalEntry(path, done);
          } else {
            IDBFS.removeRemoteEntry(store, path, done);
          }
        });
      }};
  
  var NODEFS={isWindows:false,staticInit:function () {
        NODEFS.isWindows = !!process.platform.match(/^win/);
      },mount:function (mount) {
        assert(ENVIRONMENT_IS_NODE);
        return NODEFS.createNode(null, '/', NODEFS.getMode(mount.opts.root), 0);
      },createNode:function (parent, name, mode, dev) {
        if (!FS.isDir(mode) && !FS.isFile(mode) && !FS.isLink(mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node = FS.createNode(parent, name, mode);
        node.node_ops = NODEFS.node_ops;
        node.stream_ops = NODEFS.stream_ops;
        return node;
      },getMode:function (path) {
        var stat;
        try {
          stat = fs.lstatSync(path);
          if (NODEFS.isWindows) {
            // On Windows, directories return permission bits 'rw-rw-rw-', even though they have 'rwxrwxrwx', so
            // propagate write bits to execute bits.
            stat.mode = stat.mode | ((stat.mode & 146) >> 1);
          }
        } catch (e) {
          if (!e.code) throw e;
          throw new FS.ErrnoError(ERRNO_CODES[e.code]);
        }
        return stat.mode;
      },realPath:function (node) {
        var parts = [];
        while (node.parent !== node) {
          parts.push(node.name);
          node = node.parent;
        }
        parts.push(node.mount.opts.root);
        parts.reverse();
        return PATH.join.apply(null, parts);
      },flagsToPermissionStringMap:{0:"r",1:"r+",2:"r+",64:"r",65:"r+",66:"r+",129:"rx+",193:"rx+",514:"w+",577:"w",578:"w+",705:"wx",706:"wx+",1024:"a",1025:"a",1026:"a+",1089:"a",1090:"a+",1153:"ax",1154:"ax+",1217:"ax",1218:"ax+",4096:"rs",4098:"rs+"},flagsToPermissionString:function (flags) {
        flags &= ~0x200000 /*O_PATH*/; // Ignore this flag from musl, otherwise node.js fails to open the file.
        flags &= ~0x800 /*O_NONBLOCK*/; // Ignore this flag from musl, otherwise node.js fails to open the file.
        flags &= ~0x8000 /*O_LARGEFILE*/; // Ignore this flag from musl, otherwise node.js fails to open the file.
        flags &= ~0x80000 /*O_CLOEXEC*/; // Some applications may pass it; it makes no sense for a single process.
        if (flags in NODEFS.flagsToPermissionStringMap) {
          return NODEFS.flagsToPermissionStringMap[flags];
        } else {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
      },node_ops:{getattr:function (node) {
          var path = NODEFS.realPath(node);
          var stat;
          try {
            stat = fs.lstatSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          // node.js v0.10.20 doesn't report blksize and blocks on Windows. Fake them with default blksize of 4096.
          // See http://support.microsoft.com/kb/140365
          if (NODEFS.isWindows && !stat.blksize) {
            stat.blksize = 4096;
          }
          if (NODEFS.isWindows && !stat.blocks) {
            stat.blocks = (stat.size+stat.blksize-1)/stat.blksize|0;
          }
          return {
            dev: stat.dev,
            ino: stat.ino,
            mode: stat.mode,
            nlink: stat.nlink,
            uid: stat.uid,
            gid: stat.gid,
            rdev: stat.rdev,
            size: stat.size,
            atime: stat.atime,
            mtime: stat.mtime,
            ctime: stat.ctime,
            blksize: stat.blksize,
            blocks: stat.blocks
          };
        },setattr:function (node, attr) {
          var path = NODEFS.realPath(node);
          try {
            if (attr.mode !== undefined) {
              fs.chmodSync(path, attr.mode);
              // update the common node structure mode as well
              node.mode = attr.mode;
            }
            if (attr.timestamp !== undefined) {
              var date = new Date(attr.timestamp);
              fs.utimesSync(path, date, date);
            }
            if (attr.size !== undefined) {
              fs.truncateSync(path, attr.size);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },lookup:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          var mode = NODEFS.getMode(path);
          return NODEFS.createNode(parent, name, mode);
        },mknod:function (parent, name, mode, dev) {
          var node = NODEFS.createNode(parent, name, mode, dev);
          // create the backing node for this in the fs root as well
          var path = NODEFS.realPath(node);
          try {
            if (FS.isDir(node.mode)) {
              fs.mkdirSync(path, node.mode);
            } else {
              fs.writeFileSync(path, '', { mode: node.mode });
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return node;
        },rename:function (oldNode, newDir, newName) {
          var oldPath = NODEFS.realPath(oldNode);
          var newPath = PATH.join2(NODEFS.realPath(newDir), newName);
          try {
            fs.renameSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },unlink:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.unlinkSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },rmdir:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.rmdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readdir:function (node) {
          var path = NODEFS.realPath(node);
          try {
            return fs.readdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },symlink:function (parent, newName, oldPath) {
          var newPath = PATH.join2(NODEFS.realPath(parent), newName);
          try {
            fs.symlinkSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readlink:function (node) {
          var path = NODEFS.realPath(node);
          try {
            path = fs.readlinkSync(path);
            path = NODEJS_PATH.relative(NODEJS_PATH.resolve(node.mount.opts.root), path);
            return path;
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        }},stream_ops:{open:function (stream) {
          var path = NODEFS.realPath(stream.node);
          try {
            if (FS.isFile(stream.node.mode)) {
              stream.nfd = fs.openSync(path, NODEFS.flagsToPermissionString(stream.flags));
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },close:function (stream) {
          try {
            if (FS.isFile(stream.node.mode) && stream.nfd) {
              fs.closeSync(stream.nfd);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },read:function (stream, buffer, offset, length, position) {
          if (length === 0) return 0; // node errors on 0 length reads
          // FIXME this is terrible.
          var nbuffer = new Buffer(length);
          var res;
          try {
            res = fs.readSync(stream.nfd, nbuffer, 0, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          if (res > 0) {
            for (var i = 0; i < res; i++) {
              buffer[offset + i] = nbuffer[i];
            }
          }
          return res;
        },write:function (stream, buffer, offset, length, position) {
          // FIXME this is terrible.
          var nbuffer = new Buffer(buffer.subarray(offset, offset + length));
          var res;
          try {
            res = fs.writeSync(stream.nfd, nbuffer, 0, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return res;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              try {
                var stat = fs.fstatSync(stream.nfd);
                position += stat.size;
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES[e.code]);
              }
            }
          }
  
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
  
          return position;
        }}};
  
  var WORKERFS={DIR_MODE:16895,FILE_MODE:33279,reader:null,mount:function (mount) {
        assert(ENVIRONMENT_IS_WORKER);
        if (!WORKERFS.reader) WORKERFS.reader = new FileReaderSync();
        var root = WORKERFS.createNode(null, '/', WORKERFS.DIR_MODE, 0);
        var createdParents = {};
        function ensureParent(path) {
          // return the parent node, creating subdirs as necessary
          var parts = path.split('/');
          var parent = root;
          for (var i = 0; i < parts.length-1; i++) {
            var curr = parts.slice(0, i+1).join('/');
            // Issue 4254: Using curr as a node name will prevent the node
            // from being found in FS.nameTable when FS.open is called on
            // a path which holds a child of this node,
            // given that all FS functions assume node names
            // are just their corresponding parts within their given path,
            // rather than incremental aggregates which include their parent's
            // directories.
            if (!createdParents[curr]) {
              createdParents[curr] = WORKERFS.createNode(parent, parts[i], WORKERFS.DIR_MODE, 0);
            }
            parent = createdParents[curr];
          }
          return parent;
        }
        function base(path) {
          var parts = path.split('/');
          return parts[parts.length-1];
        }
        // We also accept FileList here, by using Array.prototype
        Array.prototype.forEach.call(mount.opts["files"] || [], function(file) {
          WORKERFS.createNode(ensureParent(file.name), base(file.name), WORKERFS.FILE_MODE, 0, file, file.lastModifiedDate);
        });
        (mount.opts["blobs"] || []).forEach(function(obj) {
          WORKERFS.createNode(ensureParent(obj["name"]), base(obj["name"]), WORKERFS.FILE_MODE, 0, obj["data"]);
        });
        (mount.opts["packages"] || []).forEach(function(pack) {
          pack['metadata'].files.forEach(function(file) {
            var name = file.filename.substr(1); // remove initial slash
            WORKERFS.createNode(ensureParent(name), base(name), WORKERFS.FILE_MODE, 0, pack['blob'].slice(file.start, file.end));
          });
        });
        return root;
      },createNode:function (parent, name, mode, dev, contents, mtime) {
        var node = FS.createNode(parent, name, mode);
        node.mode = mode;
        node.node_ops = WORKERFS.node_ops;
        node.stream_ops = WORKERFS.stream_ops;
        node.timestamp = (mtime || new Date).getTime();
        assert(WORKERFS.FILE_MODE !== WORKERFS.DIR_MODE);
        if (mode === WORKERFS.FILE_MODE) {
          node.size = contents.size;
          node.contents = contents;
        } else {
          node.size = 4096;
          node.contents = {};
        }
        if (parent) {
          parent.contents[name] = node;
        }
        return node;
      },node_ops:{getattr:function (node) {
          return {
            dev: 1,
            ino: undefined,
            mode: node.mode,
            nlink: 1,
            uid: 0,
            gid: 0,
            rdev: undefined,
            size: node.size,
            atime: new Date(node.timestamp),
            mtime: new Date(node.timestamp),
            ctime: new Date(node.timestamp),
            blksize: 4096,
            blocks: Math.ceil(node.size / 4096),
          };
        },setattr:function (node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
        },lookup:function (parent, name) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        },mknod:function (parent, name, mode, dev) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },rename:function (oldNode, newDir, newName) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },unlink:function (parent, name) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },rmdir:function (parent, name) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },readdir:function (node) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },symlink:function (parent, newName, oldPath) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },readlink:function (node) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }},stream_ops:{read:function (stream, buffer, offset, length, position) {
          if (position >= stream.node.size) return 0;
          var chunk = stream.node.contents.slice(position, position + length);
          var ab = WORKERFS.reader.readAsArrayBuffer(chunk);
          buffer.set(new Uint8Array(ab), offset);
          return chunk.size;
        },write:function (stream, buffer, offset, length, position) {
          throw new FS.ErrnoError(ERRNO_CODES.EIO);
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.size;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return position;
        }}};
  
  var _stdin=STATICTOP; STATICTOP += 16;;
  
  var _stdout=STATICTOP; STATICTOP += 16;;
  
  var _stderr=STATICTOP; STATICTOP += 16;;var FS={root:null,mounts:[],devices:[null],streams:[],nextInode:1,nameTable:null,currentPath:"/",initialized:false,ignorePermissions:true,trackingDelegate:{},tracking:{openFlags:{READ:1,WRITE:2}},ErrnoError:null,genericErrors:{},filesystems:null,syncFSRequests:0,handleFSError:function (e) {
        if (!(e instanceof FS.ErrnoError)) throw e + ' : ' + stackTrace();
        return ___setErrNo(e.errno);
      },lookupPath:function (path, opts) {
        path = PATH.resolve(FS.cwd(), path);
        opts = opts || {};
  
        if (!path) return { path: '', node: null };
  
        var defaults = {
          follow_mount: true,
          recurse_count: 0
        };
        for (var key in defaults) {
          if (opts[key] === undefined) {
            opts[key] = defaults[key];
          }
        }
  
        if (opts.recurse_count > 8) {  // max recursive lookup of 8
          throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
        }
  
        // split the path
        var parts = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), false);
  
        // start at the root
        var current = FS.root;
        var current_path = '/';
  
        for (var i = 0; i < parts.length; i++) {
          var islast = (i === parts.length-1);
          if (islast && opts.parent) {
            // stop resolving
            break;
          }
  
          current = FS.lookupNode(current, parts[i]);
          current_path = PATH.join2(current_path, parts[i]);
  
          // jump to the mount's root node if this is a mountpoint
          if (FS.isMountpoint(current)) {
            if (!islast || (islast && opts.follow_mount)) {
              current = current.mounted.root;
            }
          }
  
          // by default, lookupPath will not follow a symlink if it is the final path component.
          // setting opts.follow = true will override this behavior.
          if (!islast || opts.follow) {
            var count = 0;
            while (FS.isLink(current.mode)) {
              var link = FS.readlink(current_path);
              current_path = PATH.resolve(PATH.dirname(current_path), link);
  
              var lookup = FS.lookupPath(current_path, { recurse_count: opts.recurse_count });
              current = lookup.node;
  
              if (count++ > 40) {  // limit max consecutive symlinks to 40 (SYMLOOP_MAX).
                throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
              }
            }
          }
        }
  
        return { path: current_path, node: current };
      },getPath:function (node) {
        var path;
        while (true) {
          if (FS.isRoot(node)) {
            var mount = node.mount.mountpoint;
            if (!path) return mount;
            return mount[mount.length-1] !== '/' ? mount + '/' + path : mount + path;
          }
          path = path ? node.name + '/' + path : node.name;
          node = node.parent;
        }
      },hashName:function (parentid, name) {
        var hash = 0;
  
  
        for (var i = 0; i < name.length; i++) {
          hash = ((hash << 5) - hash + name.charCodeAt(i)) | 0;
        }
        return ((parentid + hash) >>> 0) % FS.nameTable.length;
      },hashAddNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        node.name_next = FS.nameTable[hash];
        FS.nameTable[hash] = node;
      },hashRemoveNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        if (FS.nameTable[hash] === node) {
          FS.nameTable[hash] = node.name_next;
        } else {
          var current = FS.nameTable[hash];
          while (current) {
            if (current.name_next === node) {
              current.name_next = node.name_next;
              break;
            }
            current = current.name_next;
          }
        }
      },lookupNode:function (parent, name) {
        var err = FS.mayLookup(parent);
        if (err) {
          throw new FS.ErrnoError(err, parent);
        }
        var hash = FS.hashName(parent.id, name);
        for (var node = FS.nameTable[hash]; node; node = node.name_next) {
          var nodeName = node.name;
          if (node.parent.id === parent.id && nodeName === name) {
            return node;
          }
        }
        // if we failed to find it in the cache, call into the VFS
        return FS.lookup(parent, name);
      },createNode:function (parent, name, mode, rdev) {
        if (!FS.FSNode) {
          FS.FSNode = function(parent, name, mode, rdev) {
            if (!parent) {
              parent = this;  // root node sets parent to itself
            }
            this.parent = parent;
            this.mount = parent.mount;
            this.mounted = null;
            this.id = FS.nextInode++;
            this.name = name;
            this.mode = mode;
            this.node_ops = {};
            this.stream_ops = {};
            this.rdev = rdev;
          };
  
          FS.FSNode.prototype = {};
  
          // compatibility
          var readMode = 292 | 73;
          var writeMode = 146;
  
          // NOTE we must use Object.defineProperties instead of individual calls to
          // Object.defineProperty in order to make closure compiler happy
          Object.defineProperties(FS.FSNode.prototype, {
            read: {
              get: function() { return (this.mode & readMode) === readMode; },
              set: function(val) { val ? this.mode |= readMode : this.mode &= ~readMode; }
            },
            write: {
              get: function() { return (this.mode & writeMode) === writeMode; },
              set: function(val) { val ? this.mode |= writeMode : this.mode &= ~writeMode; }
            },
            isFolder: {
              get: function() { return FS.isDir(this.mode); }
            },
            isDevice: {
              get: function() { return FS.isChrdev(this.mode); }
            }
          });
        }
  
        var node = new FS.FSNode(parent, name, mode, rdev);
  
        FS.hashAddNode(node);
  
        return node;
      },destroyNode:function (node) {
        FS.hashRemoveNode(node);
      },isRoot:function (node) {
        return node === node.parent;
      },isMountpoint:function (node) {
        return !!node.mounted;
      },isFile:function (mode) {
        return (mode & 61440) === 32768;
      },isDir:function (mode) {
        return (mode & 61440) === 16384;
      },isLink:function (mode) {
        return (mode & 61440) === 40960;
      },isChrdev:function (mode) {
        return (mode & 61440) === 8192;
      },isBlkdev:function (mode) {
        return (mode & 61440) === 24576;
      },isFIFO:function (mode) {
        return (mode & 61440) === 4096;
      },isSocket:function (mode) {
        return (mode & 49152) === 49152;
      },flagModes:{"r":0,"rs":1052672,"r+":2,"w":577,"wx":705,"xw":705,"w+":578,"wx+":706,"xw+":706,"a":1089,"ax":1217,"xa":1217,"a+":1090,"ax+":1218,"xa+":1218},modeStringToFlags:function (str) {
        var flags = FS.flagModes[str];
        if (typeof flags === 'undefined') {
          throw new Error('Unknown file open mode: ' + str);
        }
        return flags;
      },flagsToPermissionString:function (flag) {
        var perms = ['r', 'w', 'rw'][flag & 3];
        if ((flag & 512)) {
          perms += 'w';
        }
        return perms;
      },nodePermissions:function (node, perms) {
        if (FS.ignorePermissions) {
          return 0;
        }
        // return 0 if any user, group or owner bits are set.
        if (perms.indexOf('r') !== -1 && !(node.mode & 292)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('w') !== -1 && !(node.mode & 146)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('x') !== -1 && !(node.mode & 73)) {
          return ERRNO_CODES.EACCES;
        }
        return 0;
      },mayLookup:function (dir) {
        var err = FS.nodePermissions(dir, 'x');
        if (err) return err;
        if (!dir.node_ops.lookup) return ERRNO_CODES.EACCES;
        return 0;
      },mayCreate:function (dir, name) {
        try {
          var node = FS.lookupNode(dir, name);
          return ERRNO_CODES.EEXIST;
        } catch (e) {
        }
        return FS.nodePermissions(dir, 'wx');
      },mayDelete:function (dir, name, isdir) {
        var node;
        try {
          node = FS.lookupNode(dir, name);
        } catch (e) {
          return e.errno;
        }
        var err = FS.nodePermissions(dir, 'wx');
        if (err) {
          return err;
        }
        if (isdir) {
          if (!FS.isDir(node.mode)) {
            return ERRNO_CODES.ENOTDIR;
          }
          if (FS.isRoot(node) || FS.getPath(node) === FS.cwd()) {
            return ERRNO_CODES.EBUSY;
          }
        } else {
          if (FS.isDir(node.mode)) {
            return ERRNO_CODES.EISDIR;
          }
        }
        return 0;
      },mayOpen:function (node, flags) {
        if (!node) {
          return ERRNO_CODES.ENOENT;
        }
        if (FS.isLink(node.mode)) {
          return ERRNO_CODES.ELOOP;
        } else if (FS.isDir(node.mode)) {
          if (FS.flagsToPermissionString(flags) !== 'r' || // opening for write
              (flags & 512)) { // TODO: check for O_SEARCH? (== search for dir only)
            return ERRNO_CODES.EISDIR;
          }
        }
        return FS.nodePermissions(node, FS.flagsToPermissionString(flags));
      },MAX_OPEN_FDS:4096,nextfd:function (fd_start, fd_end) {
        fd_start = fd_start || 0;
        fd_end = fd_end || FS.MAX_OPEN_FDS;
        for (var fd = fd_start; fd <= fd_end; fd++) {
          if (!FS.streams[fd]) {
            return fd;
          }
        }
        throw new FS.ErrnoError(ERRNO_CODES.EMFILE);
      },getStream:function (fd) {
        return FS.streams[fd];
      },createStream:function (stream, fd_start, fd_end) {
        if (!FS.FSStream) {
          FS.FSStream = function(){};
          FS.FSStream.prototype = {};
          // compatibility
          Object.defineProperties(FS.FSStream.prototype, {
            object: {
              get: function() { return this.node; },
              set: function(val) { this.node = val; }
            },
            isRead: {
              get: function() { return (this.flags & 2097155) !== 1; }
            },
            isWrite: {
              get: function() { return (this.flags & 2097155) !== 0; }
            },
            isAppend: {
              get: function() { return (this.flags & 1024); }
            }
          });
        }
        // clone it, so we can return an instance of FSStream
        var newStream = new FS.FSStream();
        for (var p in stream) {
          newStream[p] = stream[p];
        }
        stream = newStream;
        var fd = FS.nextfd(fd_start, fd_end);
        stream.fd = fd;
        FS.streams[fd] = stream;
        return stream;
      },closeStream:function (fd) {
        FS.streams[fd] = null;
      },chrdev_stream_ops:{open:function (stream) {
          var device = FS.getDevice(stream.node.rdev);
          // override node's stream ops with the device's
          stream.stream_ops = device.stream_ops;
          // forward the open call
          if (stream.stream_ops.open) {
            stream.stream_ops.open(stream);
          }
        },llseek:function () {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }},major:function (dev) {
        return ((dev) >> 8);
      },minor:function (dev) {
        return ((dev) & 0xff);
      },makedev:function (ma, mi) {
        return ((ma) << 8 | (mi));
      },registerDevice:function (dev, ops) {
        FS.devices[dev] = { stream_ops: ops };
      },getDevice:function (dev) {
        return FS.devices[dev];
      },getMounts:function (mount) {
        var mounts = [];
        var check = [mount];
  
        while (check.length) {
          var m = check.pop();
  
          mounts.push(m);
  
          check.push.apply(check, m.mounts);
        }
  
        return mounts;
      },syncfs:function (populate, callback) {
        if (typeof(populate) === 'function') {
          callback = populate;
          populate = false;
        }
  
        FS.syncFSRequests++;
  
        if (FS.syncFSRequests > 1) {
          console.log('warning: ' + FS.syncFSRequests + ' FS.syncfs operations in flight at once, probably just doing extra work');
        }
  
        var mounts = FS.getMounts(FS.root.mount);
        var completed = 0;
  
        function doCallback(err) {
          assert(FS.syncFSRequests > 0);
          FS.syncFSRequests--;
          return callback(err);
        }
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return doCallback(err);
            }
            return;
          }
          if (++completed >= mounts.length) {
            doCallback(null);
          }
        };
  
        // sync all mounts
        mounts.forEach(function (mount) {
          if (!mount.type.syncfs) {
            return done(null);
          }
          mount.type.syncfs(mount, populate, done);
        });
      },mount:function (type, opts, mountpoint) {
        var root = mountpoint === '/';
        var pseudo = !mountpoint;
        var node;
  
        if (root && FS.root) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        } else if (!root && !pseudo) {
          var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
          mountpoint = lookup.path;  // use the absolute path
          node = lookup.node;
  
          if (FS.isMountpoint(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
          }
  
          if (!FS.isDir(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
          }
        }
  
        var mount = {
          type: type,
          opts: opts,
          mountpoint: mountpoint,
          mounts: []
        };
  
        // create a root node for the fs
        var mountRoot = type.mount(mount);
        mountRoot.mount = mount;
        mount.root = mountRoot;
  
        if (root) {
          FS.root = mountRoot;
        } else if (node) {
          // set as a mountpoint
          node.mounted = mount;
  
          // add the new mount to the current mount's children
          if (node.mount) {
            node.mount.mounts.push(mount);
          }
        }
  
        return mountRoot;
      },unmount:function (mountpoint) {
        var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
        if (!FS.isMountpoint(lookup.node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
  
        // destroy the nodes for this mount, and all its child mounts
        var node = lookup.node;
        var mount = node.mounted;
        var mounts = FS.getMounts(mount);
  
        Object.keys(FS.nameTable).forEach(function (hash) {
          var current = FS.nameTable[hash];
  
          while (current) {
            var next = current.name_next;
  
            if (mounts.indexOf(current.mount) !== -1) {
              FS.destroyNode(current);
            }
  
            current = next;
          }
        });
  
        // no longer a mountpoint
        node.mounted = null;
  
        // remove this mount from the child mounts
        var idx = node.mount.mounts.indexOf(mount);
        assert(idx !== -1);
        node.mount.mounts.splice(idx, 1);
      },lookup:function (parent, name) {
        return parent.node_ops.lookup(parent, name);
      },mknod:function (path, mode, dev) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        if (!name || name === '.' || name === '..') {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var err = FS.mayCreate(parent, name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.mknod) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.mknod(parent, name, mode, dev);
      },create:function (path, mode) {
        mode = mode !== undefined ? mode : 438 /* 0666 */;
        mode &= 4095;
        mode |= 32768;
        return FS.mknod(path, mode, 0);
      },mkdir:function (path, mode) {
        mode = mode !== undefined ? mode : 511 /* 0777 */;
        mode &= 511 | 512;
        mode |= 16384;
        return FS.mknod(path, mode, 0);
      },mkdirTree:function (path, mode) {
        var dirs = path.split('/');
        var d = '';
        for (var i = 0; i < dirs.length; ++i) {
          if (!dirs[i]) continue;
          d += '/' + dirs[i];
          try {
            FS.mkdir(d, mode);
          } catch(e) {
            if (e.errno != ERRNO_CODES.EEXIST) throw e;
          }
        }
      },mkdev:function (path, mode, dev) {
        if (typeof(dev) === 'undefined') {
          dev = mode;
          mode = 438 /* 0666 */;
        }
        mode |= 8192;
        return FS.mknod(path, mode, dev);
      },symlink:function (oldpath, newpath) {
        if (!PATH.resolve(oldpath)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        var lookup = FS.lookupPath(newpath, { parent: true });
        var parent = lookup.node;
        if (!parent) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        var newname = PATH.basename(newpath);
        var err = FS.mayCreate(parent, newname);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.symlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.symlink(parent, newname, oldpath);
      },rename:function (old_path, new_path) {
        var old_dirname = PATH.dirname(old_path);
        var new_dirname = PATH.dirname(new_path);
        var old_name = PATH.basename(old_path);
        var new_name = PATH.basename(new_path);
        // parents must exist
        var lookup, old_dir, new_dir;
        try {
          lookup = FS.lookupPath(old_path, { parent: true });
          old_dir = lookup.node;
          lookup = FS.lookupPath(new_path, { parent: true });
          new_dir = lookup.node;
        } catch (e) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        if (!old_dir || !new_dir) throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        // need to be part of the same mount
        if (old_dir.mount !== new_dir.mount) {
          throw new FS.ErrnoError(ERRNO_CODES.EXDEV);
        }
        // source must exist
        var old_node = FS.lookupNode(old_dir, old_name);
        // old path should not be an ancestor of the new path
        var relative = PATH.relative(old_path, new_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        // new path should not be an ancestor of the old path
        relative = PATH.relative(new_path, old_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
        }
        // see if the new path already exists
        var new_node;
        try {
          new_node = FS.lookupNode(new_dir, new_name);
        } catch (e) {
          // not fatal
        }
        // early out if nothing needs to change
        if (old_node === new_node) {
          return;
        }
        // we'll need to delete the old entry
        var isdir = FS.isDir(old_node.mode);
        var err = FS.mayDelete(old_dir, old_name, isdir);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        // need delete permissions if we'll be overwriting.
        // need create permissions if new doesn't already exist.
        err = new_node ?
          FS.mayDelete(new_dir, new_name, isdir) :
          FS.mayCreate(new_dir, new_name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!old_dir.node_ops.rename) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(old_node) || (new_node && FS.isMountpoint(new_node))) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        // if we are going to change the parent, check write permissions
        if (new_dir !== old_dir) {
          err = FS.nodePermissions(old_dir, 'w');
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        try {
          if (FS.trackingDelegate['willMovePath']) {
            FS.trackingDelegate['willMovePath'](old_path, new_path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
        // remove the node from the lookup hash
        FS.hashRemoveNode(old_node);
        // do the underlying fs rename
        try {
          old_dir.node_ops.rename(old_node, new_dir, new_name);
        } catch (e) {
          throw e;
        } finally {
          // add the node back to the hash (in case node_ops.rename
          // changed its name)
          FS.hashAddNode(old_node);
        }
        try {
          if (FS.trackingDelegate['onMovePath']) FS.trackingDelegate['onMovePath'](old_path, new_path);
        } catch(e) {
          console.log("FS.trackingDelegate['onMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
      },rmdir:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, true);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.rmdir) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.rmdir(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        if (!node.node_ops.readdir) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        return node.node_ops.readdir(node);
      },unlink:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, false);
        if (err) {
          // According to POSIX, we should map EISDIR to EPERM, but
          // we instead do what Linux does (and we must, as we use
          // the musl linux libc).
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.unlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.unlink(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readlink:function (path) {
        var lookup = FS.lookupPath(path);
        var link = lookup.node;
        if (!link) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!link.node_ops.readlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        return PATH.resolve(FS.getPath(link.parent), link.node_ops.readlink(link));
      },stat:function (path, dontFollow) {
        var lookup = FS.lookupPath(path, { follow: !dontFollow });
        var node = lookup.node;
        if (!node) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!node.node_ops.getattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return node.node_ops.getattr(node);
      },lstat:function (path) {
        return FS.stat(path, true);
      },chmod:function (path, mode, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          mode: (mode & 4095) | (node.mode & ~4095),
          timestamp: Date.now()
        });
      },lchmod:function (path, mode) {
        FS.chmod(path, mode, true);
      },fchmod:function (fd, mode) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chmod(stream.node, mode);
      },chown:function (path, uid, gid, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          timestamp: Date.now()
          // we ignore the uid / gid for now
        });
      },lchown:function (path, uid, gid) {
        FS.chown(path, uid, gid, true);
      },fchown:function (fd, uid, gid) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chown(stream.node, uid, gid);
      },truncate:function (path, len) {
        if (len < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: true });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!FS.isFile(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var err = FS.nodePermissions(node, 'w');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        node.node_ops.setattr(node, {
          size: len,
          timestamp: Date.now()
        });
      },ftruncate:function (fd, len) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        FS.truncate(stream.node, len);
      },utime:function (path, atime, mtime) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        node.node_ops.setattr(node, {
          timestamp: Math.max(atime, mtime)
        });
      },open:function (path, flags, mode, fd_start, fd_end) {
        if (path === "") {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        flags = typeof flags === 'string' ? FS.modeStringToFlags(flags) : flags;
        mode = typeof mode === 'undefined' ? 438 /* 0666 */ : mode;
        if ((flags & 64)) {
          mode = (mode & 4095) | 32768;
        } else {
          mode = 0;
        }
        var node;
        if (typeof path === 'object') {
          node = path;
        } else {
          path = PATH.normalize(path);
          try {
            var lookup = FS.lookupPath(path, {
              follow: !(flags & 131072)
            });
            node = lookup.node;
          } catch (e) {
            // ignore
          }
        }
        // perhaps we need to create the node
        var created = false;
        if ((flags & 64)) {
          if (node) {
            // if O_CREAT and O_EXCL are set, error out if the node already exists
            if ((flags & 128)) {
              throw new FS.ErrnoError(ERRNO_CODES.EEXIST);
            }
          } else {
            // node doesn't exist, try to create it
            node = FS.mknod(path, mode, 0);
            created = true;
          }
        }
        if (!node) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        // can't truncate a device
        if (FS.isChrdev(node.mode)) {
          flags &= ~512;
        }
        // if asked only for a directory, then this must be one
        if ((flags & 65536) && !FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        // check permissions, if this is not a file we just created now (it is ok to
        // create and write to a file with read-only permissions; it is read-only
        // for later use)
        if (!created) {
          var err = FS.mayOpen(node, flags);
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        // do truncation if necessary
        if ((flags & 512)) {
          FS.truncate(node, 0);
        }
        // we've already handled these, don't pass down to the underlying vfs
        flags &= ~(128 | 512);
  
        // register the stream with the filesystem
        var stream = FS.createStream({
          node: node,
          path: FS.getPath(node),  // we want the absolute path to the node
          flags: flags,
          seekable: true,
          position: 0,
          stream_ops: node.stream_ops,
          // used by the file family libc calls (fopen, fwrite, ferror, etc.)
          ungotten: [],
          error: false
        }, fd_start, fd_end);
        // call the new stream's open function
        if (stream.stream_ops.open) {
          stream.stream_ops.open(stream);
        }
        if (Module['logReadFiles'] && !(flags & 1)) {
          if (!FS.readFiles) FS.readFiles = {};
          if (!(path in FS.readFiles)) {
            FS.readFiles[path] = 1;
            Module['printErr']('read file: ' + path);
          }
        }
        try {
          if (FS.trackingDelegate['onOpenFile']) {
            var trackingFlags = 0;
            if ((flags & 2097155) !== 1) {
              trackingFlags |= FS.tracking.openFlags.READ;
            }
            if ((flags & 2097155) !== 0) {
              trackingFlags |= FS.tracking.openFlags.WRITE;
            }
            FS.trackingDelegate['onOpenFile'](path, trackingFlags);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['onOpenFile']('"+path+"', flags) threw an exception: " + e.message);
        }
        return stream;
      },close:function (stream) {
        if (stream.getdents) stream.getdents = null; // free readdir state
        try {
          if (stream.stream_ops.close) {
            stream.stream_ops.close(stream);
          }
        } catch (e) {
          throw e;
        } finally {
          FS.closeStream(stream.fd);
        }
      },llseek:function (stream, offset, whence) {
        if (!stream.seekable || !stream.stream_ops.llseek) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        stream.position = stream.stream_ops.llseek(stream, offset, whence);
        stream.ungotten = [];
        return stream.position;
      },read:function (stream, buffer, offset, length, position) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.read) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var seeking = true;
        if (typeof position === 'undefined') {
          position = stream.position;
          seeking = false;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesRead = stream.stream_ops.read(stream, buffer, offset, length, position);
        if (!seeking) stream.position += bytesRead;
        return bytesRead;
      },write:function (stream, buffer, offset, length, position, canOwn) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.write) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if (stream.flags & 1024) {
          // seek to the end before writing in append mode
          FS.llseek(stream, 0, 2);
        }
        var seeking = true;
        if (typeof position === 'undefined') {
          position = stream.position;
          seeking = false;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesWritten = stream.stream_ops.write(stream, buffer, offset, length, position, canOwn);
        if (!seeking) stream.position += bytesWritten;
        try {
          if (stream.path && FS.trackingDelegate['onWriteToFile']) FS.trackingDelegate['onWriteToFile'](stream.path);
        } catch(e) {
          console.log("FS.trackingDelegate['onWriteToFile']('"+path+"') threw an exception: " + e.message);
        }
        return bytesWritten;
      },allocate:function (stream, offset, length) {
        if (offset < 0 || length <= 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (!FS.isFile(stream.node.mode) && !FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        if (!stream.stream_ops.allocate) {
          throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
        }
        stream.stream_ops.allocate(stream, offset, length);
      },mmap:function (stream, buffer, offset, length, position, prot, flags) {
        // TODO if PROT is PROT_WRITE, make sure we have write access
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EACCES);
        }
        if (!stream.stream_ops.mmap) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        return stream.stream_ops.mmap(stream, buffer, offset, length, position, prot, flags);
      },msync:function (stream, buffer, offset, length, mmapFlags) {
        if (!stream || !stream.stream_ops.msync) {
          return 0;
        }
        return stream.stream_ops.msync(stream, buffer, offset, length, mmapFlags);
      },munmap:function (stream) {
        return 0;
      },ioctl:function (stream, cmd, arg) {
        if (!stream.stream_ops.ioctl) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTTY);
        }
        return stream.stream_ops.ioctl(stream, cmd, arg);
      },readFile:function (path, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'r';
        opts.encoding = opts.encoding || 'binary';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var ret;
        var stream = FS.open(path, opts.flags);
        var stat = FS.stat(path);
        var length = stat.size;
        var buf = new Uint8Array(length);
        FS.read(stream, buf, 0, length, 0);
        if (opts.encoding === 'utf8') {
          ret = UTF8ArrayToString(buf, 0);
        } else if (opts.encoding === 'binary') {
          ret = buf;
        }
        FS.close(stream);
        return ret;
      },writeFile:function (path, data, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'w';
        opts.encoding = opts.encoding || 'utf8';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var stream = FS.open(path, opts.flags, opts.mode);
        if (opts.encoding === 'utf8') {
          var buf = new Uint8Array(lengthBytesUTF8(data)+1);
          var actualNumBytes = stringToUTF8Array(data, buf, 0, buf.length);
          FS.write(stream, buf, 0, actualNumBytes, 0, opts.canOwn);
        } else if (opts.encoding === 'binary') {
          FS.write(stream, data, 0, data.length, 0, opts.canOwn);
        }
        FS.close(stream);
      },cwd:function () {
        return FS.currentPath;
      },chdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        if (lookup.node === null) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!FS.isDir(lookup.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        var err = FS.nodePermissions(lookup.node, 'x');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        FS.currentPath = lookup.path;
      },createDefaultDirectories:function () {
        FS.mkdir('/tmp');
        FS.mkdir('/home');
        FS.mkdir('/home/web_user');
      },createDefaultDevices:function () {
        // create /dev
        FS.mkdir('/dev');
        // setup /dev/null
        FS.registerDevice(FS.makedev(1, 3), {
          read: function() { return 0; },
          write: function(stream, buffer, offset, length, pos) { return length; }
        });
        FS.mkdev('/dev/null', FS.makedev(1, 3));
        // setup /dev/tty and /dev/tty1
        // stderr needs to print output using Module['printErr']
        // so we register a second tty just for it.
        TTY.register(FS.makedev(5, 0), TTY.default_tty_ops);
        TTY.register(FS.makedev(6, 0), TTY.default_tty1_ops);
        FS.mkdev('/dev/tty', FS.makedev(5, 0));
        FS.mkdev('/dev/tty1', FS.makedev(6, 0));
        // setup /dev/[u]random
        var random_device;
        if (typeof crypto !== 'undefined') {
          // for modern web browsers
          var randomBuffer = new Uint8Array(1);
          random_device = function() { crypto.getRandomValues(randomBuffer); return randomBuffer[0]; };
        } else if (ENVIRONMENT_IS_NODE) {
          // for nodejs
          random_device = function() { return require('crypto').randomBytes(1)[0]; };
        } else {
          // default for ES5 platforms
          random_device = function() { return (Math.random()*256)|0; };
        }
        FS.createDevice('/dev', 'random', random_device);
        FS.createDevice('/dev', 'urandom', random_device);
        // we're not going to emulate the actual shm device,
        // just create the tmp dirs that reside in it commonly
        FS.mkdir('/dev/shm');
        FS.mkdir('/dev/shm/tmp');
      },createSpecialDirectories:function () {
        // create /proc/self/fd which allows /proc/self/fd/6 => readlink gives the name of the stream for fd 6 (see test_unistd_ttyname)
        FS.mkdir('/proc');
        FS.mkdir('/proc/self');
        FS.mkdir('/proc/self/fd');
        FS.mount({
          mount: function() {
            var node = FS.createNode('/proc/self', 'fd', 16384 | 511 /* 0777 */, 73);
            node.node_ops = {
              lookup: function(parent, name) {
                var fd = +name;
                var stream = FS.getStream(fd);
                if (!stream) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
                var ret = {
                  parent: null,
                  mount: { mountpoint: 'fake' },
                  node_ops: { readlink: function() { return stream.path } }
                };
                ret.parent = ret; // make it look like a simple root node
                return ret;
              }
            };
            return node;
          }
        }, {}, '/proc/self/fd');
      },createStandardStreams:function () {
        // TODO deprecate the old functionality of a single
        // input / output callback and that utilizes FS.createDevice
        // and instead require a unique set of stream ops
  
        // by default, we symlink the standard streams to the
        // default tty devices. however, if the standard streams
        // have been overwritten we create a unique device for
        // them instead.
        if (Module['stdin']) {
          FS.createDevice('/dev', 'stdin', Module['stdin']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdin');
        }
        if (Module['stdout']) {
          FS.createDevice('/dev', 'stdout', null, Module['stdout']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdout');
        }
        if (Module['stderr']) {
          FS.createDevice('/dev', 'stderr', null, Module['stderr']);
        } else {
          FS.symlink('/dev/tty1', '/dev/stderr');
        }
  
        // open default streams for the stdin, stdout and stderr devices
        var stdin = FS.open('/dev/stdin', 'r');
        assert(stdin.fd === 0, 'invalid handle for stdin (' + stdin.fd + ')');
  
        var stdout = FS.open('/dev/stdout', 'w');
        assert(stdout.fd === 1, 'invalid handle for stdout (' + stdout.fd + ')');
  
        var stderr = FS.open('/dev/stderr', 'w');
        assert(stderr.fd === 2, 'invalid handle for stderr (' + stderr.fd + ')');
      },ensureErrnoError:function () {
        if (FS.ErrnoError) return;
        FS.ErrnoError = function ErrnoError(errno, node) {
          //Module.printErr(stackTrace()); // useful for debugging
          this.node = node;
          this.setErrno = function(errno) {
            this.errno = errno;
            for (var key in ERRNO_CODES) {
              if (ERRNO_CODES[key] === errno) {
                this.code = key;
                break;
              }
            }
          };
          this.setErrno(errno);
          this.message = ERRNO_MESSAGES[errno];
          if (this.stack) this.stack = demangleAll(this.stack);
        };
        FS.ErrnoError.prototype = new Error();
        FS.ErrnoError.prototype.constructor = FS.ErrnoError;
        // Some errors may happen quite a bit, to avoid overhead we reuse them (and suffer a lack of stack info)
        [ERRNO_CODES.ENOENT].forEach(function(code) {
          FS.genericErrors[code] = new FS.ErrnoError(code);
          FS.genericErrors[code].stack = '<generic error, no stack>';
        });
      },staticInit:function () {
        FS.ensureErrnoError();
  
        FS.nameTable = new Array(4096);
  
        FS.mount(MEMFS, {}, '/');
  
        FS.createDefaultDirectories();
        FS.createDefaultDevices();
        FS.createSpecialDirectories();
  
        FS.filesystems = {
          'MEMFS': MEMFS,
          'IDBFS': IDBFS,
          'NODEFS': NODEFS,
          'WORKERFS': WORKERFS,
        };
      },init:function (input, output, error) {
        assert(!FS.init.initialized, 'FS.init was previously called. If you want to initialize later with custom parameters, remove any earlier calls (note that one is automatically added to the generated code)');
        FS.init.initialized = true;
  
        FS.ensureErrnoError();
  
        // Allow Module.stdin etc. to provide defaults, if none explicitly passed to us here
        Module['stdin'] = input || Module['stdin'];
        Module['stdout'] = output || Module['stdout'];
        Module['stderr'] = error || Module['stderr'];
  
        FS.createStandardStreams();
      },quit:function () {
        FS.init.initialized = false;
        // force-flush all streams, so we get musl std streams printed out
        var fflush = Module['_fflush'];
        if (fflush) fflush(0);
        // close all of our streams
        for (var i = 0; i < FS.streams.length; i++) {
          var stream = FS.streams[i];
          if (!stream) {
            continue;
          }
          FS.close(stream);
        }
      },getMode:function (canRead, canWrite) {
        var mode = 0;
        if (canRead) mode |= 292 | 73;
        if (canWrite) mode |= 146;
        return mode;
      },joinPath:function (parts, forceRelative) {
        var path = PATH.join.apply(null, parts);
        if (forceRelative && path[0] == '/') path = path.substr(1);
        return path;
      },absolutePath:function (relative, base) {
        return PATH.resolve(base, relative);
      },standardizePath:function (path) {
        return PATH.normalize(path);
      },findObject:function (path, dontResolveLastLink) {
        var ret = FS.analyzePath(path, dontResolveLastLink);
        if (ret.exists) {
          return ret.object;
        } else {
          ___setErrNo(ret.error);
          return null;
        }
      },analyzePath:function (path, dontResolveLastLink) {
        // operate from within the context of the symlink's target
        try {
          var lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          path = lookup.path;
        } catch (e) {
        }
        var ret = {
          isRoot: false, exists: false, error: 0, name: null, path: null, object: null,
          parentExists: false, parentPath: null, parentObject: null
        };
        try {
          var lookup = FS.lookupPath(path, { parent: true });
          ret.parentExists = true;
          ret.parentPath = lookup.path;
          ret.parentObject = lookup.node;
          ret.name = PATH.basename(path);
          lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          ret.exists = true;
          ret.path = lookup.path;
          ret.object = lookup.node;
          ret.name = lookup.node.name;
          ret.isRoot = lookup.path === '/';
        } catch (e) {
          ret.error = e.errno;
        };
        return ret;
      },createFolder:function (parent, name, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.mkdir(path, mode);
      },createPath:function (parent, path, canRead, canWrite) {
        parent = typeof parent === 'string' ? parent : FS.getPath(parent);
        var parts = path.split('/').reverse();
        while (parts.length) {
          var part = parts.pop();
          if (!part) continue;
          var current = PATH.join2(parent, part);
          try {
            FS.mkdir(current);
          } catch (e) {
            // ignore EEXIST
          }
          parent = current;
        }
        return current;
      },createFile:function (parent, name, properties, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.create(path, mode);
      },createDataFile:function (parent, name, data, canRead, canWrite, canOwn) {
        var path = name ? PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name) : parent;
        var mode = FS.getMode(canRead, canWrite);
        var node = FS.create(path, mode);
        if (data) {
          if (typeof data === 'string') {
            var arr = new Array(data.length);
            for (var i = 0, len = data.length; i < len; ++i) arr[i] = data.charCodeAt(i);
            data = arr;
          }
          // make sure we can write to the file
          FS.chmod(node, mode | 146);
          var stream = FS.open(node, 'w');
          FS.write(stream, data, 0, data.length, 0, canOwn);
          FS.close(stream);
          FS.chmod(node, mode);
        }
        return node;
      },createDevice:function (parent, name, input, output) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(!!input, !!output);
        if (!FS.createDevice.major) FS.createDevice.major = 64;
        var dev = FS.makedev(FS.createDevice.major++, 0);
        // Create a fake device that a set of stream ops to emulate
        // the old behavior.
        FS.registerDevice(dev, {
          open: function(stream) {
            stream.seekable = false;
          },
          close: function(stream) {
            // flush any pending line data
            if (output && output.buffer && output.buffer.length) {
              output(10);
            }
          },
          read: function(stream, buffer, offset, length, pos /* ignored */) {
            var bytesRead = 0;
            for (var i = 0; i < length; i++) {
              var result;
              try {
                result = input();
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
              if (result === undefined && bytesRead === 0) {
                throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
              }
              if (result === null || result === undefined) break;
              bytesRead++;
              buffer[offset+i] = result;
            }
            if (bytesRead) {
              stream.node.timestamp = Date.now();
            }
            return bytesRead;
          },
          write: function(stream, buffer, offset, length, pos) {
            for (var i = 0; i < length; i++) {
              try {
                output(buffer[offset+i]);
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
            }
            if (length) {
              stream.node.timestamp = Date.now();
            }
            return i;
          }
        });
        return FS.mkdev(path, mode, dev);
      },createLink:function (parent, name, target, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        return FS.symlink(target, path);
      },forceLoadFile:function (obj) {
        if (obj.isDevice || obj.isFolder || obj.link || obj.contents) return true;
        var success = true;
        if (typeof XMLHttpRequest !== 'undefined') {
          throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.");
        } else if (Module['read']) {
          // Command-line.
          try {
            // WARNING: Can't read binary files in V8's d8 or tracemonkey's js, as
            //          read() will try to parse UTF8.
            obj.contents = intArrayFromString(Module['read'](obj.url), true);
            obj.usedBytes = obj.contents.length;
          } catch (e) {
            success = false;
          }
        } else {
          throw new Error('Cannot load without read() or XMLHttpRequest.');
        }
        if (!success) ___setErrNo(ERRNO_CODES.EIO);
        return success;
      },createLazyFile:function (parent, name, url, canRead, canWrite) {
        // Lazy chunked Uint8Array (implements get and length from Uint8Array). Actual getting is abstracted away for eventual reuse.
        function LazyUint8Array() {
          this.lengthKnown = false;
          this.chunks = []; // Loaded chunks. Index is the chunk number
        }
        LazyUint8Array.prototype.get = function LazyUint8Array_get(idx) {
          if (idx > this.length-1 || idx < 0) {
            return undefined;
          }
          var chunkOffset = idx % this.chunkSize;
          var chunkNum = (idx / this.chunkSize)|0;
          return this.getter(chunkNum)[chunkOffset];
        }
        LazyUint8Array.prototype.setDataGetter = function LazyUint8Array_setDataGetter(getter) {
          this.getter = getter;
        }
        LazyUint8Array.prototype.cacheLength = function LazyUint8Array_cacheLength() {
          // Find length
          var xhr = new XMLHttpRequest();
          xhr.open('HEAD', url, false);
          xhr.send(null);
          if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
          var datalength = Number(xhr.getResponseHeader("Content-length"));
          var header;
          var hasByteServing = (header = xhr.getResponseHeader("Accept-Ranges")) && header === "bytes";
          var usesGzip = (header = xhr.getResponseHeader("Content-Encoding")) && header === "gzip";
  
          var chunkSize = 1024*1024; // Chunk size in bytes
  
          if (!hasByteServing) chunkSize = datalength;
  
          // Function to get a range from the remote URL.
          var doXHR = (function(from, to) {
            if (from > to) throw new Error("invalid range (" + from + ", " + to + ") or no bytes requested!");
            if (to > datalength-1) throw new Error("only " + datalength + " bytes available! programmer error!");
  
            // TODO: Use mozResponseArrayBuffer, responseStream, etc. if available.
            var xhr = new XMLHttpRequest();
            xhr.open('GET', url, false);
            if (datalength !== chunkSize) xhr.setRequestHeader("Range", "bytes=" + from + "-" + to);
  
            // Some hints to the browser that we want binary data.
            if (typeof Uint8Array != 'undefined') xhr.responseType = 'arraybuffer';
            if (xhr.overrideMimeType) {
              xhr.overrideMimeType('text/plain; charset=x-user-defined');
            }
  
            xhr.send(null);
            if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
            if (xhr.response !== undefined) {
              return new Uint8Array(xhr.response || []);
            } else {
              return intArrayFromString(xhr.responseText || '', true);
            }
          });
          var lazyArray = this;
          lazyArray.setDataGetter(function(chunkNum) {
            var start = chunkNum * chunkSize;
            var end = (chunkNum+1) * chunkSize - 1; // including this byte
            end = Math.min(end, datalength-1); // if datalength-1 is selected, this is the last block
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") {
              lazyArray.chunks[chunkNum] = doXHR(start, end);
            }
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") throw new Error("doXHR failed!");
            return lazyArray.chunks[chunkNum];
          });
  
          if (usesGzip || !datalength) {
            // if the server uses gzip or doesn't supply the length, we have to download the whole file to get the (uncompressed) length
            chunkSize = datalength = 1; // this will force getter(0)/doXHR do download the whole file
            datalength = this.getter(0).length;
            chunkSize = datalength;
            console.log("LazyFiles on gzip forces download of the whole file when length is accessed");
          }
  
          this._length = datalength;
          this._chunkSize = chunkSize;
          this.lengthKnown = true;
        }
        if (typeof XMLHttpRequest !== 'undefined') {
          if (!ENVIRONMENT_IS_WORKER) throw 'Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc';
          var lazyArray = new LazyUint8Array();
          Object.defineProperties(lazyArray, {
            length: {
              get: function() {
                if(!this.lengthKnown) {
                  this.cacheLength();
                }
                return this._length;
              }
            },
            chunkSize: {
              get: function() {
                if(!this.lengthKnown) {
                  this.cacheLength();
                }
                return this._chunkSize;
              }
            }
          });
  
          var properties = { isDevice: false, contents: lazyArray };
        } else {
          var properties = { isDevice: false, url: url };
        }
  
        var node = FS.createFile(parent, name, properties, canRead, canWrite);
        // This is a total hack, but I want to get this lazy file code out of the
        // core of MEMFS. If we want to keep this lazy file concept I feel it should
        // be its own thin LAZYFS proxying calls to MEMFS.
        if (properties.contents) {
          node.contents = properties.contents;
        } else if (properties.url) {
          node.contents = null;
          node.url = properties.url;
        }
        // Add a function that defers querying the file size until it is asked the first time.
        Object.defineProperties(node, {
          usedBytes: {
            get: function() { return this.contents.length; }
          }
        });
        // override each stream op with one that tries to force load the lazy file first
        var stream_ops = {};
        var keys = Object.keys(node.stream_ops);
        keys.forEach(function(key) {
          var fn = node.stream_ops[key];
          stream_ops[key] = function forceLoadLazyFile() {
            if (!FS.forceLoadFile(node)) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            return fn.apply(null, arguments);
          };
        });
        // use a custom read function
        stream_ops.read = function stream_ops_read(stream, buffer, offset, length, position) {
          if (!FS.forceLoadFile(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EIO);
          }
          var contents = stream.node.contents;
          if (position >= contents.length)
            return 0;
          var size = Math.min(contents.length - position, length);
          assert(size >= 0);
          if (contents.slice) { // normal array
            for (var i = 0; i < size; i++) {
              buffer[offset + i] = contents[position + i];
            }
          } else {
            for (var i = 0; i < size; i++) { // LazyUint8Array from sync binary XHR
              buffer[offset + i] = contents.get(position + i);
            }
          }
          return size;
        };
        node.stream_ops = stream_ops;
        return node;
      },createPreloadedFile:function (parent, name, url, canRead, canWrite, onload, onerror, dontCreateFile, canOwn, preFinish) {
        Browser.init(); // XXX perhaps this method should move onto Browser?
        // TODO we should allow people to just pass in a complete filename instead
        // of parent and name being that we just join them anyways
        var fullname = name ? PATH.resolve(PATH.join2(parent, name)) : parent;
        var dep = getUniqueRunDependency('cp ' + fullname); // might have several active requests for the same fullname
        function processData(byteArray) {
          function finish(byteArray) {
            if (preFinish) preFinish();
            if (!dontCreateFile) {
              FS.createDataFile(parent, name, byteArray, canRead, canWrite, canOwn);
            }
            if (onload) onload();
            removeRunDependency(dep);
          }
          var handled = false;
          Module['preloadPlugins'].forEach(function(plugin) {
            if (handled) return;
            if (plugin['canHandle'](fullname)) {
              plugin['handle'](byteArray, fullname, finish, function() {
                if (onerror) onerror();
                removeRunDependency(dep);
              });
              handled = true;
            }
          });
          if (!handled) finish(byteArray);
        }
        addRunDependency(dep);
        if (typeof url == 'string') {
          Browser.asyncLoad(url, function(byteArray) {
            processData(byteArray);
          }, onerror);
        } else {
          processData(url);
        }
      },indexedDB:function () {
        return window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
      },DB_NAME:function () {
        return 'EM_FS_' + window.location.pathname;
      },DB_VERSION:20,DB_STORE_NAME:"FILE_DATA",saveFilesToDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = function openRequest_onupgradeneeded() {
          console.log('creating db');
          var db = openRequest.result;
          db.createObjectStore(FS.DB_STORE_NAME);
        };
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          var transaction = db.transaction([FS.DB_STORE_NAME], 'readwrite');
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var putRequest = files.put(FS.analyzePath(path).object.contents, path);
            putRequest.onsuccess = function putRequest_onsuccess() { ok++; if (ok + fail == total) finish() };
            putRequest.onerror = function putRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      },loadFilesFromDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = onerror; // no database to load from
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          try {
            var transaction = db.transaction([FS.DB_STORE_NAME], 'readonly');
          } catch(e) {
            onerror(e);
            return;
          }
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var getRequest = files.get(path);
            getRequest.onsuccess = function getRequest_onsuccess() {
              if (FS.analyzePath(path).exists) {
                FS.unlink(path);
              }
              FS.createDataFile(PATH.dirname(path), PATH.basename(path), getRequest.result, true, true, true);
              ok++;
              if (ok + fail == total) finish();
            };
            getRequest.onerror = function getRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      }};var SYSCALLS={DEFAULT_POLLMASK:5,mappings:{},umask:511,calculateAt:function (dirfd, path) {
        if (path[0] !== '/') {
          // relative path
          var dir;
          if (dirfd === -100) {
            dir = FS.cwd();
          } else {
            var dirstream = FS.getStream(dirfd);
            if (!dirstream) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
            dir = dirstream.path;
          }
          path = PATH.join2(dir, path);
        }
        return path;
      },doStat:function (func, path, buf) {
        try {
          var stat = func(path);
        } catch (e) {
          if (e && e.node && PATH.normalize(path) !== PATH.normalize(FS.getPath(e.node))) {
            // an error occurred while trying to look up the path; we should just report ENOTDIR
            return -ERRNO_CODES.ENOTDIR;
          }
          throw e;
        }
        HEAP32[((buf)>>2)]=stat.dev;
        HEAP32[(((buf)+(4))>>2)]=0;
        HEAP32[(((buf)+(8))>>2)]=stat.ino;
        HEAP32[(((buf)+(12))>>2)]=stat.mode;
        HEAP32[(((buf)+(16))>>2)]=stat.nlink;
        HEAP32[(((buf)+(20))>>2)]=stat.uid;
        HEAP32[(((buf)+(24))>>2)]=stat.gid;
        HEAP32[(((buf)+(28))>>2)]=stat.rdev;
        HEAP32[(((buf)+(32))>>2)]=0;
        HEAP32[(((buf)+(36))>>2)]=stat.size;
        HEAP32[(((buf)+(40))>>2)]=4096;
        HEAP32[(((buf)+(44))>>2)]=stat.blocks;
        HEAP32[(((buf)+(48))>>2)]=(stat.atime.getTime() / 1000)|0;
        HEAP32[(((buf)+(52))>>2)]=0;
        HEAP32[(((buf)+(56))>>2)]=(stat.mtime.getTime() / 1000)|0;
        HEAP32[(((buf)+(60))>>2)]=0;
        HEAP32[(((buf)+(64))>>2)]=(stat.ctime.getTime() / 1000)|0;
        HEAP32[(((buf)+(68))>>2)]=0;
        HEAP32[(((buf)+(72))>>2)]=stat.ino;
        return 0;
      },doMsync:function (addr, stream, len, flags) {
        var buffer = new Uint8Array(HEAPU8.subarray(addr, addr + len));
        FS.msync(stream, buffer, 0, len, flags);
      },doMkdir:function (path, mode) {
        // remove a trailing slash, if one - /a/b/ has basename of '', but
        // we want to create b in the context of this function
        path = PATH.normalize(path);
        if (path[path.length-1] === '/') path = path.substr(0, path.length-1);
        FS.mkdir(path, mode, 0);
        return 0;
      },doMknod:function (path, mode, dev) {
        // we don't want this in the JS API as it uses mknod to create all nodes.
        switch (mode & 61440) {
          case 32768:
          case 8192:
          case 24576:
          case 4096:
          case 49152:
            break;
          default: return -ERRNO_CODES.EINVAL;
        }
        FS.mknod(path, mode, dev);
        return 0;
      },doReadlink:function (path, buf, bufsize) {
        if (bufsize <= 0) return -ERRNO_CODES.EINVAL;
        var ret = FS.readlink(path);
  
        var len = Math.min(bufsize, lengthBytesUTF8(ret));
        var endChar = HEAP8[buf+len];
        stringToUTF8(ret, buf, bufsize+1);
        // readlink is one of the rare functions that write out a C string, but does never append a null to the output buffer(!)
        // stringToUTF8() always appends a null byte, so restore the character under the null byte after the write.
        HEAP8[buf+len] = endChar;
  
        return len;
      },doAccess:function (path, amode) {
        if (amode & ~7) {
          // need a valid mode
          return -ERRNO_CODES.EINVAL;
        }
        var node;
        var lookup = FS.lookupPath(path, { follow: true });
        node = lookup.node;
        var perms = '';
        if (amode & 4) perms += 'r';
        if (amode & 2) perms += 'w';
        if (amode & 1) perms += 'x';
        if (perms /* otherwise, they've just passed F_OK */ && FS.nodePermissions(node, perms)) {
          return -ERRNO_CODES.EACCES;
        }
        return 0;
      },doDup:function (path, flags, suggestFD) {
        var suggest = FS.getStream(suggestFD);
        if (suggest) FS.close(suggest);
        return FS.open(path, flags, 0, suggestFD, suggestFD).fd;
      },doReadv:function (stream, iov, iovcnt, offset) {
        var ret = 0;
        for (var i = 0; i < iovcnt; i++) {
          var ptr = HEAP32[(((iov)+(i*8))>>2)];
          var len = HEAP32[(((iov)+(i*8 + 4))>>2)];
          var curr = FS.read(stream, HEAP8,ptr, len, offset);
          if (curr < 0) return -1;
          ret += curr;
          if (curr < len) break; // nothing more to read
        }
        return ret;
      },doWritev:function (stream, iov, iovcnt, offset) {
        var ret = 0;
        for (var i = 0; i < iovcnt; i++) {
          var ptr = HEAP32[(((iov)+(i*8))>>2)];
          var len = HEAP32[(((iov)+(i*8 + 4))>>2)];
          var curr = FS.write(stream, HEAP8,ptr, len, offset);
          if (curr < 0) return -1;
          ret += curr;
        }
        return ret;
      },varargs:0,get:function (varargs) {
        SYSCALLS.varargs += 4;
        var ret = HEAP32[(((SYSCALLS.varargs)-(4))>>2)];
        return ret;
      },getStr:function () {
        var ret = Pointer_stringify(SYSCALLS.get());
        return ret;
      },getStreamFromFD:function () {
        var stream = FS.getStream(SYSCALLS.get());
        if (!stream) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        return stream;
      },getSocketFromFD:function () {
        var socket = SOCKFS.getSocket(SYSCALLS.get());
        if (!socket) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        return socket;
      },getSocketAddress:function (allowNull) {
        var addrp = SYSCALLS.get(), addrlen = SYSCALLS.get();
        if (allowNull && addrp === 0) return null;
        var info = __read_sockaddr(addrp, addrlen);
        if (info.errno) throw new FS.ErrnoError(info.errno);
        info.addr = DNS.lookup_addr(info.addr) || info.addr;
        return info;
      },get64:function () {
        var low = SYSCALLS.get(), high = SYSCALLS.get();
        if (low >= 0) assert(high === 0);
        else assert(high === -1);
        return low;
      },getZero:function () {
        assert(SYSCALLS.get() === 0);
      }};function ___syscall195(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // SYS_stat64
      var path = SYSCALLS.getStr(), buf = SYSCALLS.get();
      return SYSCALLS.doStat(FS.stat, path, buf);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall5(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // open
      var pathname = SYSCALLS.getStr(), flags = SYSCALLS.get(), mode = SYSCALLS.get() // optional TODO
      var stream = FS.open(pathname, flags, mode);
      return stream.fd;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___lock() {}

  function ___unlock() {}

  function ___syscall6(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // close
      var stream = SYSCALLS.getStreamFromFD();
      FS.close(stream);
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  
  
  var cttz_i8 = allocate([8,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,7,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0], "i8", ALLOC_STATIC); 
  Module["_llvm_cttz_i32"] = _llvm_cttz_i32; 
  Module["___udivmoddi4"] = ___udivmoddi4; 
  Module["___udivdi3"] = ___udivdi3;

   
  Module["_sbrk"] = _sbrk;

  
  
  function _emscripten_memcpy_big(dest, src, num) {
      HEAPU8.set(HEAPU8.subarray(src, src+num), dest);
      return dest;
    } 
  Module["_memcpy"] = _memcpy; 
  Module["_memmove"] = _memmove;

   
  Module["___uremdi3"] = ___uremdi3;


  
  function __exit(status) {
      // void _exit(int status);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/exit.html
      Module['exit'](status);
    }function _exit(status) {
      __exit(status);
    }

   
  Module["_llvm_bswap_i32"] = _llvm_bswap_i32;

  function ___syscall140(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // llseek
      var stream = SYSCALLS.getStreamFromFD(), offset_high = SYSCALLS.get(), offset_low = SYSCALLS.get(), result = SYSCALLS.get(), whence = SYSCALLS.get();
      var offset = offset_low;
      assert(offset_high === 0);
      FS.llseek(stream, offset, whence);
      HEAP32[((result)>>2)]=stream.position;
      if (stream.getdents && offset === 0 && whence === 0) stream.getdents = null; // reset readdir state
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall146(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // writev
      var stream = SYSCALLS.getStreamFromFD(), iov = SYSCALLS.get(), iovcnt = SYSCALLS.get();
      return SYSCALLS.doWritev(stream, iov, iovcnt);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall54(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // ioctl
      var stream = SYSCALLS.getStreamFromFD(), op = SYSCALLS.get();
      switch (op) {
        case 21505: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return 0;
        }
        case 21506: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return 0; // no-op, not actually adjusting terminal settings
        }
        case 21519: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          var argp = SYSCALLS.get();
          HEAP32[((argp)>>2)]=0;
          return 0;
        }
        case 21520: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return -ERRNO_CODES.EINVAL; // not supported
        }
        case 21531: {
          var argp = SYSCALLS.get();
          return FS.ioctl(stream, op, argp);
        }
        case 21523: {
          // TODO: in theory we should write to the winsize struct that gets
          // passed in, but for now musl doesn't read anything on it
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return 0;
        }
        default: abort('bad ioctl syscall ' + op);
      }
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall221(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // fcntl64
      var stream = SYSCALLS.getStreamFromFD(), cmd = SYSCALLS.get();
      switch (cmd) {
        case 0: {
          var arg = SYSCALLS.get();
          if (arg < 0) {
            return -ERRNO_CODES.EINVAL;
          }
          var newStream;
          newStream = FS.open(stream.path, stream.flags, 0, arg);
          return newStream.fd;
        }
        case 1:
        case 2:
          return 0;  // FD_CLOEXEC makes no sense for a single process.
        case 3:
          return stream.flags;
        case 4: {
          var arg = SYSCALLS.get();
          stream.flags |= arg;
          return 0;
        }
        case 12:
        case 12: {
          var arg = SYSCALLS.get();
          var offset = 0;
          // We're always unlocked.
          HEAP16[(((arg)+(offset))>>1)]=2;
          return 0;
        }
        case 13:
        case 14:
        case 13:
        case 14:
          return 0; // Pretend that the locking is successful.
        case 16:
        case 8:
          return -ERRNO_CODES.EINVAL; // These are for sockets. We don't have them fully implemented yet.
        case 9:
          // musl trusts getown return values, due to a bug where they must be, as they overlap with errors. just return -1 here, so fnctl() returns that, and we set errno ourselves.
          ___setErrNo(ERRNO_CODES.EINVAL);
          return -1;
        default: {
          return -ERRNO_CODES.EINVAL;
        }
      }
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall145(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // readv
      var stream = SYSCALLS.getStreamFromFD(), iov = SYSCALLS.get(), iovcnt = SYSCALLS.get();
      return SYSCALLS.doReadv(stream, iov, iovcnt);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }
___buildEnvironment(ENV);;
FS.staticInit();__ATINIT__.unshift(function() { if (!Module["noFSInit"] && !FS.init.initialized) FS.init() });__ATMAIN__.push(function() { FS.ignorePermissions = false });__ATEXIT__.push(function() { FS.quit() });Module["FS_createFolder"] = FS.createFolder;Module["FS_createPath"] = FS.createPath;Module["FS_createDataFile"] = FS.createDataFile;Module["FS_createPreloadedFile"] = FS.createPreloadedFile;Module["FS_createLazyFile"] = FS.createLazyFile;Module["FS_createLink"] = FS.createLink;Module["FS_createDevice"] = FS.createDevice;Module["FS_unlink"] = FS.unlink;;
__ATINIT__.unshift(function() { TTY.init() });__ATEXIT__.push(function() { TTY.shutdown() });;
if (ENVIRONMENT_IS_NODE) { var fs = require("fs"); var NODEJS_PATH = require("path"); NODEFS.staticInit(); };
DYNAMICTOP_PTR = allocate(1, "i32", ALLOC_STATIC);

STACK_BASE = STACKTOP = Runtime.alignMemory(STATICTOP);

STACK_MAX = STACK_BASE + TOTAL_STACK;

DYNAMIC_BASE = Runtime.alignMemory(STACK_MAX);

HEAP32[DYNAMICTOP_PTR>>2] = DYNAMIC_BASE;

staticSealed = true; // seal the static portion of memory

assert(DYNAMIC_BASE < TOTAL_MEMORY, "TOTAL_MEMORY not big enough for stack");



function nullFunc_ii(x) { Module["printErr"]("Invalid function pointer called with signature 'ii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_vii(x) { Module["printErr"]("Invalid function pointer called with signature 'vii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iii(x) { Module["printErr"]("Invalid function pointer called with signature 'iii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function invoke_ii(index,a1) {
  try {
    return Module["dynCall_ii"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function jsCall_ii(index,a1) {
    return Runtime.functionPointers[index](a1);
}

function invoke_iiii(index,a1,a2,a3) {
  try {
    return Module["dynCall_iiii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function jsCall_iiii(index,a1,a2,a3) {
    return Runtime.functionPointers[index](a1,a2,a3);
}

function invoke_vii(index,a1,a2) {
  try {
    Module["dynCall_vii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function jsCall_vii(index,a1,a2) {
    Runtime.functionPointers[index](a1,a2);
}

function invoke_iii(index,a1,a2) {
  try {
    return Module["dynCall_iii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function jsCall_iii(index,a1,a2) {
    return Runtime.functionPointers[index](a1,a2);
}

Module.asmGlobalArg = { "Math": Math, "Int8Array": Int8Array, "Int16Array": Int16Array, "Int32Array": Int32Array, "Uint8Array": Uint8Array, "Uint16Array": Uint16Array, "Uint32Array": Uint32Array, "Float32Array": Float32Array, "Float64Array": Float64Array, "NaN": NaN, "Infinity": Infinity };

Module.asmLibraryArg = { "abort": abort, "assert": assert, "enlargeMemory": enlargeMemory, "getTotalMemory": getTotalMemory, "abortOnCannotGrowMemory": abortOnCannotGrowMemory, "abortStackOverflow": abortStackOverflow, "nullFunc_ii": nullFunc_ii, "nullFunc_iiii": nullFunc_iiii, "nullFunc_vii": nullFunc_vii, "nullFunc_iii": nullFunc_iii, "invoke_ii": invoke_ii, "jsCall_ii": jsCall_ii, "invoke_iiii": invoke_iiii, "jsCall_iiii": jsCall_iiii, "invoke_vii": invoke_vii, "jsCall_vii": jsCall_vii, "invoke_iii": invoke_iii, "jsCall_iii": jsCall_iii, "___syscall221": ___syscall221, "___buildEnvironment": ___buildEnvironment, "___syscall195": ___syscall195, "___lock": ___lock, "_abort": _abort, "___setErrNo": ___setErrNo, "___syscall6": ___syscall6, "_getenv": _getenv, "___syscall5": ___syscall5, "_emscripten_memcpy_big": _emscripten_memcpy_big, "___syscall54": ___syscall54, "___unlock": ___unlock, "___syscall140": ___syscall140, "_exit": _exit, "__exit": __exit, "___syscall145": ___syscall145, "___syscall146": ___syscall146, "DYNAMICTOP_PTR": DYNAMICTOP_PTR, "tempDoublePtr": tempDoublePtr, "ABORT": ABORT, "STACKTOP": STACKTOP, "STACK_MAX": STACK_MAX, "cttz_i8": cttz_i8 };
// EMSCRIPTEN_START_ASM
var asm = (function(global, env, buffer) {
  'almost asm';
  
  
  var HEAP8 = new global.Int8Array(buffer);
  var HEAP16 = new global.Int16Array(buffer);
  var HEAP32 = new global.Int32Array(buffer);
  var HEAPU8 = new global.Uint8Array(buffer);
  var HEAPU16 = new global.Uint16Array(buffer);
  var HEAPU32 = new global.Uint32Array(buffer);
  var HEAPF32 = new global.Float32Array(buffer);
  var HEAPF64 = new global.Float64Array(buffer);


  var DYNAMICTOP_PTR=env.DYNAMICTOP_PTR|0;
  var tempDoublePtr=env.tempDoublePtr|0;
  var ABORT=env.ABORT|0;
  var STACKTOP=env.STACKTOP|0;
  var STACK_MAX=env.STACK_MAX|0;
  var cttz_i8=env.cttz_i8|0;

  var __THREW__ = 0;
  var threwValue = 0;
  var setjmpId = 0;
  var undef = 0;
  var nan = global.NaN, inf = global.Infinity;
  var tempInt = 0, tempBigInt = 0, tempBigIntP = 0, tempBigIntS = 0, tempBigIntR = 0.0, tempBigIntI = 0, tempBigIntD = 0, tempValue = 0, tempDouble = 0.0;
  var tempRet0 = 0;

  var Math_floor=global.Math.floor;
  var Math_abs=global.Math.abs;
  var Math_sqrt=global.Math.sqrt;
  var Math_pow=global.Math.pow;
  var Math_cos=global.Math.cos;
  var Math_sin=global.Math.sin;
  var Math_tan=global.Math.tan;
  var Math_acos=global.Math.acos;
  var Math_asin=global.Math.asin;
  var Math_atan=global.Math.atan;
  var Math_atan2=global.Math.atan2;
  var Math_exp=global.Math.exp;
  var Math_log=global.Math.log;
  var Math_ceil=global.Math.ceil;
  var Math_imul=global.Math.imul;
  var Math_min=global.Math.min;
  var Math_max=global.Math.max;
  var Math_clz32=global.Math.clz32;
  var abort=env.abort;
  var assert=env.assert;
  var enlargeMemory=env.enlargeMemory;
  var getTotalMemory=env.getTotalMemory;
  var abortOnCannotGrowMemory=env.abortOnCannotGrowMemory;
  var abortStackOverflow=env.abortStackOverflow;
  var nullFunc_ii=env.nullFunc_ii;
  var nullFunc_iiii=env.nullFunc_iiii;
  var nullFunc_vii=env.nullFunc_vii;
  var nullFunc_iii=env.nullFunc_iii;
  var invoke_ii=env.invoke_ii;
  var jsCall_ii=env.jsCall_ii;
  var invoke_iiii=env.invoke_iiii;
  var jsCall_iiii=env.jsCall_iiii;
  var invoke_vii=env.invoke_vii;
  var jsCall_vii=env.jsCall_vii;
  var invoke_iii=env.invoke_iii;
  var jsCall_iii=env.jsCall_iii;
  var ___syscall221=env.___syscall221;
  var ___buildEnvironment=env.___buildEnvironment;
  var ___syscall195=env.___syscall195;
  var ___lock=env.___lock;
  var _abort=env._abort;
  var ___setErrNo=env.___setErrNo;
  var ___syscall6=env.___syscall6;
  var _getenv=env._getenv;
  var ___syscall5=env.___syscall5;
  var _emscripten_memcpy_big=env._emscripten_memcpy_big;
  var ___syscall54=env.___syscall54;
  var ___unlock=env.___unlock;
  var ___syscall140=env.___syscall140;
  var _exit=env._exit;
  var __exit=env.__exit;
  var ___syscall145=env.___syscall145;
  var ___syscall146=env.___syscall146;
  var tempFloat = 0.0;

// EMSCRIPTEN_START_FUNCS

function stackAlloc(size) {
  size = size|0;
  var ret = 0;
  ret = STACKTOP;
  STACKTOP = (STACKTOP + size)|0;
  STACKTOP = (STACKTOP + 15)&-16;
  if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(size|0);

  return ret|0;
}
function stackSave() {
  return STACKTOP|0;
}
function stackRestore(top) {
  top = top|0;
  STACKTOP = top;
}
function establishStackSpace(stackBase, stackMax) {
  stackBase = stackBase|0;
  stackMax = stackMax|0;
  STACKTOP = stackBase;
  STACK_MAX = stackMax;
}

function setThrew(threw, value) {
  threw = threw|0;
  value = value|0;
  if ((__THREW__|0) == 0) {
    __THREW__ = threw;
    threwValue = value;
  }
}

function setTempRet0(value) {
  value = value|0;
  tempRet0 = value;
}
function getTempRet0() {
  return tempRet0|0;
}

function _outOfMemory() {
 var $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 _logMessage(50000,1520,$vararg_buffer);
 _exit(3);
 // unreachable;
}
function _lou_setDataPath($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 HEAP32[2461] = 0;
 $3 = $2;
 $4 = ($3|0)==(0|0);
 if ($4) {
  $1 = 0;
 } else {
  $5 = $2;
  (_strcpy(53036,$5)|0);
  HEAP32[2461] = 53036;
  $6 = HEAP32[2461]|0;
  $1 = $6;
 }
 $7 = $1;
 STACKTOP = sp;return ($7|0);
}
function _lou_getDataPath() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[2461]|0;
 return ($0|0);
}
function _showString($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $vararg_buffer = sp;
 $6 = sp + 36|0;
 $2 = $0;
 $3 = $1;
 $5 = 0;
 $11 = $5;
 $12 = (($11) + 1)|0;
 $5 = $12;
 $13 = (55084 + ($11)|0);
 HEAP8[$13>>0] = 39;
 $4 = 0;
 L1: while(1) {
  $14 = $4;
  $15 = $3;
  $16 = ($14|0)<($15|0);
  if (!($16)) {
   label = 19;
   break;
  }
  $17 = $4;
  $18 = $2;
  $19 = (($18) + ($17<<2)|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = ($20>>>0)>=(32);
  if ($21) {
   $22 = $4;
   $23 = $2;
   $24 = (($23) + ($22<<2)|0);
   $25 = HEAP32[$24>>2]|0;
   $26 = ($25>>>0)<(127);
   if ($26) {
    $27 = $4;
    $28 = $2;
    $29 = (($28) + ($27<<2)|0);
    $30 = HEAP32[$29>>2]|0;
    $31 = $30&255;
    $32 = $5;
    $33 = (($32) + 1)|0;
    $5 = $33;
    $34 = (55084 + ($32)|0);
    HEAP8[$34>>0] = $31;
   } else {
    label = 6;
   }
  } else {
   label = 6;
  }
  L7: do {
   if ((label|0) == 6) {
    label = 0;
    $35 = $4;
    $36 = $2;
    $37 = (($36) + ($35<<2)|0);
    $38 = HEAP32[$37>>2]|0;
    HEAP32[$vararg_buffer>>2] = $38;
    $39 = (_sprintf($6,1551,$vararg_buffer)|0);
    $7 = $39;
    $40 = $7;
    switch ($40|0) {
    case 4: case 3: case 2: case 1:  {
     $8 = 120;
     $41 = $7;
     $42 = (4 - ($41))|0;
     $9 = $42;
     break;
    }
    case 5:  {
     $8 = 121;
     $9 = 0;
     break;
    }
    case 8: case 7: case 6:  {
     $8 = 122;
     $43 = $7;
     $44 = (8 - ($43))|0;
     $9 = $44;
     break;
    }
    default: {
     $8 = 63;
     $9 = 0;
    }
    }
    $45 = $5;
    $46 = $9;
    $47 = (($45) + ($46))|0;
    $48 = $7;
    $49 = (($47) + ($48))|0;
    $50 = (($49) + 4)|0;
    $51 = ($50>>>0)>=(2048);
    if ($51) {
     label = 19;
     break L1;
    }
    $52 = $5;
    $53 = (($52) + 1)|0;
    $5 = $53;
    $54 = (55084 + ($52)|0);
    HEAP8[$54>>0] = 92;
    $55 = $8;
    $56 = $5;
    $57 = (($56) + 1)|0;
    $5 = $57;
    $58 = (55084 + ($56)|0);
    HEAP8[$58>>0] = $55;
    $10 = 0;
    while(1) {
     $59 = $10;
     $60 = $9;
     $61 = ($59|0)<($60|0);
     if (!($61)) {
      break;
     }
     $62 = $5;
     $63 = (($62) + 1)|0;
     $5 = $63;
     $64 = (55084 + ($62)|0);
     HEAP8[$64>>0] = 48;
     $65 = $10;
     $66 = (($65) + 1)|0;
     $10 = $66;
    }
    $10 = 0;
    while(1) {
     $67 = $10;
     $68 = $7;
     $69 = ($67|0)<($68|0);
     if (!($69)) {
      break L7;
     }
     $70 = $10;
     $71 = (($6) + ($70)|0);
     $72 = HEAP8[$71>>0]|0;
     $73 = $5;
     $74 = (($73) + 1)|0;
     $5 = $74;
     $75 = (55084 + ($73)|0);
     HEAP8[$75>>0] = $72;
     $76 = $10;
     $77 = (($76) + 1)|0;
     $10 = $77;
    }
   }
  } while(0);
  $78 = $4;
  $79 = (($78) + 1)|0;
  $4 = $79;
 }
 if ((label|0) == 19) {
  $80 = $5;
  $81 = (($80) + 1)|0;
  $5 = $81;
  $82 = (55084 + ($80)|0);
  HEAP8[$82>>0] = 39;
  $83 = $5;
  $84 = (55084 + ($83)|0);
  HEAP8[$84>>0] = 0;
  STACKTOP = sp;return (55084|0);
 }
 return (0)|0;
}
function _getALine($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $4 = 0;
 $5 = $2;
 $6 = ((($5)) + 20|0);
 HEAP32[$6>>2] = 0;
 while(1) {
  $7 = $2;
  $8 = (_getAChar($7)|0);
  $3 = $8;
  $9 = ($8|0)!=(-1);
  if (!($9)) {
   break;
  }
  $10 = $3;
  $11 = ($10|0)==(13);
  if ($11) {
   continue;
  }
  $12 = $4;
  $13 = ($12|0)==(92);
  $14 = $3;
  $15 = ($14|0)==(10);
  $or$cond = $13 & $15;
  if ($or$cond) {
   $16 = $2;
   $17 = ((($16)) + 20|0);
   $18 = HEAP32[$17>>2]|0;
   $19 = (($18) + -1)|0;
   HEAP32[$17>>2] = $19;
   continue;
  }
  $20 = $3;
  $21 = ($20|0)==(10);
  if ($21) {
   break;
  }
  $22 = $2;
  $23 = ((($22)) + 20|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = ($24|0)>=(2048);
  if ($25) {
   break;
  }
  $26 = $3;
  $27 = $2;
  $28 = ((($27)) + 20|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = (($29) + 1)|0;
  HEAP32[$28>>2] = $30;
  $31 = $2;
  $32 = ((($31)) + 36|0);
  $33 = (($32) + ($29<<2)|0);
  HEAP32[$33>>2] = $26;
  $34 = $3;
  $4 = $34;
 }
 $35 = $2;
 $36 = ((($35)) + 20|0);
 $37 = HEAP32[$36>>2]|0;
 $38 = $2;
 $39 = ((($38)) + 36|0);
 $40 = (($39) + ($37<<2)|0);
 HEAP32[$40>>2] = 0;
 $41 = $2;
 $42 = ((($41)) + 24|0);
 HEAP32[$42>>2] = 0;
 $43 = $3;
 $44 = ($43|0)==(-1);
 if ($44) {
  $1 = 0;
  $49 = $1;
  STACKTOP = sp;return ($49|0);
 } else {
  $45 = $2;
  $46 = ((($45)) + 8|0);
  $47 = HEAP32[$46>>2]|0;
  $48 = (($47) + 1)|0;
  HEAP32[$46>>2] = $48;
  $1 = 1;
  $49 = $1;
  STACKTOP = sp;return ($49|0);
 }
 return (0)|0;
}
function _getAChar($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0;
 var $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $2 = $0;
 $3 = 0;
 $4 = 0;
 $6 = $2;
 $7 = ((($6)) + 12|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)==(3);
 if ($9) {
  $10 = $2;
  $11 = ((($10)) + 16|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = ($12|0)==(2);
  if ($13) {
   $14 = $2;
   $15 = ((($14)) + 16|0);
   $16 = HEAP32[$15>>2]|0;
   $17 = (($16) + 1)|0;
   HEAP32[$15>>2] = $17;
   $18 = $2;
   $19 = ((($18)) + 28|0);
   $20 = ((($19)) + 4|0);
   $21 = HEAP32[$20>>2]|0;
   $1 = $21;
   $112 = $1;
   STACKTOP = sp;return ($112|0);
  }
 }
 L5: while(1) {
  $22 = $2;
  $23 = ((($22)) + 4|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = (_fgetc($24)|0);
  $3 = $25;
  $26 = ($25|0)!=(-1);
  if (!($26)) {
   break;
  }
  $27 = $2;
  $28 = ((($27)) + 16|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = ($29|0)<(2);
  if ($30) {
   $31 = $3;
   $32 = $2;
   $33 = ((($32)) + 16|0);
   $34 = HEAP32[$33>>2]|0;
   $35 = $2;
   $36 = ((($35)) + 28|0);
   $37 = (($36) + ($34<<2)|0);
   HEAP32[$37>>2] = $31;
  }
  $38 = $2;
  $39 = ((($38)) + 16|0);
  $40 = HEAP32[$39>>2]|0;
  $41 = (($40) + 1)|0;
  HEAP32[$39>>2] = $41;
  $42 = $2;
  $43 = ((($42)) + 16|0);
  $44 = HEAP32[$43>>2]|0;
  $45 = ($44|0)==(2);
  $46 = $2;
  if (!($45)) {
   $83 = ((($46)) + 12|0);
   $84 = HEAP32[$83>>2]|0;
   switch ($84|0) {
   case 3:  {
    label = 19;
    break L5;
    break;
   }
   case 2:  {
    $97 = $2;
    $98 = ((($97)) + 4|0);
    $99 = HEAP32[$98>>2]|0;
    $100 = (_fgetc($99)|0);
    $4 = $100;
    $101 = $4;
    $102 = ($101|0)==(-1);
    if (!($102)) {
     label = 23;
     break L5;
    }
    break;
   }
   case 1:  {
    $86 = $2;
    $87 = ((($86)) + 4|0);
    $88 = HEAP32[$87>>2]|0;
    $89 = (_fgetc($88)|0);
    $4 = $89;
    $90 = $4;
    $91 = ($90|0)==(-1);
    if (!($91)) {
     label = 21;
     break L5;
    }
    break;
   }
   default: {
   }
   }
   $108 = $3;
   $109 = ($108|0)==(-1);
   $110 = $4;
   $111 = ($110|0)==(-1);
   $or$cond = $109 | $111;
   if ($or$cond) {
    break;
   } else {
    continue;
   }
  }
  $47 = ((($46)) + 28|0);
  $48 = HEAP32[$47>>2]|0;
  $49 = ($48|0)==(254);
  if ($49) {
   $50 = $2;
   $51 = ((($50)) + 28|0);
   $52 = ((($51)) + 4|0);
   $53 = HEAP32[$52>>2]|0;
   $54 = ($53|0)==(255);
   if ($54) {
    $55 = $2;
    $56 = ((($55)) + 12|0);
    HEAP32[$56>>2] = 1;
    continue;
   }
  }
  $57 = $2;
  $58 = ((($57)) + 28|0);
  $59 = HEAP32[$58>>2]|0;
  $60 = ($59|0)==(255);
  if (!($60)) {
   label = 14;
   break;
  }
  $61 = $2;
  $62 = ((($61)) + 28|0);
  $63 = ((($62)) + 4|0);
  $64 = HEAP32[$63>>2]|0;
  $65 = ($64|0)==(254);
  if (!($65)) {
   label = 14;
   break;
  }
  $66 = $2;
  $67 = ((($66)) + 12|0);
  HEAP32[$67>>2] = 2;
 }
 if ((label|0) == 14) {
  $68 = $2;
  $69 = ((($68)) + 28|0);
  $70 = HEAP32[$69>>2]|0;
  $71 = ($70|0)<(128);
  if ($71) {
   $72 = $2;
   $73 = ((($72)) + 28|0);
   $74 = ((($73)) + 4|0);
   $75 = HEAP32[$74>>2]|0;
   $76 = ($75|0)<(128);
   if ($76) {
    $77 = $2;
    $78 = ((($77)) + 12|0);
    HEAP32[$78>>2] = 3;
    $79 = $2;
    $80 = ((($79)) + 28|0);
    $81 = HEAP32[$80>>2]|0;
    $1 = $81;
    $112 = $1;
    STACKTOP = sp;return ($112|0);
   }
  }
  $82 = $2;
  _compileError($82,1554,$vararg_buffer);
  $3 = -1;
 }
 else if ((label|0) == 19) {
  $85 = $3;
  $1 = $85;
  $112 = $1;
  STACKTOP = sp;return ($112|0);
 }
 else if ((label|0) == 21) {
  $92 = $3;
  $93 = $92 << 8;
  $94 = $4;
  $95 = $93 | $94;
  $5 = $95;
  $96 = $5;
  $1 = $96;
  $112 = $1;
  STACKTOP = sp;return ($112|0);
 }
 else if ((label|0) == 23) {
  $103 = $4;
  $104 = $103 << 8;
  $105 = $3;
  $106 = $104 | $105;
  $5 = $106;
  $107 = $5;
  $1 = $107;
  $112 = $1;
  STACKTOP = sp;return ($112|0);
 }
 $1 = -1;
 $112 = $1;
 STACKTOP = sp;return ($112|0);
}
function _compileError($0,$1,$varargs) {
 $0 = $0|0;
 $1 = $1|0;
 $varargs = $varargs|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 2096|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(2096|0);
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $4 = sp + 48|0;
 $5 = sp + 24|0;
 $2 = $0;
 $3 = $1;
 HEAP32[$5>>2] = $varargs;
 $6 = $3;
 (_vsnprintf($4,2048,$6,$5)|0);
 $7 = $2;
 $8 = ($7|0)!=(0|0);
 if ($8) {
  $9 = $2;
  $10 = HEAP32[$9>>2]|0;
  $11 = $2;
  $12 = ((($11)) + 8|0);
  $13 = HEAP32[$12>>2]|0;
  HEAP32[$vararg_buffer>>2] = $10;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $13;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr2>>2] = $4;
  _logMessage(40000,1613,$vararg_buffer);
  $14 = HEAP32[2462]|0;
  $15 = (($14) + 1)|0;
  HEAP32[2462] = $15;
  STACKTOP = sp;return;
 } else {
  HEAP32[$vararg_buffer3>>2] = $4;
  _logMessage(40000,1630,$vararg_buffer3);
  $14 = HEAP32[2462]|0;
  $15 = (($14) + 1)|0;
  HEAP32[2462] = $15;
  STACKTOP = sp;return;
 }
}
function _stringHash($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $3 = $1;
 $4 = HEAP32[$3>>2]|0;
 $5 = $4 << 8;
 $6 = $1;
 $7 = ((($6)) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (($5) + ($8))|0;
 $10 = (($9>>>0) % 1123)&-1;
 $2 = $10;
 $11 = $2;
 STACKTOP = sp;return ($11|0);
}
function _getDotsForChar($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $4 = $2;
 $5 = (_getCharOrDots($4,0)|0);
 $3 = $5;
 $6 = $3;
 $7 = ($6|0)!=(0|0);
 if ($7) {
  $8 = $3;
  $9 = ((($8)) + 8|0);
  $10 = HEAP32[$9>>2]|0;
  $1 = $10;
  $11 = $1;
  STACKTOP = sp;return ($11|0);
 } else {
  $1 = 32768;
  $11 = $1;
  STACKTOP = sp;return ($11|0);
 }
 return (0)|0;
}
function _getCharOrDots($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $8 = $3;
 $9 = (($8>>>0) % 1123)&-1;
 $7 = $9;
 $10 = $4;
 $11 = ($10|0)==(0);
 $12 = $7;
 $13 = HEAP32[2463]|0;
 if ($11) {
  $14 = ((($13)) + 12100|0);
  $15 = (($14) + ($12<<2)|0);
  $16 = HEAP32[$15>>2]|0;
  $6 = $16;
 } else {
  $17 = ((($13)) + 16592|0);
  $18 = (($17) + ($12<<2)|0);
  $19 = HEAP32[$18>>2]|0;
  $6 = $19;
 }
 while(1) {
  $20 = $6;
  $21 = ($20|0)!=(0);
  if (!($21)) {
   label = 8;
   break;
  }
  $22 = $6;
  $23 = HEAP32[2463]|0;
  $24 = ((($23)) + 31332|0);
  $25 = (($24) + ($22<<2)|0);
  $5 = $25;
  $26 = $5;
  $27 = ((($26)) + 4|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = $3;
  $30 = ($28|0)==($29|0);
  $31 = $5;
  if ($30) {
   label = 6;
   break;
  }
  $32 = HEAP32[$31>>2]|0;
  $6 = $32;
 }
 if ((label|0) == 6) {
  $2 = $31;
  $33 = $2;
  STACKTOP = sp;return ($33|0);
 }
 else if ((label|0) == 8) {
  $2 = 0;
  $33 = $2;
  STACKTOP = sp;return ($33|0);
 }
 return (0)|0;
}
function _getCharFromDots($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $4 = $2;
 $5 = (_getCharOrDots($4,1)|0);
 $3 = $5;
 $6 = $3;
 $7 = ($6|0)!=(0|0);
 if ($7) {
  $8 = $3;
  $9 = ((($8)) + 8|0);
  $10 = HEAP32[$9>>2]|0;
  $1 = $10;
 } else {
  $1 = 32;
 }
 $11 = $1;
 STACKTOP = sp;return ($11|0);
}
function _findOpcodeName($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $2 = $0;
 $3 = $2;
 $4 = ($3>>>0)<(0);
 $5 = $2;
 $6 = ($5>>>0)>=(111);
 $or$cond = $4 | $6;
 $7 = $2;
 if ($or$cond) {
  HEAP32[$vararg_buffer>>2] = $7;
  (_sprintf(55084,2726,$vararg_buffer)|0);
  $1 = 55084;
  $10 = $1;
  STACKTOP = sp;return ($10|0);
 } else {
  $8 = (8 + ($7<<2)|0);
  $9 = HEAP32[$8>>2]|0;
  $1 = $9;
  $10 = $1;
  STACKTOP = sp;return ($10|0);
 }
 return (0)|0;
}
function _parseChars($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $or$cond = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = 0;
 $8 = 0;
 $9 = 0;
 $11 = 0;
 $12 = 0;
 $13 = 0;
 while(1) {
  $15 = $7;
  $16 = $6;
  $17 = HEAP32[$16>>2]|0;
  $18 = ($15>>>0)<($17>>>0);
  if (!($18)) {
   label = 38;
   break;
  }
  $19 = $7;
  $20 = (($19) + 1)|0;
  $7 = $20;
  $21 = $6;
  $22 = ((($21)) + 4|0);
  $23 = (($22) + ($19<<2)|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = $24 & 255;
  $11 = $25;
  $26 = $11;
  $27 = ($26>>>0)<(128);
  if (!($27)) {
   $91 = $8;
   $9 = $91;
   $92 = $7;
   $10 = $92;
   $12 = 6;
   while(1) {
    $93 = $12;
    $94 = ($93|0)>(0);
    if (!($94)) {
     break;
    }
    $95 = $11;
    $96 = $12;
    $97 = (452 + ($96<<2)|0);
    $98 = HEAP32[$97>>2]|0;
    $99 = ($95>>>0)>=($98>>>0);
    if ($99) {
     break;
    }
    $100 = $12;
    $101 = (($100) + -1)|0;
    $12 = $101;
   }
   $102 = $11;
   $103 = $12;
   $104 = (452 + ($103<<2)|0);
   $105 = HEAP32[$104>>2]|0;
   $106 = (255 - ($105))|0;
   $107 = $102 & $106;
   $13 = $107;
   $14 = 0;
   while(1) {
    $108 = $14;
    $109 = $12;
    $110 = ($108|0)>=($109|0);
    $111 = $7;
    $112 = ($111|0)>=(2048);
    $or$cond = $110 | $112;
    if ($or$cond) {
     break;
    }
    $113 = $7;
    $114 = $6;
    $115 = ((($114)) + 4|0);
    $116 = (($115) + ($113<<2)|0);
    $117 = HEAP32[$116>>2]|0;
    $118 = ($117>>>0)<(128);
    if ($118) {
     label = 33;
    } else {
     $119 = $7;
     $120 = $6;
     $121 = ((($120)) + 4|0);
     $122 = (($121) + ($119<<2)|0);
     $123 = HEAP32[$122>>2]|0;
     $124 = $123 & 64;
     $125 = ($124|0)!=(0);
     if ($125) {
      label = 33;
     } else {
      $139 = $13;
      $140 = $139 << 6;
      $141 = $7;
      $142 = (($141) + 1)|0;
      $7 = $142;
      $143 = $6;
      $144 = ((($143)) + 4|0);
      $145 = (($144) + ($141<<2)|0);
      $146 = HEAP32[$145>>2]|0;
      $147 = $146 & 63;
      $148 = (($140) + ($147))|0;
      $13 = $148;
     }
    }
    if ((label|0) == 33) {
     label = 0;
     $126 = $4;
     _compileWarning($126,2759,$vararg_buffer2);
     $127 = $10;
     $128 = $6;
     $129 = ((($128)) + 4|0);
     $130 = (($129) + ($127<<2)|0);
     $131 = HEAP32[$130>>2]|0;
     $132 = $8;
     $133 = (($132) + 1)|0;
     $8 = $133;
     $134 = $5;
     $135 = ((($134)) + 4|0);
     $136 = (($135) + ($132<<2)|0);
     HEAP32[$136>>2] = $131;
     $137 = $10;
     $138 = (($137) + 1)|0;
     $7 = $138;
    }
    $149 = $14;
    $150 = (($149) + 1)|0;
    $14 = $150;
   }
   $151 = $13;
   $152 = $8;
   $153 = (($152) + 1)|0;
   $8 = $153;
   $154 = $5;
   $155 = ((($154)) + 4|0);
   $156 = (($155) + ($152<<2)|0);
   HEAP32[$156>>2] = $151;
   $157 = $8;
   $158 = ($157|0)>=(2048);
   if ($158) {
    label = 37;
    break;
   } else {
    continue;
   }
  }
  $28 = $11;
  $29 = ($28|0)==(92);
  if ($29) {
   $30 = $7;
   $31 = $6;
   $32 = ((($31)) + 4|0);
   $33 = (($32) + ($30<<2)|0);
   $34 = HEAP32[$33>>2]|0;
   $11 = $34;
   do {
    switch ($34|0) {
    case 92:  {
     break;
    }
    case 101:  {
     $11 = 27;
     break;
    }
    case 102:  {
     $11 = 12;
     break;
    }
    case 110:  {
     $11 = 10;
     break;
    }
    case 114:  {
     $11 = 13;
     break;
    }
    case 115:  {
     $11 = 32;
     break;
    }
    case 116:  {
     $11 = 9;
     break;
    }
    case 118:  {
     $11 = 11;
     break;
    }
    case 119:  {
     $11 = 65535;
     break;
    }
    case 34:  {
     $11 = 28;
     break;
    }
    case 120: case 88:  {
     $35 = $6;
     $36 = HEAP32[$35>>2]|0;
     $37 = $7;
     $38 = (($36) - ($37))|0;
     $39 = ($38>>>0)>(4);
     if ($39) {
      $40 = $4;
      $41 = $7;
      $42 = (($41) + 1)|0;
      $43 = $6;
      $44 = ((($43)) + 4|0);
      $45 = (($44) + ($42<<2)|0);
      $46 = (_hexValue($40,$45,4)|0);
      $11 = $46;
      $47 = $7;
      $48 = (($47) + 4)|0;
      $7 = $48;
     }
     break;
    }
    case 89: case 121:  {
     $49 = $6;
     $50 = HEAP32[$49>>2]|0;
     $51 = $7;
     $52 = (($50) - ($51))|0;
     $53 = ($52>>>0)>(5);
     if ($53) {
      $54 = $4;
      $55 = $7;
      $56 = (($55) + 1)|0;
      $57 = $6;
      $58 = ((($57)) + 4|0);
      $59 = (($58) + ($56<<2)|0);
      $60 = (_hexValue($54,$59,5)|0);
      $11 = $60;
      $61 = $7;
      $62 = (($61) + 5)|0;
      $7 = $62;
     }
     break;
    }
    case 90: case 122:  {
     $63 = $6;
     $64 = HEAP32[$63>>2]|0;
     $65 = $7;
     $66 = (($64) - ($65))|0;
     $67 = ($66>>>0)>(8);
     if ($67) {
      $68 = $4;
      $69 = $7;
      $70 = (($69) + 1)|0;
      $71 = $6;
      $72 = ((($71)) + 4|0);
      $73 = (($72) + ($70<<2)|0);
      $74 = (_hexValue($68,$73,8)|0);
      $11 = $74;
      $75 = $7;
      $76 = (($75) + 8)|0;
      $7 = $76;
     }
     break;
    }
    default: {
     $77 = $4;
     $78 = $11;
     HEAP32[$vararg_buffer>>2] = $78;
     _compileError($77,2729,$vararg_buffer);
    }
    }
   } while(0);
   $79 = $7;
   $80 = (($79) + 1)|0;
   $7 = $80;
  }
  $81 = $11;
  $82 = $8;
  $83 = (($82) + 1)|0;
  $8 = $83;
  $84 = $5;
  $85 = ((($84)) + 4|0);
  $86 = (($85) + ($82<<2)|0);
  HEAP32[$86>>2] = $81;
  $87 = $8;
  $88 = ($87|0)>=(2048);
  if ($88) {
   label = 24;
   break;
  }
 }
 if ((label|0) == 24) {
  $89 = $8;
  $90 = $5;
  HEAP32[$90>>2] = $89;
  $3 = 1;
  $163 = $3;
  STACKTOP = sp;return ($163|0);
 }
 else if ((label|0) == 37) {
  $159 = $9;
  $160 = $5;
  HEAP32[$160>>2] = $159;
  $3 = 1;
  $163 = $3;
  STACKTOP = sp;return ($163|0);
 }
 else if ((label|0) == 38) {
  $161 = $8;
  $162 = $5;
  HEAP32[$162>>2] = $161;
  $3 = 1;
  $163 = $3;
  STACKTOP = sp;return ($163|0);
 }
 return (0)|0;
}
function _hexValue($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $8 = 0;
 $7 = 0;
 L1: while(1) {
  $10 = $7;
  $11 = $6;
  $12 = ($10|0)<($11|0);
  if (!($12)) {
   label = 14;
   break;
  }
  $9 = 0;
  $13 = $7;
  $14 = $5;
  $15 = (($14) + ($13<<2)|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = ($16>>>0)>=(48);
  if ($17) {
   $18 = $7;
   $19 = $5;
   $20 = (($19) + ($18<<2)|0);
   $21 = HEAP32[$20>>2]|0;
   $22 = ($21>>>0)<=(57);
   if ($22) {
    $23 = $7;
    $24 = $5;
    $25 = (($24) + ($23<<2)|0);
    $26 = HEAP32[$25>>2]|0;
    $27 = (($26) - 48)|0;
    $9 = $27;
   } else {
    label = 6;
   }
  } else {
   label = 6;
  }
  do {
   if ((label|0) == 6) {
    label = 0;
    $28 = $7;
    $29 = $5;
    $30 = (($29) + ($28<<2)|0);
    $31 = HEAP32[$30>>2]|0;
    $32 = ($31>>>0)>=(97);
    if ($32) {
     $33 = $7;
     $34 = $5;
     $35 = (($34) + ($33<<2)|0);
     $36 = HEAP32[$35>>2]|0;
     $37 = ($36>>>0)<=(102);
     if ($37) {
      $38 = $7;
      $39 = $5;
      $40 = (($39) + ($38<<2)|0);
      $41 = HEAP32[$40>>2]|0;
      $42 = (($41) - 97)|0;
      $43 = (($42) + 10)|0;
      $9 = $43;
      break;
     }
    }
    $44 = $7;
    $45 = $5;
    $46 = (($45) + ($44<<2)|0);
    $47 = HEAP32[$46>>2]|0;
    $48 = ($47>>>0)>=(65);
    if (!($48)) {
     label = 12;
     break L1;
    }
    $49 = $7;
    $50 = $5;
    $51 = (($50) + ($49<<2)|0);
    $52 = HEAP32[$51>>2]|0;
    $53 = ($52>>>0)<=(70);
    if (!($53)) {
     label = 12;
     break L1;
    }
    $54 = $7;
    $55 = $5;
    $56 = (($55) + ($54<<2)|0);
    $57 = HEAP32[$56>>2]|0;
    $58 = (($57) - 65)|0;
    $59 = (($58) + 10)|0;
    $9 = $59;
   }
  } while(0);
  $62 = $9;
  $63 = $6;
  $64 = (($63) - 1)|0;
  $65 = $7;
  $66 = (($64) - ($65))|0;
  $67 = $66<<2;
  $68 = $62 << $67;
  $69 = $8;
  $70 = $69 | $68;
  $8 = $70;
  $71 = $7;
  $72 = (($71) + 1)|0;
  $7 = $72;
 }
 if ((label|0) == 12) {
  $60 = $4;
  $61 = $6;
  HEAP32[$vararg_buffer>>2] = $61;
  _compileError($60,2823,$vararg_buffer);
  $3 = -1;
  $74 = $3;
  STACKTOP = sp;return ($74|0);
 }
 else if ((label|0) == 14) {
  $73 = $8;
  $3 = $73;
  $74 = $3;
  STACKTOP = sp;return ($74|0);
 }
 return (0)|0;
}
function _compileWarning($0,$1,$varargs) {
 $0 = $0|0;
 $1 = $1|0;
 $varargs = $varargs|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 2096|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(2096|0);
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $4 = sp + 48|0;
 $5 = sp + 24|0;
 $2 = $0;
 $3 = $1;
 HEAP32[$5>>2] = $varargs;
 $6 = $3;
 (_vsnprintf($4,2048,$6,$5)|0);
 $7 = $2;
 $8 = ($7|0)!=(0|0);
 if ($8) {
  $9 = $2;
  $10 = HEAP32[$9>>2]|0;
  $11 = $2;
  $12 = ((($11)) + 8|0);
  $13 = HEAP32[$12>>2]|0;
  HEAP32[$vararg_buffer>>2] = $10;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $13;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr2>>2] = $4;
  _logMessage(30000,2792,$vararg_buffer);
  $14 = HEAP32[2464]|0;
  $15 = (($14) + 1)|0;
  HEAP32[2464] = $15;
  STACKTOP = sp;return;
 } else {
  HEAP32[$vararg_buffer3>>2] = $4;
  _logMessage(30000,2811,$vararg_buffer3);
  $14 = HEAP32[2464]|0;
  $15 = (($14) + 1)|0;
  HEAP32[2464] = $15;
  STACKTOP = sp;return;
 }
}
function _parseDots($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_buffer4 = 0, $vararg_buffer6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $vararg_buffer6 = sp + 24|0;
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $12 = sp + 32|0;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = 0;
 $8 = 0;
 $10 = 0;
 $9 = 0;
 L1: while(1) {
  $14 = $9;
  $15 = $6;
  $16 = HEAP32[$15>>2]|0;
  $17 = ($14>>>0)<($16>>>0);
  $18 = $9;
  $19 = $10;
  if (!($17)) {
   label = 29;
   break;
  }
  $20 = ($18|0)!=($19|0);
  $21 = $20&1;
  $11 = $21;
  $22 = $9;
  $23 = $6;
  $24 = ((($23)) + 4|0);
  $25 = (($24) + ($22<<2)|0);
  $26 = HEAP32[$25>>2]|0;
  HEAP32[$12>>2] = $26;
  $27 = HEAP32[$12>>2]|0;
  do {
   switch ($27|0) {
   case 49:  {
    $13 = 1;
    label = 19;
    break;
   }
   case 50:  {
    $13 = 2;
    label = 19;
    break;
   }
   case 51:  {
    $13 = 4;
    label = 19;
    break;
   }
   case 52:  {
    $13 = 8;
    label = 19;
    break;
   }
   case 53:  {
    $13 = 16;
    label = 19;
    break;
   }
   case 54:  {
    $13 = 32;
    label = 19;
    break;
   }
   case 55:  {
    $13 = 64;
    label = 19;
    break;
   }
   case 56:  {
    $13 = 128;
    label = 19;
    break;
   }
   case 57:  {
    $13 = 256;
    label = 19;
    break;
   }
   case 65: case 97:  {
    $13 = 512;
    label = 19;
    break;
   }
   case 66: case 98:  {
    $13 = 1024;
    label = 19;
    break;
   }
   case 67: case 99:  {
    $13 = 2048;
    label = 19;
    break;
   }
   case 68: case 100:  {
    $13 = 4096;
    label = 19;
    break;
   }
   case 69: case 101:  {
    $13 = 8192;
    label = 19;
    break;
   }
   case 70: case 102:  {
    $13 = 16384;
    label = 19;
    break;
   }
   case 48:  {
    $40 = $11;
    $41 = ($40|0)!=(0);
    if ($41) {
     label = 27;
     break L1;
    }
    break;
   }
   case 45:  {
    $42 = $11;
    $43 = ($42|0)!=(0);
    if (!($43)) {
     label = 25;
     break L1;
    }
    $45 = $7;
    $46 = $45 | 32768;
    $47 = $8;
    $48 = (($47) + 1)|0;
    $8 = $48;
    $49 = $5;
    $50 = ((($49)) + 4|0);
    $51 = (($50) + ($47<<2)|0);
    HEAP32[$51>>2] = $46;
    $7 = 0;
    $52 = $9;
    $53 = (($52) + 1)|0;
    $10 = $53;
    break;
   }
   default: {
    label = 27;
    break L1;
   }
   }
  } while(0);
  if ((label|0) == 19) {
   label = 0;
   $28 = $11;
   $29 = ($28|0)==(0);
   $30 = $7;
   $31 = ($30|0)!=(0);
   $or$cond = $29 | $31;
   if (!($or$cond)) {
    label = 27;
    break;
   }
   $32 = $7;
   $33 = $13;
   $34 = $32 & $33;
   $35 = ($34|0)!=(0);
   if ($35) {
    label = 21;
    break;
   }
   $37 = $13;
   $38 = $7;
   $39 = $38 | $37;
   $7 = $39;
  }
  $56 = $9;
  $57 = (($56) + 1)|0;
  $9 = $57;
 }
 if ((label|0) == 21) {
  $36 = $4;
  _compileError($36,2859,$vararg_buffer);
  $3 = 0;
  $69 = $3;
  STACKTOP = sp;return ($69|0);
 }
 else if ((label|0) == 25) {
  $44 = $4;
  _compileError($44,2889,$vararg_buffer2);
  $3 = 0;
  $69 = $3;
  STACKTOP = sp;return ($69|0);
 }
 else if ((label|0) == 27) {
  $54 = $4;
  $55 = (_showString($12,1)|0);
  HEAP32[$vararg_buffer4>>2] = $55;
  _compileError($54,2917,$vararg_buffer4);
  $3 = 0;
  $69 = $3;
  STACKTOP = sp;return ($69|0);
 }
 else if ((label|0) == 29) {
  $58 = ($18|0)==($19|0);
  if ($58) {
   $59 = $4;
   _compileError($59,2889,$vararg_buffer6);
   $3 = 0;
   $69 = $3;
   STACKTOP = sp;return ($69|0);
  } else {
   $60 = $7;
   $61 = $60 | 32768;
   $62 = $8;
   $63 = (($62) + 1)|0;
   $8 = $63;
   $64 = $5;
   $65 = ((($64)) + 4|0);
   $66 = (($65) + ($62<<2)|0);
   HEAP32[$66>>2] = $61;
   $67 = $8;
   $68 = $5;
   HEAP32[$68>>2] = $67;
   $3 = 1;
   $69 = $3;
   STACKTOP = sp;return ($69|0);
  }
 }
 return (0)|0;
}
function _lou_readCharFromFile($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $3 = $0;
 $4 = $1;
 $6 = $3;
 $7 = ($6|0)==(0|0);
 if ($7) {
  $2 = 0;
  $27 = $2;
  STACKTOP = sp;return ($27|0);
 }
 $8 = $4;
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)==(1);
 if ($10) {
  $11 = $4;
  HEAP32[$11>>2] = 0;
  $12 = $3;
  HEAP32[2465] = $12;
  HEAP32[(9872)>>2] = 0;
  HEAP32[(9876)>>2] = 0;
  HEAP32[(9868)>>2] = 0;
  $13 = HEAP32[2465]|0;
  $14 = (_fopen($13,2940)|0);
  HEAP32[(9864)>>2] = $14;
  $15 = ($14|0)!=(0|0);
  if (!($15)) {
   $16 = HEAP32[2465]|0;
   HEAP32[$vararg_buffer>>2] = $16;
   _logMessage(40000,2942,$vararg_buffer);
   $17 = $4;
   HEAP32[$17>>2] = 1;
   $2 = -1;
   $27 = $2;
   STACKTOP = sp;return ($27|0);
  }
 }
 $18 = HEAP32[(9864)>>2]|0;
 $19 = ($18|0)==(0|0);
 if ($19) {
  $20 = $4;
  HEAP32[$20>>2] = 1;
  $2 = -1;
  $27 = $2;
  STACKTOP = sp;return ($27|0);
 }
 $21 = (_getAChar(9860)|0);
 $5 = $21;
 $22 = $5;
 $23 = ($22|0)==(-1);
 if ($23) {
  $24 = HEAP32[(9864)>>2]|0;
  (_fclose($24)|0);
  HEAP32[(9864)>>2] = 0;
  $25 = $4;
  HEAP32[$25>>2] = 1;
 }
 $26 = $5;
 $2 = $26;
 $27 = $2;
 STACKTOP = sp;return ($27|0);
}
function _getTablePath() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer8 = 0, $vararg_ptr4 = 0, $vararg_ptr5 = 0, $vararg_ptr6 = 0, $vararg_ptr7 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 2096|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(2096|0);
 $vararg_buffer8 = sp + 32|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = sp + 48|0;
 $2 = $0;
 $3 = (_getenv((2964|0))|0);
 $1 = $3;
 $4 = $1;
 $5 = ($4|0)!=(0|0);
 if ($5) {
  $6 = $1;
  $7 = HEAP8[$6>>0]|0;
  $8 = $7 << 24 >> 24;
  $9 = ($8|0)!=(0);
  if ($9) {
   $10 = $2;
   $11 = $1;
   HEAP32[$vararg_buffer>>2] = $11;
   $12 = (_sprintf($10,2980,$vararg_buffer)|0);
   $13 = $2;
   $14 = (($13) + ($12)|0);
   $2 = $14;
  }
 }
 $15 = (_lou_getDataPath()|0);
 $1 = $15;
 $16 = $1;
 $17 = ($16|0)!=(0|0);
 if ($17) {
  $18 = $1;
  $19 = HEAP8[$18>>0]|0;
  $20 = $19 << 24 >> 24;
  $21 = ($20|0)!=(0);
  if ($21) {
   $22 = $2;
   $23 = $1;
   HEAP32[$vararg_buffer1>>2] = $23;
   $vararg_ptr4 = ((($vararg_buffer1)) + 4|0);
   HEAP32[$vararg_ptr4>>2] = 47;
   $vararg_ptr5 = ((($vararg_buffer1)) + 8|0);
   HEAP32[$vararg_ptr5>>2] = 2996;
   $vararg_ptr6 = ((($vararg_buffer1)) + 12|0);
   HEAP32[$vararg_ptr6>>2] = 47;
   $vararg_ptr7 = ((($vararg_buffer1)) + 16|0);
   HEAP32[$vararg_ptr7>>2] = 3005;
   $24 = (_sprintf($22,2984,$vararg_buffer1)|0);
   $25 = $2;
   $26 = (($25) + ($24)|0);
   $2 = $26;
  }
 }
 $27 = $2;
 HEAP32[$vararg_buffer8>>2] = 3012;
 $28 = (_sprintf($27,2980,$vararg_buffer8)|0);
 $29 = $2;
 $30 = (($29) + ($28)|0);
 $2 = $30;
 $31 = (___strdup($0)|0);
 STACKTOP = sp;return ($31|0);
}
function _defaultTableResolver($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $vararg_buffer = sp;
 $3 = $0;
 $4 = $1;
 $12 = (_getTablePath()|0);
 $5 = $12;
 $11 = 0;
 $13 = $3;
 $9 = $13;
 while(1) {
  $14 = $9;
  $15 = HEAP8[$14>>0]|0;
  $16 = $15 << 24 >> 24;
  $17 = ($16|0)!=(0);
  if (!($17)) {
   break;
  }
  $18 = $9;
  $19 = HEAP8[$18>>0]|0;
  $20 = $19 << 24 >> 24;
  $21 = ($20|0)==(44);
  if ($21) {
   $22 = $11;
   $23 = (($22) + 1)|0;
   $11 = $23;
  }
  $24 = $9;
  $25 = ((($24)) + 1|0);
  $9 = $25;
 }
 $26 = $11;
 $27 = (($26) + 2)|0;
 $28 = $27<<2;
 $29 = (_malloc($28)|0);
 $6 = $29;
 $11 = 0;
 $30 = $3;
 $31 = (___strdup($30)|0);
 $8 = $31;
 $32 = $8;
 $7 = $32;
 while(1) {
  $33 = $7;
  $9 = $33;
  while(1) {
   $34 = $9;
   $35 = HEAP8[$34>>0]|0;
   $36 = $35 << 24 >> 24;
   $37 = ($36|0)!=(0);
   if (!($37)) {
    break;
   }
   $38 = $9;
   $39 = HEAP8[$38>>0]|0;
   $40 = $39 << 24 >> 24;
   $41 = ($40|0)!=(44);
   if (!($41)) {
    break;
   }
   $42 = $9;
   $43 = ((($42)) + 1|0);
   $9 = $43;
  }
  $44 = $9;
  $45 = HEAP8[$44>>0]|0;
  $46 = $45 << 24 >> 24;
  $47 = ($46|0)==(0);
  $48 = $47&1;
  $10 = $48;
  $49 = $9;
  HEAP8[$49>>0] = 0;
  $50 = $7;
  $51 = $4;
  $52 = $5;
  $53 = (_resolveSubtable($50,$51,$52)|0);
  $54 = $11;
  $55 = (($54) + 1)|0;
  $11 = $55;
  $56 = $6;
  $57 = (($56) + ($54<<2)|0);
  HEAP32[$57>>2] = $53;
  $58 = ($53|0)!=(0|0);
  if (!($58)) {
   label = 12;
   break;
  }
  $63 = $11;
  $64 = ($63|0)==(1);
  if ($64) {
   $65 = $7;
   $4 = $65;
  }
  $66 = $10;
  $67 = ($66|0)!=(0);
  if ($67) {
   label = 17;
   break;
  }
  $68 = $9;
  $69 = ((($68)) + 1|0);
  $7 = $69;
 }
 if ((label|0) == 12) {
  $59 = $7;
  HEAP32[$vararg_buffer>>2] = $59;
  _logMessage(40000,3045,$vararg_buffer);
  $60 = $5;
  _free($60);
  $61 = $8;
  _free($61);
  $62 = $6;
  _free($62);
  $2 = 0;
  $76 = $2;
  STACKTOP = sp;return ($76|0);
 }
 else if ((label|0) == 17) {
  $70 = $5;
  _free($70);
  $71 = $8;
  _free($71);
  $72 = $11;
  $73 = $6;
  $74 = (($73) + ($72<<2)|0);
  HEAP32[$74>>2] = 0;
  $75 = $6;
  $2 = $75;
  $76 = $2;
  STACKTOP = sp;return ($76|0);
 }
 return (0)|0;
}
function _resolveSubtable($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer12 = 0, $vararg_buffer21 = 0, $vararg_buffer4 = 0, $vararg_buffer9 = 0, $vararg_ptr15 = 0, $vararg_ptr16 = 0, $vararg_ptr17 = 0, $vararg_ptr18 = 0, $vararg_ptr19 = 0, $vararg_ptr20 = 0, $vararg_ptr7 = 0, $vararg_ptr8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(128|0);
 $vararg_buffer21 = sp + 72|0;
 $vararg_buffer12 = sp + 40|0;
 $vararg_buffer9 = sp + 32|0;
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $13 = $4;
 $14 = ($13|0)==(0|0);
 if (!($14)) {
  $15 = $4;
  $16 = HEAP8[$15>>0]|0;
  $17 = $16 << 24 >> 24;
  $18 = ($17|0)==(0);
  if (!($18)) {
   $19 = (_malloc(2048)|0);
   $7 = $19;
   $20 = $5;
   $21 = ($20|0)!=(0|0);
   if ($21) {
    $22 = $7;
    $23 = $5;
    (_strcpy($22,$23)|0);
    $24 = $7;
    $25 = (_strlen($24)|0);
    $8 = $25;
    while(1) {
     $26 = $8;
     $27 = ($26|0)>=(0);
     if ($27) {
      $28 = $8;
      $29 = $7;
      $30 = (($29) + ($28)|0);
      $31 = HEAP8[$30>>0]|0;
      $32 = $31 << 24 >> 24;
      $33 = ($32|0)!=(47);
      if ($33) {
       $34 = $8;
       $35 = $7;
       $36 = (($35) + ($34)|0);
       $37 = HEAP8[$36>>0]|0;
       $38 = $37 << 24 >> 24;
       $39 = ($38|0)!=(92);
       $126 = $39;
      } else {
       $126 = 0;
      }
     } else {
      $126 = 0;
     }
     $40 = $8;
     if (!($126)) {
      break;
     }
     $41 = (($40) + -1)|0;
     $8 = $41;
    }
    $42 = (($40) + 1)|0;
    $8 = $42;
    $43 = $7;
    $44 = (($43) + ($42)|0);
    HEAP8[$44>>0] = 0;
    $45 = $7;
    $46 = $4;
    (_strcat($45,$46)|0);
    $47 = $7;
    $48 = (_stat($47,18088)|0);
    $49 = ($48|0)==(0);
    if ($49) {
     $50 = HEAP32[(18100)>>2]|0;
     $51 = $50 & 16384;
     $52 = ($51|0)!=(0);
     if (!($52)) {
      $53 = $7;
      HEAP32[$vararg_buffer>>2] = $53;
      _logMessage(10000,3071,$vararg_buffer);
      $54 = $7;
      $3 = $54;
      $125 = $3;
      STACKTOP = sp;return ($125|0);
     }
    }
   }
   $55 = $7;
   $56 = $4;
   (_strcpy($55,$56)|0);
   $57 = $7;
   $58 = (_stat($57,18088)|0);
   $59 = ($58|0)==(0);
   if ($59) {
    $60 = HEAP32[(18100)>>2]|0;
    $61 = $60 & 16384;
    $62 = ($61|0)!=(0);
    if (!($62)) {
     $63 = $7;
     HEAP32[$vararg_buffer1>>2] = $63;
     _logMessage(10000,3071,$vararg_buffer1);
     $64 = $7;
     $3 = $64;
     $125 = $3;
     STACKTOP = sp;return ($125|0);
    }
   }
   $65 = $6;
   $66 = HEAP8[$65>>0]|0;
   $67 = $66 << 24 >> 24;
   $68 = ($67|0)!=(0);
   do {
    if ($68) {
     $69 = $6;
     $70 = ((($69)) + 1|0);
     $71 = (___strdup($70)|0);
     $12 = $71;
     $72 = $12;
     $9 = $72;
     while(1) {
      $73 = $9;
      $11 = $73;
      while(1) {
       $74 = $11;
       $75 = HEAP8[$74>>0]|0;
       $76 = $75 << 24 >> 24;
       $77 = ($76|0)!=(0);
       if (!($77)) {
        break;
       }
       $78 = $11;
       $79 = HEAP8[$78>>0]|0;
       $80 = $79 << 24 >> 24;
       $81 = ($80|0)!=(44);
       if (!($81)) {
        break;
       }
       $82 = $11;
       $83 = ((($82)) + 1|0);
       $11 = $83;
      }
      $84 = $11;
      $85 = HEAP8[$84>>0]|0;
      $86 = $85 << 24 >> 24;
      $87 = ($86|0)==(0);
      $88 = $87&1;
      $10 = $88;
      $89 = $11;
      HEAP8[$89>>0] = 0;
      $90 = $9;
      $91 = $11;
      $92 = ($90|0)==($91|0);
      if ($92) {
       $9 = 7945;
      }
      $93 = $7;
      $94 = $9;
      $95 = $4;
      HEAP32[$vararg_buffer4>>2] = $94;
      $vararg_ptr7 = ((($vararg_buffer4)) + 4|0);
      HEAP32[$vararg_ptr7>>2] = 47;
      $vararg_ptr8 = ((($vararg_buffer4)) + 8|0);
      HEAP32[$vararg_ptr8>>2] = $95;
      (_sprintf($93,3086,$vararg_buffer4)|0);
      $96 = $7;
      $97 = (_stat($96,18088)|0);
      $98 = ($97|0)==(0);
      if ($98) {
       $99 = HEAP32[(18100)>>2]|0;
       $100 = $99 & 16384;
       $101 = ($100|0)!=(0);
       if (!($101)) {
        label = 27;
        break;
       }
      }
      $105 = $10;
      $106 = ($105|0)!=(0);
      if ($106) {
       label = 34;
       break;
      }
      $107 = $7;
      $108 = $9;
      $109 = $4;
      HEAP32[$vararg_buffer12>>2] = $108;
      $vararg_ptr15 = ((($vararg_buffer12)) + 4|0);
      HEAP32[$vararg_ptr15>>2] = 47;
      $vararg_ptr16 = ((($vararg_buffer12)) + 8|0);
      HEAP32[$vararg_ptr16>>2] = 2996;
      $vararg_ptr17 = ((($vararg_buffer12)) + 12|0);
      HEAP32[$vararg_ptr17>>2] = 47;
      $vararg_ptr18 = ((($vararg_buffer12)) + 16|0);
      HEAP32[$vararg_ptr18>>2] = 3005;
      $vararg_ptr19 = ((($vararg_buffer12)) + 20|0);
      HEAP32[$vararg_ptr19>>2] = 47;
      $vararg_ptr20 = ((($vararg_buffer12)) + 24|0);
      HEAP32[$vararg_ptr20>>2] = $109;
      (_sprintf($107,3093,$vararg_buffer12)|0);
      $110 = $7;
      $111 = (_stat($110,18088)|0);
      $112 = ($111|0)==(0);
      if ($112) {
       $113 = HEAP32[(18100)>>2]|0;
       $114 = $113 & 16384;
       $115 = ($114|0)!=(0);
       if (!($115)) {
        label = 31;
        break;
       }
      }
      $119 = $10;
      $120 = ($119|0)!=(0);
      if ($120) {
       label = 34;
       break;
      }
      $121 = $11;
      $122 = ((($121)) + 1|0);
      $9 = $122;
     }
     if ((label|0) == 27) {
      $102 = $7;
      HEAP32[$vararg_buffer9>>2] = $102;
      _logMessage(10000,3071,$vararg_buffer9);
      $103 = $12;
      _free($103);
      $104 = $7;
      $3 = $104;
      $125 = $3;
      STACKTOP = sp;return ($125|0);
     }
     else if ((label|0) == 31) {
      $116 = $7;
      HEAP32[$vararg_buffer21>>2] = $116;
      _logMessage(10000,3071,$vararg_buffer21);
      $117 = $12;
      _free($117);
      $118 = $7;
      $3 = $118;
      $125 = $3;
      STACKTOP = sp;return ($125|0);
     }
     else if ((label|0) == 34) {
      $123 = $12;
      _free($123);
      break;
     }
    }
   } while(0);
   $124 = $7;
   _free($124);
   $3 = 0;
   $125 = $3;
   STACKTOP = sp;return ($125|0);
  }
 }
 $3 = 0;
 $125 = $3;
 STACKTOP = sp;return ($125|0);
}
function _resolveTable($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = HEAP32[120]|0;
 $5 = $2;
 $6 = $3;
 $7 = (FUNCTION_TABLE_iii[$4 & 7]($5,$6)|0);
 $8 = (_copyStringArray($7)|0);
 STACKTOP = sp;return ($8|0);
}
function _copyStringArray($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $5 = $2;
 $6 = ($5|0)!=(0|0);
 if (!($6)) {
  $1 = 0;
  $32 = $1;
  STACKTOP = sp;return ($32|0);
 }
 $3 = 0;
 while(1) {
  $7 = $3;
  $8 = $2;
  $9 = (($8) + ($7<<2)|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ($10|0)!=(0|0);
  $12 = $3;
  $13 = (($12) + 1)|0;
  if (!($11)) {
   break;
  }
  $3 = $13;
 }
 $14 = $13<<2;
 $15 = (_malloc($14)|0);
 $4 = $15;
 $16 = $3;
 $17 = $4;
 $18 = (($17) + ($16<<2)|0);
 HEAP32[$18>>2] = 0;
 while(1) {
  $19 = $3;
  $20 = ($19|0)!=(0);
  if (!($20)) {
   break;
  }
  $21 = $3;
  $22 = (($21) + -1)|0;
  $3 = $22;
  $23 = $3;
  $24 = $2;
  $25 = (($24) + ($23<<2)|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = (___strdup($26)|0);
  $28 = $3;
  $29 = $4;
  $30 = (($29) + ($28<<2)|0);
  HEAP32[$30>>2] = $27;
 }
 $31 = $4;
 $1 = $31;
 $32 = $1;
 STACKTOP = sp;return ($32|0);
}
function _getTable($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $vararg_buffer = sp;
 $2 = $0;
 $4 = 0;
 $5 = 0;
 $9 = $2;
 $10 = ($9|0)==(0|0);
 if (!($10)) {
  $11 = $2;
  $12 = HEAP8[$11>>0]|0;
  $13 = $12 << 24 >> 24;
  $14 = ($13|0)==(0);
  if (!($14)) {
   HEAP32[4541] = 0;
   HEAP32[2462] = 0;
   $15 = $2;
   $16 = (_strlen($15)|0);
   $3 = $16;
   $17 = HEAP32[4542]|0;
   $18 = ($17|0)!=(0|0);
   if ($18) {
    $19 = $3;
    $20 = HEAP32[4542]|0;
    $21 = ((($20)) + 8|0);
    $22 = HEAP32[$21>>2]|0;
    $23 = ($19|0)==($22|0);
    if ($23) {
     $24 = HEAP32[4542]|0;
     $25 = ((($24)) + 12|0);
     $26 = $2;
     $27 = $3;
     $28 = (_memcmp($25,$26,$27)|0);
     $29 = ($28|0)==(0);
     if ($29) {
      $30 = HEAP32[4542]|0;
      $31 = ((($30)) + 4|0);
      $32 = HEAP32[$31>>2]|0;
      HEAP32[2463] = $32;
      $1 = $32;
      $83 = $1;
      STACKTOP = sp;return ($83|0);
     }
    }
   }
   $33 = HEAP32[4543]|0;
   $4 = $33;
   while(1) {
    $34 = $4;
    $35 = ($34|0)!=(0|0);
    if (!($35)) {
     break;
    }
    $36 = $3;
    $37 = $4;
    $38 = ((($37)) + 8|0);
    $39 = HEAP32[$38>>2]|0;
    $40 = ($36|0)==($39|0);
    if ($40) {
     $41 = $4;
     $42 = ((($41)) + 12|0);
     $43 = $2;
     $44 = $3;
     $45 = (_memcmp($42,$43,$44)|0);
     $46 = ($45|0)==(0);
     if ($46) {
      label = 12;
      break;
     }
    }
    $51 = $4;
    $5 = $51;
    $52 = $4;
    $53 = HEAP32[$52>>2]|0;
    $4 = $53;
   }
   if ((label|0) == 12) {
    $47 = $4;
    HEAP32[4542] = $47;
    $48 = $4;
    $49 = ((($48)) + 4|0);
    $50 = HEAP32[$49>>2]|0;
    HEAP32[2463] = $50;
    $1 = $50;
    $83 = $1;
    STACKTOP = sp;return ($83|0);
   }
   $54 = $2;
   $55 = (_compileTranslationTable($54)|0);
   $6 = $55;
   $56 = ($55|0)!=(0|0);
   if (!($56)) {
    $82 = $2;
    HEAP32[$vararg_buffer>>2] = $82;
    _logMessage(40000,3108,$vararg_buffer);
    $1 = 0;
    $83 = $1;
    STACKTOP = sp;return ($83|0);
   }
   $57 = $3;
   $58 = (16 + ($57))|0;
   $7 = $58;
   $59 = $7;
   $60 = (_malloc($59)|0);
   $8 = $60;
   $61 = $8;
   $62 = ($61|0)!=(0|0);
   if (!($62)) {
    _outOfMemory();
   }
   $63 = HEAP32[4543]|0;
   $64 = ($63|0)==(0|0);
   $65 = $8;
   if ($64) {
    HEAP32[4543] = $65;
   } else {
    $66 = $5;
    HEAP32[$66>>2] = $65;
   }
   $67 = $8;
   HEAP32[$67>>2] = 0;
   $68 = $6;
   $69 = $8;
   $70 = ((($69)) + 4|0);
   HEAP32[$70>>2] = $68;
   $71 = $3;
   $72 = $8;
   $73 = ((($72)) + 8|0);
   HEAP32[$73>>2] = $71;
   $74 = $8;
   $75 = ((($74)) + 12|0);
   $76 = $2;
   $77 = $3;
   _memcpy(($75|0),($76|0),($77|0))|0;
   $78 = $8;
   HEAP32[4542] = $78;
   $79 = $8;
   $80 = ((($79)) + 4|0);
   $81 = HEAP32[$80>>2]|0;
   $1 = $81;
   $83 = $1;
   STACKTOP = sp;return ($83|0);
  }
 }
 $1 = 0;
 $83 = $1;
 STACKTOP = sp;return ($83|0);
}
function _compileTranslationTable($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0;
 var $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $2 = $0;
 HEAP32[4541] = 0;
 HEAP32[2464] = 0;
 HEAP32[2462] = 0;
 HEAP32[2463] = 0;
 HEAP32[4544] = 0;
 HEAP32[4545] = 0;
 $6 = $2;
 $7 = ($6|0)==(0|0);
 if ($7) {
  $1 = 0;
  $59 = $1;
  STACKTOP = sp;return ($59|0);
 }
 $8 = HEAP16[26406]|0;
 $9 = ($8<<16>>16)!=(0);
 L5: do {
  if (!($9)) {
   $5 = 0;
   while(1) {
    $10 = $5;
    $11 = ($10>>>0)<(111);
    if (!($11)) {
     break L5;
    }
    $12 = $5;
    $13 = (8 + ($12<<2)|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = (_strlen($14)|0);
    $16 = $15&65535;
    $17 = $5;
    $18 = (52812 + ($17<<1)|0);
    HEAP16[$18>>1] = $16;
    $19 = $5;
    $20 = (($19) + 1)|0;
    $5 = $20;
   }
  }
 } while(0);
 (_allocateHeader(0)|0);
 $21 = HEAP32[2463]|0;
 $22 = ((($21)) + 560|0);
 HEAP32[$22>>2] = 0;
 (_compileString(3130)|0);
 (_compileString(3141)|0);
 (_compileString(3162)|0);
 (_compileString(3195)|0);
 (_compileString(3218)|0);
 $23 = $2;
 $24 = (_resolveTable($23,0)|0);
 $3 = $24;
 $25 = ($24|0)!=(0|0);
 L11: do {
  if ($25) {
   $28 = $3;
   $4 = $28;
   while(1) {
    $29 = $4;
    $30 = HEAP32[$29>>2]|0;
    $31 = ($30|0)!=(0|0);
    if (!($31)) {
     break L11;
    }
    $32 = $4;
    $33 = HEAP32[$32>>2]|0;
    $34 = (_compileFile($33)|0);
    $35 = ($34|0)!=(0);
    if (!($35)) {
     break L11;
    }
    $36 = $4;
    $37 = ((($36)) + 4|0);
    $4 = $37;
   }
  } else {
   $26 = HEAP32[2462]|0;
   $27 = (($26) + 1)|0;
   HEAP32[2462] = $27;
  }
 } while(0);
 $38 = $3;
 _free_tablefiles($38);
 $39 = HEAP32[4544]|0;
 $40 = ($39|0)!=(0|0);
 if ($40) {
  _deallocateCharacterClasses();
 }
 $41 = HEAP32[4545]|0;
 $42 = ($41|0)!=(0|0);
 if ($42) {
  _deallocateRuleNames();
 }
 $43 = HEAP32[2464]|0;
 $44 = ($43|0)!=(0);
 if ($44) {
  $45 = HEAP32[2464]|0;
  HEAP32[$vararg_buffer>>2] = $45;
  _logMessage(30000,3258,$vararg_buffer);
 }
 $46 = HEAP32[2462]|0;
 $47 = ($46|0)!=(0);
 if ($47) {
  $54 = HEAP32[2462]|0;
  HEAP32[$vararg_buffer1>>2] = $54;
  _logMessage(40000,3277,$vararg_buffer1);
  $55 = HEAP32[2463]|0;
  $56 = ($55|0)!=(0|0);
  if ($56) {
   $57 = HEAP32[2463]|0;
   _free($57);
  }
  HEAP32[2463] = 0;
 } else {
  (_setDefaults()|0);
  $48 = HEAP32[4546]|0;
  $49 = HEAP32[2463]|0;
  $50 = ((($49)) + 24|0);
  HEAP32[$50>>2] = $48;
  $51 = HEAP32[4547]|0;
  $52 = HEAP32[2463]|0;
  $53 = ((($52)) + 28|0);
  HEAP32[$53>>2] = $51;
 }
 $58 = HEAP32[2463]|0;
 $1 = $58;
 $59 = $1;
 STACKTOP = sp;return ($59|0);
}
function _allocateHeader($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $2 = $0;
 $3 = 62672;
 $4 = HEAP32[2463]|0;
 $5 = ($4|0)!=(0|0);
 if ($5) {
  $1 = 1;
  $13 = $1;
  STACKTOP = sp;return ($13|0);
 }
 HEAP32[4547] = 31340;
 $6 = (_malloc(62672)|0);
 HEAP32[2463] = $6;
 $7 = ($6|0)!=(0|0);
 if (!($7)) {
  $8 = $2;
  _compileError($8,7191,$vararg_buffer);
  $9 = HEAP32[2463]|0;
  $10 = ($9|0)!=(0|0);
  if ($10) {
   $11 = HEAP32[2463]|0;
   _free($11);
  }
  HEAP32[2463] = 0;
  _outOfMemory();
 }
 $12 = HEAP32[2463]|0;
 _memset(($12|0),0,62672)|0;
 HEAP32[4546] = 62672;
 $1 = 1;
 $13 = $1;
 STACKTOP = sp;return ($13|0);
}
function _compileString($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8240|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(8240|0);
 $4 = sp;
 $2 = $0;
 $5 = $2;
 $6 = ($5|0)==(0|0);
 if ($6) {
  $1 = 0;
  $32 = $1;
  STACKTOP = sp;return ($32|0);
 }
 _memset(($4|0),0,8228)|0;
 $7 = $2;
 HEAP32[$4>>2] = $7;
 $8 = ((($4)) + 12|0);
 HEAP32[$8>>2] = 0;
 $9 = ((($4)) + 8|0);
 HEAP32[$9>>2] = 1;
 $10 = ((($4)) + 16|0);
 HEAP32[$10>>2] = 0;
 $11 = ((($4)) + 24|0);
 HEAP32[$11>>2] = 0;
 $3 = 0;
 while(1) {
  $12 = $3;
  $13 = $2;
  $14 = (($13) + ($12)|0);
  $15 = HEAP8[$14>>0]|0;
  $16 = ($15<<24>>24)!=(0);
  $17 = $3;
  if (!($16)) {
   break;
  }
  $18 = $2;
  $19 = (($18) + ($17)|0);
  $20 = HEAP8[$19>>0]|0;
  $21 = $20 << 24 >> 24;
  $22 = $3;
  $23 = ((($4)) + 36|0);
  $24 = (($23) + ($22<<2)|0);
  HEAP32[$24>>2] = $21;
  $25 = $3;
  $26 = (($25) + 1)|0;
  $3 = $26;
 }
 $27 = ((($4)) + 36|0);
 $28 = (($27) + ($17<<2)|0);
 HEAP32[$28>>2] = 0;
 $29 = $3;
 $30 = ((($4)) + 20|0);
 HEAP32[$30>>2] = $29;
 $31 = (_compileRule($4)|0);
 $1 = $31;
 $32 = $1;
 STACKTOP = sp;return ($32|0);
}
function _compileFile($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8240|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(8240|0);
 $vararg_buffer = sp;
 $3 = sp + 4|0;
 $2 = $0;
 $4 = HEAP32[4541]|0;
 $5 = (($4) + 1)|0;
 HEAP32[4541] = $5;
 $6 = $2;
 HEAP32[$3>>2] = $6;
 $7 = ((($3)) + 12|0);
 HEAP32[$7>>2] = 0;
 $8 = ((($3)) + 16|0);
 HEAP32[$8>>2] = 0;
 $9 = ((($3)) + 8|0);
 HEAP32[$9>>2] = 0;
 $10 = HEAP32[$3>>2]|0;
 $11 = (_fopen($10,3294)|0);
 $12 = ((($3)) + 4|0);
 HEAP32[$12>>2] = $11;
 $13 = ($11|0)!=(0|0);
 if (!($13)) {
  $18 = HEAP32[$3>>2]|0;
  HEAP32[$vararg_buffer>>2] = $18;
  _logMessage(40000,3297,$vararg_buffer);
  $19 = HEAP32[2462]|0;
  $20 = (($19) + 1)|0;
  HEAP32[2462] = $20;
  $1 = 0;
  $21 = $1;
  STACKTOP = sp;return ($21|0);
 }
 while(1) {
  $14 = (_getALine($3)|0);
  $15 = ($14|0)!=(0);
  if (!($15)) {
   break;
  }
  (_compileRule($3)|0);
 }
 $16 = ((($3)) + 4|0);
 $17 = HEAP32[$16>>2]|0;
 (_fclose($17)|0);
 $1 = 1;
 $21 = $1;
 STACKTOP = sp;return ($21|0);
}
function _free_tablefiles($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $3 = $1;
 $4 = ($3|0)!=(0|0);
 if (!($4)) {
  STACKTOP = sp;return;
 }
 $5 = $1;
 $2 = $5;
 while(1) {
  $6 = $2;
  $7 = HEAP32[$6>>2]|0;
  $8 = ($7|0)!=(0|0);
  if (!($8)) {
   break;
  }
  $9 = $2;
  $10 = HEAP32[$9>>2]|0;
  _free($10);
  $11 = $2;
  $12 = ((($11)) + 4|0);
  $2 = $12;
 }
 $13 = $1;
 _free($13);
 STACKTOP = sp;return;
}
function _deallocateCharacterClasses() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 while(1) {
  $1 = HEAP32[4544]|0;
  $2 = ($1|0)!=(0|0);
  if (!($2)) {
   break;
  }
  $3 = HEAP32[4544]|0;
  $0 = $3;
  $4 = HEAP32[4544]|0;
  $5 = HEAP32[$4>>2]|0;
  HEAP32[4544] = $5;
  $6 = $0;
  $7 = ($6|0)!=(0|0);
  if (!($7)) {
   continue;
  }
  $8 = $0;
  _free($8);
 }
 STACKTOP = sp;return;
}
function _deallocateRuleNames() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 while(1) {
  $1 = HEAP32[4545]|0;
  $2 = ($1|0)!=(0|0);
  if (!($2)) {
   break;
  }
  $3 = HEAP32[4545]|0;
  $0 = $3;
  $4 = HEAP32[4545]|0;
  $5 = HEAP32[$4>>2]|0;
  HEAP32[4545] = $5;
  $6 = $0;
  $7 = ($6|0)!=(0|0);
  if (!($7)) {
   continue;
  }
  $8 = $0;
  _free($8);
 }
 STACKTOP = sp;return;
}
function _setDefaults() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[2463]|0;
 $1 = ((($0)) + 1124|0);
 $2 = ((($1)) + 36|0);
 $3 = ((($2)) + 32|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)!=(0);
 if (!($5)) {
  $6 = HEAP32[2463]|0;
  $7 = ((($6)) + 1124|0);
  $8 = ((($7)) + 36|0);
  $9 = ((($8)) + 32|0);
  HEAP32[$9>>2] = 4;
 }
 $10 = HEAP32[2463]|0;
 $11 = ((($10)) + 1124|0);
 $12 = ((($11)) + 72|0);
 $13 = ((($12)) + 32|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ($14|0)!=(0);
 if (!($15)) {
  $16 = HEAP32[2463]|0;
  $17 = ((($16)) + 1124|0);
  $18 = ((($17)) + 72|0);
  $19 = ((($18)) + 32|0);
  HEAP32[$19>>2] = 4;
 }
 $20 = HEAP32[2463]|0;
 $21 = ((($20)) + 1124|0);
 $22 = ((($21)) + 108|0);
 $23 = ((($22)) + 32|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = ($24|0)!=(0);
 if (!($25)) {
  $26 = HEAP32[2463]|0;
  $27 = ((($26)) + 1124|0);
  $28 = ((($27)) + 108|0);
  $29 = ((($28)) + 32|0);
  HEAP32[$29>>2] = 4;
 }
 $30 = HEAP32[2463]|0;
 $31 = ((($30)) + 4|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = ($32|0)==(0);
 if (!($33)) {
  return 1;
 }
 $34 = HEAP32[2463]|0;
 $35 = ((($34)) + 4|0);
 HEAP32[$35>>2] = 1;
 return 1;
}
function _compileRule($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0, $1015 = 0;
 var $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0, $1033 = 0;
 var $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0, $1051 = 0;
 var $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0, $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0, $1069 = 0, $107 = 0;
 var $1070 = 0, $1071 = 0, $1072 = 0, $1073 = 0, $1074 = 0, $1075 = 0, $1076 = 0, $1077 = 0, $1078 = 0, $1079 = 0, $108 = 0, $1080 = 0, $1081 = 0, $1082 = 0, $1083 = 0, $1084 = 0, $1085 = 0, $1086 = 0, $1087 = 0, $1088 = 0;
 var $1089 = 0, $109 = 0, $1090 = 0, $1091 = 0, $1092 = 0, $1093 = 0, $1094 = 0, $1095 = 0, $1096 = 0, $1097 = 0, $1098 = 0, $1099 = 0, $11 = 0, $110 = 0, $1100 = 0, $1101 = 0, $1102 = 0, $1103 = 0, $1104 = 0, $1105 = 0;
 var $1106 = 0, $1107 = 0, $1108 = 0, $1109 = 0, $111 = 0, $1110 = 0, $1111 = 0, $1112 = 0, $1113 = 0, $1114 = 0, $1115 = 0, $1116 = 0, $1117 = 0, $1118 = 0, $1119 = 0, $112 = 0, $1120 = 0, $1121 = 0, $1122 = 0, $1123 = 0;
 var $1124 = 0, $1125 = 0, $1126 = 0, $1127 = 0, $1128 = 0, $1129 = 0, $113 = 0, $1130 = 0, $1131 = 0, $1132 = 0, $1133 = 0, $1134 = 0, $1135 = 0, $1136 = 0, $1137 = 0, $1138 = 0, $1139 = 0, $114 = 0, $1140 = 0, $1141 = 0;
 var $1142 = 0, $1143 = 0, $1144 = 0, $1145 = 0, $1146 = 0, $1147 = 0, $1148 = 0, $1149 = 0, $115 = 0, $1150 = 0, $1151 = 0, $1152 = 0, $1153 = 0, $1154 = 0, $1155 = 0, $1156 = 0, $1157 = 0, $1158 = 0, $1159 = 0, $116 = 0;
 var $1160 = 0, $1161 = 0, $1162 = 0, $1163 = 0, $1164 = 0, $1165 = 0, $1166 = 0, $1167 = 0, $1168 = 0, $1169 = 0, $117 = 0, $1170 = 0, $1171 = 0, $1172 = 0, $1173 = 0, $1174 = 0, $1175 = 0, $1176 = 0, $1177 = 0, $1178 = 0;
 var $1179 = 0, $118 = 0, $1180 = 0, $1181 = 0, $1182 = 0, $1183 = 0, $1184 = 0, $1185 = 0, $1186 = 0, $1187 = 0, $1188 = 0, $1189 = 0, $119 = 0, $1190 = 0, $1191 = 0, $1192 = 0, $1193 = 0, $1194 = 0, $1195 = 0, $1196 = 0;
 var $1197 = 0, $1198 = 0, $1199 = 0, $12 = 0, $120 = 0, $1200 = 0, $1201 = 0, $1202 = 0, $1203 = 0, $1204 = 0, $1205 = 0, $1206 = 0, $1207 = 0, $1208 = 0, $1209 = 0, $121 = 0, $1210 = 0, $1211 = 0, $1212 = 0, $1213 = 0;
 var $1214 = 0, $1215 = 0, $1216 = 0, $1217 = 0, $1218 = 0, $1219 = 0, $122 = 0, $1220 = 0, $1221 = 0, $1222 = 0, $1223 = 0, $1224 = 0, $1225 = 0, $1226 = 0, $1227 = 0, $1228 = 0, $1229 = 0, $123 = 0, $1230 = 0, $1231 = 0;
 var $1232 = 0, $1233 = 0, $1234 = 0, $1235 = 0, $1236 = 0, $1237 = 0, $1238 = 0, $1239 = 0, $124 = 0, $1240 = 0, $1241 = 0, $1242 = 0, $1243 = 0, $1244 = 0, $1245 = 0, $1246 = 0, $1247 = 0, $1248 = 0, $125 = 0, $126 = 0;
 var $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0;
 var $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0;
 var $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0;
 var $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0;
 var $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0;
 var $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0;
 var $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0;
 var $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0;
 var $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0;
 var $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0;
 var $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0;
 var $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0;
 var $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0;
 var $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0;
 var $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0;
 var $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0;
 var $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0;
 var $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0;
 var $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0;
 var $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0;
 var $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0;
 var $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0;
 var $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0;
 var $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0;
 var $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0;
 var $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0;
 var $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0;
 var $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0;
 var $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0;
 var $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0;
 var $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0;
 var $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0;
 var $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0;
 var $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0;
 var $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0;
 var $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0;
 var $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0;
 var $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0;
 var $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0;
 var $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0;
 var $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0;
 var $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0;
 var $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0;
 var $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0;
 var $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0;
 var $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0;
 var $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0;
 var $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0;
 var $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $or$cond = 0, $or$cond3 = 0, $vararg_buffer = 0, $vararg_buffer10 = 0, $vararg_buffer13 = 0, $vararg_buffer16 = 0, $vararg_buffer19 = 0, $vararg_buffer22 = 0, $vararg_buffer24 = 0, $vararg_buffer27 = 0, $vararg_buffer29 = 0, $vararg_buffer31 = 0;
 var $vararg_buffer33 = 0, $vararg_buffer35 = 0, $vararg_buffer37 = 0, $vararg_buffer4 = 0, $vararg_buffer40 = 0, $vararg_buffer43 = 0, $vararg_buffer46 = 0, $vararg_buffer48 = 0, $vararg_buffer50 = 0, $vararg_buffer52 = 0, $vararg_buffer54 = 0, $vararg_buffer56 = 0, $vararg_buffer58 = 0, $vararg_buffer6 = 0, $vararg_buffer60 = 0, $vararg_buffer62 = 0, $vararg_buffer65 = 0, $vararg_buffer67 = 0, $vararg_buffer69 = 0, $vararg_buffer71 = 0;
 var $vararg_buffer75 = 0, $vararg_buffer77 = 0, $vararg_buffer79 = 0, $vararg_buffer8 = 0, $vararg_buffer82 = 0, $vararg_buffer85 = 0, $vararg_buffer87 = 0, $vararg_buffer89 = 0, $vararg_ptr74 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 98768|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(98768|0);
 $vararg_buffer89 = sp + 296|0;
 $vararg_buffer87 = sp + 288|0;
 $vararg_buffer85 = sp + 280|0;
 $vararg_buffer82 = sp + 272|0;
 $vararg_buffer79 = sp + 264|0;
 $vararg_buffer77 = sp + 256|0;
 $vararg_buffer75 = sp + 248|0;
 $vararg_buffer71 = sp + 240|0;
 $vararg_buffer69 = sp + 232|0;
 $vararg_buffer67 = sp + 224|0;
 $vararg_buffer65 = sp + 216|0;
 $vararg_buffer62 = sp + 208|0;
 $vararg_buffer60 = sp + 200|0;
 $vararg_buffer58 = sp + 192|0;
 $vararg_buffer56 = sp + 184|0;
 $vararg_buffer54 = sp + 176|0;
 $vararg_buffer52 = sp + 168|0;
 $vararg_buffer50 = sp + 160|0;
 $vararg_buffer48 = sp + 152|0;
 $vararg_buffer46 = sp + 144|0;
 $vararg_buffer43 = sp + 136|0;
 $vararg_buffer40 = sp + 128|0;
 $vararg_buffer37 = sp + 120|0;
 $vararg_buffer35 = sp + 112|0;
 $vararg_buffer33 = sp + 104|0;
 $vararg_buffer31 = sp + 96|0;
 $vararg_buffer29 = sp + 88|0;
 $vararg_buffer27 = sp + 80|0;
 $vararg_buffer24 = sp + 72|0;
 $vararg_buffer22 = sp + 64|0;
 $vararg_buffer19 = sp + 56|0;
 $vararg_buffer16 = sp + 48|0;
 $vararg_buffer13 = sp + 40|0;
 $vararg_buffer10 = sp + 32|0;
 $vararg_buffer8 = sp + 24|0;
 $vararg_buffer6 = sp + 16|0;
 $vararg_buffer4 = sp + 8|0;
 $vararg_buffer = sp;
 $4 = sp + 90552|0;
 $6 = sp + 82352|0;
 $7 = sp + 74156|0;
 $8 = sp + 65960|0;
 $9 = sp + 57764|0;
 $10 = sp + 49568|0;
 $11 = sp + 49564|0;
 $12 = sp + 49560|0;
 $17 = sp + 41348|0;
 $18 = sp + 33152|0;
 $19 = sp + 24956|0;
 $20 = sp + 24952|0;
 $24 = sp + 16744|0;
 $25 = sp + 8548|0;
 $26 = sp + 8544|0;
 $33 = sp + 324|0;
 $39 = sp + 300|0;
 $2 = $0;
 $3 = 1;
 HEAP32[$11>>2] = 0;
 HEAP32[$12>>2] = 0;
 $13 = 0;
 $14 = 0;
 HEAP32[4548] = 0;
 HEAP32[4549] = 0;
 L1: while(1) {
  $40 = $2;
  $41 = (_getToken($40,$4,0)|0);
  $42 = ($41|0)!=(0);
  if (!($42)) {
   label = 3;
   break;
  }
  $43 = ((($4)) + 4|0);
  $44 = HEAP32[$43>>2]|0;
  $45 = ($44|0)==(35);
  if ($45) {
   label = 6;
   break;
  }
  $46 = ((($4)) + 4|0);
  $47 = HEAP32[$46>>2]|0;
  $48 = ($47|0)==(60);
  if ($48) {
   label = 6;
   break;
  }
  $49 = $2;
  $50 = ((($49)) + 8|0);
  $51 = HEAP32[$50>>2]|0;
  $52 = ($51|0)==(1);
  if ($52) {
   $53 = ((($4)) + 4|0);
   $54 = (_eqasc2uni(3320,$53,3)|0);
   $55 = ($54|0)!=(0);
   if ($55) {
    label = 10;
    break;
   }
   $56 = ((($4)) + 4|0);
   $57 = (_eqasc2uni(3324,$56,5)|0);
   $58 = ($57|0)!=(0);
   if ($58) {
    label = 10;
    break;
   }
  }
  $60 = $2;
  $61 = (_getOpcode($60,$4)|0);
  $5 = $61;
  $62 = $5;
  switch ($62|0) {
  case 1: case 111:  {
   break L1;
   break;
  }
  case 0:  {
   label = 12;
   break L1;
   break;
  }
  case 2:  {
   label = 16;
   break L1;
   break;
  }
  case 108:  {
   label = 17;
   break L1;
   break;
  }
  case 109:  {
   label = 36;
   break L1;
   break;
  }
  case 8:  {
   label = 55;
   break L1;
   break;
  }
  case 9:  {
   label = 56;
   break L1;
   break;
  }
  case 6:  {
   label = 64;
   break L1;
   break;
  }
  case 7:  {
   label = 65;
   break L1;
   break;
  }
  case 3:  {
   label = 66;
   break L1;
   break;
  }
  case 4:  {
   label = 67;
   break L1;
   break;
  }
  case 5:  {
   label = 68;
   break L1;
   break;
  }
  case 10:  {
   label = 69;
   break L1;
   break;
  }
  case 23:  {
   label = 70;
   break L1;
   break;
  }
  case 31: case 30: case 29: case 28: case 27: case 26: case 25: case 24:  {
   label = 91;
   break L1;
   break;
  }
  case 11:  {
   label = 133;
   break L1;
   break;
  }
  case 12:  {
   label = 134;
   break L1;
   break;
  }
  case 13:  {
   label = 140;
   break L1;
   break;
  }
  case 14:  {
   label = 146;
   break L1;
   break;
  }
  case 15:  {
   label = 152;
   break L1;
   break;
  }
  case 110:  {
   label = 153;
   break L1;
   break;
  }
  case 16:  {
   label = 172;
   break L1;
   break;
  }
  case 17:  {
   label = 179;
   break L1;
   break;
  }
  case 82:  {
   label = 186;
   break L1;
   break;
  }
  case 18:  {
   label = 187;
   break L1;
   break;
  }
  case 19:  {
   label = 194;
   break L1;
   break;
  }
  case 20:  {
   label = 200;
   break L1;
   break;
  }
  case 21:  {
   label = 206;
   break L1;
   break;
  }
  case 22:  {
   label = 213;
   break L1;
   break;
  }
  case 32:  {
   label = 218;
   break L1;
   break;
  }
  case 33:  {
   label = 224;
   break L1;
   break;
  }
  case 43:  {
   label = 225;
   break L1;
   break;
  }
  case 81:  {
   label = 226;
   break L1;
   break;
  }
  case 76: case 75: case 104: case 103: case 102: case 101: case 100: case 99: case 98: case 97: case 96: case 95: case 94: case 93: case 91: case 90: case 89: case 88: case 87: case 86: case 80: case 78:  {
   label = 227;
   break L1;
   break;
  }
  case 46: case 45:  {
   label = 231;
   break L1;
   break;
  }
  case 79:  {
   label = 241;
   break L1;
   break;
  }
  case 77:  {
   label = 252;
   break L1;
   break;
  }
  case 69:  {
   label = 255;
   break L1;
   break;
  }
  case 71:  {
   label = 271;
   break L1;
   break;
  }
  case 72:  {
   label = 272;
   break L1;
   break;
  }
  case 73:  {
   label = 274;
   break L1;
   break;
  }
  case 74:  {
   label = 276;
   break L1;
   break;
  }
  case 70:  {
   label = 278;
   break L1;
   break;
  }
  case 85: case 84: case 83: case 92:  {
   label = 282;
   break L1;
   break;
  }
  case 44:  {
   label = 285;
   break L1;
   break;
  }
  case 47:  {
   label = 295;
   break L1;
   break;
  }
  case 56: case 55: case 54:  {
   label = 323;
   break L1;
   break;
  }
  case 105: case 106:  {
   label = 325;
   break L1;
   break;
  }
  case 57:  {
   label = 332;
   break L1;
   break;
  }
  case 58:  {
   label = 333;
   break L1;
   break;
  }
  case 67:  {
   label = 334;
   break L1;
   break;
  }
  case 59:  {
   label = 335;
   break L1;
   break;
  }
  case 60:  {
   label = 336;
   break L1;
   break;
  }
  case 61:  {
   label = 337;
   break L1;
   break;
  }
  case 62:  {
   label = 338;
   break L1;
   break;
  }
  case 63:  {
   label = 339;
   break L1;
   break;
  }
  case 64:  {
   label = 340;
   break L1;
   break;
  }
  case 65:  {
   label = 341;
   break L1;
   break;
  }
  case 66:  {
   label = 342;
   break L1;
   break;
  }
  case 68:  {
   label = 343;
   break L1;
   break;
  }
  case 48:  {
   $38 = $11;
   break;
  }
  case 49:  {
   $38 = $12;
   break;
  }
  case 50:  {
   $1172 = HEAP32[4548]|0;
   $1173 = ($1172|0)!=(0);
   if ($1173) {
    label = 316;
    break L1;
   }
   HEAP32[4549] = 1;
   continue L1;
   break;
  }
  case 51:  {
   $1176 = HEAP32[4549]|0;
   $1177 = ($1176|0)!=(0);
   if ($1177) {
    label = 319;
    break L1;
   }
   HEAP32[4548] = 1;
   continue L1;
   break;
  }
  case 52:  {
   $1180 = HEAP32[$12>>2]|0;
   $1181 = $1180 | 268435456;
   HEAP32[$12>>2] = $1181;
   continue L1;
   break;
  }
  case 53:  {
   $1182 = HEAP32[$11>>2]|0;
   $1183 = $1182 | 268435456;
   HEAP32[$11>>2] = $1183;
   continue L1;
   break;
  }
  default: {
   label = 349;
   break L1;
  }
  }
  $1159 = HEAP32[4544]|0;
  $1160 = ($1159|0)!=(0|0);
  if (!($1160)) {
   $1161 = (_allocateCharacterClasses()|0);
   $1162 = ($1161|0)!=(0);
   if (!($1162)) {
    $3 = 0;
   }
  }
  $1163 = $2;
  $1164 = (_getCharacterClass($1163,$39)|0);
  $1165 = ($1164|0)!=(0);
  if (!($1165)) {
   break;
  }
  $1166 = HEAP32[$39>>2]|0;
  $1167 = ((($1166)) + 4|0);
  $1168 = HEAP32[$1167>>2]|0;
  $1169 = $38;
  $1170 = HEAP32[$1169>>2]|0;
  $1171 = $1170 | $1168;
  HEAP32[$1169>>2] = $1171;
 }
 L25:  switch (label|0) {
  case 3: {
   $1 = 1;
   $1248 = $1;
   STACKTOP = sp;return ($1248|0);
   break;
  }
  case 6: {
   $1 = 1;
   $1248 = $1;
   STACKTOP = sp;return ($1248|0);
   break;
  }
  case 10: {
   $59 = $2;
   (_compileHyphenation($59,$4)|0);
   $1 = 1;
   $1248 = $1;
   STACKTOP = sp;return ($1248|0);
   break;
  }
  case 12: {
   $63 = $2;
   $64 = (_getToken($63,$4,3330)|0);
   $65 = ($64|0)!=(0);
   if ($65) {
    $66 = $2;
    $67 = (_parseChars($66,$17,$4)|0);
    $68 = ($67|0)!=(0);
    if ($68) {
     $69 = $2;
     $70 = (_includeFile($69,$17)|0);
     $71 = ($70|0)!=(0);
     if (!($71)) {
      $3 = 0;
     }
    }
   }
   break;
  }
  case 16: {
   $72 = $2;
   $73 = HEAP32[2463]|0;
   $74 = ((($73)) + 32|0);
   $75 = (_compileBrailleIndicator($72,3348,2,$74)|0);
   $3 = $75;
   break;
  }
  case 17: {
   $23 = 110880;
   $76 = $23;
   $77 = (_malloc($76)|0);
   $14 = $77;
   $78 = $14;
   $79 = ($78|0)!=(0|0);
   if (!($79)) {
    _outOfMemory();
   }
   $80 = $14;
   $81 = $23;
   _memset(($80|0),-1,($81|0))|0;
   HEAP32[4549] = 1;
   $82 = $2;
   (_getCharacters($82,$18)|0);
   $83 = $2;
   (_getRuleCharsText($83,$6)|0);
   $84 = $2;
   (_getCharacters($84,$19)|0);
   $85 = $2;
   (_getRuleDotsPattern($85,$7)|0);
   $86 = $2;
   $87 = $5;
   $88 = HEAP32[$11>>2]|0;
   $89 = HEAP32[$12>>2]|0;
   $90 = (_addRule($86,$87,$6,$7,$88,$89)|0);
   $91 = ($90|0)!=(0);
   if (!($91)) {
    $3 = 0;
   }
   $92 = ((($18)) + 4|0);
   $93 = HEAP32[$92>>2]|0;
   $94 = ($93|0)==(45);
   if ($94) {
    $95 = HEAP32[$18>>2]|0;
    $96 = ($95|0)==(1);
    if ($96) {
     $97 = ((($18)) + 4|0);
     $98 = $14;
     $99 = ((($98)) + 4|0);
     $100 = HEAP32[2463]|0;
     $101 = (_pattern_compile($97,0,$99,13841,$100)|0);
     $21 = $101;
    } else {
     label = 24;
    }
   } else {
    label = 24;
   }
   if ((label|0) == 24) {
    $102 = ((($18)) + 4|0);
    $103 = HEAP32[$18>>2]|0;
    $104 = $14;
    $105 = ((($104)) + 4|0);
    $106 = HEAP32[2463]|0;
    $107 = (_pattern_compile($102,$103,$105,13841,$106)|0);
    $21 = $107;
   }
   $108 = $21;
   $109 = ($108|0)!=(0);
   if (!($109)) {
    $3 = 0;
    break;
   }
   $110 = $21;
   $111 = (($110) + 1)|0;
   $112 = $14;
   HEAP32[$112>>2] = $111;
   $22 = $111;
   $113 = $14;
   $114 = ((($113)) + 4|0);
   _pattern_reverse($114);
   $115 = ((($19)) + 4|0);
   $116 = HEAP32[$115>>2]|0;
   $117 = ($116|0)==(45);
   if ($117) {
    $118 = HEAP32[$19>>2]|0;
    $119 = ($118|0)==(1);
    if ($119) {
     $120 = ((($19)) + 4|0);
     $121 = $22;
     $122 = $14;
     $123 = (($122) + ($121<<2)|0);
     $124 = HEAP32[2463]|0;
     $125 = (_pattern_compile($120,0,$123,13841,$124)|0);
     $21 = $125;
    } else {
     label = 30;
    }
   } else {
    label = 30;
   }
   if ((label|0) == 30) {
    $126 = ((($19)) + 4|0);
    $127 = HEAP32[$19>>2]|0;
    $128 = $22;
    $129 = $14;
    $130 = (($129) + ($128<<2)|0);
    $131 = HEAP32[2463]|0;
    $132 = (_pattern_compile($126,$127,$130,13841,$131)|0);
    $21 = $132;
   }
   $133 = $21;
   $134 = ($133|0)!=(0);
   if (!($134)) {
    $3 = 0;
    break;
   }
   $135 = $22;
   $136 = $21;
   $137 = (($136) + ($135))|0;
   $21 = $137;
   $138 = $2;
   $139 = $21;
   $140 = $139<<2;
   $141 = (_allocateSpaceInTable($138,$20,$140)|0);
   $142 = ($141|0)!=(0);
   if ($142) {
    $143 = HEAP32[4550]|0;
    $144 = HEAP32[2463]|0;
    $145 = ((($144)) + 31332|0);
    $146 = (($145) + ($143<<2)|0);
    HEAP32[4551] = $146;
    $147 = HEAP32[$20>>2]|0;
    $148 = HEAP32[2463]|0;
    $149 = ((($148)) + 31332|0);
    $150 = (($149) + ($147<<2)|0);
    $151 = $14;
    $152 = $21;
    $153 = $152<<2;
    _memcpy(($150|0),($151|0),($153|0))|0;
    $154 = HEAP32[$20>>2]|0;
    $155 = HEAP32[4551]|0;
    $156 = ((($155)) + 16|0);
    HEAP32[$156>>2] = $154;
    break;
   } else {
    $3 = 0;
    break;
   }
   break;
  }
  case 36: {
   $29 = 110880;
   $157 = $29;
   $158 = (_malloc($157)|0);
   $14 = $158;
   $159 = $14;
   $160 = ($159|0)!=(0|0);
   if (!($160)) {
    _outOfMemory();
   }
   $161 = $14;
   $162 = $29;
   _memset(($161|0),-1,($162|0))|0;
   HEAP32[4548] = 1;
   $163 = $2;
   (_getCharacters($163,$24)|0);
   $164 = $2;
   (_getRuleCharsText($164,$6)|0);
   $165 = $2;
   (_getCharacters($165,$25)|0);
   $166 = $2;
   (_getRuleDotsPattern($166,$7)|0);
   $167 = $2;
   $168 = $5;
   $169 = (_addRule($167,$168,$6,$7,0,0)|0);
   $170 = ($169|0)!=(0);
   if (!($170)) {
    $3 = 0;
   }
   $171 = ((($24)) + 4|0);
   $172 = HEAP32[$171>>2]|0;
   $173 = ($172|0)==(45);
   if ($173) {
    $174 = HEAP32[$24>>2]|0;
    $175 = ($174|0)==(1);
    if ($175) {
     $176 = ((($24)) + 4|0);
     $177 = $14;
     $178 = ((($177)) + 4|0);
     $179 = HEAP32[2463]|0;
     $180 = (_pattern_compile($176,0,$178,13841,$179)|0);
     $27 = $180;
    } else {
     label = 43;
    }
   } else {
    label = 43;
   }
   if ((label|0) == 43) {
    $181 = ((($24)) + 4|0);
    $182 = HEAP32[$24>>2]|0;
    $183 = $14;
    $184 = ((($183)) + 4|0);
    $185 = HEAP32[2463]|0;
    $186 = (_pattern_compile($181,$182,$184,13841,$185)|0);
    $27 = $186;
   }
   $187 = $27;
   $188 = ($187|0)!=(0);
   if (!($188)) {
    $3 = 0;
    break;
   }
   $189 = $27;
   $190 = (($189) + 1)|0;
   $191 = $14;
   HEAP32[$191>>2] = $190;
   $28 = $190;
   $192 = $14;
   $193 = ((($192)) + 4|0);
   _pattern_reverse($193);
   $194 = ((($25)) + 4|0);
   $195 = HEAP32[$194>>2]|0;
   $196 = ($195|0)==(45);
   if ($196) {
    $197 = HEAP32[$25>>2]|0;
    $198 = ($197|0)==(1);
    if ($198) {
     $199 = ((($25)) + 4|0);
     $200 = $28;
     $201 = $14;
     $202 = (($201) + ($200<<2)|0);
     $203 = HEAP32[2463]|0;
     $204 = (_pattern_compile($199,0,$202,13841,$203)|0);
     $27 = $204;
    } else {
     label = 49;
    }
   } else {
    label = 49;
   }
   if ((label|0) == 49) {
    $205 = ((($25)) + 4|0);
    $206 = HEAP32[$25>>2]|0;
    $207 = $28;
    $208 = $14;
    $209 = (($208) + ($207<<2)|0);
    $210 = HEAP32[2463]|0;
    $211 = (_pattern_compile($205,$206,$209,13841,$210)|0);
    $27 = $211;
   }
   $212 = $27;
   $213 = ($212|0)!=(0);
   if (!($213)) {
    $3 = 0;
    break;
   }
   $214 = $28;
   $215 = $27;
   $216 = (($215) + ($214))|0;
   $27 = $216;
   $217 = $2;
   $218 = $27;
   $219 = $218<<2;
   $220 = (_allocateSpaceInTable($217,$26,$219)|0);
   $221 = ($220|0)!=(0);
   if ($221) {
    $222 = HEAP32[4550]|0;
    $223 = HEAP32[2463]|0;
    $224 = ((($223)) + 31332|0);
    $225 = (($224) + ($222<<2)|0);
    HEAP32[4551] = $225;
    $226 = HEAP32[$26>>2]|0;
    $227 = HEAP32[2463]|0;
    $228 = ((($227)) + 31332|0);
    $229 = (($228) + ($226<<2)|0);
    $230 = $14;
    $231 = $27;
    $232 = $231<<2;
    _memcpy(($229|0),($230|0),($232|0))|0;
    $233 = HEAP32[$26>>2]|0;
    $234 = HEAP32[4551]|0;
    $235 = ((($234)) + 16|0);
    HEAP32[$235>>2] = $233;
    break;
   } else {
    $3 = 0;
    break;
   }
   break;
  }
  case 55: {
   $236 = $2;
   $237 = HEAP32[2463]|0;
   $238 = ((($237)) + 1124|0);
   $239 = (_compileBrailleIndicator($236,3375,120,$238)|0);
   $3 = $239;
   break;
  }
  case 56: {
   $240 = $2;
   $241 = (_compileBeforeAfter($240)|0);
   switch ($241|0) {
   case 1:  {
    $242 = HEAP32[2463]|0;
    $243 = ((($242)) + 1124|0);
    $244 = ((($243)) + 8|0);
    $245 = HEAP32[$244>>2]|0;
    $246 = ($245|0)!=(0);
    $247 = $2;
    if ($246) {
     _compileError($247,3399,$vararg_buffer);
     $3 = 0;
     break L25;
    } else {
     $248 = HEAP32[2463]|0;
     $249 = ((($248)) + 1124|0);
     $250 = ((($249)) + 4|0);
     $251 = (_compileBrailleIndicator($247,3445,121,$250)|0);
     $3 = $251;
     break L25;
    }
    break;
   }
   case 2:  {
    $252 = HEAP32[2463]|0;
    $253 = ((($252)) + 1124|0);
    $254 = ((($253)) + 4|0);
    $255 = HEAP32[$254>>2]|0;
    $256 = ($255|0)!=(0);
    $257 = $2;
    if ($256) {
     _compileError($257,3475,$vararg_buffer4);
     $3 = 0;
     break L25;
    } else {
     $258 = HEAP32[2463]|0;
     $259 = ((($258)) + 1124|0);
     $260 = ((($259)) + 8|0);
     $261 = (_compileBrailleIndicator($257,3522,122,$260)|0);
     $3 = $261;
     break L25;
    }
    break;
   }
   default: {
    $262 = $2;
    _compileError($262,3551,$vararg_buffer6);
    $3 = 0;
    break L25;
   }
   }
   break;
  }
  case 64: {
   $263 = $2;
   $264 = HEAP32[2463]|0;
   $265 = ((($264)) + 1124|0);
   $266 = ((($265)) + 12|0);
   $267 = (_compileBrailleIndicator($263,3588,118,$266)|0);
   $3 = $267;
   break;
  }
  case 65: {
   $268 = $2;
   $269 = HEAP32[2463]|0;
   $270 = ((($269)) + 1124|0);
   $271 = ((($270)) + 16|0);
   $272 = (_compileBrailleIndicator($268,3614,119,$271)|0);
   $3 = $272;
   break;
  }
  case 66: {
   $273 = $2;
   $274 = HEAP32[2463]|0;
   $275 = ((($274)) + 1124|0);
   $276 = ((($275)) + 20|0);
   $277 = (_compileBrailleIndicator($273,3639,115,$276)|0);
   $3 = $277;
   break;
  }
  case 67: {
   $278 = $2;
   $279 = HEAP32[2463]|0;
   $280 = ((($279)) + 1124|0);
   $281 = ((($280)) + 24|0);
   $282 = (_compileBrailleIndicator($278,3666,116,$281)|0);
   $3 = $282;
   break;
  }
  case 68: {
   $283 = $2;
   $284 = HEAP32[2463]|0;
   $285 = ((($284)) + 1124|0);
   $286 = ((($285)) + 28|0);
   $287 = (_compileBrailleIndicator($283,3679,117,$286)|0);
   $3 = $287;
   break;
  }
  case 69: {
   $288 = $2;
   $289 = (_compileNumber($288)|0);
   $290 = HEAP32[2463]|0;
   $291 = ((($290)) + 1124|0);
   $292 = ((($291)) + 32|0);
   HEAP32[$292>>2] = $289;
   $3 = $289;
   break;
  }
  case 70: {
   $293 = $2;
   $294 = (_getToken($293,$4,3697)|0);
   $295 = ($294|0)!=(0);
   if ($295) {
    $296 = $2;
    $297 = (_parseChars($296,$10,$4)|0);
    $298 = ($297|0)!=(0);
    if ($298) {
     $299 = HEAP32[$10>>2]|0;
     $300 = (($299) + 1)|0;
     $301 = $300;
     $302 = (_malloc($301)|0);
     $30 = $302;
     $15 = 0;
     while(1) {
      $303 = $15;
      $304 = HEAP32[$10>>2]|0;
      $305 = ($303>>>0)<($304>>>0);
      $306 = $15;
      if (!($305)) {
       break;
      }
      $307 = ((($10)) + 4|0);
      $308 = (($307) + ($306<<2)|0);
      $309 = HEAP32[$308>>2]|0;
      $310 = $309&255;
      $311 = $15;
      $312 = $30;
      $313 = (($312) + ($311)|0);
      HEAP8[$313>>0] = $310;
      $314 = $15;
      $315 = (($314) + 1)|0;
      $15 = $315;
     }
     $316 = (($306) + 1)|0;
     $15 = $316;
     $317 = $30;
     $318 = (($317) + ($306)|0);
     HEAP8[$318>>0] = 0;
     $16 = 0;
     while(1) {
      $319 = $16;
      $320 = HEAP32[2463]|0;
      $321 = ((($320)) + 560|0);
      $322 = (($321) + ($319<<2)|0);
      $323 = HEAP32[$322>>2]|0;
      $324 = ($323|0)!=(0|0);
      if (!($324)) {
       break;
      }
      $325 = $30;
      $326 = $16;
      $327 = HEAP32[2463]|0;
      $328 = ((($327)) + 560|0);
      $329 = (($328) + ($326<<2)|0);
      $330 = HEAP32[$329>>2]|0;
      $331 = (_strcmp($325,$330)|0);
      $332 = ($331|0)==(0);
      if ($332) {
       label = 78;
       break;
      }
      $337 = $16;
      $338 = (($337) + 1)|0;
      $16 = $338;
     }
     if ((label|0) == 78) {
      $333 = $30;
      HEAP32[$vararg_buffer8>>2] = $333;
      _logMessage(30000,3712,$vararg_buffer8);
      $334 = HEAP32[2464]|0;
      $335 = (($334) + 1)|0;
      HEAP32[2464] = $335;
      $336 = $30;
      _free($336);
      $1 = 1;
      $1248 = $1;
      STACKTOP = sp;return ($1248|0);
     }
     $339 = $16;
     $340 = ($339|0)<(10);
     if (!($340)) {
      HEAP32[$vararg_buffer19>>2] = 10;
      _logMessage(40000,3912,$vararg_buffer19);
      $373 = HEAP32[2462]|0;
      $374 = (($373) + 1)|0;
      HEAP32[2462] = $374;
      $375 = $30;
      _free($375);
      $3 = 0;
      break;
     }
     $341 = $16;
     switch ($341|0) {
     case 0:  {
      $342 = $30;
      $343 = (_strcmp($342,3741)|0);
      $344 = ($343|0)!=(0);
      if ($344) {
       $345 = $30;
       HEAP32[$vararg_buffer10>>2] = $345;
       _logMessage(40000,3748,$vararg_buffer10);
       $346 = HEAP32[2462]|0;
       $347 = (($346) + 1)|0;
       HEAP32[2462] = $347;
       $348 = $30;
       _free($348);
       $1 = 0;
       $1248 = $1;
       STACKTOP = sp;return ($1248|0);
      }
      break;
     }
     case 1:  {
      $349 = $30;
      $350 = (_strcmp($349,3797)|0);
      $351 = ($350|0)!=(0);
      if ($351) {
       $352 = $30;
       HEAP32[$vararg_buffer13>>2] = $352;
       _logMessage(40000,3807,$vararg_buffer13);
       $353 = HEAP32[2462]|0;
       $354 = (($353) + 1)|0;
       HEAP32[2462] = $354;
       $355 = $30;
       _free($355);
       $1 = 0;
       $1248 = $1;
       STACKTOP = sp;return ($1248|0);
      }
      break;
     }
     case 2:  {
      $356 = $30;
      $357 = (_strcmp($356,3860)|0);
      $358 = ($357|0)!=(0);
      if ($358) {
       $359 = $30;
       HEAP32[$vararg_buffer16>>2] = $359;
       _logMessage(40000,3865,$vararg_buffer16);
       $360 = HEAP32[2462]|0;
       $361 = (($360) + 1)|0;
       HEAP32[2462] = $361;
       $362 = $30;
       _free($362);
       $1 = 0;
       $1248 = $1;
       STACKTOP = sp;return ($1248|0);
      }
      break;
     }
     default: {
     }
     }
     $363 = $30;
     $364 = $16;
     $365 = HEAP32[2463]|0;
     $366 = ((($365)) + 560|0);
     $367 = (($366) + ($364<<2)|0);
     HEAP32[$367>>2] = $363;
     $368 = $16;
     $369 = (($368) + 1)|0;
     $370 = HEAP32[2463]|0;
     $371 = ((($370)) + 560|0);
     $372 = (($371) + ($369<<2)|0);
     HEAP32[$372>>2] = 0;
     $3 = 1;
     break;
    }
   }
   $376 = $2;
   _compileError($376,3956,$vararg_buffer22);
   $3 = 0;
   break;
  }
  case 91: {
   $3 = 0;
   $377 = $2;
   $378 = (_getToken($377,$4,3697)|0);
   $379 = ($378|0)!=(0);
   if ($379) {
    $380 = $2;
    $381 = (_parseChars($380,$10,$4)|0);
    $382 = ($381|0)!=(0);
    if ($382) {
     $383 = HEAP32[$10>>2]|0;
     $384 = (($383) + 1)|0;
     $385 = $384;
     $386 = (_malloc($385)|0);
     $31 = $386;
     $15 = 0;
     while(1) {
      $387 = $15;
      $388 = HEAP32[$10>>2]|0;
      $389 = ($387>>>0)<($388>>>0);
      $390 = $15;
      if (!($389)) {
       break;
      }
      $391 = ((($10)) + 4|0);
      $392 = (($391) + ($390<<2)|0);
      $393 = HEAP32[$392>>2]|0;
      $394 = $393&255;
      $395 = $15;
      $396 = $31;
      $397 = (($396) + ($395)|0);
      HEAP8[$397>>0] = $394;
      $398 = $15;
      $399 = (($398) + 1)|0;
      $15 = $399;
     }
     $400 = (($390) + 1)|0;
     $15 = $400;
     $401 = $31;
     $402 = (($401) + ($390)|0);
     HEAP8[$402>>0] = 0;
     $16 = 0;
     while(1) {
      $403 = $16;
      $404 = HEAP32[2463]|0;
      $405 = ((($404)) + 560|0);
      $406 = (($405) + ($403<<2)|0);
      $407 = HEAP32[$406>>2]|0;
      $408 = ($407|0)!=(0|0);
      if (!($408)) {
       break;
      }
      $409 = $31;
      $410 = $16;
      $411 = HEAP32[2463]|0;
      $412 = ((($411)) + 560|0);
      $413 = (($412) + ($410<<2)|0);
      $414 = HEAP32[$413>>2]|0;
      $415 = (_strcmp($409,$414)|0);
      $416 = ($415|0)==(0);
      if ($416) {
       break;
      }
      $417 = $16;
      $418 = (($417) + 1)|0;
      $16 = $418;
     }
     $419 = $16;
     $420 = HEAP32[2463]|0;
     $421 = ((($420)) + 560|0);
     $422 = (($421) + ($419<<2)|0);
     $423 = HEAP32[$422>>2]|0;
     $424 = ($423|0)!=(0|0);
     if (!($424)) {
      $425 = $31;
      HEAP32[$vararg_buffer24>>2] = $425;
      _logMessage(40000,4006,$vararg_buffer24);
      $426 = HEAP32[2462]|0;
      $427 = (($426) + 1)|0;
      HEAP32[2462] = $427;
      $428 = $31;
      _free($428);
      break;
     }
     $429 = $16;
     $430 = (($429) + 1)|0;
     $16 = $430;
     $431 = $5;
     $432 = ($431|0)==(24);
     L156: do {
      if ($432) {
       $433 = $2;
       $434 = $16;
       $435 = $434<<3;
       $436 = (128 + ($435))|0;
       $437 = $16;
       $438 = HEAP32[2463]|0;
       $439 = ((($438)) + 1124|0);
       $440 = (($439) + (($437*36)|0)|0);
       $441 = ((($440)) + 20|0);
       $442 = (_compileBrailleIndicator($433,4037,$436,$441)|0);
       $3 = $442;
      } else {
       $443 = $5;
       $444 = ($443|0)==(25);
       if ($444) {
        $445 = $2;
        $446 = $16;
        $447 = $446<<3;
        $448 = (129 + ($447))|0;
        $449 = $16;
        $450 = HEAP32[2463]|0;
        $451 = ((($450)) + 1124|0);
        $452 = (($451) + (($449*36)|0)|0);
        $453 = ((($452)) + 24|0);
        $454 = (_compileBrailleIndicator($445,2525,$448,$453)|0);
        $3 = $454;
        break;
       }
       $455 = $5;
       $456 = ($455|0)==(26);
       if ($456) {
        $457 = $2;
        $458 = $16;
        $459 = $458<<3;
        $460 = (130 + ($459))|0;
        $461 = $16;
        $462 = HEAP32[2463]|0;
        $463 = ((($462)) + 1124|0);
        $464 = (($463) + (($461*36)|0)|0);
        $465 = ((($464)) + 28|0);
        $466 = (_compileBrailleIndicator($457,4051,$460,$465)|0);
        $3 = $466;
        break;
       }
       $467 = $5;
       $468 = ($467|0)==(27);
       if ($468) {
        $469 = $16;
        $470 = HEAP32[2463]|0;
        $471 = ((($470)) + 1124|0);
        $472 = (($471) + (($469*36)|0)|0);
        $473 = ((($472)) + 24|0);
        $474 = HEAP32[$473>>2]|0;
        $475 = ($474|0)!=(0);
        if (!($475)) {
         $476 = $16;
         $477 = HEAP32[2463]|0;
         $478 = ((($477)) + 1124|0);
         $479 = (($478) + (($476*36)|0)|0);
         $480 = HEAP32[$479>>2]|0;
         $481 = ($480|0)!=(0);
         if (!($481)) {
          $483 = $2;
          $484 = $16;
          $485 = $484<<3;
          $486 = (126 + ($485))|0;
          $487 = $16;
          $488 = HEAP32[2463]|0;
          $489 = ((($488)) + 1124|0);
          $490 = (($489) + (($487*36)|0)|0);
          $491 = ((($490)) + 12|0);
          $492 = (_compileBrailleIndicator($483,4196,$486,$491)|0);
          $3 = $492;
          break;
         }
        }
        $482 = $2;
        _compileError($482,4061,$vararg_buffer27);
        $3 = 0;
        break L25;
       }
       $493 = $5;
       $494 = ($493|0)==(28);
       if ($494) {
        $495 = $16;
        $496 = HEAP32[2463]|0;
        $497 = ((($496)) + 1124|0);
        $498 = (($497) + (($495*36)|0)|0);
        $499 = ((($498)) + 28|0);
        $500 = HEAP32[$499>>2]|0;
        $501 = ($500|0)!=(0);
        if (!($501)) {
         $502 = $16;
         $503 = HEAP32[2463]|0;
         $504 = ((($503)) + 1124|0);
         $505 = (($504) + (($502*36)|0)|0);
         $506 = ((($505)) + 4|0);
         $507 = HEAP32[$506>>2]|0;
         $508 = ($507|0)!=(0);
         if (!($508)) {
          $509 = $16;
          $510 = HEAP32[2463]|0;
          $511 = ((($510)) + 1124|0);
          $512 = (($511) + (($509*36)|0)|0);
          $513 = ((($512)) + 8|0);
          $514 = HEAP32[$513>>2]|0;
          $515 = ($514|0)!=(0);
          if (!($515)) {
           $517 = $2;
           $518 = $16;
           $519 = $518<<3;
           $520 = (127 + ($519))|0;
           $521 = $16;
           $522 = HEAP32[2463]|0;
           $523 = ((($522)) + 1124|0);
           $524 = (($523) + (($521*36)|0)|0);
           $525 = ((($524)) + 16|0);
           $526 = (_compileBrailleIndicator($517,4344,$520,$525)|0);
           $3 = $526;
           break;
          }
         }
        }
        $516 = $2;
        _compileError($516,4209,$vararg_buffer29);
        $3 = 0;
        break L25;
       }
       $527 = $5;
       $528 = ($527|0)==(29);
       if ($528) {
        $529 = $2;
        $530 = $16;
        $531 = $530<<3;
        $532 = (123 + ($531))|0;
        $533 = $16;
        $534 = HEAP32[2463]|0;
        $535 = ((($534)) + 1124|0);
        $536 = (($535) + (($533*36)|0)|0);
        $537 = (_compileBrailleIndicator($529,4356,$532,$536)|0);
        $3 = $537;
        break;
       }
       $538 = $5;
       $539 = ($538|0)==(30);
       if (!($539)) {
        $577 = $5;
        $578 = ($577|0)==(31);
        if (!($578)) {
         break;
        }
        $579 = $2;
        $580 = (_compileNumber($579)|0);
        $581 = $16;
        $582 = HEAP32[2463]|0;
        $583 = ((($582)) + 1124|0);
        $584 = (($583) + (($581*36)|0)|0);
        $585 = ((($584)) + 32|0);
        HEAP32[$585>>2] = $580;
        $3 = $580;
        break;
       }
       $540 = $2;
       $541 = (_compileBeforeAfter($540)|0);
       switch ($541|0) {
       case 1:  {
        $542 = $16;
        $543 = HEAP32[2463]|0;
        $544 = ((($543)) + 1124|0);
        $545 = (($544) + (($542*36)|0)|0);
        $546 = ((($545)) + 8|0);
        $547 = HEAP32[$546>>2]|0;
        $548 = ($547|0)!=(0);
        $549 = $2;
        if ($548) {
         _compileError($549,4367,$vararg_buffer31);
         $3 = 0;
         break L156;
        } else {
         $550 = $16;
         $551 = $550<<3;
         $552 = (124 + ($551))|0;
         $553 = $16;
         $554 = HEAP32[2463]|0;
         $555 = ((($554)) + 1124|0);
         $556 = (($555) + (($553*36)|0)|0);
         $557 = ((($556)) + 4|0);
         $558 = (_compileBrailleIndicator($549,4400,$552,$557)|0);
         $3 = $558;
         break L156;
        }
        break;
       }
       case 2:  {
        $559 = $16;
        $560 = HEAP32[2463]|0;
        $561 = ((($560)) + 1124|0);
        $562 = (($561) + (($559*36)|0)|0);
        $563 = ((($562)) + 4|0);
        $564 = HEAP32[$563>>2]|0;
        $565 = ($564|0)!=(0);
        $566 = $2;
        if ($565) {
         _compileError($566,4417,$vararg_buffer33);
         $3 = 0;
         break L156;
        } else {
         $567 = $16;
         $568 = $567<<3;
         $569 = (125 + ($568))|0;
         $570 = $16;
         $571 = HEAP32[2463]|0;
         $572 = ((($571)) + 1124|0);
         $573 = (($572) + (($570*36)|0)|0);
         $574 = ((($573)) + 8|0);
         $575 = (_compileBrailleIndicator($566,4451,$569,$574)|0);
         $3 = $575;
         break L156;
        }
        break;
       }
       default: {
        $576 = $2;
        _compileError($576,3551,$vararg_buffer35);
        $3 = 0;
        break L156;
       }
       }
      }
     } while(0);
     $586 = $31;
     _free($586);
    }
   }
   break;
  }
  case 133: {
   $587 = $2;
   $588 = HEAP32[2463]|0;
   $589 = ((($588)) + 36|0);
   $590 = (_compileBrailleIndicator($587,4467,112,$589)|0);
   $3 = $590;
   break;
  }
  case 134: {
   $591 = $2;
   $592 = (_getRuleCharsText($591,$6)|0);
   $593 = ($592|0)!=(0);
   if ($593) {
    $594 = HEAP32[2463]|0;
    $595 = ((($594)) + 2080|0);
    $596 = HEAP32[$595>>2]|0;
    $597 = HEAP32[$6>>2]|0;
    $598 = (($596) + ($597))|0;
    $599 = ($598>>>0)>(128);
    if ($599) {
     $600 = $2;
     HEAP32[$vararg_buffer37>>2] = 128;
     _compileError($600,4479,$vararg_buffer37);
     $3 = 0;
     break;
    }
    $15 = 0;
    while(1) {
     $601 = $15;
     $602 = HEAP32[$6>>2]|0;
     $603 = ($601>>>0)<($602>>>0);
     if (!($603)) {
      break L25;
     }
     $604 = $15;
     $605 = ((($6)) + 4|0);
     $606 = (($605) + ($604<<2)|0);
     $607 = HEAP32[$606>>2]|0;
     $608 = HEAP32[2463]|0;
     $609 = ((($608)) + 2080|0);
     $610 = HEAP32[$609>>2]|0;
     $611 = (($610) + 1)|0;
     HEAP32[$609>>2] = $611;
     $612 = HEAP32[2463]|0;
     $613 = ((($612)) + 1568|0);
     $614 = (($613) + ($610<<2)|0);
     HEAP32[$614>>2] = $607;
     $615 = $15;
     $616 = (($615) + 1)|0;
     $15 = $616;
    }
   }
   break;
  }
  case 140: {
   $617 = $2;
   $618 = (_getRuleCharsText($617,$6)|0);
   $619 = ($618|0)!=(0);
   if ($619) {
    $620 = HEAP32[2463]|0;
    $621 = ((($620)) + 2596|0);
    $622 = HEAP32[$621>>2]|0;
    $623 = HEAP32[$6>>2]|0;
    $624 = (($622) + ($623))|0;
    $625 = ($624>>>0)>(128);
    if ($625) {
     $626 = $2;
     HEAP32[$vararg_buffer40>>2] = 128;
     _compileError($626,4479,$vararg_buffer40);
     $3 = 0;
     break;
    }
    $15 = 0;
    while(1) {
     $627 = $15;
     $628 = HEAP32[$6>>2]|0;
     $629 = ($627>>>0)<($628>>>0);
     if (!($629)) {
      break L25;
     }
     $630 = $15;
     $631 = ((($6)) + 4|0);
     $632 = (($631) + ($630<<2)|0);
     $633 = HEAP32[$632>>2]|0;
     $634 = HEAP32[2463]|0;
     $635 = ((($634)) + 2596|0);
     $636 = HEAP32[$635>>2]|0;
     $637 = (($636) + 1)|0;
     HEAP32[$635>>2] = $637;
     $638 = HEAP32[2463]|0;
     $639 = ((($638)) + 2084|0);
     $640 = (($639) + ($636<<2)|0);
     HEAP32[$640>>2] = $633;
     $641 = $15;
     $642 = (($641) + 1)|0;
     $15 = $642;
    }
   }
   break;
  }
  case 146: {
   $643 = $2;
   $644 = (_getRuleCharsText($643,$6)|0);
   $645 = ($644|0)!=(0);
   if ($645) {
    $646 = HEAP32[2463]|0;
    $647 = ((($646)) + 3112|0);
    $648 = HEAP32[$647>>2]|0;
    $649 = HEAP32[$6>>2]|0;
    $650 = (($648) + ($649))|0;
    $651 = ($650>>>0)>(128);
    if ($651) {
     $652 = $2;
     HEAP32[$vararg_buffer43>>2] = 128;
     _compileError($652,4479,$vararg_buffer43);
     $3 = 0;
     break;
    }
    $15 = 0;
    while(1) {
     $653 = $15;
     $654 = HEAP32[$6>>2]|0;
     $655 = ($653>>>0)<($654>>>0);
     if (!($655)) {
      break L25;
     }
     $656 = $15;
     $657 = ((($6)) + 4|0);
     $658 = (($657) + ($656<<2)|0);
     $659 = HEAP32[$658>>2]|0;
     $660 = HEAP32[2463]|0;
     $661 = ((($660)) + 3112|0);
     $662 = HEAP32[$661>>2]|0;
     $663 = (($662) + 1)|0;
     HEAP32[$661>>2] = $663;
     $664 = HEAP32[2463]|0;
     $665 = ((($664)) + 2600|0);
     $666 = (($665) + ($662<<2)|0);
     HEAP32[$666>>2] = $659;
     $667 = $15;
     $668 = (($667) + 1)|0;
     $15 = $668;
    }
   }
   break;
  }
  case 152: {
   $669 = $2;
   $670 = HEAP32[2463]|0;
   $671 = ((($670)) + 40|0);
   $672 = (_compileBrailleIndicator($669,4503,113,$671)|0);
   $3 = $672;
   break;
  }
  case 153: {
   $13 = 0;
   $3 = 1;
   $673 = $2;
   $674 = (_getToken($673,$6,4515)|0);
   $675 = ($674|0)!=(0);
   if (!($675)) {
    $676 = $2;
    _compileError($676,4532,$vararg_buffer46);
    $3 = 0;
    break;
   }
   $15 = -1;
   $677 = ((($6)) + 4|0);
   $678 = HEAP32[$677>>2]|0;
   switch ($678|0) {
   case 48:  {
    $15 = 0;
    break;
   }
   case 49:  {
    $15 = 1;
    break;
   }
   case 50:  {
    $15 = 2;
    break;
   }
   case 51:  {
    $15 = 3;
    break;
   }
   case 52:  {
    $15 = 4;
    break;
   }
   case 53:  {
    $15 = 5;
    break;
   }
   case 54:  {
    $15 = 6;
    break;
   }
   case 55:  {
    $15 = 7;
    break;
   }
   default: {
   }
   }
   $679 = $15;
   $680 = ($679|0)==(-1);
   $681 = $2;
   if ($680) {
    _compileError($681,4559,$vararg_buffer48);
    $3 = 0;
    break;
   }
   $682 = (_getRuleCharsText($681,$6)|0);
   $683 = ($682|0)!=(0);
   if ($683) {
    $16 = 0;
    while(1) {
     $684 = $16;
     $685 = HEAP32[$6>>2]|0;
     $686 = ($684>>>0)<($685>>>0);
     if (!($686)) {
      break L25;
     }
     $687 = $16;
     $688 = ((($6)) + 4|0);
     $689 = (($688) + ($687<<2)|0);
     $690 = HEAP32[$689>>2]|0;
     $691 = (_compile_findCharOrDots($690,0)|0);
     $13 = $691;
     $692 = $13;
     $693 = ($692|0)!=(0|0);
     if (!($693)) {
      break;
     }
     $694 = $15;
     $695 = 65536 << $694;
     $696 = $13;
     $697 = ((($696)) + 12|0);
     $698 = HEAP32[$697>>2]|0;
     $699 = $698 | $695;
     HEAP32[$697>>2] = $699;
     $700 = $16;
     $701 = (($700) + 1)|0;
     $16 = $701;
    }
    $702 = $2;
    _compileError($702,4585,$vararg_buffer50);
    $3 = 0;
   }
   break;
  }
  case 172: {
   $13 = 0;
   $3 = 1;
   $703 = $2;
   $704 = (_getRuleCharsText($703,$6)|0);
   $705 = ($704|0)!=(0);
   if ($705) {
    $15 = 0;
    while(1) {
     $706 = $15;
     $707 = HEAP32[$6>>2]|0;
     $708 = ($706>>>0)<($707>>>0);
     if (!($708)) {
      break;
     }
     $709 = $15;
     $710 = ((($6)) + 4|0);
     $711 = (($710) + ($709<<2)|0);
     $712 = HEAP32[$711>>2]|0;
     $713 = (_compile_findCharOrDots($712,0)|0);
     $13 = $713;
     $714 = $13;
     $715 = ($714|0)!=(0|0);
     if (!($715)) {
      label = 177;
      break;
     }
     $716 = $13;
     $717 = ((($716)) + 12|0);
     $718 = HEAP32[$717>>2]|0;
     $719 = $718 | 33554432;
     HEAP32[$717>>2] = $719;
     $720 = $15;
     $721 = (($720) + 1)|0;
     $15 = $721;
    }
    if ((label|0) == 177) {
     $722 = $2;
     _compileError($722,4615,$vararg_buffer52);
     $3 = 0;
    }
    $723 = HEAP32[2463]|0;
    $724 = ((($723)) + 20|0);
    HEAP32[$724>>2] = 1;
   }
   break;
  }
  case 179: {
   $13 = 0;
   $3 = 1;
   $725 = $2;
   $726 = (_getRuleCharsText($725,$6)|0);
   $727 = ($726|0)!=(0);
   if ($727) {
    $15 = 0;
    while(1) {
     $728 = $15;
     $729 = HEAP32[$6>>2]|0;
     $730 = ($728>>>0)<($729>>>0);
     if (!($730)) {
      break;
     }
     $731 = $15;
     $732 = ((($6)) + 4|0);
     $733 = (($732) + ($731<<2)|0);
     $734 = HEAP32[$733>>2]|0;
     $735 = (_compile_findCharOrDots($734,0)|0);
     $13 = $735;
     $736 = $13;
     $737 = ($736|0)!=(0|0);
     if (!($737)) {
      label = 184;
      break;
     }
     $738 = $13;
     $739 = ((($738)) + 12|0);
     $740 = HEAP32[$739>>2]|0;
     $741 = $740 | 67108864;
     HEAP32[$739>>2] = $741;
     $742 = $15;
     $743 = (($742) + 1)|0;
     $15 = $743;
    }
    if ((label|0) == 184) {
     $744 = $2;
     _compileError($744,4648,$vararg_buffer54);
     $3 = 0;
    }
    $745 = HEAP32[2463]|0;
    $746 = ((($745)) + 20|0);
    HEAP32[$746>>2] = 1;
   }
   break;
  }
  case 186: {
   $747 = $2;
   $748 = HEAP32[2463]|0;
   $749 = ((($748)) + 44|0);
   $750 = (_compileBrailleIndicator($747,4691,114,$749)|0);
   $3 = $750;
   break;
  }
  case 187: {
   $13 = 0;
   $3 = 1;
   $751 = $2;
   $752 = (_getRuleCharsText($751,$6)|0);
   $753 = ($752|0)!=(0);
   if ($753) {
    $15 = 0;
    while(1) {
     $754 = $15;
     $755 = HEAP32[$6>>2]|0;
     $756 = ($754>>>0)<($755>>>0);
     if (!($756)) {
      break;
     }
     $757 = $15;
     $758 = ((($6)) + 4|0);
     $759 = (($758) + ($757<<2)|0);
     $760 = HEAP32[$759>>2]|0;
     $761 = (_compile_findCharOrDots($760,0)|0);
     $13 = $761;
     $762 = $13;
     $763 = ($762|0)!=(0|0);
     if (!($763)) {
      label = 192;
      break;
     }
     $764 = $13;
     $765 = ((($764)) + 12|0);
     $766 = HEAP32[$765>>2]|0;
     $767 = $766 | 8192;
     HEAP32[$765>>2] = $767;
     $768 = $15;
     $769 = (($768) + 1)|0;
     $15 = $769;
    }
    if ((label|0) == 192) {
     $770 = $2;
     _compileError($770,4712,$vararg_buffer56);
     $3 = 0;
    }
    $771 = HEAP32[2463]|0;
    $772 = ((($771)) + 16|0);
    HEAP32[$772>>2] = 1;
   }
   break;
  }
  case 194: {
   $13 = 0;
   $3 = 1;
   $773 = $2;
   $774 = (_getRuleCharsText($773,$6)|0);
   $775 = ($774|0)!=(0);
   if ($775) {
    $15 = 0;
    while(1) {
     $776 = $15;
     $777 = HEAP32[$6>>2]|0;
     $778 = ($776>>>0)<($777>>>0);
     if (!($778)) {
      break L25;
     }
     $779 = $15;
     $780 = ((($6)) + 4|0);
     $781 = (($780) + ($779<<2)|0);
     $782 = HEAP32[$781>>2]|0;
     $783 = (_compile_findCharOrDots($782,0)|0);
     $13 = $783;
     $784 = $13;
     $785 = ($784|0)!=(0|0);
     if (!($785)) {
      break;
     }
     $786 = $13;
     $787 = ((($786)) + 12|0);
     $788 = HEAP32[$787>>2]|0;
     $789 = $788 | 16384;
     HEAP32[$787>>2] = $789;
     $790 = $15;
     $791 = (($790) + 1)|0;
     $15 = $791;
    }
    $792 = $2;
    _compileError($792,4751,$vararg_buffer58);
    $3 = 0;
   }
   break;
  }
  case 200: {
   $13 = 0;
   $3 = 1;
   $793 = $2;
   $794 = (_getRuleCharsText($793,$6)|0);
   $795 = ($794|0)!=(0);
   if ($795) {
    $15 = 0;
    while(1) {
     $796 = $15;
     $797 = HEAP32[$6>>2]|0;
     $798 = ($796>>>0)<($797>>>0);
     if (!($798)) {
      break L25;
     }
     $799 = $15;
     $800 = ((($6)) + 4|0);
     $801 = (($800) + ($799<<2)|0);
     $802 = HEAP32[$801>>2]|0;
     $803 = (_compile_findCharOrDots($802,0)|0);
     $13 = $803;
     $804 = $13;
     $805 = ($804|0)!=(0|0);
     if (!($805)) {
      break;
     }
     $806 = $13;
     $807 = ((($806)) + 12|0);
     $808 = HEAP32[$807>>2]|0;
     $809 = $808 | 32768;
     HEAP32[$807>>2] = $809;
     $810 = $15;
     $811 = (($810) + 1)|0;
     $15 = $811;
    }
    $812 = $2;
    _compileError($812,4787,$vararg_buffer60);
    $3 = 0;
   }
   break;
  }
  case 206: {
   $813 = $2;
   $814 = (_getRuleCharsText($813,$6)|0);
   $815 = ($814|0)!=(0);
   if ($815) {
    $816 = HEAP32[2463]|0;
    $817 = ((($816)) + 604|0);
    $818 = HEAP32[$817>>2]|0;
    $819 = HEAP32[$6>>2]|0;
    $820 = (($818) + ($819))|0;
    $821 = (($820) + 1)|0;
    $822 = ($821>>>0)>(128);
    if ($822) {
     $823 = $2;
     HEAP32[$vararg_buffer62>>2] = 128;
     _compileError($823,4479,$vararg_buffer62);
     $3 = 0;
     break;
    }
    $15 = 0;
    while(1) {
     $824 = $15;
     $825 = HEAP32[$6>>2]|0;
     $826 = ($824>>>0)<($825>>>0);
     if (!($826)) {
      break;
     }
     $827 = $15;
     $828 = ((($6)) + 4|0);
     $829 = (($828) + ($827<<2)|0);
     $830 = HEAP32[$829>>2]|0;
     $831 = HEAP32[2463]|0;
     $832 = ((($831)) + 604|0);
     $833 = HEAP32[$832>>2]|0;
     $834 = (($833) + 1)|0;
     HEAP32[$832>>2] = $834;
     $835 = HEAP32[2463]|0;
     $836 = ((($835)) + 48|0);
     $837 = (($836) + ($833<<2)|0);
     HEAP32[$837>>2] = $830;
     $838 = $15;
     $839 = (($838) + 1)|0;
     $15 = $839;
    }
    $840 = HEAP32[2463]|0;
    $841 = ((($840)) + 604|0);
    $842 = HEAP32[$841>>2]|0;
    $843 = (($842) + 1)|0;
    HEAP32[$841>>2] = $843;
    $844 = HEAP32[2463]|0;
    $845 = ((($844)) + 48|0);
    $846 = (($845) + ($842<<2)|0);
    HEAP32[$846>>2] = 0;
   }
   break;
  }
  case 213: {
   $847 = $2;
   $848 = (_getRuleCharsText($847,$6)|0);
   $849 = ($848|0)!=(0);
   if ($849) {
    $850 = HEAP32[2463]|0;
    $851 = ((($850)) + 1120|0);
    HEAP32[$851>>2] = 0;
    while(1) {
     $852 = HEAP32[2463]|0;
     $853 = ((($852)) + 1120|0);
     $854 = HEAP32[$853>>2]|0;
     $855 = HEAP32[$6>>2]|0;
     $856 = ($854>>>0)<($855>>>0);
     $857 = HEAP32[2463]|0;
     $858 = ((($857)) + 1120|0);
     $859 = HEAP32[$858>>2]|0;
     if (!($856)) {
      break;
     }
     $860 = ((($6)) + 4|0);
     $861 = (($860) + ($859<<2)|0);
     $862 = HEAP32[$861>>2]|0;
     $863 = HEAP32[2463]|0;
     $864 = ((($863)) + 1120|0);
     $865 = HEAP32[$864>>2]|0;
     $866 = HEAP32[2463]|0;
     $867 = ((($866)) + 608|0);
     $868 = (($867) + ($865<<2)|0);
     HEAP32[$868>>2] = $862;
     $869 = HEAP32[2463]|0;
     $870 = ((($869)) + 1120|0);
     $871 = HEAP32[$870>>2]|0;
     $872 = (($871) + 1)|0;
     HEAP32[$870>>2] = $872;
    }
    $873 = HEAP32[2463]|0;
    $874 = ((($873)) + 608|0);
    $875 = (($874) + ($859<<2)|0);
    HEAP32[$875>>2] = 0;
   }
   break;
  }
  case 218: {
   $13 = 0;
   $3 = 1;
   $876 = $2;
   $877 = (_getRuleCharsText($876,$6)|0);
   $878 = ($877|0)!=(0);
   if ($878) {
    $15 = 0;
    while(1) {
     $879 = $15;
     $880 = HEAP32[$6>>2]|0;
     $881 = ($879>>>0)<($880>>>0);
     if (!($881)) {
      break L25;
     }
     $882 = $15;
     $883 = ((($6)) + 4|0);
     $884 = (($883) + ($882<<2)|0);
     $885 = HEAP32[$884>>2]|0;
     $886 = (_compile_findCharOrDots($885,0)|0);
     $13 = $886;
     $887 = $13;
     $888 = ($887|0)!=(0|0);
     if (!($888)) {
      break;
     }
     $889 = $13;
     $890 = ((($889)) + 12|0);
     $891 = HEAP32[$890>>2]|0;
     $892 = $891 | 16777216;
     HEAP32[$890>>2] = $892;
     $893 = $15;
     $894 = (($893) + 1)|0;
     $15 = $894;
    }
    $895 = $2;
    _compileError($895,4822,$vararg_buffer65);
    $3 = 0;
   }
   break;
  }
  case 224: {
   $896 = $2;
   $897 = HEAP32[2463]|0;
   $898 = ((($897)) + 1520|0);
   $899 = (_compileBrailleIndicator($896,4855,203,$898)|0);
   $3 = $899;
   break;
  }
  case 225: {
   $900 = $2;
   $901 = HEAP32[2463]|0;
   $902 = ((($901)) + 1560|0);
   $903 = (_compileBrailleIndicator($900,4878,213,$902)|0);
   $3 = $903;
   break;
  }
  case 226: {
   $904 = HEAP32[2463]|0;
   $905 = ((($904)) + 12|0);
   HEAP32[$905>>2] = 1;
   label = 227;
   break;
  }
  case 231: {
   $918 = $2;
   $919 = (_getRuleCharsText($918,$6)|0);
   $920 = ($919|0)!=(0);
   if (!($920)) {
    $1 = 0;
    $1248 = $1;
    STACKTOP = sp;return ($1248|0);
   }
   $921 = HEAP32[$6>>2]|0;
   $922 = ($921|0)!=(1);
   if (!($922)) {
    $923 = ((($6)) + 4|0);
    $924 = HEAP32[$923>>2]|0;
    $925 = ($924>>>0)>(255);
    if (!($925)) {
     $927 = $2;
     $928 = (_getRuleDotsPattern($927,$7)|0);
     $929 = ($928|0)!=(0);
     if (!($929)) {
      $1 = 0;
      $1248 = $1;
      STACKTOP = sp;return ($1248|0);
     }
     $930 = $2;
     $931 = $5;
     $932 = HEAP32[$11>>2]|0;
     $933 = HEAP32[$12>>2]|0;
     $934 = (_addRule($930,$931,$6,$7,$932,$933)|0);
     $935 = ($934|0)!=(0);
     if (!($935)) {
      $3 = 0;
     }
     $936 = HEAP32[4550]|0;
     $937 = ((($6)) + 4|0);
     $938 = HEAP32[$937>>2]|0;
     $939 = HEAP32[2463]|0;
     $940 = ((($939)) + 21084|0);
     $941 = (($940) + ($938<<2)|0);
     HEAP32[$941>>2] = $936;
     break;
    }
   }
   $926 = $2;
   _compileError($926,4899,$vararg_buffer67);
   $1 = 0;
   $1248 = $1;
   STACKTOP = sp;return ($1248|0);
   break;
  }
  case 241: {
   $942 = $2;
   $943 = (_getRuleCharsText($942,$6)|0);
   $944 = ($943|0)!=(0);
   if (!($944)) {
    $1 = 0;
    $1248 = $1;
    STACKTOP = sp;return ($1248|0);
   }
   $945 = ((($6)) + 4|0);
   $946 = HEAP32[$945>>2]|0;
   $947 = ($946|0)!=(64);
   if ($947) {
    $948 = $2;
    _compileError($948,4943,$vararg_buffer69);
    $1 = 0;
    $1248 = $1;
    STACKTOP = sp;return ($1248|0);
   }
   $15 = 1;
   while(1) {
    $949 = $15;
    $950 = HEAP32[$6>>2]|0;
    $951 = ($949>>>0)<($950>>>0);
    if (!($951)) {
     break;
    }
    $952 = $15;
    $953 = ((($6)) + 4|0);
    $954 = (($953) + ($952<<2)|0);
    $955 = HEAP32[$954>>2]|0;
    $956 = $15;
    $957 = (($956) - 1)|0;
    $958 = ((($9)) + 4|0);
    $959 = (($958) + ($957<<2)|0);
    HEAP32[$959>>2] = $955;
    $960 = $15;
    $961 = (($960) + 1)|0;
    $15 = $961;
   }
   $962 = HEAP32[$6>>2]|0;
   $963 = (($962) - 1)|0;
   HEAP32[$9>>2] = $963;
   $964 = $2;
   $965 = (_parseDots($964,$7,$9)|0);
   $966 = ($965|0)!=(0);
   if ($966) {
    $967 = $2;
    $968 = $5;
    $969 = HEAP32[$12>>2]|0;
    $970 = HEAP32[$11>>2]|0;
    $971 = (_addRule($967,$968,$6,$7,$969,$970)|0);
    $972 = ($971|0)!=(0);
    if ($972) {
     break;
    }
    $3 = 0;
    break;
   } else {
    $1 = 0;
    $1248 = $1;
    STACKTOP = sp;return ($1248|0);
   }
   break;
  }
  case 252: {
   HEAP32[$6>>2] = 1;
   $973 = ((($6)) + 4|0);
   HEAP32[$973>>2] = 97;
   $974 = $2;
   $975 = HEAP32[$11>>2]|0;
   $976 = HEAP32[$12>>2]|0;
   $977 = (_addRule($974,214,$6,0,$975,$976)|0);
   $978 = ($977|0)!=(0);
   if (!($978)) {
    $3 = 0;
   }
   $979 = HEAP32[4550]|0;
   $980 = HEAP32[2463]|0;
   HEAP32[$980>>2] = $979;
   break;
  }
  case 255: {
   $981 = $2;
   $982 = (_getRuleCharsText($981,$6)|0);
   $983 = ($982|0)!=(0);
   do {
    if ($983) {
     $984 = HEAP32[4552]|0;
     $985 = ($984|0)!=(0);
     if ($985) {
      $986 = ((($7)) + 4|0);
      HEAP32[$986>>2] = 0;
      HEAP32[$7>>2] = 0;
      break;
     }
     $987 = $2;
     (_getRuleDotsText($987,$7)|0);
     $988 = ((($7)) + 4|0);
     $989 = HEAP32[$988>>2]|0;
     $990 = ($989|0)==(35);
     $991 = ((($7)) + 4|0);
     if ($990) {
      HEAP32[$991>>2] = 0;
      HEAP32[$7>>2] = 0;
      break;
     }
     $992 = HEAP32[$991>>2]|0;
     $993 = ($992|0)==(92);
     if ($993) {
      $994 = ((($7)) + 4|0);
      $995 = ((($994)) + 4|0);
      $996 = HEAP32[$995>>2]|0;
      $997 = ($996|0)==(35);
      if ($997) {
       $998 = ((($7)) + 4|0);
       $999 = ((($7)) + 4|0);
       $1000 = ((($999)) + 4|0);
       $1001 = HEAP32[$7>>2]|0;
       $1002 = (($1001) + -1)|0;
       HEAP32[$7>>2] = $1002;
       $1003 = $1001<<2;
       _memcpy(($998|0),($1000|0),($1003|0))|0;
      }
     }
    }
   } while(0);
   $15 = 0;
   while(1) {
    $1004 = $15;
    $1005 = HEAP32[$6>>2]|0;
    $1006 = ($1004>>>0)<($1005>>>0);
    if (!($1006)) {
     break;
    }
    $1007 = $2;
    $1008 = $15;
    $1009 = ((($6)) + 4|0);
    $1010 = (($1009) + ($1008<<2)|0);
    $1011 = HEAP32[$1010>>2]|0;
    (_addCharOrDots($1007,$1011,0)|0);
    $1012 = $15;
    $1013 = (($1012) + 1)|0;
    $15 = $1013;
   }
   $15 = 0;
   while(1) {
    $1014 = $15;
    $1015 = HEAP32[$7>>2]|0;
    $1016 = ($1014>>>0)<($1015>>>0);
    $1017 = $2;
    if (!($1016)) {
     break;
    }
    $1018 = $15;
    $1019 = ((($7)) + 4|0);
    $1020 = (($1019) + ($1018<<2)|0);
    $1021 = HEAP32[$1020>>2]|0;
    (_addCharOrDots($1017,$1021,0)|0);
    $1022 = $15;
    $1023 = (($1022) + 1)|0;
    $15 = $1023;
   }
   $1024 = $5;
   $1025 = HEAP32[$11>>2]|0;
   $1026 = HEAP32[$12>>2]|0;
   $1027 = (_addRule($1017,$1024,$6,$7,$1025,$1026)|0);
   $1028 = ($1027|0)!=(0);
   if (!($1028)) {
    $3 = 0;
   }
   break;
  }
  case 271: {
   $1029 = HEAP32[2463]|0;
   $1030 = ((($1029)) + 8|0);
   HEAP32[$1030>>2] = 1;
   label = 278;
   break;
  }
  case 272: {
   $1031 = HEAP32[2463]|0;
   $1032 = ((($1031)) + 4|0);
   $1033 = HEAP32[$1032>>2]|0;
   $1034 = ($1033|0)<(2);
   if ($1034) {
    $1035 = HEAP32[2463]|0;
    $1036 = ((($1035)) + 4|0);
    HEAP32[$1036>>2] = 2;
    label = 278;
   } else {
    label = 278;
   }
   break;
  }
  case 274: {
   $1037 = HEAP32[2463]|0;
   $1038 = ((($1037)) + 4|0);
   $1039 = HEAP32[$1038>>2]|0;
   $1040 = ($1039|0)<(3);
   if ($1040) {
    $1041 = HEAP32[2463]|0;
    $1042 = ((($1041)) + 4|0);
    HEAP32[$1042>>2] = 3;
    label = 278;
   } else {
    label = 278;
   }
   break;
  }
  case 276: {
   $1043 = HEAP32[2463]|0;
   $1044 = ((($1043)) + 4|0);
   $1045 = HEAP32[$1044>>2]|0;
   $1046 = ($1045|0)<(4);
   if ($1046) {
    $1047 = HEAP32[2463]|0;
    $1048 = ((($1047)) + 4|0);
    HEAP32[$1048>>2] = 4;
    label = 278;
   } else {
    label = 278;
   }
   break;
  }
  case 282: {
   $1059 = $2;
   $1060 = (_getRuleCharsText($1059,$6)|0);
   $1061 = ($1060|0)!=(0);
   if ($1061) {
    $1062 = $2;
    $1063 = $5;
    $1064 = HEAP32[$11>>2]|0;
    $1065 = HEAP32[$12>>2]|0;
    $1066 = (_addRule($1062,$1063,$6,0,$1064,$1065)|0);
    $1067 = ($1066|0)!=(0);
    if (!($1067)) {
     $3 = 0;
    }
   }
   break;
  }
  case 285: {
   HEAP32[$6>>2] = 0;
   $1068 = $2;
   $1069 = (_getToken($1068,$4,5014)|0);
   $1070 = ($1069|0)!=(0);
   L385: do {
    if ($1070) {
     $1071 = $2;
     $1072 = (_parseDots($1071,$8,$4)|0);
     $1073 = ($1072|0)!=(0);
     if ($1073) {
      while(1) {
       $1074 = $2;
       $1075 = (_getToken($1074,$4,5042)|0);
       $32 = $1075;
       $1076 = ($1075|0)!=(0);
       if (!($1076)) {
        break L385;
       }
       $1077 = $2;
       $1078 = (_getOpcode($1077,$4)|0);
       $5 = $1078;
       $1079 = $5;
       $1080 = ($1079>>>0)>=(3);
       $1081 = $5;
       $1082 = ($1081>>>0)<(44);
       $or$cond3 = $1080 & $1082;
       if ($or$cond3) {
        $1083 = $5;
        $1084 = HEAP32[$6>>2]|0;
        $1085 = (($1084) + 1)|0;
        HEAP32[$6>>2] = $1085;
        $1086 = ((($6)) + 4|0);
        $1087 = (($1086) + ($1084<<2)|0);
        HEAP32[$1087>>2] = $1083;
       } else {
        $1088 = $2;
        _compileError($1088,5058,$vararg_buffer75);
        $3 = 0;
       }
       $1089 = $32;
       $1090 = ($1089|0)==(2);
       if ($1090) {
        break;
       }
      }
     } else {
      label = 292;
     }
    } else {
     label = 292;
    }
   } while(0);
   if ((label|0) == 292) {
    $3 = 0;
   }
   $1091 = $2;
   $1092 = HEAP32[$11>>2]|0;
   $1093 = HEAP32[$12>>2]|0;
   $1094 = (_addRule($1091,44,$6,$8,$1092,$1093)|0);
   $1095 = ($1094|0)!=(0);
   if (!($1095)) {
    $3 = 0;
   }
   break;
  }
  case 295: {
   $1096 = HEAP32[4544]|0;
   $1097 = ($1096|0)!=(0|0);
   if (!($1097)) {
    $1098 = (_allocateCharacterClasses()|0);
    $1099 = ($1098|0)!=(0);
    if (!($1099)) {
     $3 = 0;
    }
   }
   $1100 = $2;
   $1101 = (_getToken($1100,$4,5090)|0);
   $1102 = ($1101|0)!=(0);
   if ($1102) {
    $1103 = (_findCharacterClass($4)|0);
    $34 = $1103;
    $1104 = ($1103|0)!=(0|0);
    $1105 = $2;
    if ($1104) {
     _compileError($1105,5111,$vararg_buffer77);
     break;
    }
    $1106 = ((($4)) + 4|0);
    $1107 = HEAP32[$4>>2]|0;
    $1108 = (_addCharacterClass($1105,$1106,$1107)|0);
    $34 = $1108;
    $1109 = ($1108|0)!=(0|0);
    if ($1109) {
     $1110 = $2;
     $1111 = (_getCharacters($1110,$33)|0);
     $1112 = ($1111|0)!=(0);
     if ($1112) {
      $35 = 0;
      while(1) {
       $1113 = $35;
       $1114 = HEAP32[$33>>2]|0;
       $1115 = ($1113>>>0)<($1114>>>0);
       if (!($1115)) {
        break L25;
       }
       $1116 = $2;
       $1117 = $35;
       $1118 = ((($33)) + 4|0);
       $1119 = (($1118) + ($1117<<2)|0);
       $1120 = HEAP32[$1119>>2]|0;
       $1121 = (_definedCharOrDots($1116,$1120,0)|0);
       $37 = $1121;
       $1122 = $34;
       $1123 = ((($1122)) + 4|0);
       $1124 = HEAP32[$1123>>2]|0;
       $1125 = $37;
       $1126 = ((($1125)) + 12|0);
       $1127 = HEAP32[$1126>>2]|0;
       $1128 = $1127 | $1124;
       HEAP32[$1126>>2] = $1128;
       $1129 = $37;
       $1130 = ((($1129)) + 4|0);
       $1131 = HEAP32[$1130>>2]|0;
       $1132 = HEAP32[2463]|0;
       $1133 = ((($1132)) + 31332|0);
       $1134 = (($1133) + ($1131<<2)|0);
       $36 = $1134;
       $1135 = $36;
       $1136 = ((($1135)) + 26|0);
       $1137 = HEAP16[$1136>>1]|0;
       $1138 = $1137 << 16 >> 16;
       $1139 = ($1138|0)==(1);
       if ($1139) {
        $1140 = $2;
        $1141 = $36;
        $1142 = ((($1141)) + 24|0);
        $1143 = HEAP16[$1142>>1]|0;
        $1144 = $1143 << 16 >> 16;
        $1145 = $36;
        $1146 = ((($1145)) + 28|0);
        $1147 = (($1146) + ($1144<<2)|0);
        $1148 = HEAP32[$1147>>2]|0;
        $1149 = (_definedCharOrDots($1140,$1148,1)|0);
        $37 = $1149;
        $1150 = $34;
        $1151 = ((($1150)) + 4|0);
        $1152 = HEAP32[$1151>>2]|0;
        $1153 = $37;
        $1154 = ((($1153)) + 12|0);
        $1155 = HEAP32[$1154>>2]|0;
        $1156 = $1155 | $1152;
        HEAP32[$1154>>2] = $1156;
       }
       $1157 = $35;
       $1158 = (($1157) + 1)|0;
       $35 = $1158;
      }
     }
    }
   }
   break;
  }
  case 316: {
   $1174 = $2;
   $1175 = (_findOpcodeName(51)|0);
   HEAP32[$vararg_buffer79>>2] = $1175;
   _compileError($1174,5144,$vararg_buffer79);
   $3 = 0;
   break;
  }
  case 319: {
   $1178 = $2;
   $1179 = (_findOpcodeName(50)|0);
   HEAP32[$vararg_buffer82>>2] = $1179;
   _compileError($1178,5144,$vararg_buffer82);
   $3 = 0;
   break;
  }
  case 323: {
   $1184 = $2;
   $1185 = $5;
   $1186 = (_compileSwap($1184,$1185)|0);
   $1187 = ($1186|0)!=(0);
   if (!($1187)) {
    $3 = 0;
   }
   break;
  }
  case 325: {
   $1188 = $2;
   $1189 = (_getRuleCharsText($1188,$6)|0);
   $1190 = ($1189|0)!=(0);
   if ($1190) {
    $1191 = $2;
    $1192 = (_getRuleDotsPattern($1191,$7)|0);
    $1193 = ($1192|0)!=(0);
    if ($1193) {
     $1194 = HEAP32[$6>>2]|0;
     $1195 = ($1194|0)!=(1);
     if ($1195) {
      label = 329;
     } else {
      $1196 = HEAP32[$7>>2]|0;
      $1197 = ($1196>>>0)<(1);
      if ($1197) {
       label = 329;
      }
     }
     if ((label|0) == 329) {
      $1198 = $2;
      _compileError($1198,5166,$vararg_buffer85);
      $3 = 0;
     }
     $1199 = $2;
     $1200 = $5;
     $1201 = HEAP32[$11>>2]|0;
     $1202 = HEAP32[$12>>2]|0;
     $1203 = (_addRule($1199,$1200,$6,$7,$1201,$1202)|0);
     $1204 = ($1203|0)!=(0);
     if (!($1204)) {
      $3 = 0;
     }
    }
   }
   break;
  }
  case 332: {
   $1205 = $2;
   $1206 = $5;
   (_compileCharDef($1205,$1206,1)|0);
   break;
  }
  case 333: {
   $1207 = $2;
   $1208 = $5;
   (_compileCharDef($1207,$1208,4)|0);
   break;
  }
  case 334: {
   $1209 = $2;
   $1210 = $5;
   (_compileCharDef($1209,$1210,256)|0);
   break;
  }
  case 335: {
   $1211 = $2;
   $1212 = $5;
   (_compileCharDef($1211,$1212,8)|0);
   break;
  }
  case 336: {
   $1213 = $2;
   $1214 = $5;
   (_compileCharDef($1213,$1214,64)|0);
   break;
  }
  case 337: {
   $1215 = $2;
   $1216 = $5;
   (_compileCharDef($1215,$1216,128)|0);
   break;
  }
  case 338: {
   $1217 = $2;
   $1218 = $5;
   (_compileCharDef($1217,$1218,2)|0);
   break;
  }
  case 339: {
   $1219 = $2;
   $1220 = $5;
   (_compileCharDef($1219,$1220,16)|0);
   break;
  }
  case 340: {
   $1221 = $2;
   $1222 = $5;
   (_compileCharDef($1221,$1222,32)|0);
   break;
  }
  case 341: {
   $1223 = $2;
   $1224 = (_compileGrouping($1223)|0);
   $3 = $1224;
   break;
  }
  case 342: {
   $1225 = $2;
   $1226 = (_compileUplow($1225)|0);
   $3 = $1226;
   break;
  }
  case 343: {
   $1227 = $2;
   $1228 = (_getRuleCharsText($1227,$6)|0);
   $1229 = ($1228|0)!=(0);
   if ($1229) {
    $1230 = $2;
    $1231 = (_getRuleDotsPattern($1230,$7)|0);
    $1232 = ($1231|0)!=(0);
    if ($1232) {
     $1233 = HEAP32[$6>>2]|0;
     $1234 = ($1233|0)!=(1);
     if ($1234) {
      label = 347;
     } else {
      $1235 = HEAP32[$7>>2]|0;
      $1236 = ($1235|0)!=(1);
      if ($1236) {
       label = 347;
      }
     }
     if ((label|0) == 347) {
      $1237 = $2;
      _compileError($1237,5224,$vararg_buffer87);
      $3 = 0;
     }
     $1238 = $2;
     $1239 = ((($6)) + 4|0);
     $1240 = HEAP32[$1239>>2]|0;
     $1241 = ((($7)) + 4|0);
     $1242 = HEAP32[$1241>>2]|0;
     (_putCharAndDots($1238,$1240,$1242)|0);
    }
   }
   break;
  }
  case 349: {
   $1243 = $2;
   _compileError($1243,5273,$vararg_buffer89);
   $3 = 0;
   break;
  }
 }
 do {
  if ((label|0) == 227) {
   $906 = $2;
   $907 = (_getRuleCharsText($906,$6)|0);
   $908 = ($907|0)!=(0);
   if ($908) {
    $909 = $2;
    $910 = (_getRuleDotsPattern($909,$7)|0);
    $911 = ($910|0)!=(0);
    if ($911) {
     $912 = $2;
     $913 = $5;
     $914 = HEAP32[$11>>2]|0;
     $915 = HEAP32[$12>>2]|0;
     $916 = (_addRule($912,$913,$6,$7,$914,$915)|0);
     $917 = ($916|0)!=(0);
     if (!($917)) {
      $3 = 0;
     }
    }
   }
  }
  else if ((label|0) == 278) {
   $1049 = HEAP32[4548]|0;
   $1050 = ($1049|0)!=(0);
   $1051 = HEAP32[4549]|0;
   $1052 = ($1051|0)!=(0);
   $or$cond = $1050 | $1052;
   $1053 = $2;
   if (!($or$cond)) {
    $1054 = (_findOpcodeName(51)|0);
    $1055 = (_findOpcodeName(50)|0);
    HEAP32[$vararg_buffer71>>2] = $1054;
    $vararg_ptr74 = ((($vararg_buffer71)) + 4|0);
    HEAP32[$vararg_ptr74>>2] = $1055;
    _compileError($1053,4986,$vararg_buffer71);
    $3 = 0;
    break;
   }
   $1056 = $5;
   $1057 = (_compilePassOpcode($1053,$1056)|0);
   $1058 = ($1057|0)!=(0);
   if (!($1058)) {
    $3 = 0;
   }
  }
 } while(0);
 $1244 = $14;
 $1245 = ($1244|0)!=(0|0);
 if ($1245) {
  $1246 = $14;
  _free($1246);
 }
 $1247 = $3;
 $1 = $1247;
 $1248 = $1;
 STACKTOP = sp;return ($1248|0);
}
function _getToken($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 while(1) {
  $8 = $4;
  $9 = (_atEndOfLine($8)|0);
  $10 = ($9|0)!=(0);
  if ($10) {
   break;
  }
  $11 = $4;
  $12 = (_atTokenDelimiter($11)|0);
  $13 = ($12|0)!=(0);
  if (!($13)) {
   break;
  }
  $14 = $4;
  $15 = ((($14)) + 24|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = (($16) + 1)|0;
  HEAP32[$15>>2] = $17;
 }
 $18 = $5;
 HEAP32[$18>>2] = 0;
 while(1) {
  $19 = $4;
  $20 = (_atEndOfLine($19)|0);
  $21 = ($20|0)!=(0);
  if ($21) {
   break;
  }
  $22 = $4;
  $23 = (_atTokenDelimiter($22)|0);
  $24 = ($23|0)!=(0);
  $25 = $24 ^ 1;
  if (!($25)) {
   break;
  }
  $7 = 2048;
  $26 = $5;
  $27 = HEAP32[$26>>2]|0;
  $28 = $7;
  $29 = ($27>>>0)>=($28>>>0);
  $30 = $4;
  if ($29) {
   label = 9;
   break;
  }
  $32 = ((($30)) + 24|0);
  $33 = HEAP32[$32>>2]|0;
  $34 = (($33) + 1)|0;
  HEAP32[$32>>2] = $34;
  $35 = $4;
  $36 = ((($35)) + 36|0);
  $37 = (($36) + ($33<<2)|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = $5;
  $40 = HEAP32[$39>>2]|0;
  $41 = (($40) + 1)|0;
  HEAP32[$39>>2] = $41;
  $42 = $5;
  $43 = ((($42)) + 4|0);
  $44 = (($43) + ($40<<2)|0);
  HEAP32[$44>>2] = $38;
 }
 if ((label|0) == 9) {
  $31 = $7;
  HEAP32[$vararg_buffer>>2] = $31;
  _compileError($30,7141,$vararg_buffer);
  $3 = 0;
  $70 = $3;
  STACKTOP = sp;return ($70|0);
 }
 $45 = $5;
 $46 = HEAP32[$45>>2]|0;
 $47 = ($46|0)!=(0);
 if (!($47)) {
  $48 = $6;
  $49 = ($48|0)!=(0|0);
  if ($49) {
   $50 = $4;
   $51 = $6;
   HEAP32[$vararg_buffer2>>2] = $51;
   _compileError($50,7173,$vararg_buffer2);
  }
  $3 = 0;
  $70 = $3;
  STACKTOP = sp;return ($70|0);
 }
 $52 = $5;
 $53 = HEAP32[$52>>2]|0;
 $54 = $5;
 $55 = ((($54)) + 4|0);
 $56 = (($55) + ($53<<2)|0);
 HEAP32[$56>>2] = 0;
 while(1) {
  $57 = $4;
  $58 = (_atEndOfLine($57)|0);
  $59 = ($58|0)!=(0);
  if ($59) {
   $71 = 0;
  } else {
   $60 = $4;
   $61 = (_atTokenDelimiter($60)|0);
   $62 = ($61|0)!=(0);
   $71 = $62;
  }
  $63 = $4;
  if (!($71)) {
   break;
  }
  $64 = ((($63)) + 24|0);
  $65 = HEAP32[$64>>2]|0;
  $66 = (($65) + 1)|0;
  HEAP32[$64>>2] = $66;
 }
 $67 = (_atEndOfLine($63)|0);
 HEAP32[4552] = $67;
 $68 = ($67|0)!=(0);
 $69 = $68 ? 2 : 1;
 $3 = $69;
 $70 = $3;
 STACKTOP = sp;return ($70|0);
}
function _eqasc2uni($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = 0;
 while(1) {
  $8 = $7;
  $9 = $6;
  $10 = ($8|0)<($9|0);
  if (!($10)) {
   label = 6;
   break;
  }
  $11 = $7;
  $12 = $4;
  $13 = (($12) + ($11)|0);
  $14 = HEAP8[$13>>0]|0;
  $15 = $14&255;
  $16 = $7;
  $17 = $5;
  $18 = (($17) + ($16<<2)|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = ($15|0)!=($19|0);
  if ($20) {
   label = 4;
   break;
  }
  $21 = $7;
  $22 = (($21) + 1)|0;
  $7 = $22;
 }
 if ((label|0) == 4) {
  $3 = 0;
  $23 = $3;
  STACKTOP = sp;return ($23|0);
 }
 else if ((label|0) == 6) {
  $3 = 1;
  $23 = $3;
  STACKTOP = sp;return ($23|0);
 }
 return (0)|0;
}
function _compileHyphenation($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0;
 var $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0;
 var $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0;
 var $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0;
 var $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0;
 var $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 18512|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(18512|0);
 $4 = sp + 8252|0;
 $7 = sp + 48|0;
 $8 = sp + 16456|0;
 $17 = sp + 8|0;
 $18 = sp;
 $2 = $0;
 $3 = $1;
 $9 = 0;
 $10 = 0;
 $19 = $3;
 $20 = HEAP32[$19>>2]|0;
 $13 = $20;
 $21 = $2;
 (_reserveSpaceInTable($21,250000)|0);
 $22 = (_hyphenHashNew()|0);
 $6 = $22;
 HEAP32[$17>>2] = 1;
 $23 = (_malloc(16)|0);
 $24 = ((($17)) + 4|0);
 HEAP32[$24>>2] = $23;
 $25 = ((($17)) + 4|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = ($26|0)!=(0|0);
 if (!($27)) {
  _outOfMemory();
 }
 $28 = ((($17)) + 4|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = ((($29)) + 4|0);
 HEAP32[$30>>2] = 0;
 $31 = ((($17)) + 4|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = ((($32)) + 8|0);
 HEAP32[$33>>2] = 65535;
 $34 = ((($17)) + 4|0);
 $35 = HEAP32[$34>>2]|0;
 $36 = ((($35)) + 12|0);
 HEAP32[$36>>2] = 0;
 $37 = ((($17)) + 4|0);
 $38 = HEAP32[$37>>2]|0;
 HEAP32[$38>>2] = 0;
 while(1) {
  $39 = $3;
  $40 = ((($39)) + 4|0);
  $41 = HEAP32[$40>>2]|0;
  $42 = ($41|0)==(73);
  $43 = $2;
  if ($42) {
   $44 = (_getToken($43,$4,0)|0);
   $45 = ($44|0)!=(0);
   if ($45) {
    label = 8;
   }
  } else {
   $46 = (_getToken($43,$7,0)|0);
   $47 = ($46|0)!=(0);
   if ($47) {
    $48 = $2;
    (_parseChars($48,$4,$7)|0);
    label = 8;
   }
  }
  L10: do {
   if ((label|0) == 8) {
    label = 0;
    $49 = HEAP32[$4>>2]|0;
    $50 = ($49|0)==(0);
    if (!($50)) {
     $51 = ((($4)) + 4|0);
     $52 = HEAP32[$51>>2]|0;
     $53 = ($52|0)==(35);
     if (!($53)) {
      $54 = ((($4)) + 4|0);
      $55 = HEAP32[$54>>2]|0;
      $56 = ($55|0)==(37);
      if (!($56)) {
       $57 = ((($4)) + 4|0);
       $58 = HEAP32[$57>>2]|0;
       $59 = ($58|0)==(60);
       if (!($59)) {
        $11 = 0;
        while(1) {
         $60 = $11;
         $61 = HEAP32[$4>>2]|0;
         $62 = ($60>>>0)<($61>>>0);
         if (!($62)) {
          break;
         }
         $63 = $2;
         $64 = $11;
         $65 = ((($4)) + 4|0);
         $66 = (($65) + ($64<<2)|0);
         $67 = HEAP32[$66>>2]|0;
         (_definedCharOrDots($63,$67,0)|0);
         $68 = $11;
         $69 = (($68) + 1)|0;
         $11 = $69;
        }
        $12 = 0;
        $70 = $12;
        $71 = (($8) + ($70)|0);
        HEAP8[$71>>0] = 48;
        $11 = 0;
        while(1) {
         $72 = $11;
         $73 = HEAP32[$4>>2]|0;
         $74 = ($72>>>0)<($73>>>0);
         if (!($74)) {
          break;
         }
         $75 = $11;
         $76 = ((($4)) + 4|0);
         $77 = (($76) + ($75<<2)|0);
         $78 = HEAP32[$77>>2]|0;
         $79 = ($78>>>0)>=(48);
         if ($79) {
          $80 = $11;
          $81 = ((($4)) + 4|0);
          $82 = (($81) + ($80<<2)|0);
          $83 = HEAP32[$82>>2]|0;
          $84 = ($83>>>0)<=(57);
          if ($84) {
           $85 = $11;
           $86 = ((($4)) + 4|0);
           $87 = (($86) + ($85<<2)|0);
           $88 = HEAP32[$87>>2]|0;
           $89 = $88&255;
           $90 = $12;
           $91 = (($8) + ($90)|0);
           HEAP8[$91>>0] = $89;
          } else {
           label = 20;
          }
         } else {
          label = 20;
         }
         if ((label|0) == 20) {
          label = 0;
          $92 = $11;
          $93 = ((($4)) + 4|0);
          $94 = (($93) + ($92<<2)|0);
          $95 = HEAP32[$94>>2]|0;
          $96 = $12;
          $97 = ((($7)) + 4|0);
          $98 = (($97) + ($96<<2)|0);
          HEAP32[$98>>2] = $95;
          $99 = $12;
          $100 = (($99) + 1)|0;
          $12 = $100;
          $101 = (($8) + ($100)|0);
          HEAP8[$101>>0] = 48;
         }
         $102 = $11;
         $103 = (($102) + 1)|0;
         $11 = $103;
        }
        $104 = $12;
        $105 = ((($7)) + 4|0);
        $106 = (($105) + ($104<<2)|0);
        HEAP32[$106>>2] = 0;
        $107 = $12;
        HEAP32[$7>>2] = $107;
        $108 = $12;
        $109 = (($108) + 1)|0;
        $110 = (($8) + ($109)|0);
        HEAP8[$110>>0] = 0;
        $11 = 0;
        while(1) {
         $111 = $11;
         $112 = (($8) + ($111)|0);
         $113 = HEAP8[$112>>0]|0;
         $114 = $113 << 24 >> 24;
         $115 = ($114|0)==(48);
         if (!($115)) {
          break;
         }
         $116 = $11;
         $117 = (($116) + 1)|0;
         $11 = $117;
        }
        $118 = $6;
        $119 = (_hyphenHashLookup($118,$7)|0);
        $15 = $119;
        $120 = $15;
        $121 = ($120|0)!=(65535);
        if ($121) {
         $122 = $15;
         $9 = $122;
        } else {
         $123 = $6;
         $124 = (_hyphenGetNewState($17,$123,$7)|0);
         $9 = $124;
        }
        $125 = $12;
        $126 = (($125) + 2)|0;
        $127 = $11;
        $128 = (($126) - ($127))|0;
        $13 = $128;
        $129 = $13;
        $130 = ($129|0)>(0);
        if ($130) {
         $131 = $2;
         $132 = $9;
         $133 = ((($17)) + 4|0);
         $134 = HEAP32[$133>>2]|0;
         $135 = (($134) + ($132<<4)|0);
         $136 = ((($135)) + 4|0);
         $137 = $13;
         (_allocateSpaceInTable($131,$136,$137)|0);
         $138 = $9;
         $139 = ((($17)) + 4|0);
         $140 = HEAP32[$139>>2]|0;
         $141 = (($140) + ($138<<4)|0);
         $142 = ((($141)) + 4|0);
         $143 = HEAP32[$142>>2]|0;
         $144 = HEAP32[2463]|0;
         $145 = ((($144)) + 31332|0);
         $146 = (($145) + ($143<<2)|0);
         $147 = $11;
         $148 = (($8) + ($147)|0);
         $149 = $13;
         _memcpy(($146|0),($148|0),($149|0))|0;
        }
        while(1) {
         $150 = $15;
         $151 = ($150|0)==(65535);
         if (!($151)) {
          break L10;
         }
         $152 = $9;
         $10 = $152;
         $153 = HEAP32[$7>>2]|0;
         $154 = (($153) + -1)|0;
         HEAP32[$7>>2] = $154;
         $155 = (($153) - 1)|0;
         $156 = ((($7)) + 4|0);
         $157 = (($156) + ($155<<2)|0);
         $158 = HEAP32[$157>>2]|0;
         $14 = $158;
         $159 = $6;
         $160 = (_hyphenHashLookup($159,$7)|0);
         $15 = $160;
         $161 = $15;
         $162 = ($161|0)!=(65535);
         if ($162) {
          $163 = $15;
          $9 = $163;
         } else {
          $164 = $6;
          $165 = (_hyphenGetNewState($17,$164,$7)|0);
          $9 = $165;
         }
         $166 = $9;
         $167 = $10;
         $168 = $14;
         _hyphenAddTrans($17,$166,$167,$168);
        }
       }
      }
     }
    }
   }
  } while(0);
  $169 = $2;
  $170 = (_getALine($169)|0);
  $171 = ($170|0)!=(0);
  if (!($171)) {
   break;
  }
 }
 $11 = 0;
 while(1) {
  $172 = $11;
  $173 = ($172|0)<(8191);
  if (!($173)) {
   break;
  }
  $174 = $11;
  $175 = $6;
  $176 = (($175) + ($174<<2)|0);
  $177 = HEAP32[$176>>2]|0;
  $16 = $177;
  while(1) {
   $178 = $16;
   $179 = ($178|0)!=(0|0);
   if (!($179)) {
    break;
   }
   $12 = 1;
   while(1) {
    $180 = $12;
    $181 = $16;
    $182 = ((($181)) + 4|0);
    $183 = HEAP32[$182>>2]|0;
    $184 = HEAP32[$183>>2]|0;
    $185 = ($180>>>0)<=($184>>>0);
    if (!($185)) {
     break;
    }
    HEAP32[$7>>2] = 0;
    $186 = $12;
    $13 = $186;
    while(1) {
     $187 = $13;
     $188 = $16;
     $189 = ((($188)) + 4|0);
     $190 = HEAP32[$189>>2]|0;
     $191 = HEAP32[$190>>2]|0;
     $192 = ($187>>>0)<($191>>>0);
     if (!($192)) {
      break;
     }
     $193 = $13;
     $194 = $16;
     $195 = ((($194)) + 4|0);
     $196 = HEAP32[$195>>2]|0;
     $197 = ((($196)) + 4|0);
     $198 = (($197) + ($193<<2)|0);
     $199 = HEAP32[$198>>2]|0;
     $200 = HEAP32[$7>>2]|0;
     $201 = (($200) + 1)|0;
     HEAP32[$7>>2] = $201;
     $202 = ((($7)) + 4|0);
     $203 = (($202) + ($200<<2)|0);
     HEAP32[$203>>2] = $199;
     $204 = $13;
     $205 = (($204) + 1)|0;
     $13 = $205;
    }
    $206 = $6;
    $207 = (_hyphenHashLookup($206,$7)|0);
    $9 = $207;
    $208 = $9;
    $209 = ($208|0)!=(65535);
    if ($209) {
     break;
    }
    $210 = $12;
    $211 = (($210) + 1)|0;
    $12 = $211;
   }
   $212 = $16;
   $213 = ((($212)) + 8|0);
   $214 = HEAP32[$213>>2]|0;
   $215 = ($214|0)!=(0);
   if ($215) {
    $216 = $9;
    $217 = $16;
    $218 = ((($217)) + 8|0);
    $219 = HEAP32[$218>>2]|0;
    $220 = ((($17)) + 4|0);
    $221 = HEAP32[$220>>2]|0;
    $222 = (($221) + ($219<<4)|0);
    $223 = ((($222)) + 8|0);
    HEAP32[$223>>2] = $216;
   }
   $224 = $16;
   $225 = HEAP32[$224>>2]|0;
   $16 = $225;
  }
  $226 = $11;
  $227 = (($226) + 1)|0;
  $11 = $227;
 }
 $228 = $6;
 _hyphenHashFree($228);
 $11 = 0;
 while(1) {
  $229 = $11;
  $230 = HEAP32[$17>>2]|0;
  $231 = ($229|0)<($230|0);
  if (!($231)) {
   break;
  }
  $232 = $11;
  $233 = ((($17)) + 4|0);
  $234 = HEAP32[$233>>2]|0;
  $235 = (($234) + ($232<<4)|0);
  $236 = ((($235)) + 12|0);
  $237 = HEAP32[$236>>2]|0;
  $238 = ($237|0)==(0);
  $239 = $11;
  $240 = ((($17)) + 4|0);
  $241 = HEAP32[$240>>2]|0;
  $242 = (($241) + ($239<<4)|0);
  if ($238) {
   HEAP32[$242>>2] = 0;
  } else {
   $243 = HEAP32[$242>>2]|0;
   $5 = $243;
   $244 = $2;
   $245 = $11;
   $246 = ((($17)) + 4|0);
   $247 = HEAP32[$246>>2]|0;
   $248 = (($247) + ($245<<4)|0);
   $249 = $11;
   $250 = ((($17)) + 4|0);
   $251 = HEAP32[$250>>2]|0;
   $252 = (($251) + ($249<<4)|0);
   $253 = ((($252)) + 12|0);
   $254 = HEAP32[$253>>2]|0;
   $255 = $254<<3;
   (_allocateSpaceInTable($244,$248,$255)|0);
   $256 = $11;
   $257 = ((($17)) + 4|0);
   $258 = HEAP32[$257>>2]|0;
   $259 = (($258) + ($256<<4)|0);
   $260 = HEAP32[$259>>2]|0;
   $261 = HEAP32[2463]|0;
   $262 = ((($261)) + 31332|0);
   $263 = (($262) + ($260<<2)|0);
   $264 = $5;
   $265 = $11;
   $266 = ((($17)) + 4|0);
   $267 = HEAP32[$266>>2]|0;
   $268 = (($267) + ($265<<4)|0);
   $269 = ((($268)) + 12|0);
   $270 = HEAP32[$269>>2]|0;
   $271 = $270<<3;
   _memcpy(($263|0),($264|0),($271|0))|0;
   $272 = $5;
   _free($272);
  }
  $273 = $11;
  $274 = (($273) + 1)|0;
  $11 = $274;
 }
 $275 = $2;
 $276 = HEAP32[$17>>2]|0;
 $277 = $276<<4;
 (_allocateSpaceInTable($275,$18,$277)|0);
 $278 = HEAP32[$18>>2]|0;
 $279 = HEAP32[2463]|0;
 $280 = ((($279)) + 1564|0);
 HEAP32[$280>>2] = $278;
 $281 = HEAP32[2463]|0;
 $282 = ((($281)) + 1564|0);
 $283 = HEAP32[$282>>2]|0;
 $284 = HEAP32[2463]|0;
 $285 = ((($284)) + 31332|0);
 $286 = (($285) + ($283<<2)|0);
 $287 = ((($17)) + 4|0);
 $288 = HEAP32[$287>>2]|0;
 $289 = HEAP32[$17>>2]|0;
 $290 = $289<<4;
 _memcpy(($286|0),($288|0),($290|0))|0;
 $291 = ((($17)) + 4|0);
 $292 = HEAP32[$291>>2]|0;
 _free($292);
 STACKTOP = sp;return 1;
}
function _getOpcode($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$ = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $3 = $0;
 $4 = $1;
 $6 = HEAP32[12760]|0;
 $5 = $6;
 while(1) {
  $7 = $4;
  $8 = HEAP32[$7>>2]|0;
  $9 = $5;
  $10 = (52812 + ($9<<1)|0);
  $11 = HEAP16[$10>>1]|0;
  $12 = $11 << 16 >> 16;
  $13 = ($8|0)==($12|0);
  if ($13) {
   $14 = $5;
   $15 = (8 + ($14<<2)|0);
   $16 = HEAP32[$15>>2]|0;
   $17 = $4;
   $18 = ((($17)) + 4|0);
   $19 = $4;
   $20 = HEAP32[$19>>2]|0;
   $21 = (_eqasc2uni($16,$18,$20)|0);
   $22 = ($21|0)!=(0);
   if ($22) {
    label = 4;
    break;
   }
  }
  $25 = $5;
  $26 = (($25) + 1)|0;
  $5 = $26;
  $27 = $5;
  $28 = ($27>>>0)>=(111);
  $$ = $28 ? 0 : $26;
  $5 = $$;
  $29 = $5;
  $30 = HEAP32[12760]|0;
  $31 = ($29|0)!=($30|0);
  if (!($31)) {
   label = 6;
   break;
  }
 }
 if ((label|0) == 4) {
  $23 = $5;
  HEAP32[12760] = $23;
  $24 = $5;
  $2 = $24;
  $38 = $2;
  STACKTOP = sp;return ($38|0);
 }
 else if ((label|0) == 6) {
  $32 = $3;
  $33 = $4;
  $34 = ((($33)) + 4|0);
  $35 = $4;
  $36 = HEAP32[$35>>2]|0;
  $37 = (_showString($34,$36)|0);
  HEAP32[$vararg_buffer>>2] = $37;
  _compileError($32,7118,$vararg_buffer);
  $2 = 111;
  $38 = $2;
  STACKTOP = sp;return ($38|0);
 }
 return (0)|0;
}
function _includeFile($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 2080|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(2080|0);
 $vararg_buffer = sp;
 $6 = sp + 32|0;
 $3 = $0;
 $4 = $1;
 $5 = 0;
 while(1) {
  $9 = $5;
  $10 = $4;
  $11 = HEAP32[$10>>2]|0;
  $12 = ($9>>>0)<($11>>>0);
  $13 = $5;
  if (!($12)) {
   break;
  }
  $14 = $4;
  $15 = ((($14)) + 4|0);
  $16 = (($15) + ($13<<2)|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = $17&255;
  $19 = $5;
  $20 = (($6) + ($19)|0);
  HEAP8[$20>>0] = $18;
  $21 = $5;
  $22 = (($21) + 1)|0;
  $5 = $22;
 }
 $23 = (($6) + ($13)|0);
 HEAP8[$23>>0] = 0;
 $24 = $3;
 $25 = HEAP32[$24>>2]|0;
 $26 = (_resolveTable($6,$25)|0);
 $7 = $26;
 $27 = $7;
 $28 = ($27|0)==(0|0);
 if ($28) {
  $29 = HEAP32[2462]|0;
  $30 = (($29) + 1)|0;
  HEAP32[2462] = $30;
  $2 = 0;
  $43 = $2;
  STACKTOP = sp;return ($43|0);
 }
 $31 = $7;
 $32 = ((($31)) + 4|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = ($33|0)!=(0|0);
 if ($34) {
  $35 = HEAP32[2462]|0;
  $36 = (($35) + 1)|0;
  HEAP32[2462] = $36;
  $37 = $7;
  _free_tablefiles($37);
  HEAP32[$vararg_buffer>>2] = $6;
  _logMessage(40000,7058,$vararg_buffer);
  $2 = 0;
  $43 = $2;
  STACKTOP = sp;return ($43|0);
 } else {
  $38 = $7;
  $39 = HEAP32[$38>>2]|0;
  $40 = (_compileFile($39)|0);
  $8 = $40;
  $41 = $7;
  _free_tablefiles($41);
  $42 = $8;
  $2 = $42;
  $43 = $2;
  STACKTOP = sp;return ($43|0);
 }
 return (0)|0;
}
function _compileBrailleIndicator($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16416|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16416|0);
 $9 = sp + 8196|0;
 $10 = sp;
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $11 = $5;
 $12 = $6;
 $13 = (_getToken($11,$9,$12)|0);
 $14 = ($13|0)!=(0);
 if ($14) {
  $15 = $5;
  $16 = (_parseDots($15,$10,$9)|0);
  $17 = ($16|0)!=(0);
  if ($17) {
   $18 = $5;
   $19 = $7;
   $20 = (_addRule($18,$19,0,$10,0,0)|0);
   $21 = ($20|0)!=(0);
   if (!($21)) {
    $4 = 0;
    $24 = $4;
    STACKTOP = sp;return ($24|0);
   }
  }
 }
 $22 = HEAP32[4550]|0;
 $23 = $8;
 HEAP32[$23>>2] = $22;
 $4 = 1;
 $24 = $4;
 STACKTOP = sp;return ($24|0);
}
function _getCharacters($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8208|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(8208|0);
 $5 = sp;
 $3 = $0;
 $4 = $1;
 $6 = $3;
 $7 = (_getToken($6,$5,6844)|0);
 $8 = ($7|0)!=(0);
 if ($8) {
  $9 = $3;
  $10 = $4;
  $11 = (_parseChars($9,$10,$5)|0);
  $12 = ($11|0)!=(0);
  if ($12) {
   $2 = 1;
   $13 = $2;
   STACKTOP = sp;return ($13|0);
  }
 }
 $2 = 0;
 $13 = $2;
 STACKTOP = sp;return ($13|0);
}
function _getRuleCharsText($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8208|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(8208|0);
 $5 = sp;
 $3 = $0;
 $4 = $1;
 $6 = $3;
 $7 = (_getToken($6,$5,7039)|0);
 $8 = ($7|0)!=(0);
 if ($8) {
  $9 = $3;
  $10 = $4;
  $11 = (_parseChars($9,$10,$5)|0);
  $12 = ($11|0)!=(0);
  if ($12) {
   $2 = 1;
   $13 = $2;
   STACKTOP = sp;return ($13|0);
  }
 }
 $2 = 0;
 $13 = $2;
 STACKTOP = sp;return ($13|0);
}
function _getRuleDotsPattern($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8208|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(8208|0);
 $5 = sp;
 $3 = $0;
 $4 = $1;
 $6 = $3;
 $7 = (_getToken($6,$5,7026)|0);
 $8 = ($7|0)!=(0);
 do {
  if ($8) {
   $9 = HEAP32[$5>>2]|0;
   $10 = ($9|0)==(1);
   if ($10) {
    $11 = ((($5)) + 4|0);
    $12 = HEAP32[$11>>2]|0;
    $13 = ($12|0)==(61);
    if ($13) {
     $14 = $4;
     HEAP32[$14>>2] = 0;
     $2 = 1;
     break;
    }
   }
   $15 = $3;
   $16 = $4;
   $17 = (_parseDots($15,$16,$5)|0);
   $18 = ($17|0)!=(0);
   if ($18) {
    $2 = 1;
   } else {
    label = 7;
   }
  } else {
   label = 7;
  }
 } while(0);
 if ((label|0) == 7) {
  $2 = 0;
 }
 $19 = $2;
 STACKTOP = sp;return ($19|0);
}
function _addRule($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $7 = $0;
 $8 = $1;
 $9 = $2;
 $10 = $3;
 $11 = $4;
 $12 = $5;
 $13 = 28;
 $16 = $9;
 $17 = ($16|0)!=(0|0);
 if ($17) {
  $18 = $9;
  $19 = HEAP32[$18>>2]|0;
  $20 = $19<<2;
  $21 = $13;
  $22 = (($21) + ($20))|0;
  $13 = $22;
 }
 $23 = $10;
 $24 = ($23|0)!=(0|0);
 if ($24) {
  $25 = $10;
  $26 = HEAP32[$25>>2]|0;
  $27 = $26<<2;
  $28 = $13;
  $29 = (($28) + ($27))|0;
  $13 = $29;
 }
 $30 = $7;
 $31 = $13;
 $32 = (_allocateSpaceInTable($30,18200,$31)|0);
 $33 = ($32|0)!=(0);
 if (!($33)) {
  $6 = 0;
  $152 = $6;
  STACKTOP = sp;return ($152|0);
 }
 $34 = HEAP32[4550]|0;
 $35 = HEAP32[2463]|0;
 $36 = ((($35)) + 31332|0);
 $37 = (($36) + ($34<<2)|0);
 HEAP32[4551] = $37;
 $38 = $8;
 $39 = HEAP32[4551]|0;
 $40 = ((($39)) + 20|0);
 HEAP32[$40>>2] = $38;
 $41 = $11;
 $42 = HEAP32[4551]|0;
 $43 = ((($42)) + 8|0);
 HEAP32[$43>>2] = $41;
 $44 = $12;
 $45 = HEAP32[4551]|0;
 $46 = ((($45)) + 12|0);
 HEAP32[$46>>2] = $44;
 $47 = $9;
 $48 = ($47|0)!=(0|0);
 $49 = HEAP32[4551]|0;
 if ($48) {
  $50 = ((($49)) + 28|0);
  $51 = $9;
  $52 = ((($51)) + 4|0);
  $53 = $9;
  $54 = HEAP32[$53>>2]|0;
  $55 = $54&65535;
  $56 = HEAP32[4551]|0;
  $57 = ((($56)) + 24|0);
  HEAP16[$57>>1] = $55;
  $58 = $55 << 16 >> 16;
  $59 = $58<<2;
  _memcpy(($50|0),($52|0),($59|0))|0;
 } else {
  $60 = ((($49)) + 24|0);
  HEAP16[$60>>1] = 0;
 }
 $61 = $10;
 $62 = ($61|0)!=(0|0);
 $63 = HEAP32[4551]|0;
 if ($62) {
  $64 = ((($63)) + 24|0);
  $65 = HEAP16[$64>>1]|0;
  $66 = $65 << 16 >> 16;
  $67 = HEAP32[4551]|0;
  $68 = ((($67)) + 28|0);
  $69 = (($68) + ($66<<2)|0);
  $70 = $10;
  $71 = ((($70)) + 4|0);
  $72 = $10;
  $73 = HEAP32[$72>>2]|0;
  $74 = $73&65535;
  $75 = HEAP32[4551]|0;
  $76 = ((($75)) + 26|0);
  HEAP16[$76>>1] = $74;
  $77 = $74 << 16 >> 16;
  $78 = $77<<2;
  _memcpy(($69|0),($71|0),($78|0))|0;
 } else {
  $79 = ((($63)) + 26|0);
  HEAP16[$79>>1] = 0;
 }
 $80 = $7;
 $81 = (_charactersDefined($80)|0);
 $82 = ($81|0)!=(0);
 if (!($82)) {
  $6 = 0;
  $152 = $6;
  STACKTOP = sp;return ($152|0);
 }
 $83 = $8;
 $84 = ($83|0)==(54);
 $85 = $8;
 $86 = ($85|0)==(55);
 $or$cond = $84 | $86;
 $87 = $8;
 $88 = ($87|0)==(56);
 $or$cond3 = $or$cond | $88;
 if ($or$cond3) {
  $6 = 1;
  $152 = $6;
  STACKTOP = sp;return ($152|0);
 }
 $89 = $8;
 $90 = ($89>>>0)>=(70);
 $91 = $8;
 $92 = ($91>>>0)<=(74);
 $or$cond5 = $90 & $92;
 do {
  if ($or$cond5) {
   $93 = $8;
   $94 = ($93|0)==(70);
   if ($94) {
    $95 = HEAP32[4551]|0;
    $96 = ((($95)) + 24|0);
    $97 = HEAP16[$96>>1]|0;
    $98 = $97 << 16 >> 16;
    $99 = ($98|0)>(0);
    if ($99) {
     break;
    }
   }
   $100 = HEAP32[4548]|0;
   $101 = ($100|0)!=(0);
   if (!($101)) {
    $102 = (_addForwardPassRule()|0);
    $103 = ($102|0)!=(0);
    if (!($103)) {
     $6 = 0;
     $152 = $6;
     STACKTOP = sp;return ($152|0);
    }
   }
   $104 = HEAP32[4549]|0;
   $105 = ($104|0)!=(0);
   if (!($105)) {
    $106 = (_addBackwardPassRule()|0);
    $107 = ($106|0)!=(0);
    if (!($107)) {
     $6 = 0;
     $152 = $6;
     STACKTOP = sp;return ($152|0);
    }
   }
   $6 = 1;
   $152 = $6;
   STACKTOP = sp;return ($152|0);
  }
 } while(0);
 $108 = HEAP32[4548]|0;
 $109 = ($108|0)!=(0);
 do {
  if (!($109)) {
   $110 = HEAP32[4551]|0;
   $111 = ((($110)) + 24|0);
   $112 = HEAP16[$111>>1]|0;
   $113 = $112 << 16 >> 16;
   $114 = ($113|0)==(1);
   if ($114) {
    $115 = $7;
    _addForwardRuleWithSingleChar($115);
    break;
   }
   $116 = HEAP32[4551]|0;
   $117 = ((($116)) + 24|0);
   $118 = HEAP16[$117>>1]|0;
   $119 = $118 << 16 >> 16;
   $120 = ($119|0)>(1);
   if ($120) {
    _addForwardRuleWithMultipleChars();
   }
  }
 } while(0);
 $121 = HEAP32[4549]|0;
 $122 = ($121|0)!=(0);
 do {
  if (!($122)) {
   $123 = HEAP32[4551]|0;
   $124 = ((($123)) + 20|0);
   $125 = HEAP32[$124>>2]|0;
   $126 = ($125|0)==(70);
   $127 = HEAP32[4551]|0;
   if ($126) {
    $128 = ((($127)) + 28|0);
    $14 = $128;
    $129 = HEAP32[4551]|0;
    $130 = ((($129)) + 24|0);
    $131 = HEAP16[$130>>1]|0;
    $132 = $131 << 16 >> 16;
    $15 = $132;
   } else {
    $133 = ((($127)) + 24|0);
    $134 = HEAP16[$133>>1]|0;
    $135 = $134 << 16 >> 16;
    $136 = HEAP32[4551]|0;
    $137 = ((($136)) + 28|0);
    $138 = (($137) + ($135<<2)|0);
    $14 = $138;
    $139 = HEAP32[4551]|0;
    $140 = ((($139)) + 26|0);
    $141 = HEAP16[$140>>1]|0;
    $142 = $141 << 16 >> 16;
    $15 = $142;
   }
   $143 = $15;
   $144 = ($143|0)==(1);
   if ($144) {
    $145 = $7;
    $146 = $14;
    $147 = HEAP32[$146>>2]|0;
    _addBackwardRuleWithSingleCell($145,$147);
    break;
   }
   $148 = $15;
   $149 = ($148|0)>(1);
   if ($149) {
    $150 = $14;
    $151 = $15;
    _addBackwardRuleWithMultipleCells($150,$151);
   }
  }
 } while(0);
 $6 = 1;
 $152 = $6;
 STACKTOP = sp;return ($152|0);
}
function _allocateSpaceInTable($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $10 = $5;
 $11 = (($10) + 4)|0;
 $12 = (($11) - 1)|0;
 $13 = (($12>>>0) / 4)&-1;
 $14 = $13<<2;
 $6 = $14;
 $15 = HEAP32[4547]|0;
 $16 = $6;
 $17 = (($15) + ($16))|0;
 $7 = $17;
 $18 = $7;
 $19 = HEAP32[4546]|0;
 $20 = ($18>>>0)>($19>>>0);
 if ($20) {
  $21 = $7;
  $22 = (($21>>>0) / 4)&-1;
  $23 = $7;
  $24 = (($23) + ($22))|0;
  $7 = $24;
  $25 = HEAP32[2463]|0;
  $26 = $7;
  $27 = (_realloc($25,$26)|0);
  $8 = $27;
  $28 = $8;
  $29 = ($28|0)!=(0|0);
  if (!($29)) {
   $30 = $3;
   _compileError($30,6926,$vararg_buffer);
   _outOfMemory();
  }
  $31 = $8;
  $32 = HEAP32[4546]|0;
  $33 = (($31) + ($32)|0);
  $34 = $7;
  $35 = HEAP32[4546]|0;
  $36 = (($34) - ($35))|0;
  _memset(($33|0),0,($36|0))|0;
  $37 = HEAP32[4543]|0;
  $9 = $37;
  while(1) {
   $38 = $9;
   $39 = ($38|0)!=(0|0);
   if (!($39)) {
    break;
   }
   $40 = $9;
   $41 = ((($40)) + 4|0);
   $42 = HEAP32[$41>>2]|0;
   $43 = HEAP32[2463]|0;
   $44 = ($42|0)==($43|0);
   if ($44) {
    $45 = $8;
    $46 = $9;
    $47 = ((($46)) + 4|0);
    HEAP32[$47>>2] = $45;
   }
   $48 = $9;
   $49 = HEAP32[$48>>2]|0;
   $9 = $49;
  }
  $50 = $8;
  HEAP32[2463] = $50;
  $51 = $7;
  HEAP32[4546] = $51;
 }
 $52 = $4;
 $53 = ($52|0)!=(0|0);
 if (!($53)) {
  STACKTOP = sp;return 1;
 }
 $54 = HEAP32[4547]|0;
 $55 = (($54) - 31336)|0;
 $56 = (($55>>>0) / 4)&-1;
 $57 = $4;
 HEAP32[$57>>2] = $56;
 $58 = $6;
 $59 = HEAP32[4547]|0;
 $60 = (($59) + ($58))|0;
 HEAP32[4547] = $60;
 STACKTOP = sp;return 1;
}
function _compileBeforeAfter($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16400|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16400|0);
 $3 = sp + 8196|0;
 $4 = sp;
 $2 = $0;
 $5 = $2;
 $6 = (_getToken($5,$3,6900)|0);
 $7 = ($6|0)!=(0);
 do {
  if ($7) {
   $8 = $2;
   $9 = (_parseChars($8,$4,$3)|0);
   $10 = ($9|0)!=(0);
   if ($10) {
    $11 = ((($4)) + 4|0);
    $12 = (_eqasc2uni(2210,$11,6)|0);
    $13 = ($12|0)!=(0);
    if ($13) {
     $1 = 1;
     break;
    }
    $14 = ((($4)) + 4|0);
    $15 = (_eqasc2uni(2204,$14,5)|0);
    $16 = ($15|0)!=(0);
    if ($16) {
     $1 = 2;
    } else {
     label = 7;
    }
   } else {
    label = 7;
   }
  } else {
   label = 7;
  }
 } while(0);
 if ((label|0) == 7) {
  $1 = 0;
 }
 $17 = $1;
 STACKTOP = sp;return ($17|0);
}
function _compileNumber($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(8224|0);
 $vararg_buffer = sp;
 $3 = sp + 8|0;
 $4 = sp + 4|0;
 $2 = $0;
 $5 = $2;
 $6 = (_getToken($5,$3,6855)|0);
 $7 = ($6|0)!=(0);
 do {
  if ($7) {
   $8 = ((($3)) + 4|0);
   (_getNumber($8,$4)|0);
   $9 = HEAP32[$4>>2]|0;
   $10 = ($9>>>0)>(0);
   if ($10) {
    $12 = HEAP32[$4>>2]|0;
    $1 = $12;
    break;
   } else {
    $11 = $2;
    _compileError($11,6862,$vararg_buffer);
    $1 = 0;
    break;
   }
  } else {
   $1 = 0;
  }
 } while(0);
 $13 = $1;
 STACKTOP = sp;return ($13|0);
}
function _compile_findCharOrDots($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $8 = $3;
 $9 = (($8>>>0) % 1123)&-1;
 $7 = $9;
 $10 = $4;
 $11 = ($10|0)==(0);
 $12 = $7;
 $13 = HEAP32[2463]|0;
 if ($11) {
  $14 = ((($13)) + 3116|0);
  $15 = (($14) + ($12<<2)|0);
  $16 = HEAP32[$15>>2]|0;
  $6 = $16;
 } else {
  $17 = ((($13)) + 7608|0);
  $18 = (($17) + ($12<<2)|0);
  $19 = HEAP32[$18>>2]|0;
  $6 = $19;
 }
 while(1) {
  $20 = $6;
  $21 = ($20|0)!=(0);
  if (!($21)) {
   label = 8;
   break;
  }
  $22 = $6;
  $23 = HEAP32[2463]|0;
  $24 = ((($23)) + 31332|0);
  $25 = (($24) + ($22<<2)|0);
  $5 = $25;
  $26 = $5;
  $27 = ((($26)) + 16|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = $3;
  $30 = ($28|0)==($29|0);
  $31 = $5;
  if ($30) {
   label = 6;
   break;
  }
  $32 = HEAP32[$31>>2]|0;
  $6 = $32;
 }
 if ((label|0) == 6) {
  $2 = $31;
  $33 = $2;
  STACKTOP = sp;return ($33|0);
 }
 else if ((label|0) == 8) {
  $2 = 0;
  $33 = $2;
  STACKTOP = sp;return ($33|0);
 }
 return (0)|0;
}
function _getRuleDotsText($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8208|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(8208|0);
 $5 = sp;
 $3 = $0;
 $4 = $1;
 $6 = $3;
 $7 = (_getToken($6,$5,6844)|0);
 $8 = ($7|0)!=(0);
 if ($8) {
  $9 = $3;
  $10 = $4;
  $11 = (_parseChars($9,$10,$5)|0);
  $12 = ($11|0)!=(0);
  if ($12) {
   $2 = 1;
   $13 = $2;
   STACKTOP = sp;return ($13|0);
  }
 }
 $2 = 0;
 $13 = $2;
 STACKTOP = sp;return ($13|0);
}
function _addCharOrDots($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $10 = sp + 4|0;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $12 = $5;
 $13 = $6;
 $14 = (_compile_findCharOrDots($12,$13)|0);
 $8 = $14;
 $15 = ($14|0)!=(0|0);
 if ($15) {
  $16 = $8;
  $3 = $16;
  $66 = $3;
  STACKTOP = sp;return ($66|0);
 }
 $17 = $4;
 $18 = (_allocateSpaceInTable($17,$10,28)|0);
 $19 = ($18|0)!=(0);
 if (!($19)) {
  $3 = 0;
  $66 = $3;
  STACKTOP = sp;return ($66|0);
 }
 $20 = HEAP32[$10>>2]|0;
 $21 = HEAP32[2463]|0;
 $22 = ((($21)) + 31332|0);
 $23 = (($22) + ($20<<2)|0);
 $8 = $23;
 $24 = $8;
 ;HEAP32[$24>>2]=0|0;HEAP32[$24+4>>2]=0|0;HEAP32[$24+8>>2]=0|0;HEAP32[$24+12>>2]=0|0;HEAP32[$24+16>>2]=0|0;HEAP32[$24+20>>2]=0|0;HEAP32[$24+24>>2]=0|0;
 $25 = $5;
 $26 = $8;
 $27 = ((($26)) + 16|0);
 HEAP32[$27>>2] = $25;
 $28 = $5;
 $29 = (($28>>>0) % 1123)&-1;
 $11 = $29;
 $30 = $6;
 $31 = ($30|0)==(0);
 $32 = $11;
 $33 = HEAP32[2463]|0;
 if ($31) {
  $34 = ((($33)) + 3116|0);
  $35 = (($34) + ($32<<2)|0);
  $36 = HEAP32[$35>>2]|0;
  $7 = $36;
 } else {
  $37 = ((($33)) + 7608|0);
  $38 = (($37) + ($32<<2)|0);
  $39 = HEAP32[$38>>2]|0;
  $7 = $39;
 }
 $40 = $7;
 $41 = ($40|0)!=(0);
 do {
  if ($41) {
   $51 = $7;
   $52 = HEAP32[2463]|0;
   $53 = ((($52)) + 31332|0);
   $54 = (($53) + ($51<<2)|0);
   $9 = $54;
   while(1) {
    $55 = $9;
    $56 = HEAP32[$55>>2]|0;
    $57 = ($56|0)!=(0);
    if (!($57)) {
     break;
    }
    $58 = $9;
    $59 = HEAP32[$58>>2]|0;
    $60 = HEAP32[2463]|0;
    $61 = ((($60)) + 31332|0);
    $62 = (($61) + ($59<<2)|0);
    $9 = $62;
   }
   $63 = HEAP32[$10>>2]|0;
   $64 = $9;
   HEAP32[$64>>2] = $63;
  } else {
   $42 = $6;
   $43 = ($42|0)==(0);
   $44 = HEAP32[$10>>2]|0;
   $45 = $11;
   $46 = HEAP32[2463]|0;
   if ($43) {
    $47 = ((($46)) + 3116|0);
    $48 = (($47) + ($45<<2)|0);
    HEAP32[$48>>2] = $44;
    break;
   } else {
    $49 = ((($46)) + 7608|0);
    $50 = (($49) + ($45<<2)|0);
    HEAP32[$50>>2] = $44;
    break;
   }
  }
 } while(0);
 $65 = $8;
 $3 = $65;
 $66 = $3;
 STACKTOP = sp;return ($66|0);
}
function _compilePassOpcode($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0;
 var $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0;
 var $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0;
 var $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0;
 var $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0;
 var $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0;
 var $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0;
 var $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0;
 var $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0;
 var $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0;
 var $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0;
 var $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0;
 var $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0;
 var $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0;
 var $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0;
 var $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0;
 var $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0;
 var $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0;
 var $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0;
 var $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0;
 var $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0;
 var $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0;
 var $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0;
 var $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0;
 var $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0;
 var $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0;
 var $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0;
 var $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0;
 var $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0;
 var $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0;
 var $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0;
 var $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0;
 var $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0;
 var $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0;
 var $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0;
 var $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0;
 var $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0;
 var $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0;
 var $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0;
 var $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0;
 var $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0;
 var $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0;
 var $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0;
 var $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $or$cond11 = 0, $or$cond13 = 0, $or$cond3 = 0, $or$cond5 = 0, $or$cond7 = 0, $or$cond9 = 0, $vararg_buffer = 0, $vararg_buffer17 = 0, $vararg_buffer19 = 0, $vararg_buffer21 = 0, $vararg_buffer23 = 0;
 var $vararg_buffer26 = 0, $vararg_buffer28 = 0, $vararg_buffer30 = 0, $vararg_buffer32 = 0, $vararg_buffer35 = 0, $vararg_buffer37 = 0, $vararg_buffer39 = 0, $vararg_buffer41 = 0, $vararg_buffer44 = 0, $vararg_buffer47 = 0, $vararg_buffer50 = 0, $vararg_buffer52 = 0, $vararg_buffer55 = 0, $vararg_buffer58 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(224|0);
 $vararg_buffer58 = sp + 144|0;
 $vararg_buffer55 = sp + 136|0;
 $vararg_buffer52 = sp + 128|0;
 $vararg_buffer50 = sp + 120|0;
 $vararg_buffer47 = sp + 112|0;
 $vararg_buffer44 = sp + 104|0;
 $vararg_buffer41 = sp + 96|0;
 $vararg_buffer39 = sp + 88|0;
 $vararg_buffer37 = sp + 80|0;
 $vararg_buffer35 = sp + 72|0;
 $vararg_buffer32 = sp + 64|0;
 $vararg_buffer30 = sp + 56|0;
 $vararg_buffer28 = sp + 48|0;
 $vararg_buffer26 = sp + 40|0;
 $vararg_buffer23 = sp + 32|0;
 $vararg_buffer21 = sp + 24|0;
 $vararg_buffer19 = sp + 16|0;
 $vararg_buffer17 = sp + 8|0;
 $vararg_buffer = sp;
 $15 = sp + 156|0;
 $16 = sp + 152|0;
 $3 = $0;
 $4 = $1;
 $7 = 0;
 $8 = 0;
 $10 = 0;
 $12 = 0;
 $13 = 1;
 HEAP32[6603] = (18220);
 HEAP32[6604] = 0;
 HEAP32[6605] = 0;
 $18 = $3;
 HEAP32[8654] = $18;
 $19 = $4;
 HEAP32[8655] = $19;
 HEAP32[8656] = 0;
 HEAP32[8657] = 0;
 $20 = $3;
 $21 = ((($20)) + 24|0);
 $22 = HEAP32[$21>>2]|0;
 $9 = $22;
 while(1) {
  $23 = $9;
  $24 = $3;
  $25 = ((($24)) + 20|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = ($23|0)<($26|0);
  if (!($27)) {
   break;
  }
  $28 = $9;
  $29 = $3;
  $30 = ((($29)) + 36|0);
  $31 = (($30) + ($28<<2)|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = HEAP32[8657]|0;
  $34 = (($33) + 1)|0;
  HEAP32[8657] = $34;
  $35 = ((34632) + ($33<<2)|0);
  HEAP32[$35>>2] = $32;
  $36 = $9;
  $37 = (($36) + 1)|0;
  $9 = $37;
 }
 $38 = (_eqasc2uni(5886,(34632),6)|0);
 $39 = ($38|0)!=(0);
 do {
  if (!($39)) {
   $13 = 0;
   $9 = 0;
   while(1) {
    $40 = $9;
    $41 = HEAP32[8657]|0;
    $42 = ($40>>>0)<($41>>>0);
    if (!($42)) {
     break;
    }
    $43 = $9;
    $44 = ((34632) + ($43<<2)|0);
    $45 = HEAP32[$44>>2]|0;
    $46 = ($45>>>0)>(32);
    if (!($46)) {
     break;
    }
    $47 = $9;
    $48 = (($47) + 1)|0;
    $9 = $48;
   }
   $49 = $9;
   $50 = HEAP32[8657]|0;
   $51 = ($49>>>0)<($50>>>0);
   if ($51) {
    $52 = $9;
    $53 = ((34632) + ($52<<2)|0);
    HEAP32[$53>>2] = 1;
    break;
   }
   $54 = HEAP32[8654]|0;
   _compileError($54,5893,$vararg_buffer);
   $2 = 0;
   $969 = $2;
   STACKTOP = sp;return ($969|0);
  }
 } while(0);
 $55 = HEAP32[8654]|0;
 (_parseChars($55,42824,34628)|0);
 $56 = $13;
 $57 = ($56|0)!=(0);
 L17: do {
  if ($57) {
   $14 = 1;
   $58 = (_passGetScriptToken()|0);
   $11 = $58;
   $59 = $11;
   $60 = ($59|0)!=(144);
   if ($60) {
    $61 = HEAP32[8654]|0;
    _compileError($61,5920,$vararg_buffer17);
    $2 = 0;
    $969 = $2;
    STACKTOP = sp;return ($969|0);
   }
   L22: while(1) {
    $62 = $14;
    $63 = ($62|0)!=(0);
    if (!($63)) {
     label = 30;
     break;
    }
    $64 = (_passGetScriptToken()|0);
    $11 = $64;
    $65 = $11;
    switch ($65|0) {
    case 140:  {
     break;
    }
    case 147:  {
     $14 = 0;
     continue L22;
     break;
    }
    default: {
     label = 29;
     break L22;
    }
    }
    $66 = (_passIsLeftParen()|0);
    $67 = ($66|0)!=(0);
    if (!($67)) {
     label = 18;
     break;
    }
    $68 = (_passIsName()|0);
    $69 = ($68|0)!=(0);
    if (!($69)) {
     label = 20;
     break;
    }
    $70 = (_passIsComma()|0);
    $71 = ($70|0)!=(0);
    if (!($71)) {
     label = 22;
     break;
    }
    $72 = (_passIsNumber()|0);
    $73 = ($72|0)!=(0);
    if (!($73)) {
     label = 24;
     break;
    }
    $74 = (_passIsRightParen()|0);
    $75 = ($74|0)!=(0);
    if (!($75)) {
     label = 26;
     break;
    }
    $76 = HEAP32[12755]|0;
    (_passAddName(34628,$76)|0);
   }
   if ((label|0) == 18) {
    $2 = 0;
    $969 = $2;
    STACKTOP = sp;return ($969|0);
   }
   else if ((label|0) == 20) {
    $2 = 0;
    $969 = $2;
    STACKTOP = sp;return ($969|0);
   }
   else if ((label|0) == 22) {
    $2 = 0;
    $969 = $2;
    STACKTOP = sp;return ($969|0);
   }
   else if ((label|0) == 24) {
    $2 = 0;
    $969 = $2;
    STACKTOP = sp;return ($969|0);
   }
   else if ((label|0) == 26) {
    $2 = 0;
    $969 = $2;
    STACKTOP = sp;return ($969|0);
   }
   else if ((label|0) == 29) {
    $77 = HEAP32[8654]|0;
    _compileError($77,5948,$vararg_buffer19);
    $2 = 0;
    $969 = $2;
    STACKTOP = sp;return ($969|0);
   }
   else if ((label|0) == 30) {
    $14 = 1;
    L35: while(1) {
     $78 = $14;
     $79 = ($78|0)!=(0);
     if (!($79)) {
      label = 112;
      break;
     }
     $80 = (_passGetScriptToken()|0);
     $11 = $80;
     $81 = $11;
     $5 = $81;
     $82 = $11;
     do {
      switch ($82|0) {
      case 33:  {
       $83 = HEAP32[6604]|0;
       $84 = (($83) + 1)|0;
       HEAP32[6604] = $84;
       $85 = HEAP32[6603]|0;
       $86 = (($85) + ($83<<2)|0);
       HEAP32[$86>>2] = 33;
       continue L35;
       break;
      }
      case 96:  {
       $87 = HEAP32[6604]|0;
       $88 = (($87) + 1)|0;
       HEAP32[6604] = $88;
       $89 = HEAP32[6603]|0;
       $90 = (($89) + ($87<<2)|0);
       HEAP32[$90>>2] = 96;
       continue L35;
       break;
      }
      case 126:  {
       $91 = HEAP32[6604]|0;
       $92 = (($91) + 1)|0;
       HEAP32[6604] = $92;
       $93 = HEAP32[6603]|0;
       $94 = (($93) + ($91<<2)|0);
       HEAP32[$94>>2] = 126;
       continue L35;
       break;
      }
      case 47:  {
       $95 = HEAP32[6604]|0;
       $96 = (($95) + 1)|0;
       HEAP32[6604] = $96;
       $97 = HEAP32[6603]|0;
       $98 = (($97) + ($95<<2)|0);
       HEAP32[$98>>2] = 47;
       continue L35;
       break;
      }
      case 34:  {
       $99 = $3;
       $100 = $4;
       $101 = (_verifyStringOrDots($99,$100,1,0)|0);
       $102 = ($101|0)!=(0);
       if (!($102)) {
        label = 38;
        break L35;
       }
       $103 = HEAP32[6604]|0;
       $104 = (($103) + 1)|0;
       HEAP32[6604] = $104;
       $105 = HEAP32[6603]|0;
       $106 = (($105) + ($103<<2)|0);
       HEAP32[$106>>2] = 34;
       break;
      }
      case 64:  {
       $107 = $3;
       $108 = $4;
       $109 = (_verifyStringOrDots($107,$108,0,0)|0);
       $110 = ($109|0)!=(0);
       if (!($110)) {
        label = 41;
        break L35;
       }
       $111 = HEAP32[6604]|0;
       $112 = (($111) + 1)|0;
       HEAP32[6604] = $112;
       $113 = HEAP32[6603]|0;
       $114 = (($113) + ($111<<2)|0);
       HEAP32[$114>>2] = 64;
       break;
      }
      case 36:  {
       $132 = (_passIsLeftParen()|0);
       $133 = ($132|0)!=(0);
       if (!($133)) {
        label = 47;
        break L35;
       }
       $134 = (_passGetAttributes()|0);
       $135 = ($134|0)!=(0);
       if (!($135)) {
        label = 49;
        break L35;
       }
       $136 = (_passInsertAttributes()|0);
       $137 = ($136|0)!=(0);
       if ($137) {
        continue L35;
       } else {
        label = 51;
        break L35;
       }
       break;
      }
      case 141:  {
       $138 = (_passIsLeftParen()|0);
       $139 = ($138|0)!=(0);
       if (!($139)) {
        label = 53;
        break L35;
       }
       $140 = (_passGetEmphasis()|0);
       $141 = ($140|0)!=(0);
       if ($141) {
        continue L35;
       } else {
        label = 55;
        break L35;
       }
       break;
      }
      case 95:  {
       $142 = HEAP32[6604]|0;
       $143 = (($142) + 1)|0;
       HEAP32[6604] = $143;
       $144 = HEAP32[6603]|0;
       $145 = (($144) + ($142<<2)|0);
       HEAP32[$145>>2] = 95;
       $146 = (_passGetScriptToken()|0);
       $11 = $146;
       $147 = $11;
       $148 = ($147|0)!=(40);
       if ($148) {
        $149 = HEAP32[6604]|0;
        $150 = (($149) + 1)|0;
        HEAP32[6604] = $150;
        $151 = HEAP32[6603]|0;
        $152 = (($151) + ($149<<2)|0);
        HEAP32[$152>>2] = 1;
        $153 = HEAP32[12756]|0;
        HEAP32[8656] = $153;
        continue L35;
       }
       $154 = (_passIsNumber()|0);
       $155 = ($154|0)!=(0);
       if (!($155)) {
        label = 59;
        break L35;
       }
       $156 = (_passIsRightParen()|0);
       $157 = ($156|0)!=(0);
       if (!($157)) {
        label = 61;
        break L35;
       }
       $158 = HEAP32[12755]|0;
       $159 = HEAP32[6604]|0;
       $160 = HEAP32[6603]|0;
       $161 = (($160) + ($159<<2)|0);
       HEAP32[$161>>2] = $158;
       continue L35;
       break;
      }
      case 142:  {
       $162 = (_passIsLeftParen()|0);
       $163 = ($162|0)!=(0);
       if ($163) {
        continue L35;
       } else {
        label = 64;
        break L35;
       }
       break;
      }
      case 143:  {
       $164 = HEAP32[6604]|0;
       $165 = (($164) + 1)|0;
       HEAP32[6604] = $165;
       $166 = HEAP32[6603]|0;
       $167 = (($166) + ($164<<2)|0);
       HEAP32[$167>>2] = 91;
       $168 = HEAP32[6604]|0;
       $169 = (($168) + 1)|0;
       HEAP32[6604] = $169;
       $170 = HEAP32[6603]|0;
       $171 = (($170) + ($168<<2)|0);
       HEAP32[$171>>2] = 93;
       continue L35;
       break;
      }
      case 146:  {
       $172 = HEAP32[6604]|0;
       $173 = (($172) + 1)|0;
       HEAP32[6604] = $173;
       $174 = HEAP32[6603]|0;
       $175 = (($174) + ($172<<2)|0);
       HEAP32[$175>>2] = 91;
       $176 = (_passIsLeftParen()|0);
       $177 = ($176|0)!=(0);
       if ($177) {
        continue L35;
       } else {
        label = 67;
        break L35;
       }
       break;
      }
      case 41:  {
       $178 = HEAP32[6604]|0;
       $179 = (($178) + 1)|0;
       HEAP32[6604] = $179;
       $180 = HEAP32[6603]|0;
       $181 = (($180) + ($178<<2)|0);
       HEAP32[$181>>2] = 93;
       continue L35;
       break;
      }
      case 125: case 123:  {
       $182 = (_passIsLeftParen()|0);
       $183 = ($182|0)!=(0);
       if (!($183)) {
        label = 70;
        break L35;
       }
       $184 = (_passGetName()|0);
       $185 = ($184|0)!=(0);
       if (!($185)) {
        label = 72;
        break L35;
       }
       $186 = (_passIsRightParen()|0);
       $187 = ($186|0)!=(0);
       if (!($187)) {
        label = 74;
        break L35;
       }
       $188 = (_findRuleName(34628)|0);
       $7 = $188;
       $189 = $7;
       $190 = ($189|0)!=(0);
       if ($190) {
        $191 = $7;
        $192 = HEAP32[2463]|0;
        $193 = ((($192)) + 31332|0);
        $194 = (($193) + ($191<<2)|0);
        $8 = $194;
       }
       $195 = $8;
       $196 = ($195|0)!=(0|0);
       if (!($196)) {
        label = 80;
        break L35;
       }
       $197 = $8;
       $198 = ((($197)) + 20|0);
       $199 = HEAP32[$198>>2]|0;
       $200 = ($199|0)==(65);
       if (!($200)) {
        label = 80;
        break L35;
       }
       $201 = $5;
       $202 = HEAP32[6604]|0;
       $203 = (($202) + 1)|0;
       HEAP32[6604] = $203;
       $204 = HEAP32[6603]|0;
       $205 = (($204) + ($202<<2)|0);
       HEAP32[$205>>2] = $201;
       $206 = $7;
       $207 = $206 >>> 16;
       $208 = HEAP32[6604]|0;
       $209 = (($208) + 1)|0;
       HEAP32[6604] = $209;
       $210 = HEAP32[6603]|0;
       $211 = (($210) + ($208<<2)|0);
       HEAP32[$211>>2] = $207;
       $212 = $7;
       $213 = $212 & 65535;
       $214 = HEAP32[6604]|0;
       $215 = (($214) + 1)|0;
       HEAP32[6604] = $215;
       $216 = HEAP32[6603]|0;
       $217 = (($216) + ($214<<2)|0);
       HEAP32[$217>>2] = $213;
       continue L35;
       break;
      }
      case 139:  {
       $221 = (_passIsLeftParen()|0);
       $222 = ($221|0)!=(0);
       if (!($222)) {
        label = 82;
        break L35;
       }
       $223 = (_passGetName()|0);
       $224 = ($223|0)!=(0);
       if (!($224)) {
        label = 84;
        break L35;
       }
       $225 = (_passIsRightParen()|0);
       $226 = ($225|0)!=(0);
       if (!($226)) {
        label = 86;
        break L35;
       }
       $227 = (_findCharacterClass(34628)|0);
       $6 = $227;
       $228 = ($227|0)!=(0|0);
       if (!($228)) {
        label = 88;
        break L35;
       }
       $229 = $6;
       $230 = ((($229)) + 4|0);
       $231 = HEAP32[$230>>2]|0;
       HEAP32[12757] = $231;
       (_passInsertAttributes()|0);
       continue L35;
       break;
      }
      case 37:  {
       $232 = (_findRuleName(34628)|0);
       $7 = $232;
       $233 = (_passIsLeftParen()|0);
       $234 = ($233|0)!=(0);
       if (!($234)) {
        label = 91;
        break L35;
       }
       $235 = (_passGetName()|0);
       $236 = ($235|0)!=(0);
       if (!($236)) {
        label = 93;
        break L35;
       }
       $237 = (_passIsRightParen()|0);
       $238 = ($237|0)!=(0);
       if (!($238)) {
        label = 95;
        break L35;
       }
       $239 = (_findRuleName(34628)|0);
       $7 = $239;
       $240 = $7;
       $241 = ($240|0)!=(0);
       if ($241) {
        $242 = $7;
        $243 = HEAP32[2463]|0;
        $244 = ((($243)) + 31332|0);
        $245 = (($244) + ($242<<2)|0);
        $8 = $245;
       }
       $246 = $8;
       $247 = ($246|0)!=(0|0);
       if (!($247)) {
        label = 104;
        break L35;
       }
       $248 = $8;
       $249 = ((($248)) + 20|0);
       $250 = HEAP32[$249>>2]|0;
       $251 = ($250|0)==(54);
       if (!($251)) {
        $252 = $8;
        $253 = ((($252)) + 20|0);
        $254 = HEAP32[$253>>2]|0;
        $255 = ($254|0)==(55);
        if (!($255)) {
         $256 = $8;
         $257 = ((($256)) + 20|0);
         $258 = HEAP32[$257>>2]|0;
         $259 = ($258|0)==(56);
         if (!($259)) {
          label = 104;
          break L35;
         }
        }
       }
       $260 = HEAP32[6604]|0;
       $261 = (($260) + 1)|0;
       HEAP32[6604] = $261;
       $262 = HEAP32[6603]|0;
       $263 = (($262) + ($260<<2)|0);
       HEAP32[$263>>2] = 37;
       $264 = $7;
       $265 = $264 >>> 16;
       $266 = HEAP32[6604]|0;
       $267 = (($266) + 1)|0;
       HEAP32[6604] = $267;
       $268 = HEAP32[6603]|0;
       $269 = (($268) + ($266<<2)|0);
       HEAP32[$269>>2] = $265;
       $270 = $7;
       $271 = $270 & 65535;
       $272 = HEAP32[6604]|0;
       $273 = (($272) + 1)|0;
       HEAP32[6604] = $273;
       $274 = HEAP32[6603]|0;
       $275 = (($274) + ($272<<2)|0);
       HEAP32[$275>>2] = $271;
       $276 = (_passGetRange()|0);
       $277 = ($276|0)!=(0);
       if ($277) {
        continue L35;
       } else {
        label = 103;
        break L35;
       }
       break;
      }
      case 136:  {
       $281 = (_passFindName(34628)|0);
       HEAP32[12755] = $281;
       $282 = (_passGetScriptToken()|0);
       $11 = $282;
       $283 = $11;
       $284 = ($283|0)==(61);
       $285 = $11;
       $286 = ($285|0)==(60);
       $or$cond = $284 | $286;
       $287 = $11;
       $288 = ($287|0)==(62);
       $or$cond3 = $or$cond | $288;
       $289 = $11;
       $290 = ($289|0)==(133);
       $or$cond5 = $or$cond3 | $290;
       $291 = $11;
       $292 = ($291|0)==(130);
       $or$cond7 = $or$cond5 | $292;
       $293 = $11;
       $294 = ($293|0)==(131);
       $or$cond9 = $or$cond7 | $294;
       if (!($or$cond9)) {
        label = 106;
        break L35;
       }
       $296 = $11;
       $297 = HEAP32[6604]|0;
       $298 = (($297) + 1)|0;
       HEAP32[6604] = $298;
       $299 = HEAP32[6603]|0;
       $300 = (($299) + ($297<<2)|0);
       HEAP32[$300>>2] = $296;
       $301 = HEAP32[12755]|0;
       $302 = HEAP32[6604]|0;
       $303 = (($302) + 1)|0;
       HEAP32[6604] = $303;
       $304 = HEAP32[6603]|0;
       $305 = (($304) + ($302<<2)|0);
       HEAP32[$305>>2] = $301;
       $306 = (_passIsNumber()|0);
       $307 = ($306|0)!=(0);
       if (!($307)) {
        label = 108;
        break L35;
       }
       $308 = HEAP32[12755]|0;
       $309 = HEAP32[6604]|0;
       $310 = (($309) + 1)|0;
       HEAP32[6604] = $310;
       $311 = HEAP32[6603]|0;
       $312 = (($311) + ($309<<2)|0);
       HEAP32[$312>>2] = $308;
       continue L35;
       break;
      }
      case 148:  {
       $313 = HEAP32[6604]|0;
       $314 = (($313) + 1)|0;
       HEAP32[6604] = $314;
       $315 = HEAP32[6603]|0;
       $316 = (($315) + ($313<<2)|0);
       HEAP32[$316>>2] = 32;
       $14 = 0;
       continue L35;
       break;
      }
      default: {
       label = 111;
       break L35;
      }
      }
     } while(0);
     $115 = HEAP32[8657]|0;
     $116 = HEAP32[6604]|0;
     $117 = (($116) + 1)|0;
     HEAP32[6604] = $117;
     $118 = HEAP32[6603]|0;
     $119 = (($118) + ($116<<2)|0);
     HEAP32[$119>>2] = $115;
     $10 = 0;
     while(1) {
      $120 = $10;
      $121 = HEAP32[8657]|0;
      $122 = ($120>>>0)<($121>>>0);
      if (!($122)) {
       continue L35;
      }
      $123 = $10;
      $124 = ((34632) + ($123<<2)|0);
      $125 = HEAP32[$124>>2]|0;
      $126 = HEAP32[6604]|0;
      $127 = (($126) + 1)|0;
      HEAP32[6604] = $127;
      $128 = HEAP32[6603]|0;
      $129 = (($128) + ($126<<2)|0);
      HEAP32[$129>>2] = $125;
      $130 = $10;
      $131 = (($130) + 1)|0;
      $10 = $131;
     }
    }
    switch (label|0) {
     case 38: {
      $2 = 0;
      $969 = $2;
      STACKTOP = sp;return ($969|0);
      break;
     }
     case 41: {
      $2 = 0;
      $969 = $2;
      STACKTOP = sp;return ($969|0);
      break;
     }
     case 47: {
      $2 = 0;
      $969 = $2;
      STACKTOP = sp;return ($969|0);
      break;
     }
     case 49: {
      $2 = 0;
      $969 = $2;
      STACKTOP = sp;return ($969|0);
      break;
     }
     case 51: {
      $2 = 0;
      $969 = $2;
      STACKTOP = sp;return ($969|0);
      break;
     }
     case 53: {
      $2 = 0;
      $969 = $2;
      STACKTOP = sp;return ($969|0);
      break;
     }
     case 55: {
      $2 = 0;
      $969 = $2;
      STACKTOP = sp;return ($969|0);
      break;
     }
     case 59: {
      $2 = 0;
      $969 = $2;
      STACKTOP = sp;return ($969|0);
      break;
     }
     case 61: {
      $2 = 0;
      $969 = $2;
      STACKTOP = sp;return ($969|0);
      break;
     }
     case 64: {
      $2 = 0;
      $969 = $2;
      STACKTOP = sp;return ($969|0);
      break;
     }
     case 67: {
      $2 = 0;
      $969 = $2;
      STACKTOP = sp;return ($969|0);
      break;
     }
     case 70: {
      $2 = 0;
      $969 = $2;
      STACKTOP = sp;return ($969|0);
      break;
     }
     case 72: {
      $2 = 0;
      $969 = $2;
      STACKTOP = sp;return ($969|0);
      break;
     }
     case 74: {
      $2 = 0;
      $969 = $2;
      STACKTOP = sp;return ($969|0);
      break;
     }
     case 80: {
      $218 = HEAP32[8654]|0;
      $219 = HEAP32[8657]|0;
      $220 = (_showString((34632),$219)|0);
      HEAP32[$vararg_buffer21>>2] = $220;
      _compileError($218,5987,$vararg_buffer21);
      $2 = 0;
      $969 = $2;
      STACKTOP = sp;return ($969|0);
      break;
     }
     case 82: {
      $2 = 0;
      $969 = $2;
      STACKTOP = sp;return ($969|0);
      break;
     }
     case 84: {
      $2 = 0;
      $969 = $2;
      STACKTOP = sp;return ($969|0);
      break;
     }
     case 86: {
      $2 = 0;
      $969 = $2;
      STACKTOP = sp;return ($969|0);
      break;
     }
     case 88: {
      $2 = 0;
      $969 = $2;
      STACKTOP = sp;return ($969|0);
      break;
     }
     case 91: {
      $2 = 0;
      $969 = $2;
      STACKTOP = sp;return ($969|0);
      break;
     }
     case 93: {
      $2 = 0;
      $969 = $2;
      STACKTOP = sp;return ($969|0);
      break;
     }
     case 95: {
      $2 = 0;
      $969 = $2;
      STACKTOP = sp;return ($969|0);
      break;
     }
     case 103: {
      $2 = 0;
      $969 = $2;
      STACKTOP = sp;return ($969|0);
      break;
     }
     case 104: {
      $278 = HEAP32[8654]|0;
      $279 = HEAP32[8657]|0;
      $280 = (_showString((34632),$279)|0);
      HEAP32[$vararg_buffer23>>2] = $280;
      _compileError($278,6013,$vararg_buffer23);
      $2 = 0;
      $969 = $2;
      STACKTOP = sp;return ($969|0);
      break;
     }
     case 106: {
      $295 = $3;
      _compileError($295,6036,$vararg_buffer26);
      $2 = 0;
      $969 = $2;
      STACKTOP = sp;return ($969|0);
      break;
     }
     case 108: {
      $2 = 0;
      $969 = $2;
      STACKTOP = sp;return ($969|0);
      break;
     }
     case 111: {
      $317 = HEAP32[8654]|0;
      _compileError($317,6075,$vararg_buffer28);
      $2 = 0;
      $969 = $2;
      STACKTOP = sp;return ($969|0);
      break;
     }
     case 112: {
      $14 = 1;
      L98: while(1) {
       $318 = $14;
       $319 = ($318|0)!=(0);
       if (!($319)) {
        break L17;
       }
       $320 = (_passGetScriptToken()|0);
       $11 = $320;
       $321 = $11;
       $5 = $321;
       $322 = $11;
       switch ($322|0) {
       case 34:  {
        $323 = $3;
        $324 = $4;
        $325 = (_verifyStringOrDots($323,$324,1,1)|0);
        $326 = ($325|0)!=(0);
        if (!($326)) {
         label = 116;
         break L98;
        }
        $327 = HEAP32[6604]|0;
        $328 = (($327) + 1)|0;
        HEAP32[6604] = $328;
        $329 = HEAP32[6603]|0;
        $330 = (($329) + ($327<<2)|0);
        HEAP32[$330>>2] = 34;
        break;
       }
       case 64:  {
        $331 = $3;
        $332 = $4;
        $333 = (_verifyStringOrDots($331,$332,0,1)|0);
        $334 = ($333|0)!=(0);
        if (!($334)) {
         label = 119;
         break L98;
        }
        $335 = HEAP32[6604]|0;
        $336 = (($335) + 1)|0;
        HEAP32[6604] = $336;
        $337 = HEAP32[6603]|0;
        $338 = (($337) + ($335<<2)|0);
        HEAP32[$338>>2] = 64;
        break;
       }
       case 136:  {
        $356 = (_passFindName(34628)|0);
        HEAP32[12755] = $356;
        $357 = (_passGetScriptToken()|0);
        $11 = $357;
        $358 = $11;
        $359 = ($358|0)==(43);
        $360 = $11;
        $361 = ($360|0)==(45);
        $or$cond11 = $359 | $361;
        $362 = $11;
        $363 = ($362|0)==(61);
        $or$cond13 = $or$cond11 | $363;
        if (!($or$cond13)) {
         label = 125;
         break L98;
        }
        $365 = $11;
        $366 = HEAP32[6604]|0;
        $367 = (($366) + 1)|0;
        HEAP32[6604] = $367;
        $368 = HEAP32[6603]|0;
        $369 = (($368) + ($366<<2)|0);
        HEAP32[$369>>2] = $365;
        $370 = HEAP32[12755]|0;
        $371 = HEAP32[6604]|0;
        $372 = (($371) + 1)|0;
        HEAP32[6604] = $372;
        $373 = HEAP32[6603]|0;
        $374 = (($373) + ($371<<2)|0);
        HEAP32[$374>>2] = $370;
        $375 = (_passIsNumber()|0);
        $376 = ($375|0)!=(0);
        if (!($376)) {
         label = 127;
         break L98;
        }
        $377 = HEAP32[12755]|0;
        $378 = HEAP32[6604]|0;
        $379 = (($378) + 1)|0;
        HEAP32[6604] = $379;
        $380 = HEAP32[6603]|0;
        $381 = (($380) + ($378<<2)|0);
        HEAP32[$381>>2] = $377;
        continue L98;
        break;
       }
       case 42:  {
        $382 = HEAP32[6604]|0;
        $383 = (($382) + 1)|0;
        HEAP32[6604] = $383;
        $384 = HEAP32[6603]|0;
        $385 = (($384) + ($382<<2)|0);
        HEAP32[$385>>2] = 42;
        continue L98;
        break;
       }
       case 63:  {
        $386 = HEAP32[6604]|0;
        $387 = (($386) + 1)|0;
        HEAP32[6604] = $387;
        $388 = HEAP32[6603]|0;
        $389 = (($388) + ($386<<2)|0);
        HEAP32[$389>>2] = 63;
        continue L98;
        break;
       }
       case 37:  {
        $390 = (_findRuleName(34628)|0);
        $7 = $390;
        $391 = (_passIsLeftParen()|0);
        $392 = ($391|0)!=(0);
        if (!($392)) {
         label = 132;
         break L98;
        }
        $393 = (_passGetName()|0);
        $394 = ($393|0)!=(0);
        if (!($394)) {
         label = 134;
         break L98;
        }
        $395 = (_passIsRightParen()|0);
        $396 = ($395|0)!=(0);
        if (!($396)) {
         label = 136;
         break L98;
        }
        $397 = (_findRuleName(34628)|0);
        $7 = $397;
        $398 = $7;
        $399 = ($398|0)!=(0);
        if ($399) {
         $400 = $7;
         $401 = HEAP32[2463]|0;
         $402 = ((($401)) + 31332|0);
         $403 = (($402) + ($400<<2)|0);
         $8 = $403;
        }
        $404 = $8;
        $405 = ($404|0)!=(0|0);
        if (!($405)) {
         label = 145;
         break L98;
        }
        $406 = $8;
        $407 = ((($406)) + 20|0);
        $408 = HEAP32[$407>>2]|0;
        $409 = ($408|0)==(54);
        if (!($409)) {
         $410 = $8;
         $411 = ((($410)) + 20|0);
         $412 = HEAP32[$411>>2]|0;
         $413 = ($412|0)==(55);
         if (!($413)) {
          $414 = $8;
          $415 = ((($414)) + 20|0);
          $416 = HEAP32[$415>>2]|0;
          $417 = ($416|0)==(56);
          if (!($417)) {
           label = 145;
           break L98;
          }
         }
        }
        $418 = HEAP32[6604]|0;
        $419 = (($418) + 1)|0;
        HEAP32[6604] = $419;
        $420 = HEAP32[6603]|0;
        $421 = (($420) + ($418<<2)|0);
        HEAP32[$421>>2] = 37;
        $422 = $7;
        $423 = $422 >>> 16;
        $424 = HEAP32[6604]|0;
        $425 = (($424) + 1)|0;
        HEAP32[6604] = $425;
        $426 = HEAP32[6603]|0;
        $427 = (($426) + ($424<<2)|0);
        HEAP32[$427>>2] = $423;
        $428 = $7;
        $429 = $428 & 65535;
        $430 = HEAP32[6604]|0;
        $431 = (($430) + 1)|0;
        HEAP32[6604] = $431;
        $432 = HEAP32[6603]|0;
        $433 = (($432) + ($430<<2)|0);
        HEAP32[$433>>2] = $429;
        $434 = (_passGetRange()|0);
        $435 = ($434|0)!=(0);
        if ($435) {
         continue L98;
        } else {
         label = 144;
         break L98;
        }
        break;
       }
       case 145:  {
        $14 = 0;
        continue L98;
        break;
       }
       default: {
        label = 147;
        break L98;
       }
       }
       $339 = HEAP32[8657]|0;
       $340 = HEAP32[6604]|0;
       $341 = (($340) + 1)|0;
       HEAP32[6604] = $341;
       $342 = HEAP32[6603]|0;
       $343 = (($342) + ($340<<2)|0);
       HEAP32[$343>>2] = $339;
       $10 = 0;
       while(1) {
        $344 = $10;
        $345 = HEAP32[8657]|0;
        $346 = ($344>>>0)<($345>>>0);
        if (!($346)) {
         continue L98;
        }
        $347 = $10;
        $348 = ((34632) + ($347<<2)|0);
        $349 = HEAP32[$348>>2]|0;
        $350 = HEAP32[6604]|0;
        $351 = (($350) + 1)|0;
        HEAP32[6604] = $351;
        $352 = HEAP32[6603]|0;
        $353 = (($352) + ($350<<2)|0);
        HEAP32[$353>>2] = $349;
        $354 = $10;
        $355 = (($354) + 1)|0;
        $10 = $355;
       }
      }
      switch (label|0) {
       case 116: {
        $2 = 0;
        $969 = $2;
        STACKTOP = sp;return ($969|0);
        break;
       }
       case 119: {
        $2 = 0;
        $969 = $2;
        STACKTOP = sp;return ($969|0);
        break;
       }
       case 125: {
        $364 = $3;
        _compileError($364,6101,$vararg_buffer30);
        $2 = 0;
        $969 = $2;
        STACKTOP = sp;return ($969|0);
        break;
       }
       case 127: {
        $2 = 0;
        $969 = $2;
        STACKTOP = sp;return ($969|0);
        break;
       }
       case 132: {
        $2 = 0;
        $969 = $2;
        STACKTOP = sp;return ($969|0);
        break;
       }
       case 134: {
        $2 = 0;
        $969 = $2;
        STACKTOP = sp;return ($969|0);
        break;
       }
       case 136: {
        $2 = 0;
        $969 = $2;
        STACKTOP = sp;return ($969|0);
        break;
       }
       case 144: {
        $2 = 0;
        $969 = $2;
        STACKTOP = sp;return ($969|0);
        break;
       }
       case 145: {
        $436 = HEAP32[8654]|0;
        $437 = HEAP32[8657]|0;
        $438 = (_showString((34632),$437)|0);
        HEAP32[$vararg_buffer32>>2] = $438;
        _compileError($436,6013,$vararg_buffer32);
        $2 = 0;
        $969 = $2;
        STACKTOP = sp;return ($969|0);
        break;
       }
       case 147: {
        $439 = HEAP32[8654]|0;
        _compileError($439,6140,$vararg_buffer35);
        $2 = 0;
        $969 = $2;
        STACKTOP = sp;return ($969|0);
        break;
       }
      }
      break;
     }
    }
   }
  } else {
   $9 = 0;
   while(1) {
    $440 = $9;
    $441 = HEAP32[10706]|0;
    $442 = ($440>>>0)<($441>>>0);
    if (!($442)) {
     break;
    }
    $443 = $9;
    $444 = ((42828) + ($443<<2)|0);
    $445 = HEAP32[$444>>2]|0;
    $446 = ($445|0)!=(1);
    if (!($446)) {
     break;
    }
    $447 = $9;
    $448 = (($447) + 1)|0;
    $9 = $448;
   }
   $449 = $9;
   $12 = $449;
   $450 = $12;
   $451 = ((42828) + ($450<<2)|0);
   HEAP32[$451>>2] = 32;
   HEAP32[8656] = 0;
   L221: while(1) {
    $452 = HEAP32[8656]|0;
    $453 = $12;
    $454 = ($452|0)<=($453|0);
    if (!($454)) {
     label = 217;
     break;
    }
    $455 = HEAP32[8656]|0;
    $456 = ((42828) + ($455<<2)|0);
    $457 = HEAP32[$456>>2]|0;
    $5 = $457;
    L224: do {
     switch ($457|0) {
     case 95:  {
      $458 = HEAP32[6604]|0;
      $459 = (($458) + 1)|0;
      HEAP32[6604] = $459;
      $460 = HEAP32[6603]|0;
      $461 = (($460) + ($458<<2)|0);
      HEAP32[$461>>2] = 95;
      $462 = HEAP32[8656]|0;
      $463 = (($462) + 1)|0;
      HEAP32[8656] = $463;
      (_passGetNumber()|0);
      $464 = HEAP32[12755]|0;
      $465 = ($464|0)==(0);
      if ($465) {
       HEAP32[12755] = 1;
      }
      $466 = HEAP32[12755]|0;
      $467 = HEAP32[6604]|0;
      $468 = (($467) + 1)|0;
      HEAP32[6604] = $468;
      $469 = HEAP32[6603]|0;
      $470 = (($469) + ($467<<2)|0);
      HEAP32[$470>>2] = $466;
      continue L221;
      break;
     }
     case 33:  {
      $471 = HEAP32[6604]|0;
      $472 = (($471) + 1)|0;
      HEAP32[6604] = $472;
      $473 = HEAP32[6603]|0;
      $474 = (($473) + ($471<<2)|0);
      HEAP32[$474>>2] = 33;
      $475 = HEAP32[8656]|0;
      $476 = (($475) + 1)|0;
      HEAP32[8656] = $476;
      continue L221;
      break;
     }
     case 96:  {
      $477 = HEAP32[6604]|0;
      $478 = (($477) + 1)|0;
      HEAP32[6604] = $478;
      $479 = HEAP32[6603]|0;
      $480 = (($479) + ($477<<2)|0);
      HEAP32[$480>>2] = 96;
      $481 = HEAP32[8656]|0;
      $482 = (($481) + 1)|0;
      HEAP32[8656] = $482;
      continue L221;
      break;
     }
     case 126:  {
      $483 = HEAP32[6604]|0;
      $484 = (($483) + 1)|0;
      HEAP32[6604] = $484;
      $485 = HEAP32[6603]|0;
      $486 = (($485) + ($483<<2)|0);
      HEAP32[$486>>2] = 126;
      $487 = HEAP32[8656]|0;
      $488 = (($487) + 1)|0;
      HEAP32[8656] = $488;
      continue L221;
      break;
     }
     case 47:  {
      $489 = HEAP32[6604]|0;
      $490 = (($489) + 1)|0;
      HEAP32[6604] = $490;
      $491 = HEAP32[6603]|0;
      $492 = (($491) + ($489<<2)|0);
      HEAP32[$492>>2] = 47;
      $493 = HEAP32[8656]|0;
      $494 = (($493) + 1)|0;
      HEAP32[8656] = $494;
      continue L221;
      break;
     }
     case 34:  {
      $495 = $3;
      $496 = $4;
      $497 = (_verifyStringOrDots($495,$496,1,0)|0);
      $498 = ($497|0)!=(0);
      if (!($498)) {
       label = 163;
       break L221;
      }
      $499 = HEAP32[8656]|0;
      $500 = (($499) + 1)|0;
      HEAP32[8656] = $500;
      $501 = HEAP32[6604]|0;
      $502 = (($501) + 1)|0;
      HEAP32[6604] = $502;
      $503 = HEAP32[6603]|0;
      $504 = (($503) + ($501<<2)|0);
      HEAP32[$504>>2] = 34;
      (_passGetString()|0);
      label = 168;
      break;
     }
     case 64:  {
      $505 = $3;
      $506 = $4;
      $507 = (_verifyStringOrDots($505,$506,0,0)|0);
      $508 = ($507|0)!=(0);
      if (!($508)) {
       label = 166;
       break L221;
      }
      $509 = HEAP32[8656]|0;
      $510 = (($509) + 1)|0;
      HEAP32[8656] = $510;
      $511 = HEAP32[6604]|0;
      $512 = (($511) + 1)|0;
      HEAP32[6604] = $512;
      $513 = HEAP32[6603]|0;
      $514 = (($513) + ($511<<2)|0);
      HEAP32[$514>>2] = 64;
      (_passGetDots()|0);
      label = 168;
      break;
     }
     case 91:  {
      $534 = HEAP32[6604]|0;
      $535 = (($534) + 1)|0;
      HEAP32[6604] = $535;
      $536 = HEAP32[6603]|0;
      $537 = (($536) + ($534<<2)|0);
      HEAP32[$537>>2] = 91;
      $538 = HEAP32[8656]|0;
      $539 = (($538) + 1)|0;
      HEAP32[8656] = $539;
      continue L221;
      break;
     }
     case 93:  {
      $540 = HEAP32[6604]|0;
      $541 = (($540) + 1)|0;
      HEAP32[6604] = $541;
      $542 = HEAP32[6603]|0;
      $543 = (($542) + ($540<<2)|0);
      HEAP32[$543>>2] = 93;
      $544 = HEAP32[8656]|0;
      $545 = (($544) + 1)|0;
      HEAP32[8656] = $545;
      continue L221;
      break;
     }
     case 35:  {
      $546 = HEAP32[8656]|0;
      $547 = (($546) + 1)|0;
      HEAP32[8656] = $547;
      $548 = $3;
      $549 = (_passGetVariableNumber($548)|0);
      $550 = ($549|0)!=(0);
      if (!($550)) {
       label = 176;
       break L221;
      }
      $551 = HEAP32[8656]|0;
      $552 = ((42828) + ($551<<2)|0);
      $553 = HEAP32[$552>>2]|0;
      L241: do {
       switch ($553|0) {
       case 61:  {
        $554 = HEAP32[6604]|0;
        $555 = (($554) + 1)|0;
        HEAP32[6604] = $555;
        $556 = HEAP32[6603]|0;
        $557 = (($556) + ($554<<2)|0);
        HEAP32[$557>>2] = 61;
        break;
       }
       case 60:  {
        $558 = HEAP32[8656]|0;
        $559 = (($558) + 1)|0;
        $560 = ((42828) + ($559<<2)|0);
        $561 = HEAP32[$560>>2]|0;
        $562 = ($561|0)==(61);
        if ($562) {
         $563 = HEAP32[8656]|0;
         $564 = (($563) + 1)|0;
         HEAP32[8656] = $564;
         $565 = HEAP32[6604]|0;
         $566 = (($565) + 1)|0;
         HEAP32[6604] = $566;
         $567 = HEAP32[6603]|0;
         $568 = (($567) + ($565<<2)|0);
         HEAP32[$568>>2] = 130;
         break L241;
        } else {
         $569 = HEAP32[6604]|0;
         $570 = (($569) + 1)|0;
         HEAP32[6604] = $570;
         $571 = HEAP32[6603]|0;
         $572 = (($571) + ($569<<2)|0);
         HEAP32[$572>>2] = 60;
         break L241;
        }
        break;
       }
       case 62:  {
        $573 = HEAP32[8656]|0;
        $574 = (($573) + 1)|0;
        $575 = ((42828) + ($574<<2)|0);
        $576 = HEAP32[$575>>2]|0;
        $577 = ($576|0)==(61);
        if ($577) {
         $578 = HEAP32[8656]|0;
         $579 = (($578) + 1)|0;
         HEAP32[8656] = $579;
         $580 = HEAP32[6604]|0;
         $581 = (($580) + 1)|0;
         HEAP32[6604] = $581;
         $582 = HEAP32[6603]|0;
         $583 = (($582) + ($580<<2)|0);
         HEAP32[$583>>2] = 131;
         break L241;
        } else {
         $584 = HEAP32[6604]|0;
         $585 = (($584) + 1)|0;
         HEAP32[6604] = $585;
         $586 = HEAP32[6603]|0;
         $587 = (($586) + ($584<<2)|0);
         HEAP32[$587>>2] = 62;
         break L241;
        }
        break;
       }
       default: {
        label = 186;
        break L221;
       }
       }
      } while(0);
      $588 = HEAP32[12755]|0;
      $589 = HEAP32[6604]|0;
      $590 = (($589) + 1)|0;
      HEAP32[6604] = $590;
      $591 = HEAP32[6603]|0;
      $592 = (($591) + ($589<<2)|0);
      HEAP32[$592>>2] = $588;
      $593 = HEAP32[8656]|0;
      $594 = (($593) + 1)|0;
      HEAP32[8656] = $594;
      (_passGetNumber()|0);
      $595 = HEAP32[12755]|0;
      $596 = HEAP32[6604]|0;
      $597 = (($596) + 1)|0;
      HEAP32[6604] = $597;
      $598 = HEAP32[6603]|0;
      $599 = (($598) + ($596<<2)|0);
      HEAP32[$599>>2] = $595;
      continue L221;
      break;
     }
     case 36:  {
      $601 = HEAP32[8656]|0;
      $602 = (($601) + 1)|0;
      HEAP32[8656] = $602;
      $603 = (_passGetAttributes()|0);
      $604 = ($603|0)!=(0);
      if ($604) {
       label = 189;
      } else {
       label = 188;
       break L221;
      }
      break;
     }
     case 125: case 123:  {
      $669 = HEAP32[8656]|0;
      $670 = (($669) + 1)|0;
      HEAP32[8656] = $670;
      (_passGetName()|0);
      $671 = (_findRuleName(34628)|0);
      $7 = $671;
      $672 = $7;
      $673 = ($672|0)!=(0);
      if ($673) {
       $674 = $7;
       $675 = HEAP32[2463]|0;
       $676 = ((($675)) + 31332|0);
       $677 = (($676) + ($674<<2)|0);
       $8 = $677;
      }
      $678 = $8;
      $679 = ($678|0)!=(0|0);
      if (!($679)) {
       label = 204;
       break L221;
      }
      $680 = $8;
      $681 = ((($680)) + 20|0);
      $682 = HEAP32[$681>>2]|0;
      $683 = ($682|0)==(65);
      if (!($683)) {
       label = 204;
       break L221;
      }
      $684 = $5;
      $685 = HEAP32[6604]|0;
      $686 = (($685) + 1)|0;
      HEAP32[6604] = $686;
      $687 = HEAP32[6603]|0;
      $688 = (($687) + ($685<<2)|0);
      HEAP32[$688>>2] = $684;
      $689 = $7;
      $690 = $689 >>> 16;
      $691 = HEAP32[6604]|0;
      $692 = (($691) + 1)|0;
      HEAP32[6604] = $692;
      $693 = HEAP32[6603]|0;
      $694 = (($693) + ($691<<2)|0);
      HEAP32[$694>>2] = $690;
      $695 = $7;
      $696 = $695 & 65535;
      $697 = HEAP32[6604]|0;
      $698 = (($697) + 1)|0;
      HEAP32[6604] = $698;
      $699 = HEAP32[6603]|0;
      $700 = (($699) + ($697<<2)|0);
      HEAP32[$700>>2] = $696;
      continue L221;
      break;
     }
     case 37:  {
      (_passGetName()|0);
      $704 = (_findCharacterClass(34628)|0);
      $6 = $704;
      $705 = ($704|0)!=(0|0);
      if ($705) {
       $706 = $6;
       $707 = ((($706)) + 4|0);
       $708 = HEAP32[$707>>2]|0;
       HEAP32[12757] = $708;
       label = 189;
       break L224;
      }
      $709 = (_findRuleName(34628)|0);
      $7 = $709;
      $710 = $7;
      $711 = ($710|0)!=(0);
      if ($711) {
       $712 = $7;
       $713 = HEAP32[2463]|0;
       $714 = ((($713)) + 31332|0);
       $715 = (($714) + ($712<<2)|0);
       $8 = $715;
      }
      $716 = $8;
      $717 = ($716|0)!=(0|0);
      if (!($717)) {
       label = 214;
       break L221;
      }
      $718 = $8;
      $719 = ((($718)) + 20|0);
      $720 = HEAP32[$719>>2]|0;
      $721 = ($720|0)==(54);
      if (!($721)) {
       $722 = $8;
       $723 = ((($722)) + 20|0);
       $724 = HEAP32[$723>>2]|0;
       $725 = ($724|0)==(55);
       if (!($725)) {
        $726 = $8;
        $727 = ((($726)) + 20|0);
        $728 = HEAP32[$727>>2]|0;
        $729 = ($728|0)==(56);
        if (!($729)) {
         label = 214;
         break L221;
        }
       }
      }
      $730 = HEAP32[6604]|0;
      $731 = (($730) + 1)|0;
      HEAP32[6604] = $731;
      $732 = HEAP32[6603]|0;
      $733 = (($732) + ($730<<2)|0);
      HEAP32[$733>>2] = 37;
      $734 = $7;
      $735 = $734 >>> 16;
      $736 = HEAP32[6604]|0;
      $737 = (($736) + 1)|0;
      HEAP32[6604] = $737;
      $738 = HEAP32[6603]|0;
      $739 = (($738) + ($736<<2)|0);
      HEAP32[$739>>2] = $735;
      $740 = $7;
      $741 = $740 & 65535;
      $742 = HEAP32[6604]|0;
      $743 = (($742) + 1)|0;
      HEAP32[6604] = $743;
      $744 = HEAP32[6603]|0;
      $745 = (($744) + ($742<<2)|0);
      HEAP32[$745>>2] = $741;
      break;
     }
     case 32:  {
      $749 = HEAP32[6604]|0;
      $750 = (($749) + 1)|0;
      HEAP32[6604] = $750;
      $751 = HEAP32[6603]|0;
      $752 = (($751) + ($749<<2)|0);
      HEAP32[$752>>2] = 32;
      $753 = HEAP32[8656]|0;
      $754 = (($753) + 1)|0;
      HEAP32[8656] = $754;
      continue L221;
      break;
     }
     default: {
      label = 216;
      break L221;
     }
     }
    } while(0);
    if ((label|0) == 168) {
     label = 0;
     $515 = HEAP32[8657]|0;
     $516 = ($515|0)==(0);
     if ($516) {
      label = 169;
      break;
     }
     $517 = HEAP32[8657]|0;
     $518 = HEAP32[6604]|0;
     $519 = (($518) + 1)|0;
     HEAP32[6604] = $519;
     $520 = HEAP32[6603]|0;
     $521 = (($520) + ($518<<2)|0);
     HEAP32[$521>>2] = $517;
     $10 = 0;
     while(1) {
      $522 = $10;
      $523 = HEAP32[8657]|0;
      $524 = ($522>>>0)<($523>>>0);
      if (!($524)) {
       continue L221;
      }
      $525 = $10;
      $526 = ((34632) + ($525<<2)|0);
      $527 = HEAP32[$526>>2]|0;
      $528 = HEAP32[6604]|0;
      $529 = (($528) + 1)|0;
      HEAP32[6604] = $529;
      $530 = HEAP32[6603]|0;
      $531 = (($530) + ($528<<2)|0);
      HEAP32[$531>>2] = $527;
      $532 = $10;
      $533 = (($532) + 1)|0;
      $10 = $533;
     }
    }
    else if ((label|0) == 189) {
     label = 0;
     $605 = HEAP32[6604]|0;
     $606 = (($605) + 1)|0;
     HEAP32[6604] = $606;
     $607 = HEAP32[6603]|0;
     $608 = (($607) + ($605<<2)|0);
     HEAP32[$608>>2] = 36;
     $609 = HEAP32[12757]|0;
     $610 = $609 >>> 16;
     $611 = HEAP32[6604]|0;
     $612 = (($611) + 1)|0;
     HEAP32[6604] = $612;
     $613 = HEAP32[6603]|0;
     $614 = (($613) + ($611<<2)|0);
     HEAP32[$614>>2] = $610;
     $615 = HEAP32[12757]|0;
     $616 = $615 & 65535;
     $617 = HEAP32[6604]|0;
     $618 = (($617) + 1)|0;
     HEAP32[6604] = $618;
     $619 = HEAP32[6603]|0;
     $620 = (($619) + ($617<<2)|0);
     HEAP32[$620>>2] = $616;
    }
    $621 = HEAP32[8656]|0;
    $622 = ((42828) + ($621<<2)|0);
    $623 = HEAP32[$622>>2]|0;
    $624 = ($623|0)==(46);
    if ($624) {
     $625 = HEAP32[8656]|0;
     $626 = (($625) + 1)|0;
     HEAP32[8656] = $626;
     $627 = HEAP32[6604]|0;
     $628 = (($627) + 1)|0;
     HEAP32[6604] = $628;
     $629 = HEAP32[6603]|0;
     $630 = (($629) + ($627<<2)|0);
     HEAP32[$630>>2] = 1;
     $631 = HEAP32[6604]|0;
     $632 = (($631) + 1)|0;
     HEAP32[6604] = $632;
     $633 = HEAP32[6603]|0;
     $634 = (($633) + ($631<<2)|0);
     HEAP32[$634>>2] = 65535;
     continue;
    }
    (_passGetNumber()|0);
    $635 = HEAP32[12755]|0;
    $636 = ($635|0)==(0);
    if ($636) {
     $637 = HEAP32[6604]|0;
     $638 = (($637) + 1)|0;
     HEAP32[6604] = $638;
     $639 = HEAP32[6603]|0;
     $640 = (($639) + ($637<<2)|0);
     HEAP32[$640>>2] = 1;
     HEAP32[12755] = 1;
     $641 = HEAP32[6604]|0;
     $642 = (($641) + 1)|0;
     HEAP32[6604] = $642;
     $643 = HEAP32[6603]|0;
     $644 = (($643) + ($641<<2)|0);
     HEAP32[$644>>2] = 1;
     continue;
    }
    $645 = HEAP32[12755]|0;
    $646 = HEAP32[6604]|0;
    $647 = (($646) + 1)|0;
    HEAP32[6604] = $647;
    $648 = HEAP32[6603]|0;
    $649 = (($648) + ($646<<2)|0);
    HEAP32[$649>>2] = $645;
    $650 = HEAP32[8656]|0;
    $651 = ((42828) + ($650<<2)|0);
    $652 = HEAP32[$651>>2]|0;
    $653 = ($652|0)!=(45);
    if ($653) {
     $654 = HEAP32[12755]|0;
     $655 = HEAP32[6604]|0;
     $656 = (($655) + 1)|0;
     HEAP32[6604] = $656;
     $657 = HEAP32[6603]|0;
     $658 = (($657) + ($655<<2)|0);
     HEAP32[$658>>2] = $654;
     continue;
    }
    $659 = HEAP32[8656]|0;
    $660 = (($659) + 1)|0;
    HEAP32[8656] = $660;
    (_passGetNumber()|0);
    $661 = HEAP32[12755]|0;
    $662 = ($661|0)==(0);
    if ($662) {
     label = 197;
     break;
    }
    $664 = HEAP32[12755]|0;
    $665 = HEAP32[6604]|0;
    $666 = (($665) + 1)|0;
    HEAP32[6604] = $666;
    $667 = HEAP32[6603]|0;
    $668 = (($667) + ($665<<2)|0);
    HEAP32[$668>>2] = $664;
   }
   switch (label|0) {
    case 163: {
     $2 = 0;
     $969 = $2;
     STACKTOP = sp;return ($969|0);
     break;
    }
    case 166: {
     $2 = 0;
     $969 = $2;
     STACKTOP = sp;return ($969|0);
     break;
    }
    case 169: {
     $2 = 0;
     $969 = $2;
     STACKTOP = sp;return ($969|0);
     break;
    }
    case 176: {
     $2 = 0;
     $969 = $2;
     STACKTOP = sp;return ($969|0);
     break;
    }
    case 186: {
     $600 = HEAP32[8654]|0;
     _compileError($600,6168,$vararg_buffer37);
     $2 = 0;
     $969 = $2;
     STACKTOP = sp;return ($969|0);
     break;
    }
    case 188: {
     $2 = 0;
     $969 = $2;
     STACKTOP = sp;return ($969|0);
     break;
    }
    case 197: {
     $663 = HEAP32[8654]|0;
     _compileError($663,6198,$vararg_buffer39);
     $2 = 0;
     $969 = $2;
     STACKTOP = sp;return ($969|0);
     break;
    }
    case 204: {
     $701 = HEAP32[8654]|0;
     $702 = HEAP32[8657]|0;
     $703 = (_showString((34632),$702)|0);
     HEAP32[$vararg_buffer41>>2] = $703;
     _compileError($701,5987,$vararg_buffer41);
     $2 = 0;
     $969 = $2;
     STACKTOP = sp;return ($969|0);
     break;
    }
    case 214: {
     $746 = HEAP32[8654]|0;
     $747 = HEAP32[8657]|0;
     $748 = (_showString((34632),$747)|0);
     HEAP32[$vararg_buffer44>>2] = $748;
     _compileError($746,6212,$vararg_buffer44);
     $2 = 0;
     $969 = $2;
     STACKTOP = sp;return ($969|0);
     break;
    }
    case 216: {
     $755 = HEAP32[8654]|0;
     $756 = HEAP32[8656]|0;
     $757 = ((42828) + ($756<<2)|0);
     $758 = HEAP32[$757>>2]|0;
     HEAP32[$vararg_buffer47>>2] = $758;
     _compileError($755,6256,$vararg_buffer47);
     $2 = 0;
     $969 = $2;
     STACKTOP = sp;return ($969|0);
     break;
    }
    case 217: {
     while(1) {
      label = 0;
      $759 = HEAP32[8656]|0;
      $760 = HEAP32[10706]|0;
      $761 = ($759>>>0)<($760>>>0);
      if (!($761)) {
       break;
      }
      $762 = HEAP32[8656]|0;
      $763 = ((42828) + ($762<<2)|0);
      $764 = HEAP32[$763>>2]|0;
      $765 = ($764>>>0)<=(32);
      if (!($765)) {
       break;
      }
      $766 = HEAP32[8656]|0;
      $767 = (($766) + 1)|0;
      HEAP32[8656] = $767;
      label = 217;
     }
     L295: while(1) {
      $768 = HEAP32[8656]|0;
      $769 = HEAP32[10706]|0;
      $770 = ($768>>>0)<($769>>>0);
      if (!($770)) {
       break L17;
      }
      $771 = HEAP32[8656]|0;
      $772 = ((42828) + ($771<<2)|0);
      $773 = HEAP32[$772>>2]|0;
      $774 = ($773>>>0)>(32);
      if (!($774)) {
       break L17;
      }
      $775 = HEAP32[8656]|0;
      $776 = ((42828) + ($775<<2)|0);
      $777 = HEAP32[$776>>2]|0;
      $5 = $777;
      switch ($777|0) {
      case 34:  {
       $778 = $3;
       $779 = $4;
       $780 = (_verifyStringOrDots($778,$779,1,1)|0);
       $781 = ($780|0)!=(0);
       if (!($781)) {
        label = 224;
        break L295;
       }
       $782 = HEAP32[8656]|0;
       $783 = (($782) + 1)|0;
       HEAP32[8656] = $783;
       $784 = HEAP32[6604]|0;
       $785 = (($784) + 1)|0;
       HEAP32[6604] = $785;
       $786 = HEAP32[6603]|0;
       $787 = (($786) + ($784<<2)|0);
       HEAP32[$787>>2] = 34;
       (_passGetString()|0);
       break;
      }
      case 64:  {
       $788 = $3;
       $789 = $4;
       $790 = (_verifyStringOrDots($788,$789,0,1)|0);
       $791 = ($790|0)!=(0);
       if (!($791)) {
        label = 227;
        break L295;
       }
       $792 = HEAP32[8656]|0;
       $793 = (($792) + 1)|0;
       HEAP32[8656] = $793;
       (_passGetDots()|0);
       $794 = HEAP32[6604]|0;
       $795 = (($794) + 1)|0;
       HEAP32[6604] = $795;
       $796 = HEAP32[6603]|0;
       $797 = (($796) + ($794<<2)|0);
       HEAP32[$797>>2] = 64;
       break;
      }
      case 35:  {
       $817 = HEAP32[8656]|0;
       $818 = (($817) + 1)|0;
       HEAP32[8656] = $818;
       $819 = $3;
       $820 = (_passGetVariableNumber($819)|0);
       $821 = ($820|0)!=(0);
       if (!($821)) {
        label = 235;
        break L295;
       }
       $822 = HEAP32[8656]|0;
       $823 = ((42828) + ($822<<2)|0);
       $824 = HEAP32[$823>>2]|0;
       switch ($824|0) {
       case 61:  {
        $825 = HEAP32[6604]|0;
        $826 = (($825) + 1)|0;
        HEAP32[6604] = $826;
        $827 = HEAP32[6603]|0;
        $828 = (($827) + ($825<<2)|0);
        HEAP32[$828>>2] = 61;
        $829 = HEAP32[12755]|0;
        $830 = HEAP32[6604]|0;
        $831 = (($830) + 1)|0;
        HEAP32[6604] = $831;
        $832 = HEAP32[6603]|0;
        $833 = (($832) + ($830<<2)|0);
        HEAP32[$833>>2] = $829;
        $834 = HEAP32[8656]|0;
        $835 = (($834) + 1)|0;
        HEAP32[8656] = $835;
        (_passGetNumber()|0);
        $836 = HEAP32[12755]|0;
        $837 = HEAP32[6604]|0;
        $838 = (($837) + 1)|0;
        HEAP32[6604] = $838;
        $839 = HEAP32[6603]|0;
        $840 = (($839) + ($837<<2)|0);
        HEAP32[$840>>2] = $836;
        continue L295;
        break;
       }
       case 45: case 43:  {
        $841 = HEAP32[8656]|0;
        $842 = (($841) + 1)|0;
        HEAP32[8656] = $842;
        $843 = ((42828) + ($841<<2)|0);
        $844 = HEAP32[$843>>2]|0;
        $845 = HEAP32[6604]|0;
        $846 = (($845) + 1)|0;
        HEAP32[6604] = $846;
        $847 = HEAP32[6603]|0;
        $848 = (($847) + ($845<<2)|0);
        HEAP32[$848>>2] = $844;
        $849 = HEAP32[12755]|0;
        $850 = HEAP32[6604]|0;
        $851 = (($850) + 1)|0;
        HEAP32[6604] = $851;
        $852 = HEAP32[6603]|0;
        $853 = (($852) + ($850<<2)|0);
        HEAP32[$853>>2] = $849;
        continue L295;
        break;
       }
       default: {
        label = 239;
        break L295;
       }
       }
       break;
      }
      case 42:  {
       $855 = HEAP32[6604]|0;
       $856 = (($855) + 1)|0;
       HEAP32[6604] = $856;
       $857 = HEAP32[6603]|0;
       $858 = (($857) + ($855<<2)|0);
       HEAP32[$858>>2] = 42;
       $859 = HEAP32[8656]|0;
       $860 = (($859) + 1)|0;
       HEAP32[8656] = $860;
       continue L295;
       break;
      }
      case 63:  {
       $861 = HEAP32[6604]|0;
       $862 = (($861) + 1)|0;
       HEAP32[6604] = $862;
       $863 = HEAP32[6603]|0;
       $864 = (($863) + ($861<<2)|0);
       HEAP32[$864>>2] = 63;
       $865 = HEAP32[8656]|0;
       $866 = (($865) + 1)|0;
       HEAP32[8656] = $866;
       continue L295;
       break;
      }
      case 125: case 123: case 59:  {
       $867 = HEAP32[8656]|0;
       $868 = (($867) + 1)|0;
       HEAP32[8656] = $868;
       (_passGetName()|0);
       $869 = (_findRuleName(34628)|0);
       $7 = $869;
       $870 = $7;
       $871 = ($870|0)!=(0);
       if ($871) {
        $872 = $7;
        $873 = HEAP32[2463]|0;
        $874 = ((($873)) + 31332|0);
        $875 = (($874) + ($872<<2)|0);
        $8 = $875;
       }
       $876 = $8;
       $877 = ($876|0)!=(0|0);
       if (!($877)) {
        label = 247;
        break L295;
       }
       $878 = $8;
       $879 = ((($878)) + 20|0);
       $880 = HEAP32[$879>>2]|0;
       $881 = ($880|0)==(65);
       if (!($881)) {
        label = 247;
        break L295;
       }
       $882 = $5;
       $883 = HEAP32[6604]|0;
       $884 = (($883) + 1)|0;
       HEAP32[6604] = $884;
       $885 = HEAP32[6603]|0;
       $886 = (($885) + ($883<<2)|0);
       HEAP32[$886>>2] = $882;
       $887 = $7;
       $888 = $887 >>> 16;
       $889 = HEAP32[6604]|0;
       $890 = (($889) + 1)|0;
       HEAP32[6604] = $890;
       $891 = HEAP32[6603]|0;
       $892 = (($891) + ($889<<2)|0);
       HEAP32[$892>>2] = $888;
       $893 = $7;
       $894 = $893 & 65535;
       $895 = HEAP32[6604]|0;
       $896 = (($895) + 1)|0;
       HEAP32[6604] = $896;
       $897 = HEAP32[6603]|0;
       $898 = (($897) + ($895<<2)|0);
       HEAP32[$898>>2] = $894;
       continue L295;
       break;
      }
      case 37:  {
       $902 = HEAP32[8656]|0;
       $903 = (($902) + 1)|0;
       HEAP32[8656] = $903;
       (_passGetName()|0);
       $904 = (_findRuleName(34628)|0);
       $7 = $904;
       $905 = $7;
       $906 = ($905|0)!=(0);
       if ($906) {
        $907 = $7;
        $908 = HEAP32[2463]|0;
        $909 = ((($908)) + 31332|0);
        $910 = (($909) + ($907<<2)|0);
        $8 = $910;
       }
       $911 = $8;
       $912 = ($911|0)!=(0|0);
       if (!($912)) {
        label = 255;
        break L295;
       }
       $913 = $8;
       $914 = ((($913)) + 20|0);
       $915 = HEAP32[$914>>2]|0;
       $916 = ($915|0)==(54);
       if (!($916)) {
        $917 = $8;
        $918 = ((($917)) + 20|0);
        $919 = HEAP32[$918>>2]|0;
        $920 = ($919|0)==(55);
        if (!($920)) {
         $921 = $8;
         $922 = ((($921)) + 20|0);
         $923 = HEAP32[$922>>2]|0;
         $924 = ($923|0)==(56);
         if (!($924)) {
          label = 255;
          break L295;
         }
        }
       }
       $925 = HEAP32[6604]|0;
       $926 = (($925) + 1)|0;
       HEAP32[6604] = $926;
       $927 = HEAP32[6603]|0;
       $928 = (($927) + ($925<<2)|0);
       HEAP32[$928>>2] = 37;
       $929 = $7;
       $930 = $929 >>> 16;
       $931 = HEAP32[6604]|0;
       $932 = (($931) + 1)|0;
       HEAP32[6604] = $932;
       $933 = HEAP32[6603]|0;
       $934 = (($933) + ($931<<2)|0);
       HEAP32[$934>>2] = $930;
       $935 = $7;
       $936 = $935 & 65535;
       $937 = HEAP32[6604]|0;
       $938 = (($937) + 1)|0;
       HEAP32[6604] = $938;
       $939 = HEAP32[6603]|0;
       $940 = (($939) + ($937<<2)|0);
       HEAP32[$940>>2] = $936;
       continue L295;
       break;
      }
      default: {
       label = 256;
       break L295;
      }
      }
      $798 = HEAP32[8657]|0;
      $799 = ($798|0)==(0);
      if ($799) {
       label = 230;
       break;
      }
      $800 = HEAP32[8657]|0;
      $801 = HEAP32[6604]|0;
      $802 = (($801) + 1)|0;
      HEAP32[6604] = $802;
      $803 = HEAP32[6603]|0;
      $804 = (($803) + ($801<<2)|0);
      HEAP32[$804>>2] = $800;
      $10 = 0;
      while(1) {
       $805 = $10;
       $806 = HEAP32[8657]|0;
       $807 = ($805>>>0)<($806>>>0);
       if (!($807)) {
        continue L295;
       }
       $808 = $10;
       $809 = ((34632) + ($808<<2)|0);
       $810 = HEAP32[$809>>2]|0;
       $811 = HEAP32[6604]|0;
       $812 = (($811) + 1)|0;
       HEAP32[6604] = $812;
       $813 = HEAP32[6603]|0;
       $814 = (($813) + ($811<<2)|0);
       HEAP32[$814>>2] = $810;
       $815 = $10;
       $816 = (($815) + 1)|0;
       $10 = $816;
      }
     }
     if ((label|0) == 224) {
      $2 = 0;
      $969 = $2;
      STACKTOP = sp;return ($969|0);
     }
     else if ((label|0) == 227) {
      $2 = 0;
      $969 = $2;
      STACKTOP = sp;return ($969|0);
     }
     else if ((label|0) == 230) {
      $2 = 0;
      $969 = $2;
      STACKTOP = sp;return ($969|0);
     }
     else if ((label|0) == 235) {
      $2 = 0;
      $969 = $2;
      STACKTOP = sp;return ($969|0);
     }
     else if ((label|0) == 239) {
      $854 = HEAP32[8654]|0;
      _compileError($854,6294,$vararg_buffer50);
      $2 = 0;
      $969 = $2;
      STACKTOP = sp;return ($969|0);
     }
     else if ((label|0) == 247) {
      $899 = HEAP32[8654]|0;
      $900 = HEAP32[8657]|0;
      $901 = (_showString((34632),$900)|0);
      HEAP32[$vararg_buffer52>>2] = $901;
      _compileError($899,5987,$vararg_buffer52);
      $2 = 0;
      $969 = $2;
      STACKTOP = sp;return ($969|0);
     }
     else if ((label|0) == 255) {
      $941 = HEAP32[8654]|0;
      $942 = HEAP32[8657]|0;
      $943 = (_showString((34632),$942)|0);
      HEAP32[$vararg_buffer55>>2] = $943;
      _compileError($941,6013,$vararg_buffer55);
      $2 = 0;
      $969 = $2;
      STACKTOP = sp;return ($969|0);
     }
     else if ((label|0) == 256) {
      $944 = HEAP32[8654]|0;
      _compileError($944,6337,$vararg_buffer58);
      $2 = 0;
      $969 = $2;
      STACKTOP = sp;return ($969|0);
     }
     break;
    }
   }
  }
 } while(0);
 $945 = HEAP32[6604]|0;
 HEAP32[4554] = $945;
 $946 = HEAP32[8654]|0;
 $947 = HEAP32[6603]|0;
 $948 = HEAP32[4554]|0;
 $949 = (_passFindCharacters($946,0,$947,$948,$15,$16)|0);
 $17 = $949;
 $950 = $17;
 $951 = ($950|0)!=(0);
 if (!($951)) {
  $2 = 0;
  $969 = $2;
  STACKTOP = sp;return ($969|0);
 }
 $952 = HEAP32[$15>>2]|0;
 $953 = ($952|0)!=(0|0);
 if ($953) {
  $9 = 0;
  while(1) {
   $954 = $9;
   $955 = HEAP32[$16>>2]|0;
   $956 = ($954|0)<($955|0);
   $957 = $9;
   if (!($956)) {
    break;
   }
   $958 = HEAP32[$15>>2]|0;
   $959 = (($958) + ($957<<2)|0);
   $960 = HEAP32[$959>>2]|0;
   $961 = $9;
   $962 = ((26424) + ($961<<2)|0);
   HEAP32[$962>>2] = $960;
   $963 = $9;
   $964 = (($963) + 1)|0;
   $9 = $964;
  }
  HEAP32[6605] = $957;
 }
 $965 = HEAP32[8654]|0;
 $966 = $4;
 $967 = (_addRule($965,$966,26420,18216,0,0)|0);
 $968 = ($967|0)!=(0);
 if ($968) {
  $2 = 1;
  $969 = $2;
  STACKTOP = sp;return ($969|0);
 } else {
  $2 = 0;
  $969 = $2;
  STACKTOP = sp;return ($969|0);
 }
 return (0)|0;
}
function _allocateCharacterClasses() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8208|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(8208|0);
 $2 = sp + 8|0;
 $1 = 0;
 HEAP32[4544] = 0;
 HEAP32[4553] = 1;
 while(1) {
  $5 = $1;
  $6 = (540 + ($5<<2)|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = ($7|0)!=(0|0);
  if (!($8)) {
   label = 9;
   break;
  }
  $9 = $1;
  $10 = (540 + ($9<<2)|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = (_strlen($11)|0);
  $3 = $12;
  $4 = 0;
  while(1) {
   $13 = $4;
   $14 = $3;
   $15 = ($13|0)<($14|0);
   if (!($15)) {
    break;
   }
   $16 = $4;
   $17 = $1;
   $18 = (540 + ($17<<2)|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = (($19) + ($16)|0);
   $21 = HEAP8[$20>>0]|0;
   $22 = $21 << 24 >> 24;
   $23 = $4;
   $24 = (($2) + ($23<<2)|0);
   HEAP32[$24>>2] = $22;
   $25 = $4;
   $26 = (($25) + 1)|0;
   $4 = $26;
  }
  $27 = $3;
  $28 = (_addCharacterClass(0,$2,$27)|0);
  $29 = ($28|0)!=(0|0);
  if (!($29)) {
   label = 7;
   break;
  }
  $30 = $1;
  $31 = (($30) + 1)|0;
  $1 = $31;
 }
 if ((label|0) == 7) {
  _deallocateCharacterClasses();
  $0 = 0;
  $32 = $0;
  STACKTOP = sp;return ($32|0);
 }
 else if ((label|0) == 9) {
  $0 = 1;
  $32 = $0;
  STACKTOP = sp;return ($32|0);
 }
 return (0)|0;
}
function _findCharacterClass($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $4 = HEAP32[4544]|0;
 $3 = $4;
 while(1) {
  $5 = $3;
  $6 = ($5|0)!=(0|0);
  if (!($6)) {
   label = 7;
   break;
  }
  $7 = $2;
  $8 = HEAP32[$7>>2]|0;
  $9 = $3;
  $10 = ((($9)) + 8|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ($8|0)==($11|0);
  if ($12) {
   $13 = $2;
   $14 = ((($13)) + 4|0);
   $15 = $3;
   $16 = ((($15)) + 12|0);
   $17 = $2;
   $18 = HEAP32[$17>>2]|0;
   $19 = $18<<2;
   $20 = (_memcmp($14,$16,$19)|0);
   $21 = ($20|0)==(0);
   if ($21) {
    label = 5;
    break;
   }
  }
  $23 = $3;
  $24 = HEAP32[$23>>2]|0;
  $3 = $24;
 }
 if ((label|0) == 5) {
  $22 = $3;
  $1 = $22;
  $25 = $1;
  STACKTOP = sp;return ($25|0);
 }
 else if ((label|0) == 7) {
  $1 = 0;
  $25 = $1;
  STACKTOP = sp;return ($25|0);
 }
 return (0)|0;
}
function _addCharacterClass($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $8 = HEAP32[4553]|0;
 $9 = ($8|0)!=(0);
 do {
  if ($9) {
   $10 = $6;
   $11 = (($10) - 1)|0;
   $12 = $11<<2;
   $13 = (16 + ($12))|0;
   $14 = (_malloc($13)|0);
   $7 = $14;
   $15 = ($14|0)!=(0|0);
   if (!($15)) {
    _outOfMemory();
    break;
   }
   $16 = $7;
   ;HEAP32[$16>>2]=0|0;HEAP32[$16+4>>2]=0|0;HEAP32[$16+8>>2]=0|0;HEAP32[$16+12>>2]=0|0;
   $17 = $7;
   $18 = ((($17)) + 12|0);
   $19 = $5;
   $20 = $6;
   $21 = $7;
   $22 = ((($21)) + 8|0);
   HEAP32[$22>>2] = $20;
   $23 = $20<<2;
   _memcpy(($18|0),($19|0),($23|0))|0;
   $24 = HEAP32[4553]|0;
   $25 = $7;
   $26 = ((($25)) + 4|0);
   HEAP32[$26>>2] = $24;
   $27 = HEAP32[4553]|0;
   $28 = $27 << 1;
   HEAP32[4553] = $28;
   $29 = HEAP32[4544]|0;
   $30 = $7;
   HEAP32[$30>>2] = $29;
   $31 = $7;
   HEAP32[4544] = $31;
   $32 = $7;
   $3 = $32;
   $34 = $3;
   STACKTOP = sp;return ($34|0);
  }
 } while(0);
 $33 = $4;
 _compileError($33,5854,$vararg_buffer);
 $3 = 0;
 $34 = $3;
 STACKTOP = sp;return ($34|0);
}
function _definedCharOrDots($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $5 = sp + 24|0;
 $4 = $0;
 HEAP32[$5>>2] = $1;
 $6 = $2;
 $9 = HEAP32[$5>>2]|0;
 $10 = $6;
 $11 = (_compile_findCharOrDots($9,$10)|0);
 $8 = $11;
 $12 = $8;
 $13 = ($12|0)!=(0|0);
 if ($13) {
  $14 = $8;
  $3 = $14;
  $23 = $3;
  STACKTOP = sp;return ($23|0);
 }
 $15 = $6;
 $16 = ($15|0)==(0);
 if ($16) {
  $7 = 484;
  $17 = $4;
  $18 = (_showString($5,1)|0);
  HEAP32[$vararg_buffer>>2] = $18;
  _compileError($17,5747,$vararg_buffer);
 } else {
  $7 = 512;
  $19 = $4;
  $20 = HEAP32[$5>>2]|0;
  $21 = (_unknownDots($20)|0);
  HEAP32[$vararg_buffer1>>2] = $21;
  _compileError($19,5803,$vararg_buffer1);
 }
 $22 = $7;
 $3 = $22;
 $23 = $3;
 STACKTOP = sp;return ($23|0);
}
function _getCharacterClass($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(8224|0);
 $vararg_buffer = sp;
 $5 = sp + 4|0;
 $3 = $0;
 $4 = $1;
 $6 = $3;
 $7 = (_getToken($6,$5,5090)|0);
 $8 = ($7|0)!=(0);
 do {
  if ($8) {
   $9 = (_findCharacterClass($5)|0);
   $10 = $4;
   HEAP32[$10>>2] = $9;
   $11 = ($9|0)!=(0|0);
   if (!($11)) {
    $12 = $3;
    _compileError($12,5718,$vararg_buffer);
    break;
   }
   $2 = 1;
   $13 = $2;
   STACKTOP = sp;return ($13|0);
  }
 } while(0);
 $2 = 0;
 $13 = $2;
 STACKTOP = sp;return ($13|0);
}
function _compileSwap($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 40992|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(40992|0);
 $5 = sp + 32784|0;
 $6 = sp + 24588|0;
 $7 = sp + 16392|0;
 $8 = sp + 8196|0;
 $9 = sp;
 $3 = $0;
 $4 = $1;
 $10 = $3;
 $11 = (_getToken($10,$7,5422)|0);
 $12 = ($11|0)!=(0);
 do {
  if ($12) {
   $13 = $3;
   $14 = (_getToken($13,$8,5681)|0);
   $15 = ($14|0)!=(0);
   if (!($15)) {
    $2 = 0;
    break;
   }
   $16 = $3;
   $17 = (_getToken($16,$9,5697)|0);
   $18 = ($17|0)!=(0);
   if (!($18)) {
    $2 = 0;
    break;
   }
   $19 = $4;
   $20 = ($19|0)==(54);
   $21 = $4;
   $22 = ($21|0)==(55);
   $or$cond = $20 | $22;
   $23 = $3;
   if ($or$cond) {
    $24 = (_parseChars($23,$5,$8)|0);
    $25 = ($24|0)!=(0);
    if (!($25)) {
     $2 = 0;
     break;
    }
   } else {
    $26 = (_compileSwapDots($23,$8,$5)|0);
    $27 = ($26|0)!=(0);
    if (!($27)) {
     $2 = 0;
     break;
    }
   }
   $28 = $4;
   $29 = ($28|0)==(54);
   $30 = $3;
   if ($29) {
    $31 = (_parseChars($30,$6,$9)|0);
    $32 = ($31|0)!=(0);
    if (!($32)) {
     $2 = 0;
     break;
    }
   } else {
    $33 = (_compileSwapDots($30,$9,$6)|0);
    $34 = ($33|0)!=(0);
    if (!($34)) {
     $2 = 0;
     break;
    }
   }
   $35 = $3;
   $36 = $4;
   $37 = (_addRule($35,$36,$5,$6,0,0)|0);
   $38 = ($37|0)!=(0);
   if (!($38)) {
    $2 = 0;
    break;
   }
   $39 = $3;
   $40 = (_addRuleName($39,$7)|0);
   $41 = ($40|0)!=(0);
   if ($41) {
    $2 = 1;
    break;
   } else {
    $2 = 0;
    break;
   }
  } else {
   $2 = 0;
  }
 } while(0);
 $42 = $2;
 STACKTOP = sp;return ($42|0);
}
function _compileCharDef($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16432|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16432|0);
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $7 = sp + 8220|0;
 $8 = sp + 24|0;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $10 = 0;
 $12 = $4;
 $13 = (_getRuleCharsText($12,$7)|0);
 $14 = ($13|0)!=(0);
 if (!($14)) {
  $3 = 0;
  $87 = $3;
  STACKTOP = sp;return ($87|0);
 }
 $15 = $4;
 $16 = (_getRuleDotsPattern($15,$8)|0);
 $17 = ($16|0)!=(0);
 if (!($17)) {
  $3 = 0;
  $87 = $3;
  STACKTOP = sp;return ($87|0);
 }
 $18 = HEAP32[$7>>2]|0;
 $19 = ($18|0)!=(1);
 if ($19) {
  $20 = $4;
  _compileError($20,5615,$vararg_buffer);
  $3 = 0;
  $87 = $3;
  STACKTOP = sp;return ($87|0);
 }
 $21 = HEAP32[$8>>2]|0;
 $22 = ($21>>>0)<(1);
 if ($22) {
  $23 = $4;
  _compileError($23,5650,$vararg_buffer1);
  $3 = 0;
  $87 = $3;
  STACKTOP = sp;return ($87|0);
 }
 $24 = $6;
 $25 = $24 & 48;
 $26 = ($25|0)!=(0);
 if ($26) {
  $27 = $6;
  $28 = $27 | 2;
  $6 = $28;
 }
 $29 = $4;
 $30 = ((($7)) + 4|0);
 $31 = HEAP32[$30>>2]|0;
 $32 = (_addCharOrDots($29,$31,0)|0);
 $9 = $32;
 $33 = $6;
 $34 = $9;
 $35 = ((($34)) + 12|0);
 $36 = HEAP32[$35>>2]|0;
 $37 = $36 | $33;
 HEAP32[$35>>2] = $37;
 $38 = $9;
 $39 = ((($38)) + 16|0);
 $40 = HEAP32[$39>>2]|0;
 $41 = $9;
 $42 = ((($41)) + 24|0);
 HEAP32[$42>>2] = $40;
 $43 = $9;
 $44 = ((($43)) + 20|0);
 HEAP32[$44>>2] = $40;
 $45 = HEAP32[$8>>2]|0;
 $46 = (($45) - 1)|0;
 $11 = $46;
 while(1) {
  $47 = $11;
  $48 = ($47|0)>=(0);
  if (!($48)) {
   break;
  }
  $49 = $11;
  $50 = ((($8)) + 4|0);
  $51 = (($50) + ($49<<2)|0);
  $52 = HEAP32[$51>>2]|0;
  $53 = (_compile_findCharOrDots($52,1)|0);
  $10 = $53;
  $54 = $10;
  $55 = ($54|0)!=(0|0);
  if (!($55)) {
   $56 = $4;
   $57 = $11;
   $58 = ((($8)) + 4|0);
   $59 = (($58) + ($57<<2)|0);
   $60 = HEAP32[$59>>2]|0;
   $61 = (_addCharOrDots($56,$60,1)|0);
   $10 = $61;
   $62 = $10;
   $63 = ((($62)) + 16|0);
   $64 = HEAP32[$63>>2]|0;
   $65 = $10;
   $66 = ((($65)) + 24|0);
   HEAP32[$66>>2] = $64;
   $67 = $10;
   $68 = ((($67)) + 20|0);
   HEAP32[$68>>2] = $64;
  }
  $69 = $11;
  $70 = (($69) - 1)|0;
  $11 = $70;
 }
 $71 = HEAP32[$8>>2]|0;
 $72 = ($71|0)==(1);
 if ($72) {
  $73 = $6;
  $74 = $10;
  $75 = ((($74)) + 12|0);
  $76 = HEAP32[$75>>2]|0;
  $77 = $76 | $73;
  HEAP32[$75>>2] = $77;
  $78 = $4;
  $79 = ((($7)) + 4|0);
  $80 = HEAP32[$79>>2]|0;
  $81 = ((($8)) + 4|0);
  $82 = HEAP32[$81>>2]|0;
  (_putCharAndDots($78,$80,$82)|0);
 }
 $83 = $4;
 $84 = $5;
 $85 = (_addRule($83,$84,$7,$8,0,0)|0);
 $86 = ($85|0)!=(0);
 if ($86) {
  $3 = 1;
  $87 = $3;
  STACKTOP = sp;return ($87|0);
 } else {
  $3 = 0;
  $87 = $3;
  STACKTOP = sp;return ($87|0);
 }
 return (0)|0;
}
function _compileGrouping($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0;
 var $153 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32832|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32832|0);
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $4 = sp + 24612|0;
 $5 = sp + 16416|0;
 $6 = sp + 8220|0;
 $7 = sp + 24|0;
 $2 = $0;
 $11 = $2;
 $12 = (_getToken($11,$4,5422)|0);
 $13 = ($12|0)!=(0);
 if (!($13)) {
  $1 = 0;
  $153 = $1;
  STACKTOP = sp;return ($153|0);
 }
 $14 = $2;
 $15 = (_getRuleCharsText($14,$5)|0);
 $16 = ($15|0)!=(0);
 if (!($16)) {
  $1 = 0;
  $153 = $1;
  STACKTOP = sp;return ($153|0);
 }
 $17 = $2;
 $18 = (_getToken($17,$6,5295)|0);
 $19 = ($18|0)!=(0);
 if (!($19)) {
  $1 = 0;
  $153 = $1;
  STACKTOP = sp;return ($153|0);
 }
 $3 = 0;
 while(1) {
  $20 = $3;
  $21 = HEAP32[$6>>2]|0;
  $22 = ($20>>>0)<($21>>>0);
  if (!($22)) {
   break;
  }
  $23 = $3;
  $24 = ((($6)) + 4|0);
  $25 = (($24) + ($23<<2)|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = ($26|0)!=(44);
  if (!($27)) {
   break;
  }
  $28 = $3;
  $29 = (($28) + 1)|0;
  $3 = $29;
 }
 $30 = $3;
 $31 = HEAP32[$6>>2]|0;
 $32 = ($30|0)==($31|0);
 if ($32) {
  $33 = $2;
  _compileError($33,5435,$vararg_buffer);
  $1 = 0;
  $153 = $1;
  STACKTOP = sp;return ($153|0);
 }
 $34 = $3;
 $35 = ((($6)) + 4|0);
 $36 = (($35) + ($34<<2)|0);
 HEAP32[$36>>2] = 45;
 $37 = $2;
 $38 = (_parseDots($37,$7,$6)|0);
 $39 = ($38|0)!=(0);
 if (!($39)) {
  $1 = 0;
  $153 = $1;
  STACKTOP = sp;return ($153|0);
 }
 $40 = HEAP32[$5>>2]|0;
 $41 = ($40|0)!=(2);
 if (!($41)) {
  $42 = HEAP32[$7>>2]|0;
  $43 = ($42|0)!=(2);
  if (!($43)) {
   $45 = $2;
   $46 = ((($5)) + 4|0);
   $47 = HEAP32[$46>>2]|0;
   $48 = (_addCharOrDots($45,$47,0)|0);
   $8 = $48;
   $49 = $8;
   $50 = ((($49)) + 12|0);
   $51 = HEAP32[$50>>2]|0;
   $52 = $51 | 64;
   HEAP32[$50>>2] = $52;
   $53 = $8;
   $54 = ((($53)) + 16|0);
   $55 = HEAP32[$54>>2]|0;
   $56 = $8;
   $57 = ((($56)) + 20|0);
   HEAP32[$57>>2] = $55;
   $58 = $8;
   $59 = ((($58)) + 16|0);
   $60 = HEAP32[$59>>2]|0;
   $61 = $8;
   $62 = ((($61)) + 24|0);
   HEAP32[$62>>2] = $60;
   $63 = $2;
   $64 = ((($5)) + 4|0);
   $65 = ((($64)) + 4|0);
   $66 = HEAP32[$65>>2]|0;
   $67 = (_addCharOrDots($63,$66,0)|0);
   $8 = $67;
   $68 = $8;
   $69 = ((($68)) + 12|0);
   $70 = HEAP32[$69>>2]|0;
   $71 = $70 | 64;
   HEAP32[$69>>2] = $71;
   $72 = $8;
   $73 = ((($72)) + 16|0);
   $74 = HEAP32[$73>>2]|0;
   $75 = $8;
   $76 = ((($75)) + 20|0);
   HEAP32[$76>>2] = $74;
   $77 = $8;
   $78 = ((($77)) + 16|0);
   $79 = HEAP32[$78>>2]|0;
   $80 = $8;
   $81 = ((($80)) + 24|0);
   HEAP32[$81>>2] = $79;
   $82 = $2;
   $83 = ((($7)) + 4|0);
   $84 = HEAP32[$83>>2]|0;
   $85 = (_addCharOrDots($82,$84,1)|0);
   $8 = $85;
   $86 = $8;
   $87 = ((($86)) + 12|0);
   $88 = HEAP32[$87>>2]|0;
   $89 = $88 | 64;
   HEAP32[$87>>2] = $89;
   $90 = $8;
   $91 = ((($90)) + 16|0);
   $92 = HEAP32[$91>>2]|0;
   $93 = $8;
   $94 = ((($93)) + 20|0);
   HEAP32[$94>>2] = $92;
   $95 = $8;
   $96 = ((($95)) + 16|0);
   $97 = HEAP32[$96>>2]|0;
   $98 = $8;
   $99 = ((($98)) + 24|0);
   HEAP32[$99>>2] = $97;
   $100 = $2;
   $101 = ((($7)) + 4|0);
   $102 = ((($101)) + 4|0);
   $103 = HEAP32[$102>>2]|0;
   $104 = (_addCharOrDots($100,$103,1)|0);
   $8 = $104;
   $105 = $8;
   $106 = ((($105)) + 12|0);
   $107 = HEAP32[$106>>2]|0;
   $108 = $107 | 64;
   HEAP32[$106>>2] = $108;
   $109 = $8;
   $110 = ((($109)) + 16|0);
   $111 = HEAP32[$110>>2]|0;
   $112 = $8;
   $113 = ((($112)) + 20|0);
   HEAP32[$113>>2] = $111;
   $114 = $8;
   $115 = ((($114)) + 16|0);
   $116 = HEAP32[$115>>2]|0;
   $117 = $8;
   $118 = ((($117)) + 24|0);
   HEAP32[$118>>2] = $116;
   $119 = $2;
   $120 = (_addRule($119,65,$5,$7,0,0)|0);
   $121 = ($120|0)!=(0);
   if (!($121)) {
    $1 = 0;
    $153 = $1;
    STACKTOP = sp;return ($153|0);
   }
   $122 = $2;
   $123 = (_addRuleName($122,$4)|0);
   $124 = ($123|0)!=(0);
   if (!($124)) {
    $1 = 0;
    $153 = $1;
    STACKTOP = sp;return ($153|0);
   }
   $125 = $2;
   $126 = ((($5)) + 4|0);
   $127 = HEAP32[$126>>2]|0;
   $128 = ((($7)) + 4|0);
   $129 = HEAP32[$128>>2]|0;
   (_putCharAndDots($125,$127,$129)|0);
   $130 = $2;
   $131 = ((($5)) + 4|0);
   $132 = ((($131)) + 4|0);
   $133 = HEAP32[$132>>2]|0;
   $134 = ((($7)) + 4|0);
   $135 = ((($134)) + 4|0);
   $136 = HEAP32[$135>>2]|0;
   (_putCharAndDots($130,$133,$136)|0);
   $137 = ((($5)) + 4|0);
   $138 = ((($137)) + 4|0);
   $139 = HEAP32[$138>>2]|0;
   $9 = $139;
   $140 = ((($7)) + 4|0);
   $141 = ((($140)) + 4|0);
   $142 = HEAP32[$141>>2]|0;
   $10 = $142;
   HEAP32[$7>>2] = 1;
   HEAP32[$5>>2] = 1;
   $143 = $2;
   $144 = (_addRule($143,60,$5,$7,0,0)|0);
   $145 = ($144|0)!=(0);
   if (!($145)) {
    $1 = 0;
    $153 = $1;
    STACKTOP = sp;return ($153|0);
   }
   $146 = $9;
   $147 = ((($5)) + 4|0);
   HEAP32[$147>>2] = $146;
   $148 = $10;
   $149 = ((($7)) + 4|0);
   HEAP32[$149>>2] = $148;
   $150 = $2;
   $151 = (_addRule($150,60,$5,$7,0,0)|0);
   $152 = ($151|0)!=(0);
   if ($152) {
    $1 = 1;
    $153 = $1;
    STACKTOP = sp;return ($153|0);
   } else {
    $1 = 0;
    $153 = $1;
    STACKTOP = sp;return ($153|0);
   }
  }
 }
 $44 = $2;
 _compileError($44,5495,$vararg_buffer1);
 $1 = 0;
 $153 = $1;
 STACKTOP = sp;return ($153|0);
}
function _compileUplow($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0;
 var $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0;
 var $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0;
 var $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0;
 var $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0;
 var $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32832|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32832|0);
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $8 = sp + 24608|0;
 $9 = sp + 16412|0;
 $10 = sp + 8216|0;
 $11 = sp + 20|0;
 $2 = $0;
 $6 = 0;
 $7 = 0;
 $12 = 0;
 $14 = $2;
 $15 = (_getRuleCharsText($14,$8)|0);
 $16 = ($15|0)!=(0);
 if (!($16)) {
  $1 = 0;
  $232 = $1;
  STACKTOP = sp;return ($232|0);
 }
 $17 = $2;
 $18 = (_getToken($17,$9,5295)|0);
 $19 = ($18|0)!=(0);
 if (!($19)) {
  $1 = 0;
  $232 = $1;
  STACKTOP = sp;return ($232|0);
 }
 $3 = 0;
 while(1) {
  $20 = $3;
  $21 = HEAP32[$9>>2]|0;
  $22 = ($20>>>0)<($21>>>0);
  if (!($22)) {
   break;
  }
  $23 = $3;
  $24 = ((($9)) + 4|0);
  $25 = (($24) + ($23<<2)|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = ($26|0)!=(44);
  if (!($27)) {
   break;
  }
  $28 = $3;
  $29 = (($28) + 1)|0;
  $3 = $29;
 }
 $30 = $3;
 $31 = HEAP32[$9>>2]|0;
 $32 = ($30|0)==($31|0);
 if ($32) {
  $33 = $2;
  $34 = (_parseDots($33,$10,$9)|0);
  $35 = ($34|0)!=(0);
  if (!($35)) {
   $1 = 0;
   $232 = $1;
   STACKTOP = sp;return ($232|0);
  }
  $36 = HEAP32[$10>>2]|0;
  HEAP32[$11>>2] = $36;
  $3 = 0;
  while(1) {
   $37 = $3;
   $38 = HEAP32[$10>>2]|0;
   $39 = ($37>>>0)<($38>>>0);
   $40 = $3;
   if (!($39)) {
    break;
   }
   $41 = ((($10)) + 4|0);
   $42 = (($41) + ($40<<2)|0);
   $43 = HEAP32[$42>>2]|0;
   $44 = $3;
   $45 = ((($11)) + 4|0);
   $46 = (($45) + ($44<<2)|0);
   HEAP32[$46>>2] = $43;
   $47 = $3;
   $48 = (($47) + 1)|0;
   $3 = $48;
  }
  $49 = ((($11)) + 4|0);
  $50 = (($49) + ($40<<2)|0);
  HEAP32[$50>>2] = 0;
 } else {
  $51 = HEAP32[$9>>2]|0;
  $12 = $51;
  $52 = $3;
  HEAP32[$9>>2] = $52;
  $53 = $2;
  $54 = (_parseDots($53,$10,$9)|0);
  $55 = ($54|0)!=(0);
  if (!($55)) {
   $1 = 0;
   $232 = $1;
   STACKTOP = sp;return ($232|0);
  }
  HEAP32[$9>>2] = 0;
  $56 = $3;
  $57 = (($56) + 1)|0;
  $3 = $57;
  while(1) {
   $58 = $3;
   $59 = $12;
   $60 = ($58|0)<($59|0);
   if (!($60)) {
    break;
   }
   $61 = $3;
   $62 = ((($9)) + 4|0);
   $63 = (($62) + ($61<<2)|0);
   $64 = HEAP32[$63>>2]|0;
   $65 = HEAP32[$9>>2]|0;
   $66 = (($65) + 1)|0;
   HEAP32[$9>>2] = $66;
   $67 = ((($9)) + 4|0);
   $68 = (($67) + ($65<<2)|0);
   HEAP32[$68>>2] = $64;
   $69 = $3;
   $70 = (($69) + 1)|0;
   $3 = $70;
  }
  $71 = $2;
  $72 = (_parseDots($71,$11,$9)|0);
  $73 = ($72|0)!=(0);
  if (!($73)) {
   $1 = 0;
   $232 = $1;
   STACKTOP = sp;return ($232|0);
  }
 }
 $74 = HEAP32[$8>>2]|0;
 $75 = ($74|0)!=(2);
 if (!($75)) {
  $76 = HEAP32[$10>>2]|0;
  $77 = ($76>>>0)<(1);
  if (!($77)) {
   $79 = $12;
   $80 = ($79|0)!=(0);
   if ($80) {
    $81 = HEAP32[$11>>2]|0;
    $82 = ($81>>>0)<(1);
    if ($82) {
     $83 = $2;
     _compileError($83,5375,$vararg_buffer1);
     $1 = 0;
     $232 = $1;
     STACKTOP = sp;return ($232|0);
    }
   }
   $84 = $2;
   $85 = ((($8)) + 4|0);
   $86 = HEAP32[$85>>2]|0;
   $87 = (_addCharOrDots($84,$86,0)|0);
   $4 = $87;
   $88 = $4;
   $89 = ((($88)) + 12|0);
   $90 = HEAP32[$89>>2]|0;
   $91 = $90 | 18;
   HEAP32[$89>>2] = $91;
   $92 = ((($8)) + 4|0);
   $93 = HEAP32[$92>>2]|0;
   $94 = $4;
   $95 = ((($94)) + 20|0);
   HEAP32[$95>>2] = $93;
   $96 = ((($8)) + 4|0);
   $97 = ((($96)) + 4|0);
   $98 = HEAP32[$97>>2]|0;
   $99 = $4;
   $100 = ((($99)) + 24|0);
   HEAP32[$100>>2] = $98;
   $101 = $2;
   $102 = ((($8)) + 4|0);
   $103 = ((($102)) + 4|0);
   $104 = HEAP32[$103>>2]|0;
   $105 = (_addCharOrDots($101,$104,0)|0);
   $5 = $105;
   $106 = $5;
   $107 = ((($106)) + 12|0);
   $108 = HEAP32[$107>>2]|0;
   $109 = $108 | 34;
   HEAP32[$107>>2] = $109;
   $110 = ((($8)) + 4|0);
   $111 = HEAP32[$110>>2]|0;
   $112 = $5;
   $113 = ((($112)) + 20|0);
   HEAP32[$113>>2] = $111;
   $114 = ((($8)) + 4|0);
   $115 = ((($114)) + 4|0);
   $116 = HEAP32[$115>>2]|0;
   $117 = $5;
   $118 = ((($117)) + 24|0);
   HEAP32[$118>>2] = $116;
   $3 = 0;
   while(1) {
    $119 = $3;
    $120 = HEAP32[$10>>2]|0;
    $121 = ($119>>>0)<($120>>>0);
    if (!($121)) {
     break;
    }
    $122 = $3;
    $123 = ((($10)) + 4|0);
    $124 = (($123) + ($122<<2)|0);
    $125 = HEAP32[$124>>2]|0;
    $126 = (_compile_findCharOrDots($125,1)|0);
    $127 = ($126|0)!=(0|0);
    if (!($127)) {
     $13 = 18;
     $128 = $2;
     $129 = $3;
     $130 = ((($10)) + 4|0);
     $131 = (($130) + ($129<<2)|0);
     $132 = HEAP32[$131>>2]|0;
     $133 = (_addCharOrDots($128,$132,1)|0);
     $6 = $133;
     $134 = HEAP32[$10>>2]|0;
     $135 = ($134|0)!=(1);
     if ($135) {
      $13 = 1;
     }
     $136 = $13;
     $137 = $6;
     $138 = ((($137)) + 12|0);
     $139 = HEAP32[$138>>2]|0;
     $140 = $139 | $136;
     HEAP32[$138>>2] = $140;
     $141 = $6;
     $142 = ((($141)) + 16|0);
     $143 = HEAP32[$142>>2]|0;
     $144 = $6;
     $145 = ((($144)) + 20|0);
     HEAP32[$145>>2] = $143;
    }
    $146 = $3;
    $147 = (($146) + 1)|0;
    $3 = $147;
   }
   $148 = $12;
   $149 = ($148|0)!=(0);
   L54: do {
    if ($149) {
     $3 = 0;
     while(1) {
      $150 = $3;
      $151 = HEAP32[$11>>2]|0;
      $152 = ($150>>>0)<($151>>>0);
      if (!($152)) {
       break L54;
      }
      $153 = $3;
      $154 = ((($11)) + 4|0);
      $155 = (($154) + ($153<<2)|0);
      $156 = HEAP32[$155>>2]|0;
      $157 = (_compile_findCharOrDots($156,1)|0);
      $158 = ($157|0)!=(0|0);
      if (!($158)) {
       $13 = 34;
       $159 = $2;
       $160 = $3;
       $161 = ((($11)) + 4|0);
       $162 = (($161) + ($160<<2)|0);
       $163 = HEAP32[$162>>2]|0;
       $164 = (_addCharOrDots($159,$163,1)|0);
       $7 = $164;
       $165 = HEAP32[$11>>2]|0;
       $166 = ($165|0)!=(1);
       if ($166) {
        $13 = 1;
       }
       $167 = $13;
       $168 = $7;
       $169 = ((($168)) + 12|0);
       $170 = HEAP32[$169>>2]|0;
       $171 = $170 | $167;
       HEAP32[$169>>2] = $171;
       $172 = $7;
       $173 = ((($172)) + 16|0);
       $174 = HEAP32[$173>>2]|0;
       $175 = $7;
       $176 = ((($175)) + 24|0);
       HEAP32[$176>>2] = $174;
      }
      $177 = $3;
      $178 = (($177) + 1)|0;
      $3 = $178;
     }
    } else {
     $179 = $6;
     $180 = ($179|0)!=(0|0);
     if ($180) {
      $181 = HEAP32[$10>>2]|0;
      $182 = ($181|0)==(1);
      if ($182) {
       $183 = $6;
       $184 = ((($183)) + 12|0);
       $185 = HEAP32[$184>>2]|0;
       $186 = $185 | 32;
       HEAP32[$184>>2] = $186;
      }
     }
    }
   } while(0);
   $187 = HEAP32[$11>>2]|0;
   $188 = ($187|0)==(1);
   if ($188) {
    $189 = $2;
    $190 = ((($8)) + 4|0);
    $191 = ((($190)) + 4|0);
    $192 = HEAP32[$191>>2]|0;
    $193 = ((($11)) + 4|0);
    $194 = HEAP32[$193>>2]|0;
    (_putCharAndDots($189,$192,$194)|0);
   }
   $195 = $6;
   $196 = ($195|0)!=(0|0);
   if ($196) {
    $197 = ((($11)) + 4|0);
    $198 = HEAP32[$197>>2]|0;
    $199 = $6;
    $200 = ((($199)) + 24|0);
    HEAP32[$200>>2] = $198;
   }
   $201 = $7;
   $202 = ($201|0)!=(0|0);
   if ($202) {
    $203 = ((($10)) + 4|0);
    $204 = HEAP32[$203>>2]|0;
    $205 = $7;
    $206 = ((($205)) + 20|0);
    HEAP32[$206>>2] = $204;
   }
   $207 = HEAP32[$10>>2]|0;
   $208 = ($207|0)==(1);
   if ($208) {
    $209 = $2;
    $210 = ((($8)) + 4|0);
    $211 = HEAP32[$210>>2]|0;
    $212 = ((($10)) + 4|0);
    $213 = HEAP32[$212>>2]|0;
    (_putCharAndDots($209,$211,$213)|0);
   }
   HEAP32[$8>>2] = 1;
   $214 = ((($8)) + 4|0);
   $215 = HEAP32[$214>>2]|0;
   $216 = ((($8)) + 4|0);
   $217 = ((($216)) + 8|0);
   HEAP32[$217>>2] = $215;
   $218 = ((($8)) + 4|0);
   $219 = ((($218)) + 4|0);
   $220 = HEAP32[$219>>2]|0;
   $221 = ((($8)) + 4|0);
   HEAP32[$221>>2] = $220;
   $222 = $2;
   $223 = (_addRule($222,64,$8,$11,0,0)|0);
   $224 = ($223|0)!=(0);
   if (!($224)) {
    $1 = 0;
    $232 = $1;
    STACKTOP = sp;return ($232|0);
   }
   $225 = ((($8)) + 4|0);
   $226 = ((($225)) + 8|0);
   $227 = HEAP32[$226>>2]|0;
   $228 = ((($8)) + 4|0);
   HEAP32[$228>>2] = $227;
   $229 = $2;
   $230 = (_addRule($229,63,$8,$10,0,0)|0);
   $231 = ($230|0)!=(0);
   if ($231) {
    $1 = 1;
    $232 = $1;
    STACKTOP = sp;return ($232|0);
   } else {
    $1 = 0;
    $232 = $1;
    STACKTOP = sp;return ($232|0);
   }
  }
 }
 $78 = $2;
 _compileError($78,5308,$vararg_buffer);
 $1 = 0;
 $232 = $1;
 STACKTOP = sp;return ($232|0);
}
function _putCharAndDots($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $10 = sp + 4|0;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $9 = 0;
 $12 = $5;
 $13 = (_getCharOrDots($12,0)|0);
 $8 = $13;
 $14 = ($13|0)!=(0|0);
 do {
  if (!($14)) {
   $15 = $4;
   $16 = (_allocateSpaceInTable($15,$10,12)|0);
   $17 = ($16|0)!=(0);
   if (!($17)) {
    $3 = 0;
    $102 = $3;
    STACKTOP = sp;return ($102|0);
   }
   $18 = HEAP32[$10>>2]|0;
   $19 = HEAP32[2463]|0;
   $20 = ((($19)) + 31332|0);
   $21 = (($20) + ($18<<2)|0);
   $8 = $21;
   $22 = $8;
   HEAP32[$22>>2] = 0;
   $23 = $5;
   $24 = $8;
   $25 = ((($24)) + 4|0);
   HEAP32[$25>>2] = $23;
   $26 = $6;
   $27 = $8;
   $28 = ((($27)) + 8|0);
   HEAP32[$28>>2] = $26;
   $29 = $5;
   $30 = (($29>>>0) % 1123)&-1;
   $11 = $30;
   $31 = $11;
   $32 = HEAP32[2463]|0;
   $33 = ((($32)) + 12100|0);
   $34 = (($33) + ($31<<2)|0);
   $35 = HEAP32[$34>>2]|0;
   $7 = $35;
   $36 = $7;
   $37 = ($36|0)!=(0);
   if (!($37)) {
    $38 = HEAP32[$10>>2]|0;
    $39 = $11;
    $40 = HEAP32[2463]|0;
    $41 = ((($40)) + 12100|0);
    $42 = (($41) + ($39<<2)|0);
    HEAP32[$42>>2] = $38;
    break;
   }
   $43 = $7;
   $44 = HEAP32[2463]|0;
   $45 = ((($44)) + 31332|0);
   $46 = (($45) + ($43<<2)|0);
   $9 = $46;
   while(1) {
    $47 = $9;
    $48 = HEAP32[$47>>2]|0;
    $49 = ($48|0)!=(0);
    if (!($49)) {
     break;
    }
    $50 = $9;
    $51 = HEAP32[$50>>2]|0;
    $52 = HEAP32[2463]|0;
    $53 = ((($52)) + 31332|0);
    $54 = (($53) + ($51<<2)|0);
    $9 = $54;
   }
   $55 = HEAP32[$10>>2]|0;
   $56 = $9;
   HEAP32[$56>>2] = $55;
  }
 } while(0);
 $57 = $6;
 $58 = (_getCharOrDots($57,1)|0);
 $8 = $58;
 $59 = ($58|0)!=(0|0);
 do {
  if (!($59)) {
   $60 = $4;
   $61 = (_allocateSpaceInTable($60,$10,12)|0);
   $62 = ($61|0)!=(0);
   if (!($62)) {
    $3 = 0;
    $102 = $3;
    STACKTOP = sp;return ($102|0);
   }
   $63 = HEAP32[$10>>2]|0;
   $64 = HEAP32[2463]|0;
   $65 = ((($64)) + 31332|0);
   $66 = (($65) + ($63<<2)|0);
   $8 = $66;
   $67 = $8;
   HEAP32[$67>>2] = 0;
   $68 = $6;
   $69 = $8;
   $70 = ((($69)) + 4|0);
   HEAP32[$70>>2] = $68;
   $71 = $5;
   $72 = $8;
   $73 = ((($72)) + 8|0);
   HEAP32[$73>>2] = $71;
   $74 = $6;
   $75 = (($74>>>0) % 1123)&-1;
   $11 = $75;
   $76 = $11;
   $77 = HEAP32[2463]|0;
   $78 = ((($77)) + 16592|0);
   $79 = (($78) + ($76<<2)|0);
   $80 = HEAP32[$79>>2]|0;
   $7 = $80;
   $81 = $7;
   $82 = ($81|0)!=(0);
   if (!($82)) {
    $83 = HEAP32[$10>>2]|0;
    $84 = $11;
    $85 = HEAP32[2463]|0;
    $86 = ((($85)) + 16592|0);
    $87 = (($86) + ($84<<2)|0);
    HEAP32[$87>>2] = $83;
    break;
   }
   $88 = $7;
   $89 = HEAP32[2463]|0;
   $90 = ((($89)) + 31332|0);
   $91 = (($90) + ($88<<2)|0);
   $9 = $91;
   while(1) {
    $92 = $9;
    $93 = HEAP32[$92>>2]|0;
    $94 = ($93|0)!=(0);
    if (!($94)) {
     break;
    }
    $95 = $9;
    $96 = HEAP32[$95>>2]|0;
    $97 = HEAP32[2463]|0;
    $98 = ((($97)) + 31332|0);
    $99 = (($98) + ($96<<2)|0);
    $9 = $99;
   }
   $100 = HEAP32[$10>>2]|0;
   $101 = $9;
   HEAP32[$101>>2] = $100;
  }
 } while(0);
 $3 = 1;
 $102 = $3;
 STACKTOP = sp;return ($102|0);
}
function _addRuleName($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $3 = $0;
 $4 = $1;
 $8 = $4;
 $9 = HEAP32[$8>>2]|0;
 $10 = (($9) - 1)|0;
 $11 = $10<<2;
 $12 = (16 + ($11))|0;
 $13 = (_malloc($12)|0);
 $6 = $13;
 $14 = ($13|0)!=(0|0);
 if (!($14)) {
  $15 = $3;
  _compileError($15,5565,$vararg_buffer);
  _outOfMemory();
 }
 $16 = $6;
 ;HEAP32[$16>>2]=0|0;HEAP32[$16+4>>2]=0|0;HEAP32[$16+8>>2]=0|0;HEAP32[$16+12>>2]=0|0;
 $5 = 0;
 while(1) {
  $17 = $5;
  $18 = $4;
  $19 = HEAP32[$18>>2]|0;
  $20 = ($17>>>0)<($19>>>0);
  if (!($20)) {
   label = 8;
   break;
  }
  $21 = $3;
  $22 = $5;
  $23 = $4;
  $24 = ((($23)) + 4|0);
  $25 = (($24) + ($22<<2)|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = (_definedCharOrDots($21,$26,0)|0);
  $7 = $27;
  $28 = $7;
  $29 = ((($28)) + 12|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = $30 & 2;
  $32 = ($31|0)!=(0);
  if (!($32)) {
   label = 6;
   break;
  }
  $34 = $5;
  $35 = $4;
  $36 = ((($35)) + 4|0);
  $37 = (($36) + ($34<<2)|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = $5;
  $40 = $6;
  $41 = ((($40)) + 12|0);
  $42 = (($41) + ($39<<2)|0);
  HEAP32[$42>>2] = $38;
  $43 = $5;
  $44 = (($43) + 1)|0;
  $5 = $44;
 }
 if ((label|0) == 6) {
  $33 = $3;
  _compileError($33,5583,$vararg_buffer1);
  $2 = 0;
  $55 = $2;
  STACKTOP = sp;return ($55|0);
 }
 else if ((label|0) == 8) {
  $45 = $4;
  $46 = HEAP32[$45>>2]|0;
  $47 = $6;
  $48 = ((($47)) + 8|0);
  HEAP32[$48>>2] = $46;
  $49 = HEAP32[4550]|0;
  $50 = $6;
  $51 = ((($50)) + 4|0);
  HEAP32[$51>>2] = $49;
  $52 = HEAP32[4545]|0;
  $53 = $6;
  HEAP32[$53>>2] = $52;
  $54 = $6;
  HEAP32[4545] = $54;
  $2 = 1;
  $55 = $2;
  STACKTOP = sp;return ($55|0);
 }
 return (0)|0;
}
function _compileSwapDots($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16416|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16416|0);
 $9 = sp + 8196|0;
 $10 = sp;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = 0;
 $8 = 0;
 $11 = $6;
 HEAP32[$11>>2] = 0;
 HEAP32[$9>>2] = 0;
 while(1) {
  $12 = $7;
  $13 = $5;
  $14 = HEAP32[$13>>2]|0;
  $15 = ($12>>>0)<=($14>>>0);
  if (!($15)) {
   label = 13;
   break;
  }
  $16 = $7;
  $17 = $5;
  $18 = ((($17)) + 4|0);
  $19 = (($18) + ($16<<2)|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = ($20|0)!=(44);
  if ($21) {
   $22 = $7;
   $23 = $5;
   $24 = HEAP32[$23>>2]|0;
   $25 = ($22|0)!=($24|0);
   if ($25) {
    $26 = $7;
    $27 = $5;
    $28 = ((($27)) + 4|0);
    $29 = (($28) + ($26<<2)|0);
    $30 = HEAP32[$29>>2]|0;
    $31 = HEAP32[$9>>2]|0;
    $32 = (($31) + 1)|0;
    HEAP32[$9>>2] = $32;
    $33 = ((($9)) + 4|0);
    $34 = (($33) + ($31<<2)|0);
    HEAP32[$34>>2] = $30;
   } else {
    label = 6;
   }
  } else {
   label = 6;
  }
  if ((label|0) == 6) {
   label = 0;
   $35 = $4;
   $36 = (_parseDots($35,$10,$9)|0);
   $37 = ($36|0)!=(0);
   if (!($37)) {
    label = 7;
    break;
   }
   $38 = HEAP32[$10>>2]|0;
   $39 = (($38) + 1)|0;
   $40 = $6;
   $41 = HEAP32[$40>>2]|0;
   $42 = (($41) + 1)|0;
   HEAP32[$40>>2] = $42;
   $43 = $6;
   $44 = ((($43)) + 4|0);
   $45 = (($44) + ($41<<2)|0);
   HEAP32[$45>>2] = $39;
   $8 = 0;
   while(1) {
    $46 = $8;
    $47 = HEAP32[$10>>2]|0;
    $48 = ($46>>>0)<($47>>>0);
    if (!($48)) {
     break;
    }
    $49 = $8;
    $50 = ((($10)) + 4|0);
    $51 = (($50) + ($49<<2)|0);
    $52 = HEAP32[$51>>2]|0;
    $53 = $6;
    $54 = HEAP32[$53>>2]|0;
    $55 = (($54) + 1)|0;
    HEAP32[$53>>2] = $55;
    $56 = $6;
    $57 = ((($56)) + 4|0);
    $58 = (($57) + ($54<<2)|0);
    HEAP32[$58>>2] = $52;
    $59 = $8;
    $60 = (($59) + 1)|0;
    $8 = $60;
   }
   HEAP32[$9>>2] = 0;
  }
  $61 = $7;
  $62 = (($61) + 1)|0;
  $7 = $62;
 }
 if ((label|0) == 7) {
  $3 = 0;
  $63 = $3;
  STACKTOP = sp;return ($63|0);
 }
 else if ((label|0) == 13) {
  $3 = 1;
  $63 = $3;
  STACKTOP = sp;return ($63|0);
 }
 return (0)|0;
}
function _unknownDots($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = 1;
 HEAP8[57132] = 92;
 $3 = $1;
 $4 = $3 & 1;
 $5 = ($4|0)!=(0);
 if ($5) {
  $6 = $2;
  $7 = (($6) + 1)|0;
  $2 = $7;
  $8 = (57132 + ($6)|0);
  HEAP8[$8>>0] = 49;
 }
 $9 = $1;
 $10 = $9 & 2;
 $11 = ($10|0)!=(0);
 if ($11) {
  $12 = $2;
  $13 = (($12) + 1)|0;
  $2 = $13;
  $14 = (57132 + ($12)|0);
  HEAP8[$14>>0] = 50;
 }
 $15 = $1;
 $16 = $15 & 4;
 $17 = ($16|0)!=(0);
 if ($17) {
  $18 = $2;
  $19 = (($18) + 1)|0;
  $2 = $19;
  $20 = (57132 + ($18)|0);
  HEAP8[$20>>0] = 51;
 }
 $21 = $1;
 $22 = $21 & 8;
 $23 = ($22|0)!=(0);
 if ($23) {
  $24 = $2;
  $25 = (($24) + 1)|0;
  $2 = $25;
  $26 = (57132 + ($24)|0);
  HEAP8[$26>>0] = 52;
 }
 $27 = $1;
 $28 = $27 & 16;
 $29 = ($28|0)!=(0);
 if ($29) {
  $30 = $2;
  $31 = (($30) + 1)|0;
  $2 = $31;
  $32 = (57132 + ($30)|0);
  HEAP8[$32>>0] = 53;
 }
 $33 = $1;
 $34 = $33 & 32;
 $35 = ($34|0)!=(0);
 if ($35) {
  $36 = $2;
  $37 = (($36) + 1)|0;
  $2 = $37;
  $38 = (57132 + ($36)|0);
  HEAP8[$38>>0] = 54;
 }
 $39 = $1;
 $40 = $39 & 64;
 $41 = ($40|0)!=(0);
 if ($41) {
  $42 = $2;
  $43 = (($42) + 1)|0;
  $2 = $43;
  $44 = (57132 + ($42)|0);
  HEAP8[$44>>0] = 55;
 }
 $45 = $1;
 $46 = $45 & 128;
 $47 = ($46|0)!=(0);
 if ($47) {
  $48 = $2;
  $49 = (($48) + 1)|0;
  $2 = $49;
  $50 = (57132 + ($48)|0);
  HEAP8[$50>>0] = 56;
 }
 $51 = $1;
 $52 = $51 & 256;
 $53 = ($52|0)!=(0);
 if ($53) {
  $54 = $2;
  $55 = (($54) + 1)|0;
  $2 = $55;
  $56 = (57132 + ($54)|0);
  HEAP8[$56>>0] = 57;
 }
 $57 = $1;
 $58 = $57 & 512;
 $59 = ($58|0)!=(0);
 if ($59) {
  $60 = $2;
  $61 = (($60) + 1)|0;
  $2 = $61;
  $62 = (57132 + ($60)|0);
  HEAP8[$62>>0] = 65;
 }
 $63 = $1;
 $64 = $63 & 1024;
 $65 = ($64|0)!=(0);
 if ($65) {
  $66 = $2;
  $67 = (($66) + 1)|0;
  $2 = $67;
  $68 = (57132 + ($66)|0);
  HEAP8[$68>>0] = 66;
 }
 $69 = $1;
 $70 = $69 & 2048;
 $71 = ($70|0)!=(0);
 if ($71) {
  $72 = $2;
  $73 = (($72) + 1)|0;
  $2 = $73;
  $74 = (57132 + ($72)|0);
  HEAP8[$74>>0] = 67;
 }
 $75 = $1;
 $76 = $75 & 4096;
 $77 = ($76|0)!=(0);
 if ($77) {
  $78 = $2;
  $79 = (($78) + 1)|0;
  $2 = $79;
  $80 = (57132 + ($78)|0);
  HEAP8[$80>>0] = 68;
 }
 $81 = $1;
 $82 = $81 & 8192;
 $83 = ($82|0)!=(0);
 if ($83) {
  $84 = $2;
  $85 = (($84) + 1)|0;
  $2 = $85;
  $86 = (57132 + ($84)|0);
  HEAP8[$86>>0] = 69;
 }
 $87 = $1;
 $88 = $87 & 16384;
 $89 = ($88|0)!=(0);
 if (!($89)) {
  $93 = $2;
  $94 = (($93) + 1)|0;
  $2 = $94;
  $95 = (57132 + ($93)|0);
  HEAP8[$95>>0] = 47;
  $96 = $2;
  $97 = (57132 + ($96)|0);
  HEAP8[$97>>0] = 0;
  STACKTOP = sp;return (57132|0);
 }
 $90 = $2;
 $91 = (($90) + 1)|0;
 $2 = $91;
 $92 = (57132 + ($90)|0);
 HEAP8[$92>>0] = 70;
 $93 = $2;
 $94 = (($93) + 1)|0;
 $2 = $94;
 $95 = (57132 + ($93)|0);
 HEAP8[$95>>0] = 47;
 $96 = $2;
 $97 = (57132 + ($96)|0);
 HEAP8[$97>>0] = 0;
 STACKTOP = sp;return (57132|0);
}
function _passGetScriptToken() {
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 L1: while(1) {
  $1 = HEAP32[8656]|0;
  $2 = HEAP32[10706]|0;
  $3 = ($1>>>0)<($2>>>0);
  if (!($3)) {
   label = 91;
   break;
  }
  $4 = HEAP32[8656]|0;
  HEAP32[12756] = $4;
  $5 = HEAP32[8656]|0;
  $6 = ((42828) + ($5<<2)|0);
  $7 = HEAP32[$6>>2]|0;
  switch ($7|0) {
  case 34:  {
   label = 4;
   break L1;
   break;
  }
  case 64:  {
   label = 7;
   break L1;
   break;
  }
  case 35:  {
   label = 10;
   break L1;
   break;
  }
  case 33:  {
   label = 11;
   break L1;
   break;
  }
  case 45:  {
   label = 14;
   break L1;
   break;
  }
  case 61:  {
   label = 15;
   break L1;
   break;
  }
  case 60:  {
   label = 16;
   break L1;
   break;
  }
  case 62:  {
   label = 19;
   break L1;
   break;
  }
  case 43:  {
   label = 22;
   break L1;
   break;
  }
  case 40:  {
   label = 23;
   break L1;
   break;
  }
  case 41:  {
   label = 24;
   break L1;
   break;
  }
  case 44:  {
   label = 25;
   break L1;
   break;
  }
  case 38:  {
   label = 26;
   break L1;
   break;
  }
  case 124:  {
   label = 29;
   break L1;
   break;
  }
  case 97:  {
   label = 32;
   break L1;
   break;
  }
  case 98:  {
   label = 35;
   break L1;
   break;
  }
  case 99:  {
   label = 40;
   break L1;
   break;
  }
  case 100:  {
   label = 43;
   break L1;
   break;
  }
  case 101:  {
   label = 46;
   break L1;
   break;
  }
  case 102:  {
   label = 49;
   break L1;
   break;
  }
  case 103:  {
   label = 54;
   break L1;
   break;
  }
  case 105:  {
   label = 57;
   break L1;
   break;
  }
  case 108:  {
   label = 60;
   break L1;
   break;
  }
  case 109:  {
   label = 63;
   break L1;
   break;
  }
  case 114:  {
   label = 66;
   break L1;
   break;
  }
  case 115:  {
   label = 75;
   break L1;
   break;
  }
  case 116:  {
   label = 80;
   break L1;
   break;
  }
  default: {
  }
  }
  $103 = HEAP32[8656]|0;
  $104 = ((42828) + ($103<<2)|0);
  $105 = HEAP32[$104>>2]|0;
  $106 = ($105>>>0)<=(32);
  $107 = HEAP32[8656]|0;
  if (!($106)) {
   label = 85;
   break;
  }
  $108 = (($107) + 1)|0;
  HEAP32[8656] = $108;
 }
 switch (label|0) {
  case 4: {
   $8 = HEAP32[8656]|0;
   $9 = (($8) + 1)|0;
   HEAP32[8656] = $9;
   $10 = (_passGetString()|0);
   $11 = ($10|0)!=(0);
   if ($11) {
    $0 = 34;
    break;
   } else {
    $0 = 132;
    break;
   }
   break;
  }
  case 7: {
   $12 = HEAP32[8656]|0;
   $13 = (($12) + 1)|0;
   HEAP32[8656] = $13;
   $14 = (_passGetDots()|0);
   $15 = ($14|0)!=(0);
   if ($15) {
    $0 = 64;
    break;
   } else {
    $0 = 132;
    break;
   }
   break;
  }
  case 10: {
   $16 = HEAP32[10706]|0;
   $17 = (($16) + 1)|0;
   HEAP32[8656] = $17;
   $0 = 145;
   break;
  }
  case 11: {
   $18 = HEAP32[8656]|0;
   $19 = (($18) + 1)|0;
   $20 = ((42828) + ($19<<2)|0);
   $21 = HEAP32[$20>>2]|0;
   $22 = ($21|0)==(61);
   $23 = HEAP32[8656]|0;
   if ($22) {
    $24 = (($23) + 2)|0;
    HEAP32[8656] = $24;
    $0 = 133;
    break;
   } else {
    $25 = (($23) + 1)|0;
    HEAP32[8656] = $25;
    $0 = 33;
    break;
   }
   break;
  }
  case 14: {
   $26 = HEAP32[8656]|0;
   $27 = (($26) + 1)|0;
   HEAP32[8656] = $27;
   $0 = 45;
   break;
  }
  case 15: {
   $28 = HEAP32[8656]|0;
   $29 = (($28) + 1)|0;
   HEAP32[8656] = $29;
   $0 = 61;
   break;
  }
  case 16: {
   $30 = HEAP32[8656]|0;
   $31 = (($30) + 1)|0;
   HEAP32[8656] = $31;
   $32 = HEAP32[8656]|0;
   $33 = ((42828) + ($32<<2)|0);
   $34 = HEAP32[$33>>2]|0;
   $35 = ($34|0)==(61);
   if ($35) {
    $36 = HEAP32[8656]|0;
    $37 = (($36) + 1)|0;
    HEAP32[8656] = $37;
    $0 = 130;
    break;
   } else {
    $0 = 60;
    break;
   }
   break;
  }
  case 19: {
   $38 = HEAP32[8656]|0;
   $39 = (($38) + 1)|0;
   HEAP32[8656] = $39;
   $40 = HEAP32[8656]|0;
   $41 = ((42828) + ($40<<2)|0);
   $42 = HEAP32[$41>>2]|0;
   $43 = ($42|0)==(61);
   if ($43) {
    $44 = HEAP32[8656]|0;
    $45 = (($44) + 1)|0;
    HEAP32[8656] = $45;
    $0 = 131;
    break;
   } else {
    $0 = 62;
    break;
   }
   break;
  }
  case 22: {
   $46 = HEAP32[8656]|0;
   $47 = (($46) + 1)|0;
   HEAP32[8656] = $47;
   $0 = 43;
   break;
  }
  case 23: {
   $48 = HEAP32[8656]|0;
   $49 = (($48) + 1)|0;
   HEAP32[8656] = $49;
   $0 = 40;
   break;
  }
  case 24: {
   $50 = HEAP32[8656]|0;
   $51 = (($50) + 1)|0;
   HEAP32[8656] = $51;
   $0 = 41;
   break;
  }
  case 25: {
   $52 = HEAP32[8656]|0;
   $53 = (($52) + 1)|0;
   HEAP32[8656] = $53;
   $0 = 44;
   break;
  }
  case 26: {
   HEAP32[8656] = 1;
   $54 = HEAP32[(42832)>>2]|0;
   $55 = ($54|0)==(38);
   if ($55) {
    $56 = HEAP32[8656]|0;
    $57 = (($56) + 2)|0;
    HEAP32[8656] = $57;
    $0 = 134;
    break;
   } else {
    $0 = 132;
    break;
   }
   break;
  }
  case 29: {
   $58 = HEAP32[8656]|0;
   $59 = (($58) + 1)|0;
   $60 = ((42828) + ($59<<2)|0);
   $61 = HEAP32[$60>>2]|0;
   $62 = ($61|0)==(124);
   if ($62) {
    $63 = HEAP32[8656]|0;
    $64 = (($63) + 2)|0;
    HEAP32[8656] = $64;
    $0 = 135;
    break;
   } else {
    $0 = 132;
    break;
   }
   break;
  }
  case 32: {
   $65 = (_passIsKeyword(6757)|0);
   $66 = ($65|0)!=(0);
   if ($66) {
    $0 = 36;
    break;
   } else {
    (_passGetName()|0);
    $0 = 136;
    break;
   }
   break;
  }
  case 35: {
   $67 = (_passIsKeyword(6761)|0);
   $68 = ($67|0)!=(0);
   if ($68) {
    $0 = 95;
    break;
   }
   $69 = (_passIsKeyword(6765)|0);
   $70 = ($69|0)!=(0);
   if ($70) {
    $0 = 138;
    break;
   } else {
    (_passGetName()|0);
    $0 = 136;
    break;
   }
   break;
  }
  case 40: {
   $71 = (_passIsKeyword(6769)|0);
   $72 = ($71|0)!=(0);
   if ($72) {
    $0 = 139;
    break;
   } else {
    (_passGetName()|0);
    $0 = 136;
    break;
   }
   break;
  }
  case 43: {
   $73 = (_passIsKeyword(6774)|0);
   $74 = ($73|0)!=(0);
   if ($74) {
    $0 = 140;
    break;
   } else {
    (_passGetName()|0);
    $0 = 136;
    break;
   }
   break;
  }
  case 46: {
   $75 = (_passIsKeyword(6777)|0);
   $76 = ($75|0)!=(0);
   if ($76) {
    $0 = 141;
    break;
   } else {
    (_passGetName()|0);
    $0 = 136;
    break;
   }
   break;
  }
  case 49: {
   $77 = (_passIsKeyword(6781)|0);
   $78 = ($77|0)!=(0);
   if ($78) {
    $0 = 47;
    break;
   }
   $79 = (_passIsKeyword(6785)|0);
   $80 = ($79|0)!=(0);
   if ($80) {
    $0 = 96;
    break;
   } else {
    (_passGetName()|0);
    $0 = 136;
    break;
   }
   break;
  }
  case 54: {
   $81 = (_passIsKeyword(6790)|0);
   $82 = ($81|0)!=(0);
   if ($82) {
    $0 = 142;
    break;
   } else {
    (_passGetName()|0);
    $0 = 136;
    break;
   }
   break;
  }
  case 57: {
   $83 = (_passIsKeyword(6795)|0);
   $84 = ($83|0)!=(0);
   if ($84) {
    $0 = 147;
    break;
   } else {
    (_passGetName()|0);
    $0 = 136;
    break;
   }
   break;
  }
  case 60: {
   $85 = (_passIsKeyword(6797)|0);
   $86 = ($85|0)!=(0);
   if ($86) {
    $0 = 126;
    break;
   } else {
    (_passGetName()|0);
    $0 = 136;
    break;
   }
   break;
  }
  case 63: {
   $87 = (_passIsKeyword(6801)|0);
   $88 = ($87|0)!=(0);
   if ($88) {
    $0 = 143;
    break;
   } else {
    (_passGetName()|0);
    $0 = 136;
    break;
   }
   break;
  }
  case 66: {
   $89 = (_passIsKeyword(6805)|0);
   $90 = ($89|0)!=(0);
   if ($90) {
    $0 = 143;
    break;
   }
   $91 = (_passIsKeyword(6813)|0);
   $92 = ($91|0)!=(0);
   if ($92) {
    $0 = 42;
    break;
   }
   $93 = (_passIsKeyword(6820)|0);
   $94 = ($93|0)!=(0);
   if ($94) {
    $0 = 63;
    break;
   }
   $95 = (_passIsKeyword(6827)|0);
   $96 = ($95|0)!=(0);
   if ($96) {
    $0 = 146;
    break;
   } else {
    (_passGetName()|0);
    $0 = 136;
    break;
   }
   break;
  }
  case 75: {
   $97 = (_passIsKeyword(6830)|0);
   $98 = ($97|0)!=(0);
   if ($98) {
    $0 = 144;
    break;
   }
   $99 = (_passIsKeyword(6836)|0);
   $100 = ($99|0)!=(0);
   if ($100) {
    $0 = 37;
    break;
   } else {
    (_passGetName()|0);
    $0 = 136;
    break;
   }
   break;
  }
  case 80: {
   $101 = (_passIsKeyword(6840)|0);
   $102 = ($101|0)!=(0);
   if ($102) {
    $0 = 148;
    break;
   } else {
    (_passGetName()|0);
    $0 = 136;
    break;
   }
   break;
  }
  case 85: {
   $109 = ((42828) + ($107<<2)|0);
   $110 = HEAP32[$109>>2]|0;
   $111 = ($110>>>0)>=(48);
   if ($111) {
    $112 = HEAP32[8656]|0;
    $113 = ((42828) + ($112<<2)|0);
    $114 = HEAP32[$113>>2]|0;
    $115 = ($114>>>0)<=(57);
    if ($115) {
     (_passGetNumber()|0);
     $0 = 137;
     break;
    }
   }
   $116 = (_passGetName()|0);
   $117 = ($116|0)!=(0);
   if ($117) {
    $0 = 136;
    break;
   } else {
    $0 = 132;
    break;
   }
   break;
  }
  case 91: {
   $0 = 145;
   break;
  }
 }
 $118 = $0;
 STACKTOP = sp;return ($118|0);
}
function _passIsLeftParen() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $2 = (_passGetScriptToken()|0);
 $1 = $2;
 $3 = $1;
 $4 = ($3|0)!=(40);
 if ($4) {
  $5 = HEAP32[8654]|0;
  _compileError($5,6744,$vararg_buffer);
  $0 = 0;
  $6 = $0;
  STACKTOP = sp;return ($6|0);
 } else {
  $0 = 1;
  $6 = $0;
  STACKTOP = sp;return ($6|0);
 }
 return (0)|0;
}
function _passIsName() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $2 = (_passGetScriptToken()|0);
 $1 = $2;
 $3 = $1;
 $4 = ($3|0)!=(136);
 if ($4) {
  $5 = HEAP32[8654]|0;
  _compileError($5,6728,$vararg_buffer);
  $0 = 0;
  $6 = $0;
  STACKTOP = sp;return ($6|0);
 } else {
  $0 = 1;
  $6 = $0;
  STACKTOP = sp;return ($6|0);
 }
 return (0)|0;
}
function _passIsComma() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $2 = (_passGetScriptToken()|0);
 $1 = $2;
 $3 = $1;
 $4 = ($3|0)!=(44);
 if ($4) {
  $5 = HEAP32[8654]|0;
  _compileError($5,6715,$vararg_buffer);
  $0 = 0;
  $6 = $0;
  STACKTOP = sp;return ($6|0);
 } else {
  $0 = 1;
  $6 = $0;
  STACKTOP = sp;return ($6|0);
 }
 return (0)|0;
}
function _passIsNumber() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $2 = (_passGetScriptToken()|0);
 $1 = $2;
 $3 = $1;
 $4 = ($3|0)!=(137);
 if ($4) {
  $5 = HEAP32[8654]|0;
  _compileError($5,6697,$vararg_buffer);
  $0 = 0;
  $6 = $0;
  STACKTOP = sp;return ($6|0);
 } else {
  $0 = 1;
  $6 = $0;
  STACKTOP = sp;return ($6|0);
 }
 return (0)|0;
}
function _passIsRightParen() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $2 = (_passGetScriptToken()|0);
 $1 = $2;
 $3 = $1;
 $4 = ($3|0)!=(41);
 if ($4) {
  $5 = HEAP32[8654]|0;
  _compileError($5,6684,$vararg_buffer);
  $0 = 0;
  $6 = $0;
  STACKTOP = sp;return ($6|0);
 } else {
  $0 = 1;
  $6 = $0;
  STACKTOP = sp;return ($6|0);
 }
 return (0)|0;
}
function _passAddName($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(8224|0);
 $6 = sp;
 $2 = $0;
 $3 = $1;
 HEAP32[$6>>2] = 0;
 while(1) {
  $7 = HEAP32[$6>>2]|0;
  $8 = $2;
  $9 = HEAP32[$8>>2]|0;
  $10 = ($7>>>0)<($9>>>0);
  if (!($10)) {
   break;
  }
  $11 = HEAP32[$6>>2]|0;
  $12 = $2;
  $13 = ((($12)) + 4|0);
  $14 = (($13) + ($11<<2)|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = HEAP32[$6>>2]|0;
  $17 = ((($6)) + 4|0);
  $18 = (($17) + ($16<<2)|0);
  HEAP32[$18>>2] = $15;
  $19 = HEAP32[$6>>2]|0;
  $20 = (($19) + 1)|0;
  HEAP32[$6>>2] = $20;
 }
 $21 = HEAP32[8655]|0;
 $22 = HEAP32[$6>>2]|0;
 $23 = (($22) + 1)|0;
 HEAP32[$6>>2] = $23;
 $24 = ((($6)) + 4|0);
 $25 = (($24) + ($22<<2)|0);
 HEAP32[$25>>2] = $21;
 $26 = HEAP32[$6>>2]|0;
 $27 = (($26) - 1)|0;
 $28 = $27<<2;
 $29 = (16 + ($28))|0;
 $30 = (_malloc($29)|0);
 $5 = $30;
 $31 = ($30|0)!=(0|0);
 if (!($31)) {
  _outOfMemory();
 }
 $32 = $5;
 ;HEAP32[$32>>2]=0|0;HEAP32[$32+4>>2]=0|0;HEAP32[$32+8>>2]=0|0;HEAP32[$32+12>>2]=0|0;
 $4 = 0;
 while(1) {
  $33 = $4;
  $34 = HEAP32[$6>>2]|0;
  $35 = ($33>>>0)<($34>>>0);
  if (!($35)) {
   break;
  }
  $36 = $4;
  $37 = ((($6)) + 4|0);
  $38 = (($37) + ($36<<2)|0);
  $39 = HEAP32[$38>>2]|0;
  $40 = $4;
  $41 = $5;
  $42 = ((($41)) + 12|0);
  $43 = (($42) + ($40<<2)|0);
  HEAP32[$43>>2] = $39;
  $44 = $4;
  $45 = (($44) + 1)|0;
  $4 = $45;
 }
 $46 = HEAP32[$6>>2]|0;
 $47 = $5;
 $48 = ((($47)) + 8|0);
 HEAP32[$48>>2] = $46;
 $49 = $3;
 $50 = $5;
 $51 = ((($50)) + 4|0);
 HEAP32[$51>>2] = $49;
 $52 = HEAP32[12758]|0;
 $53 = $5;
 HEAP32[$53>>2] = $52;
 $54 = $5;
 HEAP32[12758] = $54;
 STACKTOP = sp;return 1;
}
function _verifyStringOrDots($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $vararg_buffer = sp;
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = $6;
 $10 = $8;
 $11 = (_wantsString($9,$10)|0);
 $12 = ($11|0)!=(0);
 $13 = $12 ^ 1;
 $14 = $13&1;
 $15 = $7;
 $16 = ($15|0)!=(0);
 $17 = $16 ^ 1;
 $18 = $17&1;
 $19 = ($14|0)==($18|0);
 if ($19) {
  $4 = 1;
  $31 = $4;
  STACKTOP = sp;return ($31|0);
 } else {
  $20 = $5;
  $21 = $7;
  $22 = ($21|0)!=(0);
  $23 = $22 ? 6591 : 6599;
  $24 = $8;
  $25 = (_getPartName($24)|0);
  $26 = HEAP32[4548]|0;
  $27 = ($26|0)!=(0);
  $28 = $27 ? 6604 : 6613;
  $29 = $6;
  $30 = (_findOpcodeName($29)|0);
  HEAP32[$vararg_buffer>>2] = $23;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $25;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr2>>2] = $28;
  $vararg_ptr3 = ((($vararg_buffer)) + 12|0);
  HEAP32[$vararg_ptr3>>2] = $30;
  _compileError($20,6621,$vararg_buffer);
  $4 = 0;
  $31 = $4;
  STACKTOP = sp;return ($31|0);
 }
 return (0)|0;
}
function _passGetAttributes() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $1 = 1;
 HEAP32[12757] = 0;
 while(1) {
  $2 = $1;
  $3 = ($2|0)!=(0);
  if (!($3)) {
   break;
  }
  $4 = HEAP32[8656]|0;
  $5 = ((42828) + ($4<<2)|0);
  $6 = HEAP32[$5>>2]|0;
  do {
   switch ($6|0) {
   case 97:  {
    HEAP32[12757] = -1;
    break;
   }
   case 100:  {
    $7 = HEAP32[12757]|0;
    $8 = $7 | 4;
    HEAP32[12757] = $8;
    break;
   }
   case 68:  {
    $9 = HEAP32[12757]|0;
    $10 = $9 | 256;
    HEAP32[12757] = $10;
    break;
   }
   case 108:  {
    $11 = HEAP32[12757]|0;
    $12 = $11 | 2;
    HEAP32[12757] = $12;
    break;
   }
   case 109:  {
    $13 = HEAP32[12757]|0;
    $14 = $13 | 64;
    HEAP32[12757] = $14;
    break;
   }
   case 112:  {
    $15 = HEAP32[12757]|0;
    $16 = $15 | 8;
    HEAP32[12757] = $16;
    break;
   }
   case 83:  {
    $17 = HEAP32[12757]|0;
    $18 = $17 | 128;
    HEAP32[12757] = $18;
    break;
   }
   case 115:  {
    $19 = HEAP32[12757]|0;
    $20 = $19 | 1;
    HEAP32[12757] = $20;
    break;
   }
   case 85:  {
    $21 = HEAP32[12757]|0;
    $22 = $21 | 16;
    HEAP32[12757] = $22;
    break;
   }
   case 117:  {
    $23 = HEAP32[12757]|0;
    $24 = $23 | 32;
    HEAP32[12757] = $24;
    break;
   }
   case 119:  {
    $25 = HEAP32[12757]|0;
    $26 = $25 | 512;
    HEAP32[12757] = $26;
    break;
   }
   case 120:  {
    $27 = HEAP32[12757]|0;
    $28 = $27 | 1024;
    HEAP32[12757] = $28;
    break;
   }
   case 121:  {
    $29 = HEAP32[12757]|0;
    $30 = $29 | 2048;
    HEAP32[12757] = $30;
    break;
   }
   case 122:  {
    $31 = HEAP32[12757]|0;
    $32 = $31 | 4096;
    HEAP32[12757] = $32;
    break;
   }
   default: {
    $1 = 0;
   }
   }
  } while(0);
  $33 = $1;
  $34 = ($33|0)!=(0);
  if (!($34)) {
   continue;
  }
  $35 = HEAP32[8656]|0;
  $36 = (($35) + 1)|0;
  HEAP32[8656] = $36;
 }
 $37 = HEAP32[12757]|0;
 $38 = ($37|0)!=(0);
 if ($38) {
  $0 = 1;
  $42 = $0;
  STACKTOP = sp;return ($42|0);
 } else {
  $39 = HEAP32[8654]|0;
  _compileError($39,6573,$vararg_buffer);
  $40 = HEAP32[8656]|0;
  $41 = (($40) + -1)|0;
  HEAP32[8656] = $41;
  $0 = 0;
  $42 = $0;
  STACKTOP = sp;return ($42|0);
 }
 return (0)|0;
}
function _passInsertAttributes() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = HEAP32[6604]|0;
 $2 = (($1) + 1)|0;
 HEAP32[6604] = $2;
 $3 = HEAP32[6603]|0;
 $4 = (($3) + ($1<<2)|0);
 HEAP32[$4>>2] = 36;
 $5 = HEAP32[12757]|0;
 $6 = $5 >>> 16;
 $7 = HEAP32[6604]|0;
 $8 = (($7) + 1)|0;
 HEAP32[6604] = $8;
 $9 = HEAP32[6603]|0;
 $10 = (($9) + ($7<<2)|0);
 HEAP32[$10>>2] = $6;
 $11 = HEAP32[12757]|0;
 $12 = $11 & 65535;
 $13 = HEAP32[6604]|0;
 $14 = (($13) + 1)|0;
 HEAP32[6604] = $14;
 $15 = HEAP32[6603]|0;
 $16 = (($15) + ($13<<2)|0);
 HEAP32[$16>>2] = $12;
 $17 = (_passGetRange()|0);
 $18 = ($17|0)!=(0);
 if ($18) {
  $0 = 1;
  $19 = $0;
  STACKTOP = sp;return ($19|0);
 } else {
  $0 = 0;
  $19 = $0;
  STACKTOP = sp;return ($19|0);
 }
 return (0)|0;
}
function _passGetEmphasis() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $1 = 1;
 $2 = HEAP32[8656]|0;
 $3 = (($2) + 1)|0;
 HEAP32[8656] = $3;
 HEAP32[12759] = 0;
 while(1) {
  $4 = $1;
  $5 = ($4|0)!=(0);
  if (!($5)) {
   break;
  }
  $6 = HEAP32[8656]|0;
  $7 = ((42828) + ($6<<2)|0);
  $8 = HEAP32[$7>>2]|0;
  switch ($8|0) {
  case 105:  {
   $9 = HEAP32[12759]|0;
   $10 = $9 | 1;
   HEAP32[12759] = $10;
   break;
  }
  case 98:  {
   $11 = HEAP32[12759]|0;
   $12 = $11 | 4;
   HEAP32[12759] = $12;
   break;
  }
  case 117:  {
   $13 = HEAP32[12759]|0;
   $14 = $13 | 2;
   HEAP32[12759] = $14;
   break;
  }
  case 99:  {
   $15 = HEAP32[12759]|0;
   $16 = $15 | 1024;
   HEAP32[12759] = $16;
   break;
  }
  default: {
   $1 = 0;
  }
  }
  $17 = $1;
  $18 = ($17|0)!=(0);
  if (!($18)) {
   continue;
  }
  $19 = HEAP32[8656]|0;
  $20 = (($19) + 1)|0;
  HEAP32[8656] = $20;
 }
 $21 = HEAP32[12759]|0;
 $22 = ($21|0)!=(0);
 if ($22) {
  $0 = 1;
  $26 = $0;
  STACKTOP = sp;return ($26|0);
 } else {
  $23 = HEAP32[8654]|0;
  _compileError($23,6544,$vararg_buffer);
  $24 = HEAP32[8656]|0;
  $25 = (($24) + -1)|0;
  HEAP32[8656] = $25;
  $0 = 0;
  $26 = $0;
  STACKTOP = sp;return ($26|0);
 }
 return (0)|0;
}
function _passGetName() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 HEAP32[8657] = 0;
 while(1) {
  $1 = HEAP32[8654]|0;
  $2 = HEAP32[8656]|0;
  $3 = ((42828) + ($2<<2)|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = (_definedCharOrDots($1,$4,0)|0);
  $6 = ((($5)) + 12|0);
  $7 = HEAP32[$6>>2]|0;
  $0 = $7;
  $8 = HEAP32[8657]|0;
  $9 = ($8|0)==(0);
  if ($9) {
   $10 = $0;
   $11 = $10 & 2;
   $12 = ($11|0)!=(0);
   if ($12) {
    label = 5;
   } else {
    $13 = HEAP32[8656]|0;
    $14 = (($13) + 1)|0;
    HEAP32[8656] = $14;
   }
  } else {
   label = 5;
  }
  if ((label|0) == 5) {
   label = 0;
   $15 = $0;
   $16 = $15 & 2;
   $17 = ($16|0)!=(0);
   if (!($17)) {
    label = 8;
    break;
   }
   $18 = HEAP32[8656]|0;
   $19 = ((42828) + ($18<<2)|0);
   $20 = HEAP32[$19>>2]|0;
   $21 = HEAP32[8657]|0;
   $22 = (($21) + 1)|0;
   HEAP32[8657] = $22;
   $23 = ((34632) + ($21<<2)|0);
   HEAP32[$23>>2] = $20;
   $24 = HEAP32[8656]|0;
   $25 = (($24) + 1)|0;
   HEAP32[8656] = $25;
  }
  $26 = HEAP32[8656]|0;
  $27 = HEAP32[10706]|0;
  $28 = ($26>>>0)<($27>>>0);
  if (!($28)) {
   label = 8;
   break;
  }
 }
 if ((label|0) == 8) {
  STACKTOP = sp;return 1;
 }
 return (0)|0;
}
function _findRuleName($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $4 = HEAP32[4545]|0;
 $3 = $4;
 while(1) {
  $5 = $3;
  $6 = ($5|0)!=(0|0);
  if (!($6)) {
   label = 7;
   break;
  }
  $7 = $2;
  $8 = HEAP32[$7>>2]|0;
  $9 = $3;
  $10 = ((($9)) + 8|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ($8|0)==($11|0);
  if ($12) {
   $13 = $2;
   $14 = ((($13)) + 4|0);
   $15 = $3;
   $16 = ((($15)) + 12|0);
   $17 = $2;
   $18 = HEAP32[$17>>2]|0;
   $19 = $18<<2;
   $20 = (_memcmp($14,$16,$19)|0);
   $21 = ($20|0)==(0);
   if ($21) {
    label = 5;
    break;
   }
  }
  $25 = $3;
  $26 = HEAP32[$25>>2]|0;
  $3 = $26;
 }
 if ((label|0) == 5) {
  $22 = $3;
  $23 = ((($22)) + 4|0);
  $24 = HEAP32[$23>>2]|0;
  $1 = $24;
  $27 = $1;
  STACKTOP = sp;return ($27|0);
 }
 else if ((label|0) == 7) {
  $1 = 0;
  $27 = $1;
  STACKTOP = sp;return ($27|0);
 }
 return (0)|0;
}
function _passGetRange() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond3 = 0, $vararg_buffer = 0, $vararg_buffer4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer4 = sp + 8|0;
 $vararg_buffer = sp;
 $2 = (_passGetScriptToken()|0);
 $1 = $2;
 $3 = $1;
 $4 = ($3|0)==(44);
 $5 = $1;
 $6 = ($5|0)==(41);
 $or$cond = $4 | $6;
 if (!($or$cond)) {
  $7 = HEAP32[8654]|0;
  _compileError($7,6198,$vararg_buffer);
  $0 = 0;
  $47 = $0;
  STACKTOP = sp;return ($47|0);
 }
 $8 = $1;
 $9 = ($8|0)==(41);
 if ($9) {
  $10 = HEAP32[6604]|0;
  $11 = (($10) + 1)|0;
  HEAP32[6604] = $11;
  $12 = HEAP32[6603]|0;
  $13 = (($12) + ($10<<2)|0);
  HEAP32[$13>>2] = 1;
  $14 = HEAP32[6604]|0;
  $15 = (($14) + 1)|0;
  HEAP32[6604] = $15;
  $16 = HEAP32[6603]|0;
  $17 = (($16) + ($14<<2)|0);
  HEAP32[$17>>2] = 1;
  $0 = 1;
  $47 = $0;
  STACKTOP = sp;return ($47|0);
 }
 $18 = (_passIsNumber()|0);
 $19 = ($18|0)!=(0);
 if (!($19)) {
  $0 = 0;
  $47 = $0;
  STACKTOP = sp;return ($47|0);
 }
 $20 = HEAP32[12755]|0;
 $21 = HEAP32[6604]|0;
 $22 = (($21) + 1)|0;
 HEAP32[6604] = $22;
 $23 = HEAP32[6603]|0;
 $24 = (($23) + ($21<<2)|0);
 HEAP32[$24>>2] = $20;
 $25 = (_passGetScriptToken()|0);
 $1 = $25;
 $26 = $1;
 $27 = ($26|0)==(44);
 $28 = $1;
 $29 = ($28|0)==(41);
 $or$cond3 = $27 | $29;
 if (!($or$cond3)) {
  $30 = HEAP32[8654]|0;
  _compileError($30,6198,$vararg_buffer4);
  $0 = 0;
  $47 = $0;
  STACKTOP = sp;return ($47|0);
 }
 $31 = $1;
 $32 = ($31|0)==(41);
 if ($32) {
  $33 = HEAP32[12755]|0;
  $34 = HEAP32[6604]|0;
  $35 = (($34) + 1)|0;
  HEAP32[6604] = $35;
  $36 = HEAP32[6603]|0;
  $37 = (($36) + ($34<<2)|0);
  HEAP32[$37>>2] = $33;
  $0 = 1;
  $47 = $0;
  STACKTOP = sp;return ($47|0);
 }
 $38 = (_passIsNumber()|0);
 $39 = ($38|0)!=(0);
 if (!($39)) {
  $0 = 0;
  $47 = $0;
  STACKTOP = sp;return ($47|0);
 }
 $40 = HEAP32[12755]|0;
 $41 = HEAP32[6604]|0;
 $42 = (($41) + 1)|0;
 HEAP32[6604] = $42;
 $43 = HEAP32[6603]|0;
 $44 = (($43) + ($41<<2)|0);
 HEAP32[$44>>2] = $40;
 $45 = (_passIsRightParen()|0);
 $46 = ($45|0)!=(0);
 if ($46) {
  $0 = 1;
  $47 = $0;
  STACKTOP = sp;return ($47|0);
 } else {
  $0 = 0;
  $47 = $0;
  STACKTOP = sp;return ($47|0);
 }
 return (0)|0;
}
function _passFindName($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(8224|0);
 $vararg_buffer = sp;
 $4 = sp + 4|0;
 $2 = $0;
 $5 = HEAP32[12758]|0;
 $3 = $5;
 HEAP32[$4>>2] = 0;
 while(1) {
  $6 = HEAP32[$4>>2]|0;
  $7 = $2;
  $8 = HEAP32[$7>>2]|0;
  $9 = ($6>>>0)<($8>>>0);
  if (!($9)) {
   break;
  }
  $10 = HEAP32[$4>>2]|0;
  $11 = $2;
  $12 = ((($11)) + 4|0);
  $13 = (($12) + ($10<<2)|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = HEAP32[$4>>2]|0;
  $16 = ((($4)) + 4|0);
  $17 = (($16) + ($15<<2)|0);
  HEAP32[$17>>2] = $14;
  $18 = HEAP32[$4>>2]|0;
  $19 = (($18) + 1)|0;
  HEAP32[$4>>2] = $19;
 }
 $20 = HEAP32[8655]|0;
 $21 = HEAP32[$4>>2]|0;
 $22 = (($21) + 1)|0;
 HEAP32[$4>>2] = $22;
 $23 = ((($4)) + 4|0);
 $24 = (($23) + ($21<<2)|0);
 HEAP32[$24>>2] = $20;
 while(1) {
  $25 = $3;
  $26 = ($25|0)!=(0|0);
  if (!($26)) {
   label = 10;
   break;
  }
  $27 = HEAP32[$4>>2]|0;
  $28 = $3;
  $29 = ((($28)) + 8|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = ($27|0)==($30|0);
  if ($31) {
   $32 = ((($4)) + 4|0);
   $33 = $3;
   $34 = ((($33)) + 12|0);
   $35 = $2;
   $36 = HEAP32[$35>>2]|0;
   $37 = $36<<2;
   $38 = (_memcmp($32,$34,$37)|0);
   $39 = ($38|0)==(0);
   if ($39) {
    label = 8;
    break;
   }
  }
  $43 = $3;
  $44 = HEAP32[$43>>2]|0;
  $3 = $44;
 }
 if ((label|0) == 8) {
  $40 = $3;
  $41 = ((($40)) + 4|0);
  $42 = HEAP32[$41>>2]|0;
  $1 = $42;
  $46 = $1;
  STACKTOP = sp;return ($46|0);
 }
 else if ((label|0) == 10) {
  $45 = HEAP32[8654]|0;
  _compileError($45,6529,$vararg_buffer);
  $1 = 0;
  $46 = $1;
  STACKTOP = sp;return ($46|0);
 }
 return (0)|0;
}
function _passGetNumber() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 HEAP32[12755] = 0;
 while(1) {
  $0 = HEAP32[8656]|0;
  $1 = HEAP32[10706]|0;
  $2 = ($0>>>0)<($1>>>0);
  if (!($2)) {
   label = 6;
   break;
  }
  $3 = HEAP32[8656]|0;
  $4 = ((42828) + ($3<<2)|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = ($5>>>0)>=(48);
  if (!($6)) {
   label = 6;
   break;
  }
  $7 = HEAP32[8656]|0;
  $8 = ((42828) + ($7<<2)|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = ($9>>>0)<=(57);
  if (!($10)) {
   label = 6;
   break;
  }
  $11 = HEAP32[12755]|0;
  $12 = ($11*10)|0;
  $13 = HEAP32[8656]|0;
  $14 = (($13) + 1)|0;
  HEAP32[8656] = $14;
  $15 = ((42828) + ($13<<2)|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = (($16) - 48)|0;
  $18 = (($12) + ($17))|0;
  HEAP32[12755] = $18;
 }
 if ((label|0) == 6) {
  return 1;
 }
 return (0)|0;
}
function _passGetString() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 HEAP32[8657] = 0;
 while(1) {
  $1 = HEAP32[8656]|0;
  $2 = HEAP32[10706]|0;
  $3 = ($1>>>0)>=($2>>>0);
  if ($3) {
   label = 4;
   break;
  }
  $4 = HEAP32[8656]|0;
  $5 = ((42828) + ($4<<2)|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = ($6|0)!=(0);
  if (!($7)) {
   label = 4;
   break;
  }
  $9 = HEAP32[8656]|0;
  $10 = ((42828) + ($9<<2)|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ($11|0)==(34);
  if ($12) {
   label = 10;
   break;
  }
  $13 = HEAP32[8656]|0;
  $14 = ((42828) + ($13<<2)|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = ($15|0)==(28);
  if ($16) {
   $17 = HEAP32[8657]|0;
   $18 = (($17) + 1)|0;
   HEAP32[8657] = $18;
   $19 = ((34632) + ($17<<2)|0);
   HEAP32[$19>>2] = 34;
  } else {
   $20 = HEAP32[8656]|0;
   $21 = ((42828) + ($20<<2)|0);
   $22 = HEAP32[$21>>2]|0;
   $23 = HEAP32[8657]|0;
   $24 = (($23) + 1)|0;
   HEAP32[8657] = $24;
   $25 = ((34632) + ($23<<2)|0);
   HEAP32[$25>>2] = $22;
  }
  $26 = HEAP32[8656]|0;
  $27 = (($26) + 1)|0;
  HEAP32[8656] = $27;
 }
 if ((label|0) == 4) {
  $8 = HEAP32[8654]|0;
  _compileError($8,6509,$vararg_buffer);
  $0 = 0;
  $32 = $0;
  STACKTOP = sp;return ($32|0);
 }
 else if ((label|0) == 10) {
  $28 = HEAP32[8657]|0;
  $29 = ((34632) + ($28<<2)|0);
  HEAP32[$29>>2] = 0;
  $30 = HEAP32[8656]|0;
  $31 = (($30) + 1)|0;
  HEAP32[8656] = $31;
  $0 = 1;
  $32 = $0;
  STACKTOP = sp;return ($32|0);
 }
 return (0)|0;
}
function _passGetDots() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8208|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(8208|0);
 $1 = sp;
 HEAP32[$1>>2] = 0;
 L1: while(1) {
  $2 = HEAP32[8656]|0;
  $3 = HEAP32[10706]|0;
  $4 = ($2>>>0)<($3>>>0);
  if (!($4)) {
   break;
  }
  $5 = HEAP32[8656]|0;
  $6 = ((42828) + ($5<<2)|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = ($7|0)==(45);
  do {
   if (!($8)) {
    $9 = HEAP32[8656]|0;
    $10 = ((42828) + ($9<<2)|0);
    $11 = HEAP32[$10>>2]|0;
    $12 = ($11>>>0)>=(48);
    if ($12) {
     $13 = HEAP32[8656]|0;
     $14 = ((42828) + ($13<<2)|0);
     $15 = HEAP32[$14>>2]|0;
     $16 = ($15>>>0)<=(57);
     if ($16) {
      break;
     }
    }
    $17 = HEAP32[8656]|0;
    $18 = ((42828) + ($17<<2)|0);
    $19 = HEAP32[$18>>2]|0;
    $20 = $19 | 32;
    $21 = ($20>>>0)>=(97);
    if (!($21)) {
     break L1;
    }
    $22 = HEAP32[8656]|0;
    $23 = ((42828) + ($22<<2)|0);
    $24 = HEAP32[$23>>2]|0;
    $25 = $24 | 32;
    $26 = ($25>>>0)<=(102);
    if (!($26)) {
     break L1;
    }
   }
  } while(0);
  $27 = HEAP32[8656]|0;
  $28 = (($27) + 1)|0;
  HEAP32[8656] = $28;
  $29 = ((42828) + ($27<<2)|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = HEAP32[$1>>2]|0;
  $32 = (($31) + 1)|0;
  HEAP32[$1>>2] = $32;
  $33 = ((($1)) + 4|0);
  $34 = (($33) + ($31<<2)|0);
  HEAP32[$34>>2] = $30;
 }
 $35 = HEAP32[8654]|0;
 $36 = (_parseDots($35,34628,$1)|0);
 $37 = ($36|0)!=(0);
 if ($37) {
  $0 = 1;
  $38 = $0;
  STACKTOP = sp;return ($38|0);
 } else {
  $0 = 0;
  $38 = $0;
  STACKTOP = sp;return ($38|0);
 }
 return (0)|0;
}
function _passGetVariableNumber($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $2 = $0;
 $3 = (_passGetNumber()|0);
 $4 = ($3|0)!=(0);
 do {
  if ($4) {
   $5 = HEAP32[12755]|0;
   $6 = ($5>>>0)>=(0);
   $7 = HEAP32[12755]|0;
   $8 = ($7>>>0)<(50);
   $or$cond = $6 & $8;
   if ($or$cond) {
    $1 = 1;
    break;
   } else {
    $9 = $2;
    _compileError($9,6480,$vararg_buffer);
    $1 = 0;
    break;
   }
  } else {
   $1 = 0;
  }
 } while(0);
 $10 = $1;
 STACKTOP = sp;return ($10|0);
}
function _passFindCharacters($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer2 = 0;
 var $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $7 = $0;
 $8 = $1;
 $9 = $2;
 $10 = $3;
 $11 = $4;
 $12 = $5;
 $13 = 0;
 $17 = $8;
 $18 = ($17|0)!=(0);
 $19 = $18 ^ 1;
 $20 = $19&1;
 $14 = $20;
 $21 = $11;
 HEAP32[$21>>2] = 0;
 $22 = $12;
 HEAP32[$22>>2] = 0;
 L1: while(1) {
  $23 = $13;
  $24 = $10;
  $25 = ($23|0)<($24|0);
  if (!($25)) {
   label = 19;
   break;
  }
  $26 = $13;
  $27 = $9;
  $28 = (($27) + ($26<<2)|0);
  $29 = HEAP32[$28>>2]|0;
  $15 = $29;
  $30 = $15;
  switch ($30|0) {
  case 64: case 34:  {
   $31 = $13;
   $32 = (($31) + 1)|0;
   $33 = $9;
   $34 = (($33) + ($32<<2)|0);
   $35 = HEAP32[$34>>2]|0;
   $16 = $35;
   $36 = $13;
   $37 = (($36) + 2)|0;
   $13 = $37;
   $38 = $14;
   $39 = ($38|0)!=(0);
   if ($39) {
    label = 5;
    break L1;
   }
   $46 = $16;
   $47 = $13;
   $48 = (($47) + ($46))|0;
   $13 = $48;
   continue L1;
   break;
  }
  case 36:  {
   $49 = $13;
   $50 = (($49) + 5)|0;
   $13 = $50;
   break;
  }
  case 37:  {
   $51 = $8;
   $52 = ($51|0)!=(0);
   $53 = $52 ^ 1;
   $54 = $53&1;
   $55 = $14;
   $56 = ($55|0)!=(0);
   $57 = $56 ^ 1;
   $58 = $57&1;
   $59 = ($54|0)!=($58|0);
   if ($59) {
    $60 = $13;
    $61 = (($60) + 2)|0;
    $13 = $61;
    label = 10;
   } else {
    label = 10;
   }
   break;
  }
  case 59: case 125: case 123:  {
   label = 10;
   break;
  }
  case 131: case 130: case 62: case 60: case 61:  {
   $66 = $13;
   $67 = (($66) + 3)|0;
   $13 = $67;
   continue L1;
   break;
  }
  case 95:  {
   $68 = $13;
   $69 = (($68) + 2)|0;
   $13 = $69;
   continue L1;
   break;
  }
  case 45: case 43: case 63: case 42: case 126: case 96: case 93: case 91: case 33:  {
   $70 = $13;
   $71 = (($70) + 1)|0;
   $13 = $71;
   continue L1;
   break;
  }
  case 32:  {
   $72 = $14;
   $73 = ($72|0)!=(0);
   if ($73) {
    label = 19;
    break L1;
   }
   $14 = 1;
   $74 = $13;
   $75 = (($74) + 1)|0;
   $13 = $75;
   continue L1;
   break;
  }
  default: {
   label = 18;
   break L1;
  }
  }
  if ((label|0) == 10) {
   label = 0;
   $62 = $13;
   $63 = (($62) + 3)|0;
   $13 = $63;
  }
  $64 = $14;
  $65 = ($64|0)!=(0);
  if ($65) {
   label = 12;
   break;
  }
 }
 if ((label|0) == 5) {
  $40 = $13;
  $41 = $9;
  $42 = (($41) + ($40<<2)|0);
  $43 = $11;
  HEAP32[$43>>2] = $42;
  $44 = $16;
  $45 = $12;
  HEAP32[$45>>2] = $44;
  $6 = 1;
  $83 = $6;
  STACKTOP = sp;return ($83|0);
 }
 else if ((label|0) == 12) {
  $6 = 1;
  $83 = $6;
  STACKTOP = sp;return ($83|0);
 }
 else if ((label|0) == 18) {
  $76 = $7;
  $77 = $8;
  $78 = (_getPartName($77)|0);
  $79 = $15;
  HEAP32[$vararg_buffer>>2] = $78;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $79;
  _compileError($76,6371,$vararg_buffer);
  $6 = 0;
  $83 = $6;
  STACKTOP = sp;return ($83|0);
 }
 else if ((label|0) == 19) {
  $80 = $7;
  $81 = $8;
  $82 = (_getPartName($81)|0);
  HEAP32[$vararg_buffer2>>2] = $82;
  _compileError($80,6403,$vararg_buffer2);
  $6 = 0;
  $83 = $6;
  STACKTOP = sp;return ($83|0);
 }
 return (0)|0;
}
function _getPartName($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ($2|0)!=(0);
 $4 = $3 ? 6468 : 6475;
 STACKTOP = sp;return ($4|0);
}
function _wantsString($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $3;
 $6 = ($5|0)==(71);
 do {
  if ($6) {
   $2 = 1;
  } else {
   $7 = $3;
   $8 = ($7|0)!=(70);
   if ($8) {
    $2 = 0;
    break;
   } else {
    $9 = HEAP32[4548]|0;
    $10 = ($9|0)!=(0);
    $11 = $10 ^ 1;
    $12 = $11&1;
    $13 = $4;
    $14 = ($13|0)!=(0);
    $15 = $14 ^ 1;
    $16 = $15&1;
    $17 = ($12|0)==($16|0);
    $18 = $17&1;
    $2 = $18;
    break;
   }
  }
 } while(0);
 $19 = $2;
 STACKTOP = sp;return ($19|0);
}
function _passIsKeyword($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = $0;
 $6 = $2;
 $7 = (_strlen($6)|0);
 $4 = $7;
 $8 = HEAP32[8656]|0;
 $9 = $4;
 $10 = (($8) + ($9))|0;
 $11 = (($10) + 1)|0;
 $12 = ((42828) + ($11<<2)|0);
 $13 = HEAP32[$12>>2]|0;
 $5 = $13;
 $14 = $5;
 $15 = $14 | 32;
 $16 = ($15|0)>=(97);
 if ($16) {
  $17 = $5;
  $18 = $17 | 32;
  $19 = ($18|0)<=(122);
  if (!($19)) {
   label = 3;
  }
 } else {
  label = 3;
 }
 if ((label|0) == 3) {
  $20 = $5;
  $21 = ($20|0)>=(48);
  $22 = $5;
  $23 = ($22|0)<=(57);
  $or$cond = $21 & $23;
  if (!($or$cond)) {
   $3 = 0;
   while(1) {
    $24 = $3;
    $25 = $4;
    $26 = ($24|0)<($25|0);
    if (!($26)) {
     break;
    }
    $27 = HEAP32[8656]|0;
    $28 = $3;
    $29 = (($27) + ($28))|0;
    $30 = (($29) + 1)|0;
    $31 = ((42828) + ($30<<2)|0);
    $32 = HEAP32[$31>>2]|0;
    $33 = $3;
    $34 = $2;
    $35 = (($34) + ($33)|0);
    $36 = HEAP8[$35>>0]|0;
    $37 = $36 << 24 >> 24;
    $38 = ($32|0)==($37|0);
    if (!($38)) {
     break;
    }
    $39 = $3;
    $40 = (($39) + 1)|0;
    $3 = $40;
   }
   $41 = $3;
   $42 = $4;
   $43 = ($41|0)==($42|0);
   if ($43) {
    $44 = $4;
    $45 = (($44) + 1)|0;
    $46 = HEAP32[8656]|0;
    $47 = (($46) + ($45))|0;
    HEAP32[8656] = $47;
    $1 = 1;
    $48 = $1;
    STACKTOP = sp;return ($48|0);
   } else {
    $1 = 0;
    $48 = $1;
    STACKTOP = sp;return ($48|0);
   }
  }
 }
 $1 = 0;
 $48 = $1;
 STACKTOP = sp;return ($48|0);
}
function _getNumber($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = 0;
 $5 = $3;
 HEAP32[$5>>2] = 0;
 while(1) {
  $6 = $4;
  $7 = $2;
  $8 = (($7) + ($6<<2)|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = ($9>>>0)>=(48);
  if (!($10)) {
   label = 5;
   break;
  }
  $11 = $4;
  $12 = $2;
  $13 = (($12) + ($11<<2)|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = ($14>>>0)<=(57);
  if (!($15)) {
   label = 5;
   break;
  }
  $16 = $3;
  $17 = HEAP32[$16>>2]|0;
  $18 = ($17*10)|0;
  $19 = $4;
  $20 = (($19) + 1)|0;
  $4 = $20;
  $21 = $2;
  $22 = (($21) + ($19<<2)|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = (($23) - 48)|0;
  $25 = (($18) + ($24))|0;
  $26 = $3;
  HEAP32[$26>>2] = $25;
 }
 if ((label|0) == 5) {
  $27 = $4;
  STACKTOP = sp;return ($27|0);
 }
 return (0)|0;
}
function _charactersDefined($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $2 = $0;
 $3 = 1;
 $5 = HEAP32[4551]|0;
 $6 = ((($5)) + 20|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7>>>0)>=(57);
 if ($8) {
  $9 = HEAP32[4551]|0;
  $10 = ((($9)) + 20|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ($11>>>0)<=(67);
  if (!($12)) {
   label = 3;
  }
 } else {
  label = 3;
 }
 do {
  if ((label|0) == 3) {
   $13 = HEAP32[4551]|0;
   $14 = ((($13)) + 20|0);
   $15 = HEAP32[$14>>2]|0;
   $16 = ($15|0)==(56);
   if (!($16)) {
    $17 = HEAP32[4551]|0;
    $18 = ((($17)) + 20|0);
    $19 = HEAP32[$18>>2]|0;
    $20 = ($19|0)==(69);
    if (!($20)) {
     $21 = HEAP32[4551]|0;
     $22 = ((($21)) + 20|0);
     $23 = HEAP32[$22>>2]|0;
     $24 = ($23|0)==(44);
     if (!($24)) {
      $25 = HEAP32[4551]|0;
      $26 = ((($25)) + 20|0);
      $27 = HEAP32[$26>>2]|0;
      $28 = ($27|0)==(75);
      if (!($28)) {
       $29 = HEAP32[4551]|0;
       $30 = ((($29)) + 20|0);
       $31 = HEAP32[$30>>2]|0;
       $32 = ($31>>>0)>=(70);
       if ($32) {
        $33 = HEAP32[4551]|0;
        $34 = ((($33)) + 20|0);
        $35 = HEAP32[$34>>2]|0;
        $36 = ($35>>>0)<=(74);
        if ($36) {
         $37 = HEAP32[4551]|0;
         $38 = ((($37)) + 20|0);
         $39 = HEAP32[$38>>2]|0;
         $40 = ($39|0)!=(71);
         if ($40) {
          break;
         }
        }
       }
       $41 = HEAP32[4551]|0;
       $42 = ((($41)) + 20|0);
       $43 = HEAP32[$42>>2]|0;
       $44 = ($43|0)==(108);
       if (!($44)) {
        $4 = 0;
        while(1) {
         $45 = $4;
         $46 = HEAP32[4551]|0;
         $47 = ((($46)) + 24|0);
         $48 = HEAP16[$47>>1]|0;
         $49 = $48 << 16 >> 16;
         $50 = ($45|0)<($49|0);
         if (!($50)) {
          break;
         }
         $51 = $4;
         $52 = HEAP32[4551]|0;
         $53 = ((($52)) + 28|0);
         $54 = (($53) + ($51<<2)|0);
         $55 = HEAP32[$54>>2]|0;
         $56 = (_compile_findCharOrDots($55,0)|0);
         $57 = ($56|0)!=(0|0);
         if (!($57)) {
          $58 = $2;
          $59 = $4;
          $60 = HEAP32[4551]|0;
          $61 = ((($60)) + 28|0);
          $62 = (($61) + ($59<<2)|0);
          $63 = (_showString($62,1)|0);
          HEAP32[$vararg_buffer>>2] = $63;
          _compileError($58,6967,$vararg_buffer);
          $3 = 0;
         }
         $64 = $4;
         $65 = (($64) + 1)|0;
         $4 = $65;
        }
        $66 = HEAP32[4551]|0;
        $67 = ((($66)) + 20|0);
        $68 = HEAP32[$67>>2]|0;
        $69 = ($68|0)==(71);
        L21: do {
         if (!($69)) {
          $70 = HEAP32[4551]|0;
          $71 = ((($70)) + 20|0);
          $72 = HEAP32[$71>>2]|0;
          $73 = ($72|0)==(54);
          if (!($73)) {
           $74 = HEAP32[4551]|0;
           $75 = ((($74)) + 20|0);
           $76 = HEAP32[$75>>2]|0;
           $77 = ($76|0)==(55);
           if (!($77)) {
            $78 = HEAP32[4551]|0;
            $79 = ((($78)) + 20|0);
            $80 = HEAP32[$79>>2]|0;
            $81 = ($80>>>0)>=(115);
            if ($81) {
             $82 = HEAP32[4551]|0;
             $83 = ((($82)) + 20|0);
             $84 = HEAP32[$83>>2]|0;
             $85 = ($84>>>0)<=(202);
             if ($85) {
              break;
             }
            }
            $86 = HEAP32[4551]|0;
            $87 = ((($86)) + 24|0);
            $88 = HEAP16[$87>>1]|0;
            $89 = $88 << 16 >> 16;
            $4 = $89;
            while(1) {
             $90 = $4;
             $91 = HEAP32[4551]|0;
             $92 = ((($91)) + 24|0);
             $93 = HEAP16[$92>>1]|0;
             $94 = $93 << 16 >> 16;
             $95 = HEAP32[4551]|0;
             $96 = ((($95)) + 26|0);
             $97 = HEAP16[$96>>1]|0;
             $98 = $97 << 16 >> 16;
             $99 = (($94) + ($98))|0;
             $100 = ($90|0)<($99|0);
             if (!($100)) {
              break L21;
             }
             $101 = $4;
             $102 = HEAP32[4551]|0;
             $103 = ((($102)) + 28|0);
             $104 = (($103) + ($101<<2)|0);
             $105 = HEAP32[$104>>2]|0;
             $106 = (_compile_findCharOrDots($105,1)|0);
             $107 = ($106|0)!=(0|0);
             if (!($107)) {
              $108 = $2;
              $109 = $4;
              $110 = HEAP32[4551]|0;
              $111 = ((($110)) + 28|0);
              $112 = (($111) + ($109<<2)|0);
              $113 = HEAP32[$112>>2]|0;
              $114 = (_unknownDots($113)|0);
              HEAP32[$vararg_buffer1>>2] = $114;
              _compileError($108,6995,$vararg_buffer1);
              $3 = 0;
             }
             $115 = $4;
             $116 = (($115) + 1)|0;
             $4 = $116;
            }
           }
          }
         }
        } while(0);
        $117 = $3;
        $1 = $117;
        $118 = $1;
        STACKTOP = sp;return ($118|0);
       }
      }
     }
    }
   }
  }
 } while(0);
 $1 = 1;
 $118 = $1;
 STACKTOP = sp;return ($118|0);
}
function _addForwardPassRule() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = HEAP32[4551]|0;
 $4 = ((($3)) + 20|0);
 $5 = HEAP32[$4>>2]|0;
 switch ($5|0) {
 case 71:  {
  $6 = HEAP32[2463]|0;
  $7 = ((($6)) + 22308|0);
  $1 = $7;
  break;
 }
 case 70:  {
  $8 = HEAP32[2463]|0;
  $9 = ((($8)) + 22308|0);
  $10 = ((($9)) + 4|0);
  $1 = $10;
  break;
 }
 case 72:  {
  $11 = HEAP32[2463]|0;
  $12 = ((($11)) + 22308|0);
  $13 = ((($12)) + 8|0);
  $1 = $13;
  break;
 }
 case 73:  {
  $14 = HEAP32[2463]|0;
  $15 = ((($14)) + 22308|0);
  $16 = ((($15)) + 12|0);
  $1 = $16;
  break;
 }
 case 74:  {
  $17 = HEAP32[2463]|0;
  $18 = ((($17)) + 22308|0);
  $19 = ((($18)) + 16|0);
  $1 = $19;
  break;
 }
 default: {
  $0 = 0;
  $43 = $0;
  STACKTOP = sp;return ($43|0);
 }
 }
 while(1) {
  $20 = $1;
  $21 = HEAP32[$20>>2]|0;
  $22 = ($21|0)!=(0);
  if (!($22)) {
   break;
  }
  $23 = $1;
  $24 = HEAP32[$23>>2]|0;
  $25 = HEAP32[2463]|0;
  $26 = ((($25)) + 31332|0);
  $27 = (($26) + ($24<<2)|0);
  $2 = $27;
  $28 = HEAP32[4551]|0;
  $29 = ((($28)) + 24|0);
  $30 = HEAP16[$29>>1]|0;
  $31 = $30 << 16 >> 16;
  $32 = $2;
  $33 = ((($32)) + 24|0);
  $34 = HEAP16[$33>>1]|0;
  $35 = $34 << 16 >> 16;
  $36 = ($31|0)>($35|0);
  if ($36) {
   break;
  }
  $37 = $2;
  $1 = $37;
 }
 $38 = $1;
 $39 = HEAP32[$38>>2]|0;
 $40 = HEAP32[4551]|0;
 HEAP32[$40>>2] = $39;
 $41 = HEAP32[4550]|0;
 $42 = $1;
 HEAP32[$42>>2] = $41;
 $0 = 1;
 $43 = $0;
 STACKTOP = sp;return ($43|0);
}
function _addBackwardPassRule() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = HEAP32[4551]|0;
 $4 = ((($3)) + 20|0);
 $5 = HEAP32[$4>>2]|0;
 switch ($5|0) {
 case 71:  {
  $6 = HEAP32[2463]|0;
  $7 = ((($6)) + 22328|0);
  $1 = $7;
  break;
 }
 case 70:  {
  $8 = HEAP32[2463]|0;
  $9 = ((($8)) + 22328|0);
  $10 = ((($9)) + 4|0);
  $1 = $10;
  break;
 }
 case 72:  {
  $11 = HEAP32[2463]|0;
  $12 = ((($11)) + 22328|0);
  $13 = ((($12)) + 8|0);
  $1 = $13;
  break;
 }
 case 73:  {
  $14 = HEAP32[2463]|0;
  $15 = ((($14)) + 22328|0);
  $16 = ((($15)) + 12|0);
  $1 = $16;
  break;
 }
 case 74:  {
  $17 = HEAP32[2463]|0;
  $18 = ((($17)) + 22328|0);
  $19 = ((($18)) + 16|0);
  $1 = $19;
  break;
 }
 default: {
  $0 = 0;
  $45 = $0;
  STACKTOP = sp;return ($45|0);
 }
 }
 while(1) {
  $20 = $1;
  $21 = HEAP32[$20>>2]|0;
  $22 = ($21|0)!=(0);
  if (!($22)) {
   break;
  }
  $23 = $1;
  $24 = HEAP32[$23>>2]|0;
  $25 = HEAP32[2463]|0;
  $26 = ((($25)) + 31332|0);
  $27 = (($26) + ($24<<2)|0);
  $2 = $27;
  $28 = HEAP32[4551]|0;
  $29 = ((($28)) + 24|0);
  $30 = HEAP16[$29>>1]|0;
  $31 = $30 << 16 >> 16;
  $32 = $2;
  $33 = ((($32)) + 24|0);
  $34 = HEAP16[$33>>1]|0;
  $35 = $34 << 16 >> 16;
  $36 = ($31|0)>($35|0);
  if ($36) {
   break;
  }
  $37 = $2;
  $38 = ((($37)) + 4|0);
  $1 = $38;
 }
 $39 = $1;
 $40 = HEAP32[$39>>2]|0;
 $41 = HEAP32[4551]|0;
 $42 = ((($41)) + 4|0);
 HEAP32[$42>>2] = $40;
 $43 = HEAP32[4550]|0;
 $44 = $1;
 HEAP32[$44>>2] = $43;
 $0 = 1;
 $45 = $0;
 STACKTOP = sp;return ($45|0);
}
function _addForwardRuleWithSingleChar($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $1 = $0;
 $5 = 0;
 $6 = HEAP32[4551]|0;
 $7 = ((($6)) + 20|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)==(45);
 if ($9) {
  STACKTOP = sp;return;
 }
 $10 = HEAP32[4551]|0;
 $11 = ((($10)) + 20|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($12|0)==(46);
 if ($13) {
  STACKTOP = sp;return;
 }
 $14 = HEAP32[4551]|0;
 $15 = ((($14)) + 20|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = ($16>>>0)>=(72);
 if ($17) {
  $18 = HEAP32[4551]|0;
  $19 = ((($18)) + 20|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = ($20>>>0)<=(74);
  if ($21) {
   $5 = 1;
  }
 }
 $22 = $1;
 $23 = HEAP32[4551]|0;
 $24 = ((($23)) + 28|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = $5;
 $27 = (_definedCharOrDots($22,$25,$26)|0);
 $4 = $27;
 $28 = $5;
 $29 = ($28|0)!=(1);
 do {
  if ($29) {
   $30 = $4;
   $31 = ((($30)) + 12|0);
   $32 = HEAP32[$31>>2]|0;
   $33 = $32 & 2;
   $34 = ($33|0)!=(0);
   if ($34) {
    $35 = HEAP32[4551]|0;
    $36 = ((($35)) + 20|0);
    $37 = HEAP32[$36>>2]|0;
    $38 = ($37|0)==(87);
    if (!($38)) {
     $39 = HEAP32[4551]|0;
     $40 = ((($39)) + 20|0);
     $41 = HEAP32[$40>>2]|0;
     $42 = ($41|0)==(86);
     if (!($42)) {
      break;
     }
    }
    $43 = HEAP32[2463]|0;
    $44 = ((($43)) + 2596|0);
    $45 = HEAP32[$44>>2]|0;
    $46 = ($45|0)<(128);
    if ($46) {
     $47 = HEAP32[4551]|0;
     $48 = ((($47)) + 28|0);
     $49 = HEAP32[$48>>2]|0;
     $50 = HEAP32[2463]|0;
     $51 = ((($50)) + 2596|0);
     $52 = HEAP32[$51>>2]|0;
     $53 = (($52) + 1)|0;
     HEAP32[$51>>2] = $53;
     $54 = HEAP32[2463]|0;
     $55 = ((($54)) + 2084|0);
     $56 = (($55) + ($52<<2)|0);
     HEAP32[$56>>2] = $49;
    }
   }
  }
 } while(0);
 $57 = HEAP32[4551]|0;
 $58 = ((($57)) + 20|0);
 $59 = HEAP32[$58>>2]|0;
 $60 = ($59>>>0)>=(57);
 if ($60) {
  $61 = HEAP32[4551]|0;
  $62 = ((($61)) + 20|0);
  $63 = HEAP32[$62>>2]|0;
  $64 = ($63>>>0)<(66);
  if ($64) {
   $65 = HEAP32[4550]|0;
   $66 = $4;
   $67 = ((($66)) + 4|0);
   HEAP32[$67>>2] = $65;
  }
 }
 $68 = $4;
 $69 = ((($68)) + 8|0);
 $3 = $69;
 while(1) {
  $70 = $3;
  $71 = HEAP32[$70>>2]|0;
  $72 = ($71|0)!=(0);
  if (!($72)) {
   break;
  }
  $73 = $3;
  $74 = HEAP32[$73>>2]|0;
  $75 = HEAP32[2463]|0;
  $76 = ((($75)) + 31332|0);
  $77 = (($76) + ($74<<2)|0);
  $2 = $77;
  $78 = $2;
  $79 = ((($78)) + 24|0);
  $80 = HEAP16[$79>>1]|0;
  $81 = $80 << 16 >> 16;
  $82 = ($81|0)==(0);
  if ($82) {
   break;
  }
  $83 = $2;
  $84 = ((($83)) + 20|0);
  $85 = HEAP32[$84>>2]|0;
  $86 = ($85>>>0)>=(57);
  if ($86) {
   $87 = $2;
   $88 = ((($87)) + 20|0);
   $89 = HEAP32[$88>>2]|0;
   $90 = ($89>>>0)<(66);
   if ($90) {
    $91 = HEAP32[4551]|0;
    $92 = ((($91)) + 20|0);
    $93 = HEAP32[$92>>2]|0;
    $94 = ($93>>>0)>=(57);
    if (!($94)) {
     break;
    }
    $95 = HEAP32[4551]|0;
    $96 = ((($95)) + 20|0);
    $97 = HEAP32[$96>>2]|0;
    $98 = ($97>>>0)<(66);
    if (!($98)) {
     break;
    }
   }
  }
  $99 = $2;
  $3 = $99;
 }
 $100 = $3;
 $101 = HEAP32[$100>>2]|0;
 $102 = HEAP32[4551]|0;
 HEAP32[$102>>2] = $101;
 $103 = HEAP32[4550]|0;
 $104 = $3;
 HEAP32[$104>>2] = $103;
 STACKTOP = sp;return;
}
function _addForwardRuleWithMultipleChars() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $0 = 0;
 $2 = HEAP32[4551]|0;
 $3 = ((($2)) + 28|0);
 $4 = (_stringHash($3)|0);
 $5 = HEAP32[2463]|0;
 $6 = ((($5)) + 22348|0);
 $7 = (($6) + ($4<<2)|0);
 $1 = $7;
 while(1) {
  $8 = $1;
  $9 = HEAP32[$8>>2]|0;
  $10 = ($9|0)!=(0);
  if (!($10)) {
   break;
  }
  $11 = $1;
  $12 = HEAP32[$11>>2]|0;
  $13 = HEAP32[2463]|0;
  $14 = ((($13)) + 31332|0);
  $15 = (($14) + ($12<<2)|0);
  $0 = $15;
  $16 = HEAP32[4551]|0;
  $17 = ((($16)) + 24|0);
  $18 = HEAP16[$17>>1]|0;
  $19 = $18 << 16 >> 16;
  $20 = $0;
  $21 = ((($20)) + 24|0);
  $22 = HEAP16[$21>>1]|0;
  $23 = $22 << 16 >> 16;
  $24 = ($19|0)>($23|0);
  if ($24) {
   break;
  }
  $25 = HEAP32[4551]|0;
  $26 = ((($25)) + 24|0);
  $27 = HEAP16[$26>>1]|0;
  $28 = $27 << 16 >> 16;
  $29 = $0;
  $30 = ((($29)) + 24|0);
  $31 = HEAP16[$30>>1]|0;
  $32 = $31 << 16 >> 16;
  $33 = ($28|0)==($32|0);
  if ($33) {
   $34 = $0;
   $35 = ((($34)) + 20|0);
   $36 = HEAP32[$35>>2]|0;
   $37 = ($36|0)==(78);
   if ($37) {
    $38 = HEAP32[4551]|0;
    $39 = ((($38)) + 20|0);
    $40 = HEAP32[$39>>2]|0;
    $41 = ($40|0)!=(78);
    if ($41) {
     break;
    }
   }
  }
  $42 = $0;
  $1 = $42;
 }
 $43 = $1;
 $44 = HEAP32[$43>>2]|0;
 $45 = HEAP32[4551]|0;
 HEAP32[$45>>2] = $44;
 $46 = HEAP32[4550]|0;
 $47 = $1;
 HEAP32[$47>>2] = $46;
 STACKTOP = sp;return;
}
function _addBackwardRuleWithSingleCell($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = $0;
 $3 = $1;
 $7 = HEAP32[4551]|0;
 $8 = ((($7)) + 20|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)==(54);
 if ($10) {
  STACKTOP = sp;return;
 }
 $11 = HEAP32[4551]|0;
 $12 = ((($11)) + 20|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ($13|0)==(75);
 if ($14) {
  STACKTOP = sp;return;
 }
 $15 = HEAP32[4551]|0;
 $16 = ((($15)) + 20|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ($17|0)==(78);
 if ($18) {
  $19 = HEAP32[4551]|0;
  $20 = ((($19)) + 24|0);
  $21 = HEAP16[$20>>1]|0;
  $22 = $21 << 16 >> 16;
  $23 = ($22|0)==(1);
  if ($23) {
   STACKTOP = sp;return;
  }
 }
 $24 = $2;
 $25 = $3;
 $26 = (_definedCharOrDots($24,$25,1)|0);
 $6 = $26;
 $27 = HEAP32[4551]|0;
 $28 = ((($27)) + 20|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = ($29>>>0)>=(57);
 if ($30) {
  $31 = HEAP32[4551]|0;
  $32 = ((($31)) + 20|0);
  $33 = HEAP32[$32>>2]|0;
  $34 = ($33>>>0)<(66);
  if ($34) {
   $35 = HEAP32[4550]|0;
   $36 = $6;
   $37 = ((($36)) + 4|0);
   HEAP32[$37>>2] = $35;
  }
 }
 $38 = $6;
 $39 = ((($38)) + 8|0);
 $5 = $39;
 while(1) {
  $40 = $5;
  $41 = HEAP32[$40>>2]|0;
  $42 = ($41|0)!=(0);
  if (!($42)) {
   break;
  }
  $43 = $5;
  $44 = HEAP32[$43>>2]|0;
  $45 = HEAP32[2463]|0;
  $46 = ((($45)) + 31332|0);
  $47 = (($46) + ($44<<2)|0);
  $4 = $47;
  $48 = HEAP32[4551]|0;
  $49 = ((($48)) + 24|0);
  $50 = HEAP16[$49>>1]|0;
  $51 = $50 << 16 >> 16;
  $52 = $4;
  $53 = ((($52)) + 24|0);
  $54 = HEAP16[$53>>1]|0;
  $55 = $54 << 16 >> 16;
  $56 = ($51|0)>($55|0);
  if ($56) {
   break;
  }
  $57 = $4;
  $58 = ((($57)) + 26|0);
  $59 = HEAP16[$58>>1]|0;
  $60 = $59 << 16 >> 16;
  $61 = ($60|0)==(0);
  if ($61) {
   break;
  }
  $62 = $4;
  $63 = ((($62)) + 20|0);
  $64 = HEAP32[$63>>2]|0;
  $65 = ($64>>>0)>=(57);
  if ($65) {
   $66 = $4;
   $67 = ((($66)) + 20|0);
   $68 = HEAP32[$67>>2]|0;
   $69 = ($68>>>0)<(66);
   if ($69) {
    $70 = HEAP32[4551]|0;
    $71 = ((($70)) + 20|0);
    $72 = HEAP32[$71>>2]|0;
    $73 = ($72>>>0)>=(57);
    if (!($73)) {
     break;
    }
    $74 = HEAP32[4551]|0;
    $75 = ((($74)) + 20|0);
    $76 = HEAP32[$75>>2]|0;
    $77 = ($76>>>0)<(66);
    if (!($77)) {
     break;
    }
   }
  }
  $78 = $4;
  $79 = ((($78)) + 4|0);
  $5 = $79;
 }
 $80 = $5;
 $81 = HEAP32[$80>>2]|0;
 $82 = HEAP32[4551]|0;
 $83 = ((($82)) + 4|0);
 HEAP32[$83>>2] = $81;
 $84 = HEAP32[4550]|0;
 $85 = $5;
 HEAP32[$85>>2] = $84;
 STACKTOP = sp;return;
}
function _addBackwardRuleWithMultipleCells($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = $0;
 $3 = $1;
 $4 = 0;
 $8 = $2;
 $9 = (_stringHash($8)|0);
 $10 = HEAP32[2463]|0;
 $11 = ((($10)) + 26840|0);
 $12 = (($11) + ($9<<2)|0);
 $5 = $12;
 $13 = HEAP32[4551]|0;
 $14 = ((($13)) + 20|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = ($15|0)==(54);
 if ($16) {
  STACKTOP = sp;return;
 }
 while(1) {
  $17 = $5;
  $18 = HEAP32[$17>>2]|0;
  $19 = ($18|0)!=(0);
  if (!($19)) {
   break;
  }
  $20 = $5;
  $21 = HEAP32[$20>>2]|0;
  $22 = HEAP32[2463]|0;
  $23 = ((($22)) + 31332|0);
  $24 = (($23) + ($21<<2)|0);
  $4 = $24;
  $25 = $4;
  $26 = ((($25)) + 26|0);
  $27 = HEAP16[$26>>1]|0;
  $28 = $27 << 16 >> 16;
  $29 = $4;
  $30 = ((($29)) + 24|0);
  $31 = HEAP16[$30>>1]|0;
  $32 = $31 << 16 >> 16;
  $33 = (($28) + ($32))|0;
  $6 = $33;
  $34 = $3;
  $35 = HEAP32[4551]|0;
  $36 = ((($35)) + 24|0);
  $37 = HEAP16[$36>>1]|0;
  $38 = $37 << 16 >> 16;
  $39 = (($34) + ($38))|0;
  $7 = $39;
  $40 = $7;
  $41 = $6;
  $42 = ($40|0)>($41|0);
  if ($42) {
   break;
  }
  $43 = $6;
  $44 = $7;
  $45 = ($43|0)==($44|0);
  if ($45) {
   $46 = $4;
   $47 = ((($46)) + 20|0);
   $48 = HEAP32[$47>>2]|0;
   $49 = ($48|0)==(78);
   if ($49) {
    $50 = HEAP32[4551]|0;
    $51 = ((($50)) + 20|0);
    $52 = HEAP32[$51>>2]|0;
    $53 = ($52|0)!=(78);
    if ($53) {
     break;
    }
   }
  }
  $54 = $4;
  $55 = ((($54)) + 4|0);
  $5 = $55;
 }
 $56 = $5;
 $57 = HEAP32[$56>>2]|0;
 $58 = HEAP32[4551]|0;
 $59 = ((($58)) + 4|0);
 HEAP32[$59>>2] = $57;
 $60 = HEAP32[4550]|0;
 $61 = $5;
 HEAP32[$61>>2] = $60;
 STACKTOP = sp;return;
}
function _reserveSpaceInTable($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = $3;
 $6 = (_allocateSpaceInTable($4,0,$5)|0);
 STACKTOP = sp;return ($6|0);
}
function _hyphenHashNew() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = (_malloc(32764)|0);
 $0 = $1;
 $2 = ($1|0)!=(0|0);
 if (!($2)) {
  _outOfMemory();
 }
 $3 = $0;
 _memset(($3|0),0,32764)|0;
 $4 = $0;
 STACKTOP = sp;return ($4|0);
}
function _hyphenHashLookup($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $8 = $4;
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)==(0);
 if ($10) {
  $2 = 0;
  $55 = $2;
  STACKTOP = sp;return ($55|0);
 }
 $11 = $4;
 $12 = (_hyphenStringHash($11)|0);
 $13 = (($12>>>0) % 8191)&-1;
 $5 = $13;
 $14 = $5;
 $15 = $3;
 $16 = (($15) + ($14<<2)|0);
 $17 = HEAP32[$16>>2]|0;
 $7 = $17;
 while(1) {
  $18 = $7;
  $19 = ($18|0)!=(0|0);
  if (!($19)) {
   label = 13;
   break;
  }
  $20 = $4;
  $21 = HEAP32[$20>>2]|0;
  $22 = $7;
  $23 = ((($22)) + 4|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = HEAP32[$24>>2]|0;
  $26 = ($21|0)!=($25|0);
  if (!($26)) {
   $6 = 0;
   while(1) {
    $27 = $6;
    $28 = $4;
    $29 = HEAP32[$28>>2]|0;
    $30 = ($27>>>0)<($29>>>0);
    if (!($30)) {
     break;
    }
    $31 = $6;
    $32 = $4;
    $33 = ((($32)) + 4|0);
    $34 = (($33) + ($31<<2)|0);
    $35 = HEAP32[$34>>2]|0;
    $36 = $6;
    $37 = $7;
    $38 = ((($37)) + 4|0);
    $39 = HEAP32[$38>>2]|0;
    $40 = ((($39)) + 4|0);
    $41 = (($40) + ($36<<2)|0);
    $42 = HEAP32[$41>>2]|0;
    $43 = ($35|0)!=($42|0);
    if ($43) {
     break;
    }
    $44 = $6;
    $45 = (($44) + 1)|0;
    $6 = $45;
   }
   $46 = $6;
   $47 = $4;
   $48 = HEAP32[$47>>2]|0;
   $49 = ($46|0)==($48|0);
   if ($49) {
    label = 11;
    break;
   }
  }
  $53 = $7;
  $54 = HEAP32[$53>>2]|0;
  $7 = $54;
 }
 if ((label|0) == 11) {
  $50 = $7;
  $51 = ((($50)) + 8|0);
  $52 = HEAP32[$51>>2]|0;
  $2 = $52;
  $55 = $2;
  STACKTOP = sp;return ($55|0);
 }
 else if ((label|0) == 13) {
  $2 = 65535;
  $55 = $2;
  STACKTOP = sp;return ($55|0);
 }
 return (0)|0;
}
function _hyphenGetNewState($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $4;
 $7 = $5;
 $8 = $3;
 $9 = HEAP32[$8>>2]|0;
 _hyphenHashInsert($6,$7,$9);
 $10 = $3;
 $11 = HEAP32[$10>>2]|0;
 $12 = $3;
 $13 = HEAP32[$12>>2]|0;
 $14 = (($13) - 1)|0;
 $15 = $11 & $14;
 $16 = ($15|0)!=(0);
 if (!($16)) {
  $17 = $3;
  $18 = ((($17)) + 4|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = $3;
  $21 = HEAP32[$20>>2]|0;
  $22 = $21 << 1;
  $23 = $22<<4;
  $24 = (_realloc($19,$23)|0);
  $25 = $3;
  $26 = ((($25)) + 4|0);
  HEAP32[$26>>2] = $24;
 }
 $27 = $3;
 $28 = ((($27)) + 4|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = ($29|0)!=(0|0);
 if (!($30)) {
  _outOfMemory();
 }
 $31 = $3;
 $32 = HEAP32[$31>>2]|0;
 $33 = $3;
 $34 = ((($33)) + 4|0);
 $35 = HEAP32[$34>>2]|0;
 $36 = (($35) + ($32<<4)|0);
 $37 = ((($36)) + 4|0);
 HEAP32[$37>>2] = 0;
 $38 = $3;
 $39 = HEAP32[$38>>2]|0;
 $40 = $3;
 $41 = ((($40)) + 4|0);
 $42 = HEAP32[$41>>2]|0;
 $43 = (($42) + ($39<<4)|0);
 $44 = ((($43)) + 8|0);
 HEAP32[$44>>2] = 65535;
 $45 = $3;
 $46 = HEAP32[$45>>2]|0;
 $47 = $3;
 $48 = ((($47)) + 4|0);
 $49 = HEAP32[$48>>2]|0;
 $50 = (($49) + ($46<<4)|0);
 $51 = ((($50)) + 12|0);
 HEAP32[$51>>2] = 0;
 $52 = $3;
 $53 = HEAP32[$52>>2]|0;
 $54 = $3;
 $55 = ((($54)) + 4|0);
 $56 = HEAP32[$55>>2]|0;
 $57 = (($56) + ($53<<4)|0);
 HEAP32[$57>>2] = 0;
 $58 = $3;
 $59 = HEAP32[$58>>2]|0;
 $60 = (($59) + 1)|0;
 HEAP32[$58>>2] = $60;
 STACKTOP = sp;return ($59|0);
}
function _hyphenAddTrans($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $9 = $5;
 $10 = $4;
 $11 = ((($10)) + 4|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (($12) + ($9<<4)|0);
 $14 = ((($13)) + 12|0);
 $15 = HEAP32[$14>>2]|0;
 $8 = $15;
 $16 = $8;
 $17 = ($16|0)==(0);
 if ($17) {
  $18 = (_malloc(8)|0);
  $19 = $5;
  $20 = $4;
  $21 = ((($20)) + 4|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = (($22) + ($19<<4)|0);
  HEAP32[$23>>2] = $18;
 } else {
  $24 = $8;
  $25 = $8;
  $26 = (($25) - 1)|0;
  $27 = $24 & $26;
  $28 = ($27|0)!=(0);
  if (!($28)) {
   $29 = $5;
   $30 = $4;
   $31 = ((($30)) + 4|0);
   $32 = HEAP32[$31>>2]|0;
   $33 = (($32) + ($29<<4)|0);
   $34 = HEAP32[$33>>2]|0;
   $35 = $8;
   $36 = $35 << 1;
   $37 = $36<<3;
   $38 = (_realloc($34,$37)|0);
   $39 = $5;
   $40 = $4;
   $41 = ((($40)) + 4|0);
   $42 = HEAP32[$41>>2]|0;
   $43 = (($42) + ($39<<4)|0);
   HEAP32[$43>>2] = $38;
  }
 }
 $44 = $7;
 $45 = $8;
 $46 = $5;
 $47 = $4;
 $48 = ((($47)) + 4|0);
 $49 = HEAP32[$48>>2]|0;
 $50 = (($49) + ($46<<4)|0);
 $51 = HEAP32[$50>>2]|0;
 $52 = (($51) + ($45<<3)|0);
 HEAP32[$52>>2] = $44;
 $53 = $6;
 $54 = $8;
 $55 = $5;
 $56 = $4;
 $57 = ((($56)) + 4|0);
 $58 = HEAP32[$57>>2]|0;
 $59 = (($58) + ($55<<4)|0);
 $60 = HEAP32[$59>>2]|0;
 $61 = (($60) + ($54<<3)|0);
 $62 = ((($61)) + 4|0);
 HEAP32[$62>>2] = $53;
 $63 = $5;
 $64 = $4;
 $65 = ((($64)) + 4|0);
 $66 = HEAP32[$65>>2]|0;
 $67 = (($66) + ($63<<4)|0);
 $68 = ((($67)) + 12|0);
 $69 = HEAP32[$68>>2]|0;
 $70 = (($69) + 1)|0;
 HEAP32[$68>>2] = $70;
 STACKTOP = sp;return;
}
function _hyphenHashFree($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = 0;
 while(1) {
  $5 = $2;
  $6 = ($5|0)<(8191);
  if (!($6)) {
   break;
  }
  $7 = $2;
  $8 = $1;
  $9 = (($8) + ($7<<2)|0);
  $10 = HEAP32[$9>>2]|0;
  $3 = $10;
  while(1) {
   $11 = $3;
   $12 = ($11|0)!=(0|0);
   if (!($12)) {
    break;
   }
   $13 = $3;
   $14 = HEAP32[$13>>2]|0;
   $4 = $14;
   $15 = $3;
   $16 = ((($15)) + 4|0);
   $17 = HEAP32[$16>>2]|0;
   _free($17);
   $18 = $3;
   _free($18);
   $19 = $4;
   $3 = $19;
  }
  $20 = $2;
  $21 = (($20) + 1)|0;
  $2 = $21;
 }
 $22 = $1;
 _free($22);
 STACKTOP = sp;return;
}
function _hyphenHashInsert($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $9 = $4;
 $10 = (_hyphenStringHash($9)|0);
 $11 = (($10>>>0) % 8191)&-1;
 $6 = $11;
 $12 = (_malloc(12)|0);
 $8 = $12;
 $13 = ($12|0)!=(0|0);
 if (!($13)) {
  _outOfMemory();
 }
 $14 = $6;
 $15 = $3;
 $16 = (($15) + ($14<<2)|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = $8;
 HEAP32[$18>>2] = $17;
 $19 = $4;
 $20 = HEAP32[$19>>2]|0;
 $21 = (($20) + 1)|0;
 $22 = $21<<2;
 $23 = (_malloc($22)|0);
 $24 = $8;
 $25 = ((($24)) + 4|0);
 HEAP32[$25>>2] = $23;
 $26 = $8;
 $27 = ((($26)) + 4|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = ($28|0)!=(0|0);
 if (!($29)) {
  _outOfMemory();
 }
 $30 = $4;
 $31 = HEAP32[$30>>2]|0;
 $32 = $8;
 $33 = ((($32)) + 4|0);
 $34 = HEAP32[$33>>2]|0;
 HEAP32[$34>>2] = $31;
 $7 = 0;
 while(1) {
  $35 = $7;
  $36 = $4;
  $37 = HEAP32[$36>>2]|0;
  $38 = ($35>>>0)<($37>>>0);
  if (!($38)) {
   break;
  }
  $39 = $7;
  $40 = $4;
  $41 = ((($40)) + 4|0);
  $42 = (($41) + ($39<<2)|0);
  $43 = HEAP32[$42>>2]|0;
  $44 = $7;
  $45 = $8;
  $46 = ((($45)) + 4|0);
  $47 = HEAP32[$46>>2]|0;
  $48 = ((($47)) + 4|0);
  $49 = (($48) + ($44<<2)|0);
  HEAP32[$49>>2] = $43;
  $50 = $7;
  $51 = (($50) + 1)|0;
  $7 = $51;
 }
 $52 = $5;
 $53 = $8;
 $54 = ((($53)) + 8|0);
 HEAP32[$54>>2] = $52;
 $55 = $8;
 $56 = $6;
 $57 = $3;
 $58 = (($57) + ($56<<2)|0);
 HEAP32[$58>>2] = $55;
 STACKTOP = sp;return;
}
function _hyphenStringHash($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $3 = 0;
 $2 = 0;
 while(1) {
  $5 = $2;
  $6 = $1;
  $7 = HEAP32[$6>>2]|0;
  $8 = ($5>>>0)<($7>>>0);
  $9 = $3;
  if (!($8)) {
   break;
  }
  $10 = $9 << 4;
  $11 = $2;
  $12 = $1;
  $13 = ((($12)) + 4|0);
  $14 = (($13) + ($11<<2)|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = (($10) + ($15))|0;
  $3 = $16;
  $17 = $3;
  $18 = $17 & -268435456;
  $4 = $18;
  $19 = ($18|0)!=(0);
  if ($19) {
   $20 = $3;
   $21 = $4;
   $22 = $21 >>> 24;
   $23 = $20 ^ $22;
   $3 = $23;
   $24 = $3;
   $25 = $4;
   $26 = $24 ^ $25;
   $3 = $26;
  }
  $27 = $2;
  $28 = (($27) + 1)|0;
  $2 = $28;
 }
 STACKTOP = sp;return ($9|0);
}
function _atEndOfLine($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 24|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $1;
 $6 = ((($5)) + 20|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($4|0)>=($7|0);
 $9 = $8&1;
 STACKTOP = sp;return ($9|0);
}
function _atTokenDelimiter($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 24|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $1;
 $6 = ((($5)) + 36|0);
 $7 = (($6) + ($4<<2)|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8>>>0)<=(32);
 $10 = $9&1;
 STACKTOP = sp;return ($10|0);
}
function _lou_getTable($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = (_getTable($2)|0);
 STACKTOP = sp;return ($3|0);
}
function _lou_checkTable($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $4 = (_getTable($3)|0);
 $5 = ($4|0)!=(0|0);
 if ($5) {
  $1 = 1;
 } else {
  $1 = 0;
 }
 $6 = $1;
 STACKTOP = sp;return ($6|0);
}
function _lou_getTypeformForEmphClass($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $6 = $3;
 $7 = (_getTable($6)|0);
 $8 = ($7|0)!=(0|0);
 if (!($8)) {
  $2 = 0;
  $27 = $2;
  STACKTOP = sp;return ($27|0);
 }
 $5 = 0;
 while(1) {
  $9 = $5;
  $10 = HEAP32[2463]|0;
  $11 = ((($10)) + 560|0);
  $12 = (($11) + ($9<<2)|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ($13|0)!=(0|0);
  if (!($14)) {
   label = 8;
   break;
  }
  $15 = $4;
  $16 = $5;
  $17 = HEAP32[2463]|0;
  $18 = ((($17)) + 560|0);
  $19 = (($18) + ($16<<2)|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = (_strcmp($15,$20)|0);
  $22 = ($21|0)==(0);
  $23 = $5;
  if ($22) {
   label = 6;
   break;
  }
  $26 = (($23) + 1)|0;
  $5 = $26;
 }
 if ((label|0) == 6) {
  $24 = 1 << $23;
  $25 = $24&65535;
  $2 = $25;
  $27 = $2;
  STACKTOP = sp;return ($27|0);
 }
 else if ((label|0) == 8) {
  $2 = 0;
  $27 = $2;
  STACKTOP = sp;return ($27|0);
 }
 return (0)|0;
}
function _liblouis_allocMem($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $9 = $5;
 $10 = ($9|0)<(1024);
 if ($10) {
  $5 = 1024;
 }
 $11 = $6;
 $12 = ($11|0)<(1024);
 if ($12) {
  $6 = 1024;
 }
 $13 = $4;
 do {
  switch ($13|0) {
  case 0:  {
   $14 = $6;
   $15 = HEAP32[12761]|0;
   $16 = ($14|0)>($15|0);
   if ($16) {
    $17 = HEAP32[12762]|0;
    $18 = ($17|0)!=(0|0);
    if ($18) {
     $19 = HEAP32[12762]|0;
     _free($19);
    }
    $20 = $6;
    $21 = (($20) + 4)|0;
    $22 = $21<<1;
    $23 = (_malloc($22)|0);
    HEAP32[12762] = $23;
    $24 = HEAP32[12762]|0;
    $25 = ($24|0)!=(0|0);
    if (!($25)) {
     _outOfMemory();
    }
    $26 = $6;
    HEAP32[12761] = $26;
   }
   $27 = HEAP32[12762]|0;
   $3 = $27;
   $137 = $3;
   STACKTOP = sp;return ($137|0);
   break;
  }
  case 1:  {
   $28 = HEAP32[12763]|0;
   $29 = ($28|0)!=(0|0);
   if ($29) {
    $30 = HEAP32[12763]|0;
    _free($30);
   }
   $31 = $5;
   $32 = (($31) + 4)|0;
   $33 = $32<<2;
   $34 = (_malloc($33)|0);
   HEAP32[12763] = $34;
   $35 = HEAP32[12763]|0;
   $36 = ($35|0)!=(0|0);
   if (!($36)) {
    _outOfMemory();
   }
   $37 = HEAP32[12763]|0;
   $3 = $37;
   $137 = $3;
   STACKTOP = sp;return ($137|0);
   break;
  }
  case 2:  {
   $38 = HEAP32[12764]|0;
   $39 = ($38|0)!=(0|0);
   if ($39) {
    $40 = HEAP32[12764]|0;
    _free($40);
   }
   $41 = $5;
   $42 = (($41) + 4)|0;
   $43 = $42<<2;
   $44 = (_malloc($43)|0);
   HEAP32[12764] = $44;
   $45 = HEAP32[12764]|0;
   $46 = ($45|0)!=(0|0);
   if (!($46)) {
    _outOfMemory();
   }
   $47 = HEAP32[12764]|0;
   $3 = $47;
   $137 = $3;
   STACKTOP = sp;return ($137|0);
   break;
  }
  case 3:  {
   $48 = HEAP32[12765]|0;
   $49 = ($48|0)!=(0|0);
   if ($49) {
    $50 = HEAP32[12765]|0;
    _free($50);
   }
   $51 = $5;
   $52 = (($51) + 4)|0;
   $53 = $52<<2;
   $54 = (_malloc($53)|0);
   HEAP32[12765] = $54;
   $55 = HEAP32[12765]|0;
   $56 = ($55|0)!=(0|0);
   if (!($56)) {
    _outOfMemory();
   }
   $57 = HEAP32[12765]|0;
   $3 = $57;
   $137 = $3;
   STACKTOP = sp;return ($137|0);
   break;
  }
  case 4:  {
   $58 = $6;
   $59 = HEAP32[12766]|0;
   $60 = ($58|0)>($59|0);
   if ($60) {
    $61 = HEAP32[12767]|0;
    $62 = ($61|0)!=(0|0);
    if ($62) {
     $63 = HEAP32[12767]|0;
     _free($63);
    }
    $64 = $6;
    $65 = (($64) + 4)|0;
    $66 = (_malloc($65)|0);
    HEAP32[12767] = $66;
    $67 = HEAP32[12767]|0;
    $68 = ($67|0)!=(0|0);
    if (!($68)) {
     _outOfMemory();
    }
    $69 = $6;
    HEAP32[12766] = $69;
   }
   $70 = HEAP32[12767]|0;
   $3 = $70;
   $137 = $3;
   STACKTOP = sp;return ($137|0);
   break;
  }
  case 5:  {
   $71 = $6;
   $72 = HEAP32[12768]|0;
   $73 = ($71|0)>($72|0);
   if ($73) {
    $74 = HEAP32[12769]|0;
    $75 = ($74|0)!=(0|0);
    if ($75) {
     $76 = HEAP32[12769]|0;
     _free($76);
    }
    $77 = $6;
    $78 = (($77) + 4)|0;
    $79 = $78<<2;
    $80 = (_malloc($79)|0);
    HEAP32[12769] = $80;
    $81 = HEAP32[12769]|0;
    $82 = ($81|0)!=(0|0);
    if (!($82)) {
     _outOfMemory();
    }
    $83 = $6;
    HEAP32[12768] = $83;
   }
   $84 = HEAP32[12769]|0;
   $3 = $84;
   $137 = $3;
   STACKTOP = sp;return ($137|0);
   break;
  }
  case 6:  {
   $85 = $6;
   $86 = HEAP32[12770]|0;
   $87 = ($85|0)>($86|0);
   if ($87) {
    $88 = HEAP32[12771]|0;
    $89 = ($88|0)!=(0|0);
    if ($89) {
     $90 = HEAP32[12771]|0;
     _free($90);
    }
    $91 = $6;
    $92 = (($91) + 4)|0;
    $93 = $92<<2;
    $94 = (_malloc($93)|0);
    HEAP32[12771] = $94;
    $95 = HEAP32[12771]|0;
    $96 = ($95|0)!=(0|0);
    if (!($96)) {
     _outOfMemory();
    }
    $97 = $6;
    HEAP32[12770] = $97;
   }
   $98 = HEAP32[12771]|0;
   $3 = $98;
   $137 = $3;
   STACKTOP = sp;return ($137|0);
   break;
  }
  case 7:  {
   $99 = $5;
   $100 = $6;
   $101 = ($99|0)>=($100|0);
   if ($101) {
    $102 = $5;
    $7 = $102;
   } else {
    $103 = $6;
    $7 = $103;
   }
   $104 = $7;
   $105 = HEAP32[12772]|0;
   $106 = ($104|0)>($105|0);
   if ($106) {
    $107 = HEAP32[12773]|0;
    $108 = ($107|0)!=(0|0);
    if ($108) {
     $109 = HEAP32[12773]|0;
     _free($109);
    }
    $110 = $7;
    $111 = (($110) + 4)|0;
    $112 = $111<<2;
    $113 = (_malloc($112)|0);
    HEAP32[12773] = $113;
    $114 = HEAP32[12773]|0;
    $115 = ($114|0)!=(0|0);
    if (!($115)) {
     _outOfMemory();
    }
    $116 = $7;
    HEAP32[12772] = $116;
   }
   $117 = HEAP32[12773]|0;
   $3 = $117;
   $137 = $3;
   STACKTOP = sp;return ($137|0);
   break;
  }
  case 8:  {
   $118 = $5;
   $119 = $6;
   $120 = ($118|0)>=($119|0);
   if ($120) {
    $121 = $5;
    $8 = $121;
   } else {
    $122 = $6;
    $8 = $122;
   }
   $123 = $8;
   $124 = HEAP32[12774]|0;
   $125 = ($123|0)>($124|0);
   if ($125) {
    $126 = HEAP32[12775]|0;
    $127 = ($126|0)!=(0|0);
    if ($127) {
     $128 = HEAP32[12775]|0;
     _free($128);
    }
    $129 = $8;
    $130 = (($129) + 4)|0;
    $131 = $130<<2;
    $132 = (_malloc($131)|0);
    HEAP32[12775] = $132;
    $133 = HEAP32[12775]|0;
    $134 = ($133|0)!=(0|0);
    if (!($134)) {
     _outOfMemory();
    }
    $135 = $8;
    HEAP32[12774] = $135;
   }
   $136 = HEAP32[12775]|0;
   $3 = $136;
   $137 = $3;
   STACKTOP = sp;return ($137|0);
   break;
  }
  default: {
   $3 = 0;
   $137 = $3;
   STACKTOP = sp;return ($137|0);
  }
  }
 } while(0);
 return (0)|0;
}
function _lou_free() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 _closeLogFile();
 $4 = HEAP32[4543]|0;
 $5 = ($4|0)!=(0|0);
 if ($5) {
  $6 = HEAP32[4543]|0;
  $0 = $6;
  while(1) {
   $7 = $0;
   $8 = ($7|0)!=(0|0);
   if (!($8)) {
    break;
   }
   $9 = $0;
   $10 = ((($9)) + 4|0);
   $11 = HEAP32[$10>>2]|0;
   $3 = $11;
   $2 = 0;
   while(1) {
    $12 = $2;
    $13 = $3;
    $14 = ((($13)) + 560|0);
    $15 = (($14) + ($12<<2)|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = ($16|0)!=(0|0);
    if (!($17)) {
     break;
    }
    $18 = $2;
    $19 = $3;
    $20 = ((($19)) + 560|0);
    $21 = (($20) + ($18<<2)|0);
    $22 = HEAP32[$21>>2]|0;
    _free($22);
    $23 = $2;
    $24 = (($23) + 1)|0;
    $2 = $24;
   }
   $25 = $3;
   _free($25);
   $26 = $0;
   $1 = $26;
   $27 = $0;
   $28 = HEAP32[$27>>2]|0;
   $0 = $28;
   $29 = $1;
   _free($29);
  }
  HEAP32[4543] = 0;
  HEAP32[4542] = 0;
 }
 $30 = HEAP32[12762]|0;
 $31 = ($30|0)!=(0|0);
 if ($31) {
  $32 = HEAP32[12762]|0;
  _free($32);
 }
 HEAP32[12762] = 0;
 $33 = HEAP32[12763]|0;
 $34 = ($33|0)!=(0|0);
 if ($34) {
  $35 = HEAP32[12763]|0;
  _free($35);
 }
 HEAP32[12763] = 0;
 $36 = HEAP32[12764]|0;
 $37 = ($36|0)!=(0|0);
 if ($37) {
  $38 = HEAP32[12764]|0;
  _free($38);
 }
 HEAP32[12764] = 0;
 $39 = HEAP32[12765]|0;
 $40 = ($39|0)!=(0|0);
 if ($40) {
  $41 = HEAP32[12765]|0;
  _free($41);
 }
 HEAP32[12765] = 0;
 HEAP32[12761] = 0;
 $42 = HEAP32[12767]|0;
 $43 = ($42|0)!=(0|0);
 if ($43) {
  $44 = HEAP32[12767]|0;
  _free($44);
 }
 HEAP32[12767] = 0;
 HEAP32[12766] = 0;
 $45 = HEAP32[12769]|0;
 $46 = ($45|0)!=(0|0);
 if ($46) {
  $47 = HEAP32[12769]|0;
  _free($47);
 }
 HEAP32[12769] = 0;
 HEAP32[12768] = 0;
 $48 = HEAP32[12771]|0;
 $49 = ($48|0)!=(0|0);
 if ($49) {
  $50 = HEAP32[12771]|0;
  _free($50);
 }
 HEAP32[12771] = 0;
 HEAP32[12770] = 0;
 $51 = HEAP32[12773]|0;
 $52 = ($51|0)!=(0|0);
 if ($52) {
  $53 = HEAP32[12773]|0;
  _free($53);
 }
 HEAP32[12773] = 0;
 HEAP32[12772] = 0;
 $54 = HEAP32[12775]|0;
 $55 = ($54|0)!=(0|0);
 if (!($55)) {
  HEAP32[12775] = 0;
  HEAP32[12774] = 0;
  HEAP16[26406] = 0;
  STACKTOP = sp;return;
 }
 $56 = HEAP32[12775]|0;
 _free($56);
 HEAP32[12775] = 0;
 HEAP32[12774] = 0;
 HEAP16[26406] = 0;
 STACKTOP = sp;return;
}
function _lou_version() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[145]|0;
 return ($0|0);
}
function _lou_charSize() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 4;
}
function _lou_compileString($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $3;
 $6 = (_getTable($5)|0);
 $7 = ($6|0)!=(0|0);
 if ($7) {
  $8 = $4;
  $9 = (_compileString($8)|0);
  $2 = $9;
 } else {
  $2 = 0;
 }
 $10 = $2;
 STACKTOP = sp;return ($10|0);
}
function _lou_translateString($0,$1,$2,$3,$4,$5,$6,$7) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $8 = $0;
 $9 = $1;
 $10 = $2;
 $11 = $3;
 $12 = $4;
 $13 = $5;
 $14 = $6;
 $15 = $7;
 $16 = $8;
 $17 = $9;
 $18 = $10;
 $19 = $11;
 $20 = $12;
 $21 = $13;
 $22 = $14;
 $23 = $15;
 $24 = (_lou_translate($16,$17,$18,$19,$20,$21,$22,0,0,0,$23)|0);
 STACKTOP = sp;return ($24|0);
}
function _lou_translate($0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 $9 = $9|0;
 $10 = $10|0;
 var $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $11 = $0;
 $12 = $1;
 $13 = $2;
 $14 = $3;
 $15 = $4;
 $16 = $5;
 $17 = $6;
 $18 = $7;
 $19 = $8;
 $20 = $9;
 $21 = $10;
 $22 = $11;
 $23 = $12;
 $24 = $13;
 $25 = $14;
 $26 = $15;
 $27 = $16;
 $28 = $17;
 $29 = $18;
 $30 = $19;
 $31 = $20;
 $32 = $21;
 $33 = (_translateWithTracing($22,$23,$24,$25,$26,$27,$28,$29,$30,$31,$32,0,0)|0);
 STACKTOP = sp;return ($33|0);
}
function _translateWithTracing($0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 $9 = $9|0;
 $10 = $10|0;
 $11 = $11|0;
 $12 = $12|0;
 var $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0;
 var $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0;
 var $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0;
 var $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0;
 var $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0;
 var $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0;
 var $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0;
 var $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0;
 var $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0;
 var $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0;
 var $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $30 = 0, $300 = 0, $301 = 0;
 var $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0;
 var $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0;
 var $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0;
 var $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0;
 var $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0;
 var $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0;
 var $411 = 0, $412 = 0, $413 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $or$cond = 0, $or$cond10 = 0, $or$cond3 = 0, $or$cond5 = 0, $or$cond7 = 0, $vararg_buffer = 0, $vararg_buffer12 = 0, $vararg_ptr11 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $vararg_buffer12 = sp + 8|0;
 $vararg_buffer = sp;
 $14 = $0;
 $15 = $1;
 $16 = $2;
 $17 = $3;
 $18 = $4;
 $19 = $5;
 $20 = $6;
 $21 = $7;
 $22 = $8;
 $23 = $9;
 $24 = $10;
 $25 = $11;
 $26 = $12;
 $28 = 1;
 $30 = $14;
 $31 = ($30|0)==(0|0);
 $32 = $15;
 $33 = ($32|0)==(0|0);
 $or$cond = $31 | $33;
 $34 = $16;
 $35 = ($34|0)==(0|0);
 $or$cond3 = $or$cond | $35;
 $36 = $17;
 $37 = ($36|0)==(0|0);
 $or$cond5 = $or$cond3 | $37;
 $38 = $18;
 $39 = ($38|0)==(0|0);
 $or$cond7 = $or$cond5 | $39;
 if ($or$cond7) {
  $13 = 0;
  $412 = $13;
  STACKTOP = sp;return ($412|0);
 }
 $40 = $14;
 $41 = $16;
 $42 = HEAP32[$41>>2]|0;
 HEAP32[$vararg_buffer>>2] = $40;
 $vararg_ptr11 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr11>>2] = $42;
 _logMessage(0,7215,$vararg_buffer);
 $43 = $15;
 $44 = $16;
 $45 = HEAP32[$44>>2]|0;
 _logWidecharBuf(0,7262,$43,$45);
 $46 = $24;
 $47 = $46 & 64;
 $48 = ($47|0)!=(0);
 $49 = $14;
 if ($48) {
  $50 = $15;
  $51 = $16;
  $52 = $17;
  $53 = $18;
  $54 = $19;
  $55 = $20;
  $56 = $21;
  $57 = $22;
  $58 = $23;
  $59 = $24;
  $60 = (_other_translate($49,$50,$51,$52,$53,$54,$55,$56,$57,$58,$59)|0);
  $13 = $60;
  $412 = $13;
  STACKTOP = sp;return ($412|0);
 }
 $61 = (_getTable($49)|0);
 HEAP32[12776] = $61;
 $62 = HEAP32[12776]|0;
 $63 = ($62|0)==(0|0);
 if (!($63)) {
  $64 = $16;
  $65 = HEAP32[$64>>2]|0;
  $66 = ($65|0)<(0);
  if (!($66)) {
   $67 = $18;
   $68 = HEAP32[$67>>2]|0;
   $69 = ($68|0)<(0);
   if (!($69)) {
    $70 = $15;
    HEAP32[12777] = $70;
    HEAP32[12778] = 0;
    while(1) {
     $71 = HEAP32[12778]|0;
     $72 = $16;
     $73 = HEAP32[$72>>2]|0;
     $74 = ($71|0)<($73|0);
     if (!($74)) {
      break;
     }
     $75 = HEAP32[12778]|0;
     $76 = HEAP32[12777]|0;
     $77 = (($76) + ($75<<2)|0);
     $78 = HEAP32[$77>>2]|0;
     $79 = ($78|0)!=(0);
     if (!($79)) {
      break;
     }
     $80 = HEAP32[12778]|0;
     $81 = (($80) + 1)|0;
     HEAP32[12778] = $81;
    }
    $82 = $18;
    $83 = HEAP32[$82>>2]|0;
    HEAP32[12779] = $83;
    HEAP32[12780] = 0;
    $84 = HEAP32[12778]|0;
    $85 = HEAP32[12779]|0;
    $86 = (_liblouis_allocMem(0,$84,$85)|0);
    HEAP32[12781] = $86;
    $87 = ($86|0)!=(0|0);
    if (!($87)) {
     $13 = 0;
     $412 = $13;
     STACKTOP = sp;return ($412|0);
    }
    $88 = $19;
    $89 = ($88|0)!=(0|0);
    L22: do {
     if ($89) {
      $27 = 0;
      while(1) {
       $90 = $27;
       $91 = HEAP32[12778]|0;
       $92 = ($90|0)<($91|0);
       if (!($92)) {
        break L22;
       }
       $93 = $27;
       $94 = $19;
       $95 = (($94) + ($93<<1)|0);
       $96 = HEAP16[$95>>1]|0;
       $97 = $27;
       $98 = HEAP32[12781]|0;
       $99 = (($98) + ($97<<1)|0);
       HEAP16[$99>>1] = $96;
       $100 = $27;
       $101 = HEAP32[12781]|0;
       $102 = (($101) + ($100<<1)|0);
       $103 = HEAP16[$102>>1]|0;
       $104 = $103&65535;
       $105 = $104 & 16383;
       $106 = ($105|0)!=(0);
       if ($106) {
        HEAP32[12780] = 1;
       }
       $107 = $27;
       $108 = (($107) + 1)|0;
       $27 = $108;
      }
     } else {
      $109 = HEAP32[12781]|0;
      $110 = HEAP32[12778]|0;
      $111 = $110<<1;
      _memset(($109|0),0,($111|0))|0;
     }
    } while(0);
    $112 = HEAP32[12778]|0;
    $113 = HEAP32[12779]|0;
    $114 = (_liblouis_allocMem(1,$112,$113)|0);
    HEAP32[12782] = $114;
    $115 = ($114|0)!=(0|0);
    if (!($115)) {
     $13 = 0;
     $412 = $13;
     STACKTOP = sp;return ($412|0);
    }
    $116 = HEAP32[12782]|0;
    $117 = HEAP32[12778]|0;
    $118 = (($117) + 4)|0;
    $119 = $118<<2;
    _memset(($116|0),0,($119|0))|0;
    $120 = HEAP32[12778]|0;
    $121 = HEAP32[12779]|0;
    $122 = (_liblouis_allocMem(2,$120,$121)|0);
    HEAP32[12783] = $122;
    $123 = ($122|0)!=(0|0);
    if (!($123)) {
     $13 = 0;
     $412 = $13;
     STACKTOP = sp;return ($412|0);
    }
    $124 = HEAP32[12783]|0;
    $125 = HEAP32[12778]|0;
    $126 = (($125) + 4)|0;
    $127 = $126<<2;
    _memset(($124|0),0,($127|0))|0;
    $128 = HEAP32[12778]|0;
    $129 = HEAP32[12779]|0;
    $130 = (_liblouis_allocMem(3,$128,$129)|0);
    HEAP32[12784] = $130;
    $131 = ($130|0)!=(0|0);
    if (!($131)) {
     $13 = 0;
     $412 = $13;
     STACKTOP = sp;return ($412|0);
    }
    $132 = HEAP32[12784]|0;
    $133 = HEAP32[12778]|0;
    $134 = (($133) + 4)|0;
    $135 = $134<<2;
    _memset(($132|0),0,($135|0))|0;
    $136 = $20;
    $137 = ($136|0)==(0|0);
    if (!($137)) {
     $138 = $20;
     $139 = HEAP8[$138>>0]|0;
     $140 = $139 << 24 >> 24;
     $141 = ($140|0)==(88);
     if (!($141)) {
      $142 = $20;
      HEAP32[12785] = $142;
     }
    }
    $143 = $21;
    HEAP32[12786] = $143;
    $144 = $21;
    $145 = ($144|0)!=(0|0);
    L48: do {
     if ($145) {
      $27 = 0;
      while(1) {
       $146 = $27;
       $147 = HEAP32[12778]|0;
       $148 = ($146|0)<($147|0);
       if (!($148)) {
        break L48;
       }
       $149 = $27;
       $150 = $21;
       $151 = (($150) + ($149<<2)|0);
       HEAP32[$151>>2] = -1;
       $152 = $27;
       $153 = (($152) + 1)|0;
       $27 = $153;
      }
     }
    } while(0);
    $154 = $22;
    HEAP32[12787] = $154;
    $155 = $24;
    HEAP32[12788] = $155;
    $156 = $23;
    $157 = ($156|0)!=(0|0);
    L54: do {
     if ($157) {
      $158 = $23;
      $159 = HEAP32[$158>>2]|0;
      $160 = ($159|0)>=(0);
      if ($160) {
       HEAP32[12789] = 0;
       $161 = $23;
       $162 = HEAP32[$161>>2]|0;
       HEAP32[12790] = $162;
       $163 = HEAP32[12788]|0;
       $164 = $163 & 34;
       $165 = ($164|0)!=(0);
       if ($165) {
        $166 = HEAP32[12790]|0;
        HEAP32[12791] = $166;
        $167 = HEAP32[12791]|0;
        $168 = HEAP32[12777]|0;
        $169 = (($168) + ($167<<2)|0);
        $170 = HEAP32[$169>>2]|0;
        $171 = (_checkAttr($170,1,0)|0);
        $172 = ($171|0)!=(0);
        if ($172) {
         $173 = HEAP32[12791]|0;
         $174 = (($173) + 1)|0;
         HEAP32[12792] = $174;
         break;
        }
        while(1) {
         $175 = HEAP32[12791]|0;
         $176 = ($175|0)>=(0);
         if ($176) {
          $177 = HEAP32[12791]|0;
          $178 = HEAP32[12777]|0;
          $179 = (($178) + ($177<<2)|0);
          $180 = HEAP32[$179>>2]|0;
          $181 = (_checkAttr($180,1,0)|0);
          $182 = ($181|0)!=(0);
          $183 = $182 ^ 1;
          $413 = $183;
         } else {
          $413 = 0;
         }
         $184 = HEAP32[12791]|0;
         if (!($413)) {
          break;
         }
         $185 = (($184) + -1)|0;
         HEAP32[12791] = $185;
        }
        $186 = (($184) + 1)|0;
        HEAP32[12791] = $186;
        $187 = HEAP32[12790]|0;
        HEAP32[12792] = $187;
        $188 = HEAP32[12788]|0;
        $189 = $188 & 32;
        $190 = ($189|0)!=(0);
        if (!($190)) {
         while(1) {
          $191 = HEAP32[12792]|0;
          $192 = HEAP32[12778]|0;
          $193 = ($191|0)<($192|0);
          if (!($193)) {
           break L54;
          }
          $194 = HEAP32[12792]|0;
          $195 = HEAP32[12777]|0;
          $196 = (($195) + ($194<<2)|0);
          $197 = HEAP32[$196>>2]|0;
          $198 = (_checkAttr($197,1,0)|0);
          $199 = ($198|0)!=(0);
          $200 = $199 ^ 1;
          if (!($200)) {
           break L54;
          }
          $201 = HEAP32[12792]|0;
          $202 = (($201) + 1)|0;
          HEAP32[12792] = $202;
         }
        }
       }
      } else {
       label = 48;
      }
     } else {
      label = 48;
     }
    } while(0);
    if ((label|0) == 48) {
     HEAP32[12790] = -1;
     HEAP32[12789] = 1;
    }
    $203 = HEAP32[12778]|0;
    $204 = HEAP32[12779]|0;
    $205 = (_liblouis_allocMem(5,$203,$204)|0);
    HEAP32[12793] = $205;
    $206 = ($205|0)!=(0|0);
    if (!($206)) {
     $13 = 0;
     $412 = $13;
     STACKTOP = sp;return ($412|0);
    }
    $207 = HEAP32[12778]|0;
    $208 = HEAP32[12779]|0;
    $209 = (_liblouis_allocMem(7,$207,$208)|0);
    HEAP32[12794] = $209;
    $210 = ($209|0)!=(0|0);
    if (!($210)) {
     $13 = 0;
     $412 = $13;
     STACKTOP = sp;return ($412|0);
    }
    $211 = HEAP32[12778]|0;
    $212 = HEAP32[12779]|0;
    $213 = (_liblouis_allocMem(8,$211,$212)|0);
    HEAP32[12795] = $213;
    $214 = ($213|0)!=(0|0);
    if (!($214)) {
     $13 = 0;
     $412 = $13;
     STACKTOP = sp;return ($412|0);
    }
    $27 = 0;
    while(1) {
     $215 = $27;
     $216 = HEAP32[12778]|0;
     $217 = ($215|0)<=($216|0);
     if (!($217)) {
      break;
     }
     $218 = $27;
     $219 = $27;
     $220 = HEAP32[12794]|0;
     $221 = (($220) + ($219<<2)|0);
     HEAP32[$221>>2] = $218;
     $222 = $27;
     $223 = (($222) + 1)|0;
     $27 = $223;
    }
    $224 = HEAP32[12778]|0;
    $225 = HEAP32[12778]|0;
    $226 = HEAP32[12794]|0;
    $227 = (($226) + ($225<<2)|0);
    HEAP32[$227>>2] = $224;
    $228 = HEAP32[12788]|0;
    $229 = $228 & 16;
    $230 = ($229|0)!=(0);
    do {
     if (!($230)) {
      $231 = HEAP32[12776]|0;
      $232 = ((($231)) + 4|0);
      $233 = HEAP32[$232>>2]|0;
      $234 = ($233|0)>(1);
      if (!($234)) {
       $235 = HEAP32[12776]|0;
       $236 = ((($235)) + 8|0);
       $237 = HEAP32[$236>>2]|0;
       $238 = ($237|0)!=(0);
       if (!($238)) {
        break;
       }
      }
      $239 = HEAP32[12778]|0;
      $240 = HEAP32[12779]|0;
      $241 = (_liblouis_allocMem(6,$239,$240)|0);
      HEAP32[12796] = $241;
      $242 = ($241|0)!=(0|0);
      if ($242) {
       break;
      }
      $13 = 0;
      $412 = $13;
      STACKTOP = sp;return ($412|0);
     }
    } while(0);
    $243 = HEAP32[12785]|0;
    $244 = ($243|0)!=(0|0);
    do {
     if ($244) {
      $245 = HEAP32[12778]|0;
      $246 = HEAP32[12779]|0;
      $247 = (_liblouis_allocMem(4,$245,$246)|0);
      HEAP32[12797] = $247;
      $248 = ($247|0)!=(0|0);
      if ($248) {
       $249 = HEAP32[12797]|0;
       $250 = HEAP32[12779]|0;
       _memset(($249|0),42,($250|0))|0;
       break;
      } else {
       $28 = 0;
       break;
      }
     }
    } while(0);
    HEAP32[12798] = 0;
    $251 = $25;
    $252 = ($251|0)!=(0|0);
    $253 = $26;
    $254 = ($253|0)!=(0|0);
    $or$cond10 = $252 & $254;
    if ($or$cond10) {
     $255 = $25;
     HEAP32[12799] = $255;
     $256 = $26;
     $257 = HEAP32[$256>>2]|0;
     HEAP32[12800] = $257;
    } else {
     HEAP32[12799] = 0;
     HEAP32[12800] = 0;
    }
    HEAP32[146] = 0;
    $258 = HEAP32[12788]|0;
    $259 = $258 & 16;
    $260 = ($259|0)!=(0);
    if ($260) {
     $261 = HEAP32[12793]|0;
     HEAP32[12801] = $261;
     $262 = HEAP32[12795]|0;
     $263 = HEAP32[12794]|0;
     $264 = HEAP32[12779]|0;
     $265 = $264<<2;
     _memcpy(($262|0),($263|0),($265|0))|0;
     $266 = (_translateString()|0);
     $28 = $266;
     HEAP32[146] = 5;
    }
    while(1) {
     $267 = HEAP32[146]|0;
     $268 = HEAP32[12776]|0;
     $269 = ((($268)) + 4|0);
     $270 = HEAP32[$269>>2]|0;
     $271 = ($267|0)<=($270|0);
     $272 = $28;
     $273 = ($272|0)!=(0);
     $274 = $271 ? $273 : 0;
     if (!($274)) {
      break;
     }
     $275 = HEAP32[12795]|0;
     $276 = HEAP32[12794]|0;
     $277 = HEAP32[12779]|0;
     $278 = $277<<2;
     _memcpy(($275|0),($276|0),($278|0))|0;
     $279 = HEAP32[146]|0;
     L113: do {
      switch ($279|0) {
      case 0:  {
       $280 = HEAP32[12776]|0;
       $281 = ((($280)) + 8|0);
       $282 = HEAP32[$281>>2]|0;
       $283 = ($282|0)!=(0);
       if (!($283)) {
        break L113;
       }
       $284 = HEAP32[12796]|0;
       HEAP32[12801] = $284;
       $285 = (_makeCorrections()|0);
       $28 = $285;
       $286 = HEAP32[12796]|0;
       HEAP32[12777] = $286;
       $287 = HEAP32[12802]|0;
       HEAP32[12778] = $287;
       break;
      }
      case 1:  {
       $288 = HEAP32[12793]|0;
       HEAP32[12801] = $288;
       $289 = (_translateString()|0);
       $28 = $289;
       break;
      }
      case 2:  {
       $290 = HEAP32[12802]|0;
       HEAP32[12778] = $290;
       $291 = HEAP32[12793]|0;
       HEAP32[12777] = $291;
       $292 = HEAP32[12796]|0;
       HEAP32[12801] = $292;
       $293 = (_translatePass()|0);
       $28 = $293;
       break;
      }
      case 3:  {
       $294 = HEAP32[12802]|0;
       HEAP32[12778] = $294;
       $295 = HEAP32[12796]|0;
       HEAP32[12777] = $295;
       $296 = HEAP32[12793]|0;
       HEAP32[12801] = $296;
       $297 = (_translatePass()|0);
       $28 = $297;
       break;
      }
      case 4:  {
       $298 = HEAP32[12802]|0;
       HEAP32[12778] = $298;
       $299 = HEAP32[12793]|0;
       HEAP32[12777] = $299;
       $300 = HEAP32[12796]|0;
       HEAP32[12801] = $300;
       $301 = (_translatePass()|0);
       $28 = $301;
       break;
      }
      default: {
      }
      }
     } while(0);
     $302 = HEAP32[146]|0;
     $303 = (($302) + 1)|0;
     HEAP32[146] = $303;
    }
    $304 = $28;
    $305 = ($304|0)!=(0);
    L122: do {
     if ($305) {
      $27 = 0;
      while(1) {
       $306 = $27;
       $307 = HEAP32[12802]|0;
       $308 = ($306|0)<($307|0);
       if (!($308)) {
        break;
       }
       $309 = $19;
       $310 = ($309|0)!=(0|0);
       do {
        if ($310) {
         $311 = $27;
         $312 = HEAP32[12801]|0;
         $313 = (($312) + ($311<<2)|0);
         $314 = HEAP32[$313>>2]|0;
         $315 = $314 & 192;
         $316 = ($315|0)!=(0);
         $317 = $27;
         $318 = $19;
         $319 = (($318) + ($317<<1)|0);
         if ($316) {
          HEAP16[$319>>1] = 56;
          break;
         } else {
          HEAP16[$319>>1] = 48;
          break;
         }
        }
       } while(0);
       $320 = HEAP32[12788]|0;
       $321 = $320 & 4;
       $322 = ($321|0)!=(0);
       do {
        if ($322) {
         $323 = HEAP32[12788]|0;
         $324 = $323 & 128;
         $325 = ($324|0)!=(0);
         $326 = $27;
         $327 = HEAP32[12801]|0;
         $328 = (($327) + ($326<<2)|0);
         $329 = HEAP32[$328>>2]|0;
         if ($325) {
          $330 = $329 & 255;
          $331 = $330 | 10240;
          $332 = $27;
          $333 = $17;
          $334 = (($333) + ($332<<2)|0);
          HEAP32[$334>>2] = $331;
          break;
         } else {
          $335 = $27;
          $336 = $17;
          $337 = (($336) + ($335<<2)|0);
          HEAP32[$337>>2] = $329;
          break;
         }
        } else {
         $338 = $27;
         $339 = HEAP32[12801]|0;
         $340 = (($339) + ($338<<2)|0);
         $341 = HEAP32[$340>>2]|0;
         $342 = (_getCharFromDots($341)|0);
         $343 = $27;
         $344 = $17;
         $345 = (($344) + ($343<<2)|0);
         HEAP32[$345>>2] = $342;
        }
       } while(0);
       $346 = $27;
       $347 = (($346) + 1)|0;
       $27 = $347;
      }
      $348 = HEAP32[12803]|0;
      $349 = $16;
      HEAP32[$349>>2] = $348;
      $350 = HEAP32[12802]|0;
      $351 = $18;
      HEAP32[$351>>2] = $350;
      $352 = HEAP32[12787]|0;
      $353 = ($352|0)!=(0|0);
      if ($353) {
       $354 = HEAP32[12787]|0;
       $355 = HEAP32[12794]|0;
       $356 = HEAP32[12802]|0;
       $357 = $356<<2;
       _memcpy(($354|0),($355|0),($357|0))|0;
      }
      $358 = $21;
      $359 = ($358|0)!=(0|0);
      if (!($359)) {
       break;
      }
      $29 = 0;
      $27 = 0;
      while(1) {
       $360 = $27;
       $361 = $16;
       $362 = HEAP32[$361>>2]|0;
       $363 = ($360|0)<($362|0);
       if (!($363)) {
        break L122;
       }
       $364 = $27;
       $365 = $21;
       $366 = (($365) + ($364<<2)|0);
       $367 = HEAP32[$366>>2]|0;
       $368 = ($367|0)==(-1);
       if ($368) {
        $369 = $29;
        $370 = $27;
        $371 = $21;
        $372 = (($371) + ($370<<2)|0);
        HEAP32[$372>>2] = $369;
       } else {
        $373 = $27;
        $374 = $21;
        $375 = (($374) + ($373<<2)|0);
        $376 = HEAP32[$375>>2]|0;
        $29 = $376;
       }
       $377 = $27;
       $378 = (($377) + 1)|0;
       $27 = $378;
      }
     }
    } while(0);
    $379 = HEAP32[12797]|0;
    $380 = ($379|0)!=(0|0);
    if ($380) {
     $381 = HEAP32[12785]|0;
     $382 = HEAP32[12797]|0;
     $383 = HEAP32[12778]|0;
     _memcpy(($381|0),($382|0),($383|0))|0;
     $384 = HEAP32[12778]|0;
     $385 = HEAP32[12785]|0;
     $386 = (($385) + ($384)|0);
     HEAP8[$386>>0] = 0;
    }
    $387 = $23;
    $388 = ($387|0)!=(0|0);
    do {
     if ($388) {
      $389 = $23;
      $390 = HEAP32[$389>>2]|0;
      $391 = ($390|0)!=(-1);
      if (!($391)) {
       break;
      }
      $392 = $21;
      $393 = ($392|0)!=(0|0);
      if ($393) {
       $394 = $23;
       $395 = HEAP32[$394>>2]|0;
       $396 = $21;
       $397 = (($396) + ($395<<2)|0);
       $398 = HEAP32[$397>>2]|0;
       $399 = $23;
       HEAP32[$399>>2] = $398;
       break;
      } else {
       $400 = HEAP32[12790]|0;
       $401 = $23;
       HEAP32[$401>>2] = $400;
       break;
      }
     }
    } while(0);
    $402 = $26;
    $403 = ($402|0)!=(0|0);
    if ($403) {
     $404 = HEAP32[12798]|0;
     $405 = $26;
     HEAP32[$405>>2] = $404;
    }
    $406 = $18;
    $407 = HEAP32[$406>>2]|0;
    HEAP32[$vararg_buffer12>>2] = $407;
    _logMessage(0,7269,$vararg_buffer12);
    $408 = $17;
    $409 = $18;
    $410 = HEAP32[$409>>2]|0;
    _logWidecharBuf(0,7301,$408,$410);
    $411 = $28;
    $13 = $411;
    $412 = $13;
    STACKTOP = sp;return ($412|0);
   }
  }
 }
 $13 = 0;
 $412 = $13;
 STACKTOP = sp;return ($412|0);
}
function _checkAttr($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $3;
 $7 = HEAP32[12900]|0;
 $8 = ($6|0)!=($7|0);
 if ($8) {
  $9 = $3;
  $10 = $5;
  $11 = (_findCharOrDots($9,$10)|0);
  $12 = ((($11)) + 12|0);
  $13 = HEAP32[$12>>2]|0;
  HEAP32[12901] = $13;
  $14 = $3;
  HEAP32[12900] = $14;
 }
 $15 = HEAP32[12901]|0;
 $16 = $4;
 $17 = $15 & $16;
 $18 = ($17|0)!=(0);
 $19 = $18 ? 1 : 0;
 STACKTOP = sp;return ($19|0);
}
function _translateString() {
 var $$off = 0, $$old = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0;
 var $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0;
 var $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0;
 var $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0;
 var $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0;
 var $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0;
 var $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0;
 var $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0;
 var $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0;
 var $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0;
 var $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0;
 var $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0;
 var $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0;
 var $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0;
 var $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0;
 var $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0;
 var $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0;
 var $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0;
 var $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0;
 var $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0;
 var $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0;
 var $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $cond = 0, $cond$old = 0, $or$cond = 0, $or$cond11 = 0, $or$cond12 = 0, $or$cond7 = 0, $or$cond9 = 0, $switch = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $1 = sp + 24|0;
 HEAP32[186] = 1;
 (_markSyllables()|0);
 HEAP32[12824] = 0;
 HEAP32[12825] = 0;
 HEAP32[12826] = 0;
 HEAP32[12827] = 0;
 HEAP32[12804] = 111;
 HEAP32[12828] = 0;
 HEAP32[12829] = 0;
 HEAP32[12830] = 0;
 HEAP32[12831] = 0;
 HEAP32[12832] = 0;
 HEAP32[12833] = -1;
 HEAP32[12802] = 0;
 HEAP32[12805] = 0;
 HEAP32[12806] = 1;
 HEAP32[12834] = 0;
 _resetPassVariables();
 $8 = HEAP32[12781]|0;
 $9 = ($8|0)!=(0|0);
 L1: do {
  if ($9) {
   $10 = HEAP32[12776]|0;
   $11 = ((($10)) + 1124|0);
   $12 = ((($11)) + 20|0);
   $13 = HEAP32[$12>>2]|0;
   $14 = ($13|0)!=(0);
   if ($14) {
    $0 = 0;
    while(1) {
     $15 = $0;
     $16 = HEAP32[12778]|0;
     $17 = ($15|0)<($16|0);
     if (!($17)) {
      break L1;
     }
     $18 = $0;
     $19 = HEAP32[12777]|0;
     $20 = (($19) + ($18<<2)|0);
     $21 = HEAP32[$20>>2]|0;
     $22 = (_checkAttr($21,16,0)|0);
     $23 = ($22|0)!=(0);
     if ($23) {
      $24 = $0;
      $25 = HEAP32[12781]|0;
      $26 = (($25) + ($24<<1)|0);
      $27 = HEAP16[$26>>1]|0;
      $28 = $27&65535;
      $29 = $28 | 32768;
      $30 = $29&65535;
      HEAP16[$26>>1] = $30;
     }
     $31 = $0;
     $32 = (($31) + 1)|0;
     $0 = $32;
    }
   }
  }
 } while(0);
 _markEmphases();
 L11: while(1) {
  $33 = HEAP32[12805]|0;
  $34 = HEAP32[12778]|0;
  $35 = ($33|0)<($34|0);
  if (!($35)) {
   label = 125;
   break;
  }
  _setBefore();
  $36 = (_insertBrailleIndicators(0)|0);
  $37 = ($36|0)!=(0);
  if (!($37)) {
   break;
  }
  $38 = HEAP32[12805]|0;
  $39 = HEAP32[12778]|0;
  $40 = ($38|0)>=($39|0);
  if ($40) {
   label = 125;
   break;
  }
  $41 = HEAP32[12827]|0;
  $42 = ($41|0)!=(0);
  if (!($42)) {
   $43 = HEAP32[12805]|0;
   $44 = HEAP32[12781]|0;
   $45 = (($44) + ($43<<1)|0);
   $46 = HEAP16[$45>>1]|0;
   $47 = $46&65535;
   $48 = $47 & 4096;
   HEAP32[12827] = $48;
  }
  $49 = HEAP32[12805]|0;
  $50 = HEAP32[12781]|0;
  $51 = (($50) + ($49<<1)|0);
  $52 = HEAP16[$51>>1]|0;
  $53 = $52&65535;
  $54 = $53 & 2048;
  $55 = ($54|0)!=(0);
  if ($55) {
   $56 = HEAP32[12805]|0;
   $57 = HEAP32[12777]|0;
   $58 = (($57) + ($56<<2)|0);
   $59 = HEAP32[$58>>2]|0;
   $60 = (_getDotsForChar($59)|0);
   HEAP32[$1>>2] = $60;
   $61 = HEAP32[12805]|0;
   $62 = HEAP32[12777]|0;
   $63 = (($62) + ($61<<2)|0);
   $64 = HEAP32[$63>>2]|0;
   $65 = ($64>>>0)<(32);
   if ($65) {
    break;
   }
   $66 = HEAP32[12805]|0;
   $67 = HEAP32[12777]|0;
   $68 = (($67) + ($66<<2)|0);
   $69 = HEAP32[$68>>2]|0;
   $70 = ($69>>>0)>(126);
   if ($70) {
    break;
   }
   $71 = (_for_updatePositions($1,1,1,0)|0);
   $72 = ($71|0)!=(0);
   if (!($72)) {
    break;
   }
   $73 = HEAP32[12805]|0;
   $74 = (($73) + 1)|0;
   HEAP32[12805] = $74;
   $75 = HEAP32[12805]|0;
   HEAP32[12834] = $75;
   continue;
  }
  _for_selectRule();
  $76 = HEAP32[12807]|0;
  $77 = ($76|0)!=(70);
  $78 = HEAP32[12799]|0;
  $79 = ($78|0)!=(0|0);
  $or$cond11 = $77 & $79;
  if ($or$cond11) {
   $80 = HEAP32[12798]|0;
   $81 = HEAP32[12800]|0;
   $82 = ($80|0)<($81|0);
   if ($82) {
    $83 = HEAP32[12808]|0;
    $84 = HEAP32[12798]|0;
    $85 = (($84) + 1)|0;
    HEAP32[12798] = $85;
    $86 = HEAP32[12799]|0;
    $87 = (($86) + ($84<<2)|0);
    HEAP32[$87>>2] = $83;
   }
  }
  HEAP32[12806] = 1;
  $88 = HEAP32[12805]|0;
  HEAP32[12833] = $88;
  $89 = HEAP32[12807]|0;
  $$off = (($89) + -84)|0;
  $switch = ($$off>>>0)<(2);
  if ($switch) {
   $90 = (_doCompbrl()|0);
   $91 = ($90|0)!=(0);
   if ($91) {
    continue;
   } else {
    break;
   }
  }
  $92 = (_insertBrailleIndicators(1)|0);
  $93 = ($92|0)!=(0);
  if (!($93)) {
   break;
  }
  _insertEmphases();
  $94 = HEAP32[12776]|0;
  $95 = ((($94)) + 20|0);
  $96 = HEAP32[$95>>2]|0;
  $97 = ($96|0)!=(0);
  if ($97) {
   _checkNumericMode();
  }
  $98 = HEAP32[12807]|0;
  $99 = ($98|0)==(70);
  if ($99) {
   $$old = HEAP32[12807]|0;
   $cond$old = ($$old|0)==(70);
   if ($cond$old) {
    label = 30;
   }
  } else {
   $100 = (_findForPassRule()|0);
   $101 = ($100|0)!=(0);
   $102 = HEAP32[12807]|0;
   $cond = ($102|0)==(70);
   $or$cond12 = $101 & $cond;
   if ($or$cond12) {
    label = 30;
   }
  }
  if ((label|0) == 30) {
   label = 0;
   $103 = HEAP32[12799]|0;
   $104 = ($103|0)!=(0|0);
   if ($104) {
    $105 = HEAP32[12798]|0;
    $106 = HEAP32[12800]|0;
    $107 = ($105|0)<($106|0);
    if ($107) {
     $108 = HEAP32[12808]|0;
     $109 = HEAP32[12798]|0;
     $110 = (($109) + 1)|0;
     HEAP32[12798] = $110;
     $111 = HEAP32[12799]|0;
     $112 = (($111) + ($109<<2)|0);
     HEAP32[$112>>2] = $108;
    }
   }
   $113 = (_passDoAction()|0);
   $114 = ($113|0)!=(0);
   if (!($114)) {
    break;
   }
   $115 = HEAP32[12809]|0;
   $116 = HEAP32[12805]|0;
   $117 = ($115|0)==($116|0);
   if ($117) {
    HEAP32[12806] = 0;
   }
   $118 = HEAP32[12809]|0;
   HEAP32[12805] = $118;
   continue;
  }
  $119 = HEAP32[12805]|0;
  $120 = HEAP32[12777]|0;
  $121 = (($120) + ($119<<2)|0);
  $122 = HEAP32[$121>>2]|0;
  $123 = (_checkAttr($122,8193,0)|0);
  $124 = ($123|0)!=(0);
  if ($124) {
   HEAP32[12827] = 0;
  }
  $125 = HEAP32[12807]|0;
  switch ($125|0) {
  case 104:  {
   $126 = HEAP32[12776]|0;
   $127 = ((($126)) + 36|0);
   $128 = HEAP32[$127>>2]|0;
   $129 = ($128|0)!=(0);
   if ($129) {
    $130 = HEAP32[12805]|0;
    $131 = HEAP32[12777]|0;
    $132 = (($131) + ($130<<2)|0);
    $133 = HEAP32[$132>>2]|0;
    $134 = (_checkAttr($133,2,0)|0);
    $135 = ($134|0)!=(0);
    if ($135) {
     $136 = HEAP32[12802]|0;
     $137 = (($136) + -1)|0;
     HEAP32[12802] = $137;
    }
   }
   break;
  }
  case 57: case 75:  {
   HEAP32[12827] = 0;
   break;
  }
  case 86:  {
   $138 = HEAP32[12804]|0;
   $139 = ($138|0)==(86);
   if ($139) {
    $2 = 0;
    while(1) {
     $140 = HEAP32[12802]|0;
     $141 = ($140|0)>(0);
     if (!($141)) {
      break;
     }
     $142 = HEAP32[12802]|0;
     $143 = (($142) - 1)|0;
     $144 = HEAP32[12801]|0;
     $145 = (($144) + ($143<<2)|0);
     $146 = HEAP32[$145>>2]|0;
     $147 = (_checkAttr($146,1,1)|0);
     $148 = ($147|0)!=(0);
     if (!($148)) {
      break;
     }
     $149 = HEAP32[12802]|0;
     $150 = (($149) - 1)|0;
     $151 = HEAP32[12801]|0;
     $152 = (($151) + ($150<<2)|0);
     $153 = HEAP32[$152>>2]|0;
     $154 = ($153|0)==(65535);
     if ($154) {
      $2 = 1;
     }
     $155 = HEAP32[12802]|0;
     $156 = (($155) + -1)|0;
     HEAP32[12802] = $156;
    }
    $157 = $2;
    $158 = ($157|0)!=(0);
    if ($158) {
     $159 = HEAP32[12802]|0;
     $160 = HEAP32[12801]|0;
     $161 = (($160) + ($159<<2)|0);
     HEAP32[$161>>2] = 65535;
     $162 = HEAP32[12802]|0;
     $163 = (($162) + 1)|0;
     HEAP32[12802] = $163;
    }
   }
   break;
  }
  case 105:  {
   $164 = HEAP32[12776]|0;
   $165 = ((($164)) + 20|0);
   $166 = HEAP32[$165>>2]|0;
   $167 = ($166|0)!=(0);
   if (!($167)) {
    $168 = HEAP32[12776]|0;
    $169 = ((($168)) + 40|0);
    $170 = HEAP32[$169>>2]|0;
    $171 = ($170|0)!=(0);
    if ($171) {
     $172 = HEAP32[12776]|0;
     $173 = ((($172)) + 40|0);
     $174 = HEAP32[$173>>2]|0;
     $175 = HEAP32[12776]|0;
     $176 = ((($175)) + 31332|0);
     $177 = (($176) + ($174<<2)|0);
     $3 = $177;
     $178 = $3;
     $179 = ((($178)) + 24|0);
     $180 = HEAP16[$179>>1]|0;
     $181 = $180 << 16 >> 16;
     $182 = $3;
     $183 = ((($182)) + 28|0);
     $184 = (($183) + ($181<<2)|0);
     $185 = $3;
     $186 = ((($185)) + 24|0);
     $187 = HEAP16[$186>>1]|0;
     $188 = $187 << 16 >> 16;
     $189 = $3;
     $190 = ((($189)) + 26|0);
     $191 = HEAP16[$190>>1]|0;
     $192 = $191 << 16 >> 16;
     $193 = (_for_updatePositions($184,$188,$192,0)|0);
     $194 = ($193|0)!=(0);
     if (!($194)) {
      break L11;
     }
    }
   }
   HEAP32[12807] = 103;
   break;
  }
  case 83:  {
   $195 = HEAP32[12827]|0;
   $196 = ($195|0)!=(0);
   if ($196) {
    continue L11;
   }
   (_doNocont()|0);
   continue L11;
   break;
  }
  default: {
  }
  }
  $197 = HEAP32[12807]|0;
  L77: do {
   switch ($197|0) {
   case 69:  {
    $198 = HEAP32[12820]|0;
    $199 = HEAP32[12805]|0;
    $200 = (($199) + ($198))|0;
    HEAP32[12805] = $200;
    $201 = HEAP32[12820]|0;
    $202 = HEAP32[12808]|0;
    $203 = ((($202)) + 28|0);
    $204 = (($203) + ($201<<2)|0);
    $205 = HEAP32[12808]|0;
    $206 = ((($205)) + 26|0);
    $207 = HEAP16[$206>>1]|0;
    $208 = $207 << 16 >> 16;
    $209 = (_putCharacters($204,$208)|0);
    $210 = ($209|0)!=(0);
    if (!($210)) {
     break L11;
    }
    break;
   }
   case 111:  {
    $211 = HEAP32[12805]|0;
    $212 = HEAP32[12777]|0;
    $213 = (($212) + ($211<<2)|0);
    $214 = HEAP32[$213>>2]|0;
    $215 = (_undefinedCharacter($214)|0);
    $216 = ($215|0)!=(0);
    if (!($216)) {
     break L11;
    }
    $217 = HEAP32[12805]|0;
    $218 = (($217) + 1)|0;
    HEAP32[12805] = $218;
    break;
   }
   case 63:  {
    $219 = HEAP32[12788]|0;
    $220 = $219 & 34;
    $221 = ($220|0)!=(0);
    if ($221) {
     $222 = HEAP32[12805]|0;
     $223 = HEAP32[12791]|0;
     $224 = ($222|0)>=($223|0);
     if ($224) {
      $225 = HEAP32[12805]|0;
      $226 = HEAP32[12792]|0;
      $227 = ($225|0)<=($226|0);
      if ($227) {
       label = 69;
       break L77;
      }
     }
    }
    $228 = HEAP32[12808]|0;
    $229 = ((($228)) + 26|0);
    $230 = HEAP16[$229>>1]|0;
    $231 = $230 << 16 >> 16;
    $232 = ($231|0)==(1);
    if ($232) {
     $233 = HEAP32[12776]|0;
     $234 = ((($233)) + 1124|0);
     $235 = ((($234)) + 20|0);
     $236 = HEAP32[$235>>2]|0;
     $237 = ($236|0)!=(0);
     if ($237) {
      $238 = HEAP32[12835]|0;
      $239 = ((($238)) + 24|0);
      $240 = HEAP32[$239>>2]|0;
      (_putCharacter($240)|0);
      $241 = HEAP32[12805]|0;
      $242 = (($241) + 1)|0;
      HEAP32[12805] = $242;
     } else {
      label = 69;
     }
    } else {
     label = 69;
    }
    break;
   }
   default: {
    label = 69;
   }
   }
  } while(0);
  do {
   if ((label|0) == 69) {
    label = 0;
    $243 = HEAP32[12789]|0;
    $244 = ($243|0)==(2);
    if ($244) {
     HEAP32[12789] = 1;
     break;
    }
    $245 = HEAP32[12808]|0;
    $246 = ((($245)) + 26|0);
    $247 = HEAP16[$246>>1]|0;
    $248 = ($247<<16>>16)!=(0);
    L93: do {
     if ($248) {
      $249 = HEAP32[12820]|0;
      $250 = HEAP32[12808]|0;
      $251 = ((($250)) + 28|0);
      $252 = (($251) + ($249<<2)|0);
      $253 = HEAP32[12820]|0;
      $254 = HEAP32[12808]|0;
      $255 = ((($254)) + 26|0);
      $256 = HEAP16[$255>>1]|0;
      $257 = $256 << 16 >> 16;
      $258 = (_for_updatePositions($252,$253,$257,0)|0);
      $259 = ($258|0)!=(0);
      if (!($259)) {
       break L11;
      }
     } else {
      $0 = 0;
      while(1) {
       $260 = $0;
       $261 = HEAP32[12820]|0;
       $262 = ($260|0)<($261|0);
       if (!($262)) {
        break L93;
       }
       $263 = HEAP32[12805]|0;
       $264 = HEAP32[12777]|0;
       $265 = (($264) + ($263<<2)|0);
       $266 = HEAP32[$265>>2]|0;
       $267 = (_putCharacter($266)|0);
       $268 = ($267|0)!=(0);
       if (!($268)) {
        break L11;
       }
       $269 = HEAP32[12805]|0;
       $270 = (($269) + 1)|0;
       HEAP32[12805] = $270;
       $271 = $0;
       $272 = (($271) + 1)|0;
       $0 = $272;
      }
     }
    } while(0);
    $273 = HEAP32[12789]|0;
    $274 = ($273|0)==(2);
    if ($274) {
     HEAP32[12789] = 1;
     break;
    }
    $275 = HEAP32[12808]|0;
    $276 = ((($275)) + 26|0);
    $277 = HEAP16[$276>>1]|0;
    $278 = ($277<<16>>16)!=(0);
    if ($278) {
     $279 = HEAP32[12820]|0;
     $280 = HEAP32[12805]|0;
     $281 = (($280) + ($279))|0;
     HEAP32[12805] = $281;
    }
   }
  } while(0);
  $282 = HEAP32[12807]|0;
  L106: do {
   switch ($282|0) {
   case 75:  {
    $283 = HEAP32[12778]|0;
    $284 = HEAP32[12820]|0;
    $285 = (($283) - ($284))|0;
    $4 = $285;
    $286 = HEAP32[12788]|0;
    $287 = $286 & 34;
    $288 = ($287|0)!=(0);
    if ($288) {
     $289 = HEAP32[12791]|0;
     $290 = $4;
     $291 = ($289|0)<($290|0);
     if ($291) {
      $292 = HEAP32[12791]|0;
      $293 = (($292) - 1)|0;
      $4 = $293;
     }
    }
    while(1) {
     $294 = HEAP32[12805]|0;
     $295 = $4;
     $296 = ($294|0)<=($295|0);
     if (!($296)) {
      break L106;
     }
     $297 = HEAP32[12808]|0;
     $298 = ((($297)) + 28|0);
     $299 = HEAP32[12805]|0;
     $300 = HEAP32[12777]|0;
     $301 = (($300) + ($299<<2)|0);
     $302 = HEAP32[12820]|0;
     $303 = (_compareChars($298,$301,$302,0)|0);
     $304 = ($303|0)!=(0);
     if (!($304)) {
      break L106;
     }
     $305 = HEAP32[12786]|0;
     $306 = ($305|0)!=(0|0);
     L115: do {
      if ($306) {
       $5 = 0;
       while(1) {
        $307 = $5;
        $308 = HEAP32[12820]|0;
        $309 = ($307|0)<($308|0);
        if (!($309)) {
         break L115;
        }
        $310 = HEAP32[12802]|0;
        $311 = (($310) - 1)|0;
        $312 = HEAP32[12805]|0;
        $313 = $5;
        $314 = (($312) + ($313))|0;
        $315 = HEAP32[12795]|0;
        $316 = (($315) + ($314<<2)|0);
        $317 = HEAP32[$316>>2]|0;
        $318 = HEAP32[12786]|0;
        $319 = (($318) + ($317<<2)|0);
        HEAP32[$319>>2] = $311;
        $320 = $5;
        $321 = (($320) + 1)|0;
        $5 = $321;
       }
      }
     } while(0);
     $322 = HEAP32[12789]|0;
     $323 = ($322|0)!=(0);
     do {
      if (!($323)) {
       $324 = HEAP32[12805]|0;
       $325 = HEAP32[12790]|0;
       $326 = ($324|0)<=($325|0);
       if (!($326)) {
        break;
       }
       $327 = HEAP32[12790]|0;
       $328 = HEAP32[12805]|0;
       $329 = HEAP32[12820]|0;
       $330 = (($328) + ($329))|0;
       $331 = ($327|0)<($330|0);
       if (!($331)) {
        break;
       }
       HEAP32[12789] = 1;
       $332 = HEAP32[12802]|0;
       $333 = (($332) - 1)|0;
       HEAP32[12790] = $333;
      }
     } while(0);
     $334 = HEAP32[12820]|0;
     $335 = HEAP32[12805]|0;
     $336 = (($335) + ($334))|0;
     HEAP32[12805] = $336;
    }
    break;
   }
   case 76:  {
    $337 = HEAP32[12778]|0;
    $338 = HEAP32[12820]|0;
    $339 = (($337) - ($338))|0;
    $6 = $339;
    $340 = HEAP32[12788]|0;
    $341 = $340 & 34;
    $342 = ($341|0)!=(0);
    if ($342) {
     $343 = HEAP32[12791]|0;
     $344 = $6;
     $345 = ($343|0)<($344|0);
     if ($345) {
      $346 = HEAP32[12791]|0;
      $347 = (($346) - 1)|0;
      $6 = $347;
     }
    }
    while(1) {
     $348 = HEAP32[12805]|0;
     $349 = $6;
     $350 = ($348|0)<=($349|0);
     if (!($350)) {
      break;
     }
     $351 = HEAP32[12836]|0;
     $352 = HEAP32[12805]|0;
     $353 = HEAP32[12777]|0;
     $354 = (($353) + ($352<<2)|0);
     $355 = HEAP32[12837]|0;
     $356 = (_compareChars($351,$354,$355,0)|0);
     $357 = ($356|0)!=(0);
     if (!($357)) {
      break;
     }
     $358 = HEAP32[12786]|0;
     $359 = ($358|0)!=(0|0);
     L134: do {
      if ($359) {
       $7 = 0;
       while(1) {
        $360 = $7;
        $361 = HEAP32[12820]|0;
        $362 = ($360|0)<($361|0);
        if (!($362)) {
         break L134;
        }
        $363 = HEAP32[12802]|0;
        $364 = (($363) - 1)|0;
        $365 = HEAP32[12805]|0;
        $366 = $7;
        $367 = (($365) + ($366))|0;
        $368 = HEAP32[12795]|0;
        $369 = (($368) + ($367<<2)|0);
        $370 = HEAP32[$369>>2]|0;
        $371 = HEAP32[12786]|0;
        $372 = (($371) + ($370<<2)|0);
        HEAP32[$372>>2] = $364;
        $373 = $7;
        $374 = (($373) + 1)|0;
        $7 = $374;
       }
      }
     } while(0);
     $375 = HEAP32[12789]|0;
     $376 = ($375|0)!=(0);
     do {
      if (!($376)) {
       $377 = HEAP32[12805]|0;
       $378 = HEAP32[12790]|0;
       $379 = ($377|0)<=($378|0);
       if (!($379)) {
        break;
       }
       $380 = HEAP32[12790]|0;
       $381 = HEAP32[12805]|0;
       $382 = HEAP32[12820]|0;
       $383 = (($381) + ($382))|0;
       $384 = ($380|0)<($383|0);
       if (!($384)) {
        break;
       }
       HEAP32[12789] = 1;
       $385 = HEAP32[12802]|0;
       $386 = (($385) - 1)|0;
       HEAP32[12790] = $386;
      }
     } while(0);
     $387 = HEAP32[12837]|0;
     $388 = HEAP32[12820]|0;
     $389 = (($387) + ($388))|0;
     $390 = HEAP32[12805]|0;
     $391 = (($390) + ($389))|0;
     HEAP32[12805] = $391;
    }
    $392 = HEAP32[12820]|0;
    $393 = HEAP32[12805]|0;
    $394 = (($393) - ($392))|0;
    HEAP32[12805] = $394;
    break;
   }
   case 90: case 89:  {
    while(1) {
     $395 = HEAP32[12805]|0;
     $396 = HEAP32[12778]|0;
     $397 = ($395|0)<($396|0);
     if (!($397)) {
      break L106;
     }
     $398 = HEAP32[12805]|0;
     $399 = HEAP32[12777]|0;
     $400 = (($399) + ($398<<2)|0);
     $401 = HEAP32[$400>>2]|0;
     $402 = (_checkAttr($401,1,0)|0);
     $403 = ($402|0)!=(0);
     if (!($403)) {
      break L106;
     }
     $404 = HEAP32[12805]|0;
     $405 = HEAP32[12777]|0;
     $406 = (($405) + ($404<<2)|0);
     $407 = HEAP32[$406>>2]|0;
     $408 = ($407|0)!=(65535);
     if (!($408)) {
      break L106;
     }
     $409 = HEAP32[12805]|0;
     $410 = (($409) + 1)|0;
     HEAP32[12805] = $410;
    }
    break;
   }
   default: {
   }
   }
  } while(0);
  $411 = HEAP32[12805]|0;
  $412 = ($411|0)>(0);
  if ($412) {
   $413 = HEAP32[12805]|0;
   $414 = (($413) - 1)|0;
   $415 = HEAP32[12777]|0;
   $416 = (($415) + ($414<<2)|0);
   $417 = HEAP32[$416>>2]|0;
   $418 = (_checkAttr($417,1,0)|0);
   $419 = ($418|0)!=(0);
   $420 = HEAP32[12807]|0;
   $421 = ($420|0)!=(90);
   $or$cond = $419 & $421;
   if ($or$cond) {
    $422 = HEAP32[12805]|0;
    HEAP32[12825] = $422;
    $423 = HEAP32[12802]|0;
    HEAP32[12826] = $423;
   }
  }
  $424 = HEAP32[12785]|0;
  $425 = ($424|0)!=(0|0);
  if ($425) {
   $426 = HEAP32[12805]|0;
   $427 = HEAP32[12785]|0;
   $428 = (($427) + ($426)|0);
   $429 = HEAP8[$428>>0]|0;
   $430 = $429&255;
   $431 = ($430|0)>=(48);
   if ($431) {
    $432 = HEAP32[12805]|0;
    $433 = HEAP32[12785]|0;
    $434 = (($433) + ($432)|0);
    $435 = HEAP8[$434>>0]|0;
    $436 = $435&255;
    $437 = ($436|0)<=(57);
    if ($437) {
     $438 = HEAP32[12805]|0;
     $439 = HEAP32[12785]|0;
     $440 = (($439) + ($438)|0);
     $441 = HEAP8[$440>>0]|0;
     $442 = HEAP32[12802]|0;
     $443 = HEAP32[12797]|0;
     $444 = (($443) + ($442)|0);
     HEAP8[$444>>0] = $441;
    }
   }
  }
  $445 = HEAP32[12807]|0;
  $446 = ($445>>>0)>=(78);
  $447 = HEAP32[12807]|0;
  $448 = ($447>>>0)<=(111);
  $or$cond7 = $446 & $448;
  if (!($or$cond7)) {
   $449 = HEAP32[12807]|0;
   $450 = ($449>>>0)>=(58);
   $451 = HEAP32[12807]|0;
   $452 = ($451>>>0)<=(67);
   $or$cond9 = $450 & $452;
   if (!($or$cond9)) {
    continue;
   }
  }
  $453 = HEAP32[12807]|0;
  HEAP32[12804] = $453;
 }
 if ((label|0) == 125) {
  HEAP32[12807] = 57;
  _insertEmphases();
 }
 $454 = HEAP32[12826]|0;
 $455 = ($454|0)!=(0);
 if ($455) {
  $456 = HEAP32[12805]|0;
  $457 = HEAP32[12778]|0;
  $458 = ($456|0)<($457|0);
  if ($458) {
   $459 = HEAP32[12805]|0;
   $460 = HEAP32[12777]|0;
   $461 = (($460) + ($459<<2)|0);
   $462 = HEAP32[$461>>2]|0;
   $463 = (_checkAttr($462,1,0)|0);
   $464 = ($463|0)!=(0);
   if (!($464)) {
    $465 = HEAP32[12825]|0;
    HEAP32[12805] = $465;
    $466 = HEAP32[12826]|0;
    HEAP32[12802] = $466;
   }
  }
 }
 $467 = HEAP32[12805]|0;
 $468 = HEAP32[12778]|0;
 $469 = ($467|0)<($468|0);
 if (!($469)) {
  $480 = HEAP32[12805]|0;
  HEAP32[12803] = $480;
  STACKTOP = sp;return 1;
 }
 while(1) {
  $470 = HEAP32[12805]|0;
  $471 = HEAP32[12777]|0;
  $472 = (($471) + ($470<<2)|0);
  $473 = HEAP32[$472>>2]|0;
  $474 = (_checkAttr($473,1,0)|0);
  $475 = ($474|0)!=(0);
  if (!($475)) {
   label = 133;
   break;
  }
  $476 = HEAP32[12805]|0;
  $477 = (($476) + 1)|0;
  HEAP32[12805] = $477;
  $478 = HEAP32[12778]|0;
  $479 = ($477|0)==($478|0);
  if ($479) {
   label = 133;
   break;
  }
 }
 if ((label|0) == 133) {
  $480 = HEAP32[12805]|0;
  HEAP32[12803] = $480;
  STACKTOP = sp;return 1;
 }
 return (0)|0;
}
function _makeCorrections() {
 var $$old = 0, $$old2 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0;
 var $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0;
 var $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0;
 var $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $or$cond3 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $9 = HEAP32[12776]|0;
 $10 = ((($9)) + 8|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ($11|0)!=(0);
 if (!($12)) {
  $0 = 1;
  $155 = $0;
  STACKTOP = sp;return ($155|0);
 }
 HEAP32[12805] = 0;
 HEAP32[12802] = 0;
 HEAP32[12806] = 1;
 _resetPassVariables();
 L5: while(1) {
  $13 = HEAP32[12805]|0;
  $14 = HEAP32[12778]|0;
  $15 = ($13|0)<($14|0);
  if (!($15)) {
   label = 31;
   break;
  }
  $16 = HEAP32[12778]|0;
  $17 = HEAP32[12805]|0;
  $18 = (($16) - ($17))|0;
  $1 = $18;
  $19 = HEAP32[12805]|0;
  $20 = HEAP32[12777]|0;
  $21 = (($20) + ($19<<2)|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = (_findCharOrDots($22,0)|0);
  $2 = $23;
  $4 = 0;
  $24 = (_findForPassRule()|0);
  $25 = ($24|0)==(0);
  $26 = $4;
  $27 = ($26|0)<(3);
  $or$cond3 = $25 & $27;
  L8: do {
   if ($or$cond3) {
    while(1) {
     $5 = 0;
     $6 = 0;
     $28 = $4;
     switch ($28|0) {
     case 0:  {
      $29 = $1;
      $30 = ($29|0)>=(2);
      if ($30) {
       $31 = $2;
       $32 = ((($31)) + 24|0);
       $33 = HEAP32[$32>>2]|0;
       $34 = $33 << 8;
       $6 = $34;
       $35 = HEAP32[12805]|0;
       $36 = (($35) + 1)|0;
       $37 = HEAP32[12777]|0;
       $38 = (($37) + ($36<<2)|0);
       $39 = HEAP32[$38>>2]|0;
       $40 = (_findCharOrDots($39,0)|0);
       $3 = $40;
       $41 = $3;
       $42 = ((($41)) + 24|0);
       $43 = HEAP32[$42>>2]|0;
       $44 = $6;
       $45 = (($44) + ($43))|0;
       $6 = $45;
       $46 = $6;
       $47 = (($46>>>0) % 1123)&-1;
       $6 = $47;
       $48 = $6;
       $49 = HEAP32[12776]|0;
       $50 = ((($49)) + 22348|0);
       $51 = (($50) + ($48<<2)|0);
       $52 = HEAP32[$51>>2]|0;
       $5 = $52;
      }
      break;
     }
     case 1:  {
      $53 = $1;
      $54 = ($53|0)>=(1);
      if ($54) {
       $1 = 1;
       $55 = $2;
       $56 = ((($55)) + 8|0);
       $57 = HEAP32[$56>>2]|0;
       $5 = $57;
      }
      break;
     }
     case 2:  {
      HEAP32[12807] = 78;
      $5 = 0;
      break;
     }
     default: {
     }
     }
     while(1) {
      $58 = $5;
      $59 = ($58|0)!=(0);
      if (!($59)) {
       break;
      }
      $60 = $5;
      $61 = HEAP32[12776]|0;
      $62 = ((($61)) + 31332|0);
      $63 = (($62) + ($60<<2)|0);
      HEAP32[12808] = $63;
      $64 = HEAP32[12808]|0;
      $65 = ((($64)) + 20|0);
      $66 = HEAP32[$65>>2]|0;
      HEAP32[12807] = $66;
      $67 = HEAP32[12808]|0;
      $68 = ((($67)) + 24|0);
      $69 = HEAP16[$68>>1]|0;
      $70 = $69 << 16 >> 16;
      HEAP32[12820] = $70;
      $71 = $4;
      $72 = ($71|0)==(1);
      if ($72) {
       label = 16;
      } else {
       $73 = HEAP32[12820]|0;
       $74 = $1;
       $75 = ($73|0)<=($74|0);
       if ($75) {
        $76 = HEAP32[12808]|0;
        $77 = ((($76)) + 28|0);
        $78 = HEAP32[12805]|0;
        $79 = HEAP32[12777]|0;
        $80 = (($79) + ($78<<2)|0);
        $81 = HEAP32[12820]|0;
        $82 = (_compareChars($77,$80,$81,0)|0);
        $83 = ($82|0)!=(0);
        if ($83) {
         label = 16;
        }
       }
      }
      if ((label|0) == 16) {
       label = 0;
       $84 = HEAP32[12806]|0;
       $85 = ($84|0)!=(0);
       $86 = HEAP32[12807]|0;
       $87 = ($86|0)==(71);
       $or$cond = $85 & $87;
       if ($or$cond) {
        $88 = (_passDoTest()|0);
        $89 = ($88|0)!=(0);
        if ($89) {
         label = 18;
         break;
        }
       }
      }
      $90 = HEAP32[12808]|0;
      $91 = HEAP32[$90>>2]|0;
      $5 = $91;
     }
     if ((label|0) == 18) {
      label = 0;
      $4 = 4;
     }
     $92 = $4;
     $93 = (($92) + 1)|0;
     $4 = $93;
     $$old = $4;
     $$old2 = ($$old|0)<(3);
     if (!($$old2)) {
      break L8;
     }
    }
   }
  } while(0);
  HEAP32[12806] = 1;
  $94 = HEAP32[12807]|0;
  switch ($94|0) {
  case 78:  {
   $95 = HEAP32[12802]|0;
   $96 = HEAP32[12779]|0;
   $97 = ($95|0)>=($96|0);
   if ($97) {
    break L5;
   }
   $98 = HEAP32[12805]|0;
   $99 = HEAP32[12795]|0;
   $100 = (($99) + ($98<<2)|0);
   $101 = HEAP32[$100>>2]|0;
   $102 = HEAP32[12802]|0;
   $103 = HEAP32[12794]|0;
   $104 = (($103) + ($102<<2)|0);
   HEAP32[$104>>2] = $101;
   $105 = HEAP32[12805]|0;
   $106 = (($105) + 1)|0;
   HEAP32[12805] = $106;
   $107 = HEAP32[12777]|0;
   $108 = (($107) + ($105<<2)|0);
   $109 = HEAP32[$108>>2]|0;
   $110 = HEAP32[12802]|0;
   $111 = (($110) + 1)|0;
   HEAP32[12802] = $111;
   $112 = HEAP32[12801]|0;
   $113 = (($112) + ($110<<2)|0);
   HEAP32[$113>>2] = $109;
   continue L5;
   break;
  }
  case 71:  {
   break;
  }
  default: {
   continue L5;
  }
  }
  $114 = HEAP32[12799]|0;
  $115 = ($114|0)!=(0|0);
  if ($115) {
   $116 = HEAP32[12798]|0;
   $117 = HEAP32[12800]|0;
   $118 = ($116|0)<($117|0);
   if ($118) {
    $119 = HEAP32[12808]|0;
    $120 = HEAP32[12798]|0;
    $121 = (($120) + 1)|0;
    HEAP32[12798] = $121;
    $122 = HEAP32[12799]|0;
    $123 = (($122) + ($120<<2)|0);
    HEAP32[$123>>2] = $119;
   }
  }
  $124 = (_passDoAction()|0);
  $125 = ($124|0)!=(0);
  if (!($125)) {
   break;
  }
  $126 = HEAP32[12809]|0;
  $127 = HEAP32[12805]|0;
  $128 = ($126|0)==($127|0);
  if ($128) {
   HEAP32[12806] = 0;
  }
  $129 = HEAP32[12809]|0;
  HEAP32[12805] = $129;
 }
 if ((label|0) == 31) {
  $130 = HEAP32[12802]|0;
  $131 = $130<<1;
  $132 = (_malloc($131)|0);
  $8 = $132;
  $133 = ($132|0)==(0|0);
  if ($133) {
   _outOfMemory();
  }
  $7 = 0;
  while(1) {
   $134 = $7;
   $135 = HEAP32[12802]|0;
   $136 = ($134|0)<($135|0);
   if (!($136)) {
    break;
   }
   $137 = $7;
   $138 = HEAP32[12794]|0;
   $139 = (($138) + ($137<<2)|0);
   $140 = HEAP32[$139>>2]|0;
   $141 = HEAP32[12781]|0;
   $142 = (($141) + ($140<<1)|0);
   $143 = HEAP16[$142>>1]|0;
   $144 = $7;
   $145 = $8;
   $146 = (($145) + ($144<<1)|0);
   HEAP16[$146>>1] = $143;
   $147 = $7;
   $148 = (($147) + 1)|0;
   $7 = $148;
  }
  $149 = HEAP32[12781]|0;
  $150 = $8;
  $151 = HEAP32[12802]|0;
  $152 = $151<<1;
  _memcpy(($149|0),($150|0),($152|0))|0;
  $153 = $8;
  _free($153);
 }
 $154 = HEAP32[12805]|0;
 HEAP32[12803] = $154;
 $0 = 1;
 $155 = $0;
 STACKTOP = sp;return ($155|0);
}
function _translatePass() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[12804] = 111;
 HEAP32[12802] = 0;
 HEAP32[12805] = 0;
 HEAP32[12806] = 1;
 _resetPassVariables();
 L1: while(1) {
  $0 = HEAP32[12805]|0;
  $1 = HEAP32[12778]|0;
  $2 = ($0|0)<($1|0);
  if (!($2)) {
   label = 13;
   break;
  }
  _passSelectRule();
  HEAP32[12806] = 1;
  $3 = HEAP32[12807]|0;
  switch ($3|0) {
  case 74: case 73: case 72: case 70:  {
   break;
  }
  case 78:  {
   $20 = HEAP32[12802]|0;
   $21 = (($20) + 1)|0;
   $22 = HEAP32[12779]|0;
   $23 = ($21|0)>($22|0);
   if ($23) {
    break L1;
   }
   $24 = HEAP32[12805]|0;
   $25 = HEAP32[12795]|0;
   $26 = (($25) + ($24<<2)|0);
   $27 = HEAP32[$26>>2]|0;
   $28 = HEAP32[12802]|0;
   $29 = HEAP32[12794]|0;
   $30 = (($29) + ($28<<2)|0);
   HEAP32[$30>>2] = $27;
   $31 = HEAP32[12805]|0;
   $32 = (($31) + 1)|0;
   HEAP32[12805] = $32;
   $33 = HEAP32[12777]|0;
   $34 = (($33) + ($31<<2)|0);
   $35 = HEAP32[$34>>2]|0;
   $36 = HEAP32[12802]|0;
   $37 = (($36) + 1)|0;
   HEAP32[12802] = $37;
   $38 = HEAP32[12801]|0;
   $39 = (($38) + ($36<<2)|0);
   HEAP32[$39>>2] = $35;
   continue L1;
   break;
  }
  default: {
   break L1;
  }
  }
  $4 = HEAP32[12799]|0;
  $5 = ($4|0)!=(0|0);
  if ($5) {
   $6 = HEAP32[12798]|0;
   $7 = HEAP32[12800]|0;
   $8 = ($6|0)<($7|0);
   if ($8) {
    $9 = HEAP32[12808]|0;
    $10 = HEAP32[12798]|0;
    $11 = (($10) + 1)|0;
    HEAP32[12798] = $11;
    $12 = HEAP32[12799]|0;
    $13 = (($12) + ($10<<2)|0);
    HEAP32[$13>>2] = $9;
   }
  }
  $14 = (_passDoAction()|0);
  $15 = ($14|0)!=(0);
  if (!($15)) {
   break;
  }
  $16 = HEAP32[12809]|0;
  $17 = HEAP32[12805]|0;
  $18 = ($16|0)==($17|0);
  if ($18) {
   HEAP32[12806] = 0;
  }
  $19 = HEAP32[12809]|0;
  HEAP32[12805] = $19;
 }
 if ((label|0) == 13) {
  $40 = HEAP32[12805]|0;
  $41 = HEAP32[12795]|0;
  $42 = (($41) + ($40<<2)|0);
  $43 = HEAP32[$42>>2]|0;
  $44 = HEAP32[12802]|0;
  $45 = HEAP32[12794]|0;
  $46 = (($45) + ($44<<2)|0);
  HEAP32[$46>>2] = $43;
 }
 $47 = HEAP32[12805]|0;
 $48 = HEAP32[12778]|0;
 $49 = ($47|0)<($48|0);
 if (!($49)) {
  return 1;
 }
 while(1) {
  $50 = HEAP32[12805]|0;
  $51 = HEAP32[12777]|0;
  $52 = (($51) + ($50<<2)|0);
  $53 = HEAP32[$52>>2]|0;
  $54 = (_checkAttr($53,1,1)|0);
  $55 = ($54|0)!=(0);
  if (!($55)) {
   label = 17;
   break;
  }
  $56 = HEAP32[12805]|0;
  $57 = (($56) + 1)|0;
  HEAP32[12805] = $57;
  $58 = HEAP32[12778]|0;
  $59 = ($57|0)==($58|0);
  if ($59) {
   label = 17;
   break;
  }
 }
 if ((label|0) == 17) {
  return 1;
 }
 return (0)|0;
}
function _passSelectRule() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_findForPassRule()|0);
 $1 = ($0|0)!=(0);
 if ($1) {
  return;
 }
 HEAP32[12807] = 78;
 return;
}
function _passDoAction() {
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $2 = 0;
 $3 = 0;
 $10 = HEAP32[12810]|0;
 $4 = $10;
 $11 = HEAP32[12811]|0;
 $5 = $11;
 $12 = HEAP32[12809]|0;
 $6 = $12;
 $13 = HEAP32[12802]|0;
 $7 = $13;
 $14 = $4;
 $15 = $5;
 $16 = (_copyCharacters($14,$15)|0);
 $17 = ($16|0)!=(0);
 if (!($17)) {
  $0 = 0;
  $198 = $0;
  STACKTOP = sp;return ($198|0);
 }
 $18 = HEAP32[12802]|0;
 $8 = $18;
 L5: while(1) {
  $19 = HEAP32[12812]|0;
  $20 = HEAP32[12808]|0;
  $21 = ((($20)) + 26|0);
  $22 = HEAP16[$21>>1]|0;
  $23 = $22 << 16 >> 16;
  $24 = ($19|0)<($23|0);
  if (!($24)) {
   label = 31;
   break;
  }
  $25 = HEAP32[12812]|0;
  $26 = HEAP32[12813]|0;
  $27 = (($26) + ($25<<2)|0);
  $28 = HEAP32[$27>>2]|0;
  switch ($28|0) {
  case 64: case 34:  {
   $29 = HEAP32[12802]|0;
   $30 = HEAP32[12812]|0;
   $31 = (($30) + 1)|0;
   $32 = HEAP32[12813]|0;
   $33 = (($32) + ($31<<2)|0);
   $34 = HEAP32[$33>>2]|0;
   $35 = (($29) + ($34))|0;
   $36 = HEAP32[12779]|0;
   $37 = ($35>>>0)>($36>>>0);
   if ($37) {
    label = 7;
    break L5;
   }
   $1 = 0;
   while(1) {
    $38 = $1;
    $39 = HEAP32[12812]|0;
    $40 = (($39) + 1)|0;
    $41 = HEAP32[12813]|0;
    $42 = (($41) + ($40<<2)|0);
    $43 = HEAP32[$42>>2]|0;
    $44 = ($38>>>0)<($43>>>0);
    if (!($44)) {
     break;
    }
    $45 = HEAP32[12811]|0;
    $46 = HEAP32[12795]|0;
    $47 = (($46) + ($45<<2)|0);
    $48 = HEAP32[$47>>2]|0;
    $49 = HEAP32[12802]|0;
    $50 = $1;
    $51 = (($49) + ($50))|0;
    $52 = HEAP32[12794]|0;
    $53 = (($52) + ($51<<2)|0);
    HEAP32[$53>>2] = $48;
    $54 = $1;
    $55 = (($54) + 1)|0;
    $1 = $55;
   }
   $56 = HEAP32[12802]|0;
   $57 = HEAP32[12801]|0;
   $58 = (($57) + ($56<<2)|0);
   $59 = HEAP32[12812]|0;
   $60 = (($59) + 2)|0;
   $61 = HEAP32[12813]|0;
   $62 = (($61) + ($60<<2)|0);
   $63 = HEAP32[12812]|0;
   $64 = (($63) + 1)|0;
   $65 = HEAP32[12813]|0;
   $66 = (($65) + ($64<<2)|0);
   $67 = HEAP32[$66>>2]|0;
   $68 = $67<<2;
   _memcpy(($58|0),($62|0),($68|0))|0;
   $69 = HEAP32[12812]|0;
   $70 = (($69) + 1)|0;
   $71 = HEAP32[12813]|0;
   $72 = (($71) + ($70<<2)|0);
   $73 = HEAP32[$72>>2]|0;
   $74 = HEAP32[12802]|0;
   $75 = (($74) + ($73))|0;
   HEAP32[12802] = $75;
   $76 = HEAP32[12812]|0;
   $77 = (($76) + 1)|0;
   $78 = HEAP32[12813]|0;
   $79 = (($78) + ($77<<2)|0);
   $80 = HEAP32[$79>>2]|0;
   $81 = (($80) + 2)|0;
   $82 = HEAP32[12812]|0;
   $83 = (($82) + ($81))|0;
   HEAP32[12812] = $83;
   continue L5;
   break;
  }
  case 123:  {
   $84 = HEAP32[12812]|0;
   $85 = (($84) + 1)|0;
   $86 = HEAP32[12813]|0;
   $87 = (($86) + ($85<<2)|0);
   $88 = HEAP32[$87>>2]|0;
   $89 = $88 << 16;
   $90 = HEAP32[12812]|0;
   $91 = (($90) + 2)|0;
   $92 = HEAP32[12813]|0;
   $93 = (($92) + ($91<<2)|0);
   $94 = HEAP32[$93>>2]|0;
   $95 = $89 | $94;
   $2 = $95;
   $96 = $2;
   $97 = HEAP32[12776]|0;
   $98 = ((($97)) + 31332|0);
   $99 = (($98) + ($96<<2)|0);
   $3 = $99;
   $100 = HEAP32[12810]|0;
   $101 = HEAP32[12795]|0;
   $102 = (($101) + ($100<<2)|0);
   $103 = HEAP32[$102>>2]|0;
   $104 = HEAP32[12802]|0;
   $105 = HEAP32[12794]|0;
   $106 = (($105) + ($104<<2)|0);
   HEAP32[$106>>2] = $103;
   $107 = HEAP32[12814]|0;
   $108 = $107<<1;
   $109 = $3;
   $110 = ((($109)) + 28|0);
   $111 = (($110) + ($108<<2)|0);
   $112 = HEAP32[$111>>2]|0;
   $113 = HEAP32[12802]|0;
   $114 = (($113) + 1)|0;
   HEAP32[12802] = $114;
   $115 = HEAP32[12801]|0;
   $116 = (($115) + ($113<<2)|0);
   HEAP32[$116>>2] = $112;
   $117 = HEAP32[12812]|0;
   $118 = (($117) + 3)|0;
   HEAP32[12812] = $118;
   continue L5;
   break;
  }
  case 125:  {
   $119 = HEAP32[12812]|0;
   $120 = (($119) + 1)|0;
   $121 = HEAP32[12813]|0;
   $122 = (($121) + ($120<<2)|0);
   $123 = HEAP32[$122>>2]|0;
   $124 = $123 << 16;
   $125 = HEAP32[12812]|0;
   $126 = (($125) + 2)|0;
   $127 = HEAP32[12813]|0;
   $128 = (($127) + ($126<<2)|0);
   $129 = HEAP32[$128>>2]|0;
   $130 = $124 | $129;
   $2 = $130;
   $131 = $2;
   $132 = HEAP32[12776]|0;
   $133 = ((($132)) + 31332|0);
   $134 = (($133) + ($131<<2)|0);
   $3 = $134;
   $135 = HEAP32[12810]|0;
   $136 = HEAP32[12795]|0;
   $137 = (($136) + ($135<<2)|0);
   $138 = HEAP32[$137>>2]|0;
   $139 = HEAP32[12802]|0;
   $140 = HEAP32[12794]|0;
   $141 = (($140) + ($139<<2)|0);
   HEAP32[$141>>2] = $138;
   $142 = HEAP32[12814]|0;
   $143 = $142<<1;
   $144 = (($143) + 1)|0;
   $145 = $3;
   $146 = ((($145)) + 28|0);
   $147 = (($146) + ($144<<2)|0);
   $148 = HEAP32[$147>>2]|0;
   $149 = HEAP32[12802]|0;
   $150 = (($149) + 1)|0;
   HEAP32[12802] = $150;
   $151 = HEAP32[12801]|0;
   $152 = (($151) + ($149<<2)|0);
   HEAP32[$152>>2] = $148;
   $153 = HEAP32[12812]|0;
   $154 = (($153) + 3)|0;
   HEAP32[12812] = $154;
   continue L5;
   break;
  }
  case 37:  {
   $155 = HEAP32[12811]|0;
   $156 = HEAP32[12809]|0;
   $157 = (_swapReplace($155,$156)|0);
   $158 = ($157|0)!=(0);
   if (!($158)) {
    label = 15;
    break L5;
   }
   $159 = HEAP32[12812]|0;
   $160 = (($159) + 3)|0;
   HEAP32[12812] = $160;
   continue L5;
   break;
  }
  case 59:  {
   $161 = HEAP32[12815]|0;
   $162 = ($161|0)!=(0|0);
   if (!($162)) {
    label = 19;
    break L5;
   }
   $163 = (_replaceGrouping()|0);
   $164 = ($163|0)!=(0);
   if (!($164)) {
    label = 19;
    break L5;
   }
   $165 = HEAP32[12812]|0;
   $166 = (($165) + 3)|0;
   HEAP32[12812] = $166;
   continue L5;
   break;
  }
  case 63:  {
   $167 = HEAP32[12815]|0;
   $168 = ($167|0)!=(0|0);
   if ($168) {
    (_removeGrouping()|0);
   }
   $169 = HEAP32[12812]|0;
   $170 = (($169) + 1)|0;
   HEAP32[12812] = $170;
   continue L5;
   break;
  }
  case 42:  {
   $171 = $8;
   $172 = $7;
   $173 = (($171) - ($172))|0;
   $9 = $173;
   $174 = $9;
   $175 = ($174|0)>(0);
   if ($175) {
    $176 = $7;
    $177 = HEAP32[12801]|0;
    $178 = (($177) + ($176<<2)|0);
    $179 = $8;
    $180 = HEAP32[12801]|0;
    $181 = (($180) + ($179<<2)|0);
    $182 = $9;
    $183 = $182<<2;
    _memmove(($178|0),($181|0),($183|0))|0;
    $184 = $9;
    $185 = HEAP32[12802]|0;
    $186 = (($185) - ($184))|0;
    HEAP32[12802] = $186;
    $187 = $7;
    $8 = $187;
   }
   $188 = $5;
   $189 = $6;
   $190 = (_copyCharacters($188,$189)|0);
   $191 = ($190|0)!=(0);
   if (!($191)) {
    label = 27;
    break L5;
   }
   $192 = HEAP32[12816]|0;
   HEAP32[12809] = $192;
   $193 = HEAP32[12812]|0;
   $194 = (($193) + 1)|0;
   HEAP32[12812] = $194;
   continue L5;
   break;
  }
  default: {
   $195 = HEAP32[12813]|0;
   $196 = (_handlePassVariableAction($195,51248)|0);
   $197 = ($196|0)!=(0);
   if ($197) {
    continue L5;
   } else {
    label = 30;
    break L5;
   }
  }
  }
 }
 if ((label|0) == 7) {
  $0 = 0;
  $198 = $0;
  STACKTOP = sp;return ($198|0);
 }
 else if ((label|0) == 15) {
  $0 = 0;
  $198 = $0;
  STACKTOP = sp;return ($198|0);
 }
 else if ((label|0) == 19) {
  $0 = 0;
  $198 = $0;
  STACKTOP = sp;return ($198|0);
 }
 else if ((label|0) == 27) {
  $0 = 0;
  $198 = $0;
  STACKTOP = sp;return ($198|0);
 }
 else if ((label|0) == 30) {
  $0 = 0;
  $198 = $0;
  STACKTOP = sp;return ($198|0);
 }
 else if ((label|0) == 31) {
  $0 = 1;
  $198 = $0;
  STACKTOP = sp;return ($198|0);
 }
 return (0)|0;
}
function _copyCharacters($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $6 = HEAP32[12807]|0;
 $7 = ($6|0)==(70);
 L1: do {
  if ($7) {
   while(1) {
    $8 = $3;
    $9 = $4;
    $10 = ($8|0)<($9|0);
    if (!($10)) {
     break L1;
    }
    $11 = $3;
    $12 = (($11) + 1)|0;
    $3 = $12;
    $13 = HEAP32[12777]|0;
    $14 = (($13) + ($11<<2)|0);
    $15 = HEAP32[$14>>2]|0;
    $16 = (_putCharacter($15)|0);
    $17 = ($16|0)!=(0);
    if (!($17)) {
     break;
    }
   }
   $2 = 0;
   $47 = $2;
   STACKTOP = sp;return ($47|0);
  } else {
   $18 = $4;
   $19 = $3;
   $20 = (($18) - ($19))|0;
   $5 = $20;
   $21 = $5;
   $22 = ($21|0)>(0);
   if ($22) {
    $23 = HEAP32[12802]|0;
    $24 = $5;
    $25 = (($23) + ($24))|0;
    $26 = HEAP32[12779]|0;
    $27 = ($25|0)>($26|0);
    if (!($27)) {
     $28 = HEAP32[12802]|0;
     $29 = HEAP32[12794]|0;
     $30 = (($29) + ($28<<2)|0);
     $31 = $3;
     $32 = HEAP32[12795]|0;
     $33 = (($32) + ($31<<2)|0);
     $34 = $5;
     $35 = $34<<2;
     _memmove(($30|0),($33|0),($35|0))|0;
     $36 = HEAP32[12802]|0;
     $37 = HEAP32[12801]|0;
     $38 = (($37) + ($36<<2)|0);
     $39 = $3;
     $40 = HEAP32[12777]|0;
     $41 = (($40) + ($39<<2)|0);
     $42 = $5;
     $43 = $42<<2;
     _memcpy(($38|0),($41|0),($43|0))|0;
     $44 = $5;
     $45 = HEAP32[12802]|0;
     $46 = (($45) + ($44))|0;
     HEAP32[12802] = $46;
     break;
    }
    $2 = 0;
    $47 = $2;
    STACKTOP = sp;return ($47|0);
   }
  }
 } while(0);
 $2 = 1;
 $47 = $2;
 STACKTOP = sp;return ($47|0);
}
function _swapReplace($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $3 = $0;
 $4 = $1;
 $14 = HEAP32[12812]|0;
 $15 = (($14) + 1)|0;
 $16 = HEAP32[12813]|0;
 $17 = (($16) + ($15<<2)|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = $18 << 16;
 $20 = HEAP32[12812]|0;
 $21 = (($20) + 2)|0;
 $22 = HEAP32[12813]|0;
 $23 = (($22) + ($21<<2)|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = $19 | $24;
 $5 = $25;
 $26 = $5;
 $27 = HEAP32[12776]|0;
 $28 = ((($27)) + 31332|0);
 $29 = (($28) + ($26<<2)|0);
 $6 = $29;
 $30 = $6;
 $31 = ((($30)) + 24|0);
 $32 = HEAP16[$31>>1]|0;
 $33 = $32 << 16 >> 16;
 $34 = $6;
 $35 = ((($34)) + 28|0);
 $36 = (($35) + ($33<<2)|0);
 $7 = $36;
 $37 = $3;
 $11 = $37;
 L1: while(1) {
  $38 = $11;
  $39 = $4;
  $40 = ($38|0)<($39|0);
  if (!($40)) {
   label = 24;
   break;
  }
  $10 = 0;
  while(1) {
   $41 = $10;
   $42 = $6;
   $43 = ((($42)) + 24|0);
   $44 = HEAP16[$43>>1]|0;
   $45 = $44 << 16 >> 16;
   $46 = ($41|0)<($45|0);
   if (!($46)) {
    break;
   }
   $47 = $11;
   $48 = HEAP32[12777]|0;
   $49 = (($48) + ($47<<2)|0);
   $50 = HEAP32[$49>>2]|0;
   $51 = $10;
   $52 = $6;
   $53 = ((($52)) + 28|0);
   $54 = (($53) + ($51<<2)|0);
   $55 = HEAP32[$54>>2]|0;
   $56 = ($50|0)==($55|0);
   if ($56) {
    break;
   }
   $57 = $10;
   $58 = (($57) + 1)|0;
   $10 = $58;
  }
  $59 = $10;
  $60 = $6;
  $61 = ((($60)) + 24|0);
  $62 = HEAP16[$61>>1]|0;
  $63 = $62 << 16 >> 16;
  $64 = ($59|0)==($63|0);
  do {
   if (!($64)) {
    $9 = 0;
    $8 = 0;
    while(1) {
     $65 = $8;
     $66 = $10;
     $67 = ($65|0)<($66|0);
     $68 = $6;
     $69 = ((($68)) + 20|0);
     $70 = HEAP32[$69>>2]|0;
     $71 = ($70|0)==(54);
     if (!($67)) {
      break;
     }
     $72 = $9;
     if ($71) {
      $73 = (($72) + 1)|0;
      $9 = $73;
     } else {
      $74 = $7;
      $75 = (($74) + ($72<<2)|0);
      $76 = HEAP32[$75>>2]|0;
      $77 = $9;
      $78 = (($77) + ($76))|0;
      $9 = $78;
     }
     $79 = $8;
     $80 = (($79) + 1)|0;
     $8 = $80;
    }
    if ($71) {
     $81 = HEAP32[12802]|0;
     $82 = (($81) + 1)|0;
     $83 = HEAP32[12779]|0;
     $84 = ($82|0)>($83|0);
     if ($84) {
      label = 16;
      break L1;
     }
     $85 = $11;
     $86 = HEAP32[12795]|0;
     $87 = (($86) + ($85<<2)|0);
     $88 = HEAP32[$87>>2]|0;
     $89 = HEAP32[12802]|0;
     $90 = HEAP32[12794]|0;
     $91 = (($90) + ($89<<2)|0);
     HEAP32[$91>>2] = $88;
     $92 = $9;
     $93 = $7;
     $94 = (($93) + ($92<<2)|0);
     $95 = HEAP32[$94>>2]|0;
     $96 = HEAP32[12802]|0;
     $97 = (($96) + 1)|0;
     HEAP32[12802] = $97;
     $98 = HEAP32[12801]|0;
     $99 = (($98) + ($96<<2)|0);
     HEAP32[$99>>2] = $95;
     break;
    }
    $100 = $9;
    $101 = $7;
    $102 = (($101) + ($100<<2)|0);
    $103 = HEAP32[$102>>2]|0;
    $104 = (($103) - 1)|0;
    $12 = $104;
    $105 = HEAP32[12802]|0;
    $106 = $12;
    $107 = (($105) + ($106))|0;
    $13 = $107;
    $108 = $13;
    $109 = HEAP32[12779]|0;
    $110 = ($108|0)>($109|0);
    if ($110) {
     label = 19;
     break L1;
    }
    while(1) {
     $111 = $13;
     $112 = (($111) + -1)|0;
     $13 = $112;
     $113 = HEAP32[12802]|0;
     $114 = ($112|0)>=($113|0);
     if (!($114)) {
      break;
     }
     $115 = $11;
     $116 = HEAP32[12795]|0;
     $117 = (($116) + ($115<<2)|0);
     $118 = HEAP32[$117>>2]|0;
     $119 = $13;
     $120 = HEAP32[12794]|0;
     $121 = (($120) + ($119<<2)|0);
     HEAP32[$121>>2] = $118;
    }
    $122 = HEAP32[12802]|0;
    $123 = HEAP32[12801]|0;
    $124 = (($123) + ($122<<2)|0);
    $125 = $9;
    $126 = (($125) + 1)|0;
    $127 = $7;
    $128 = (($127) + ($126<<2)|0);
    $129 = $12;
    $130 = $129<<2;
    _memcpy(($124|0),($128|0),($130|0))|0;
    $131 = $12;
    $132 = HEAP32[12802]|0;
    $133 = (($132) + ($131))|0;
    HEAP32[12802] = $133;
   }
  } while(0);
  $134 = $11;
  $135 = (($134) + 1)|0;
  $11 = $135;
 }
 if ((label|0) == 16) {
  $2 = 0;
  $136 = $2;
  STACKTOP = sp;return ($136|0);
 }
 else if ((label|0) == 19) {
  $2 = 0;
  $136 = $2;
  STACKTOP = sp;return ($136|0);
 }
 else if ((label|0) == 24) {
  $2 = 1;
  $136 = $2;
  STACKTOP = sp;return ($136|0);
 }
 return (0)|0;
}
function _replaceGrouping() {
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $10 = HEAP32[12814]|0;
 $11 = $10<<1;
 $12 = HEAP32[12815]|0;
 $13 = ((($12)) + 28|0);
 $14 = (($13) + ($11<<2)|0);
 $15 = HEAP32[$14>>2]|0;
 $1 = $15;
 $16 = HEAP32[12814]|0;
 $17 = $16<<1;
 $18 = (($17) + 1)|0;
 $19 = HEAP32[12815]|0;
 $20 = ((($19)) + 28|0);
 $21 = (($20) + ($18<<2)|0);
 $22 = HEAP32[$21>>2]|0;
 $2 = $22;
 $23 = HEAP32[12777]|0;
 $3 = $23;
 $5 = 0;
 $24 = HEAP32[12812]|0;
 $25 = (($24) + 1)|0;
 $26 = HEAP32[12813]|0;
 $27 = (($26) + ($25<<2)|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = $28 << 16;
 $30 = HEAP32[12812]|0;
 $31 = (($30) + 2)|0;
 $32 = HEAP32[12813]|0;
 $33 = (($32) + ($31<<2)|0);
 $34 = HEAP32[$33>>2]|0;
 $35 = $34 & 255;
 $36 = $29 | $35;
 $6 = $36;
 $37 = $6;
 $38 = HEAP32[12776]|0;
 $39 = ((($38)) + 31332|0);
 $40 = (($39) + ($37<<2)|0);
 $7 = $40;
 $41 = HEAP32[12814]|0;
 $42 = $41<<1;
 $43 = $7;
 $44 = ((($43)) + 28|0);
 $45 = (($44) + ($42<<2)|0);
 $46 = HEAP32[$45>>2]|0;
 $8 = $46;
 $47 = HEAP32[12814]|0;
 $48 = $47<<1;
 $49 = (($48) + 1)|0;
 $50 = $7;
 $51 = ((($50)) + 28|0);
 $52 = (($51) + ($49<<2)|0);
 $53 = HEAP32[$52>>2]|0;
 $9 = $53;
 $54 = HEAP32[12817]|0;
 $55 = ($54|0)==(123);
 do {
  if ($55) {
   $56 = $8;
   $57 = HEAP32[12811]|0;
   $58 = $3;
   $59 = (($58) + ($57<<2)|0);
   HEAP32[$59>>2] = $56;
   $60 = HEAP32[12811]|0;
   $61 = (($60) + 1)|0;
   $4 = $61;
   while(1) {
    $62 = $4;
    $63 = HEAP32[12778]|0;
    $64 = ($62|0)<($63|0);
    if (!($64)) {
     break;
    }
    $65 = $4;
    $66 = HEAP32[12777]|0;
    $67 = (($66) + ($65<<2)|0);
    $68 = HEAP32[$67>>2]|0;
    $69 = $1;
    $70 = ($68|0)==($69|0);
    if ($70) {
     $71 = $5;
     $72 = (($71) + -1)|0;
     $5 = $72;
    }
    $73 = $4;
    $74 = HEAP32[12777]|0;
    $75 = (($74) + ($73<<2)|0);
    $76 = HEAP32[$75>>2]|0;
    $77 = $2;
    $78 = ($76|0)==($77|0);
    if ($78) {
     $79 = $5;
     $80 = (($79) + 1)|0;
     $5 = $80;
    }
    $81 = $5;
    $82 = ($81|0)==(1);
    if ($82) {
     break;
    }
    $83 = $4;
    $84 = (($83) + 1)|0;
    $4 = $84;
   }
   $85 = $4;
   $86 = HEAP32[12778]|0;
   $87 = ($85|0)==($86|0);
   if (!($87)) {
    $88 = $9;
    $89 = $4;
    $90 = $3;
    $91 = (($90) + ($89<<2)|0);
    HEAP32[$91>>2] = $88;
    break;
   }
   $0 = 0;
   $146 = $0;
   STACKTOP = sp;return ($146|0);
  } else {
   $92 = HEAP32[12807]|0;
   $93 = ($92|0)==(70);
   if ($93) {
    $94 = HEAP32[12815]|0;
    $95 = ((($94)) + 28|0);
    $96 = ((($95)) + 8|0);
    $97 = HEAP32[$96>>2]|0;
    $1 = $97;
    $98 = HEAP32[12815]|0;
    $99 = ((($98)) + 28|0);
    $100 = ((($99)) + 12|0);
    $101 = HEAP32[$100>>2]|0;
    $2 = $101;
    $102 = $7;
    $103 = ((($102)) + 28|0);
    $104 = ((($103)) + 8|0);
    $105 = HEAP32[$104>>2]|0;
    $8 = $105;
    $106 = $7;
    $107 = ((($106)) + 28|0);
    $108 = ((($107)) + 12|0);
    $109 = HEAP32[$108>>2]|0;
    $9 = $109;
   }
   $110 = $9;
   $111 = HEAP32[12802]|0;
   $112 = HEAP32[12801]|0;
   $113 = (($112) + ($111<<2)|0);
   HEAP32[$113>>2] = $110;
   $114 = HEAP32[12802]|0;
   $115 = (($114) - 1)|0;
   $4 = $115;
   while(1) {
    $116 = $4;
    $117 = ($116|0)>=(0);
    if (!($117)) {
     break;
    }
    $118 = $4;
    $119 = HEAP32[12801]|0;
    $120 = (($119) + ($118<<2)|0);
    $121 = HEAP32[$120>>2]|0;
    $122 = $2;
    $123 = ($121|0)==($122|0);
    if ($123) {
     $124 = $5;
     $125 = (($124) + -1)|0;
     $5 = $125;
    }
    $126 = $4;
    $127 = HEAP32[12801]|0;
    $128 = (($127) + ($126<<2)|0);
    $129 = HEAP32[$128>>2]|0;
    $130 = $1;
    $131 = ($129|0)==($130|0);
    if ($131) {
     $132 = $5;
     $133 = (($132) + 1)|0;
     $5 = $133;
    }
    $134 = $5;
    $135 = ($134|0)==(1);
    if ($135) {
     break;
    }
    $136 = $4;
    $137 = (($136) + -1)|0;
    $4 = $137;
   }
   $138 = $4;
   $139 = ($138|0)<(0);
   if (!($139)) {
    $140 = $8;
    $141 = $4;
    $142 = HEAP32[12801]|0;
    $143 = (($142) + ($141<<2)|0);
    HEAP32[$143>>2] = $140;
    $144 = HEAP32[12802]|0;
    $145 = (($144) + 1)|0;
    HEAP32[12802] = $145;
    break;
   }
   $0 = 0;
   $146 = $0;
   STACKTOP = sp;return ($146|0);
  }
 } while(0);
 $0 = 1;
 $146 = $0;
 STACKTOP = sp;return ($146|0);
}
function _removeGrouping() {
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $6 = HEAP32[12814]|0;
 $7 = $6<<1;
 $8 = HEAP32[12815]|0;
 $9 = ((($8)) + 28|0);
 $10 = (($9) + ($7<<2)|0);
 $11 = HEAP32[$10>>2]|0;
 $1 = $11;
 $12 = HEAP32[12814]|0;
 $13 = $12<<1;
 $14 = (($13) + 1)|0;
 $15 = HEAP32[12815]|0;
 $16 = ((($15)) + 28|0);
 $17 = (($16) + ($14<<2)|0);
 $18 = HEAP32[$17>>2]|0;
 $2 = $18;
 $19 = HEAP32[12777]|0;
 $3 = $19;
 $5 = 0;
 $20 = HEAP32[12817]|0;
 $21 = ($20|0)==(123);
 if ($21) {
  $22 = HEAP32[12811]|0;
  $23 = (($22) + 1)|0;
  $4 = $23;
  while(1) {
   $24 = $4;
   $25 = HEAP32[12778]|0;
   $26 = ($24|0)<($25|0);
   if (!($26)) {
    break;
   }
   $27 = $4;
   $28 = HEAP32[12777]|0;
   $29 = (($28) + ($27<<2)|0);
   $30 = HEAP32[$29>>2]|0;
   $31 = $1;
   $32 = ($30|0)==($31|0);
   if ($32) {
    $33 = $5;
    $34 = (($33) + -1)|0;
    $5 = $34;
   }
   $35 = $4;
   $36 = HEAP32[12777]|0;
   $37 = (($36) + ($35<<2)|0);
   $38 = HEAP32[$37>>2]|0;
   $39 = $2;
   $40 = ($38|0)==($39|0);
   if ($40) {
    $41 = $5;
    $42 = (($41) + 1)|0;
    $5 = $42;
   }
   $43 = $5;
   $44 = ($43|0)==(1);
   if ($44) {
    break;
   }
   $45 = $4;
   $46 = (($45) + 1)|0;
   $4 = $46;
  }
  $47 = $4;
  $48 = HEAP32[12778]|0;
  $49 = ($47|0)==($48|0);
  if ($49) {
   $0 = 0;
   $110 = $0;
   STACKTOP = sp;return ($110|0);
  }
  $50 = $4;
  $51 = (($50) + 1)|0;
  $4 = $51;
  while(1) {
   $52 = $4;
   $53 = HEAP32[12778]|0;
   $54 = ($52|0)<($53|0);
   if (!($54)) {
    break;
   }
   $55 = $4;
   $56 = $3;
   $57 = (($56) + ($55<<2)|0);
   $58 = HEAP32[$57>>2]|0;
   $59 = $4;
   $60 = (($59) - 1)|0;
   $61 = $3;
   $62 = (($61) + ($60<<2)|0);
   HEAP32[$62>>2] = $58;
   $63 = $4;
   $64 = (($63) + 1)|0;
   $4 = $64;
  }
  $65 = HEAP32[12778]|0;
  $66 = (($65) + -1)|0;
  HEAP32[12778] = $66;
 } else {
  $67 = HEAP32[12802]|0;
  $68 = (($67) - 1)|0;
  $4 = $68;
  while(1) {
   $69 = $4;
   $70 = ($69|0)>=(0);
   if (!($70)) {
    break;
   }
   $71 = $4;
   $72 = HEAP32[12801]|0;
   $73 = (($72) + ($71<<2)|0);
   $74 = HEAP32[$73>>2]|0;
   $75 = $2;
   $76 = ($74|0)==($75|0);
   if ($76) {
    $77 = $5;
    $78 = (($77) + -1)|0;
    $5 = $78;
   }
   $79 = $4;
   $80 = HEAP32[12801]|0;
   $81 = (($80) + ($79<<2)|0);
   $82 = HEAP32[$81>>2]|0;
   $83 = $1;
   $84 = ($82|0)==($83|0);
   if ($84) {
    $85 = $5;
    $86 = (($85) + 1)|0;
    $5 = $86;
   }
   $87 = $5;
   $88 = ($87|0)==(1);
   if ($88) {
    break;
   }
   $89 = $4;
   $90 = (($89) + -1)|0;
   $4 = $90;
  }
  $91 = $4;
  $92 = ($91|0)<(0);
  if ($92) {
   $0 = 0;
   $110 = $0;
   STACKTOP = sp;return ($110|0);
  }
  $93 = $4;
  $94 = (($93) + 1)|0;
  $4 = $94;
  while(1) {
   $95 = $4;
   $96 = HEAP32[12802]|0;
   $97 = ($95|0)<($96|0);
   if (!($97)) {
    break;
   }
   $98 = $4;
   $99 = HEAP32[12801]|0;
   $100 = (($99) + ($98<<2)|0);
   $101 = HEAP32[$100>>2]|0;
   $102 = $4;
   $103 = (($102) - 1)|0;
   $104 = HEAP32[12801]|0;
   $105 = (($104) + ($103<<2)|0);
   HEAP32[$105>>2] = $101;
   $106 = $4;
   $107 = (($106) + 1)|0;
   $4 = $107;
  }
  $108 = HEAP32[12802]|0;
  $109 = (($108) + -1)|0;
  HEAP32[12802] = $109;
 }
 $0 = 1;
 $110 = $0;
 STACKTOP = sp;return ($110|0);
}
function _putCharacter($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $6 = sp;
 $2 = $0;
 $3 = 0;
 $4 = 0;
 $7 = HEAP32[12789]|0;
 $8 = ($7|0)==(2);
 if ($8) {
  $1 = 1;
  $51 = $1;
  STACKTOP = sp;return ($51|0);
 }
 $9 = $2;
 $10 = (_findCharOrDots($9,0)|0);
 $4 = $10;
 $11 = $4;
 $12 = ((($11)) + 12|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = $13 & 2;
 $15 = ($14|0)!=(0);
 if ($15) {
  $16 = $4;
  $17 = ((($16)) + 12|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = $18 & 16;
  $20 = ($19|0)!=(0);
  if ($20) {
   $21 = $4;
   $22 = ((($21)) + 24|0);
   $23 = HEAP32[$22>>2]|0;
   $24 = (_findCharOrDots($23,0)|0);
   $4 = $24;
  }
 }
 $25 = $4;
 $26 = ((($25)) + 4|0);
 $27 = HEAP32[$26>>2]|0;
 $5 = $27;
 $28 = $5;
 $29 = ($28|0)!=(0);
 if (!($29)) {
  $49 = $2;
  $50 = (_undefinedCharacter($49)|0);
  $1 = $50;
  $51 = $1;
  STACKTOP = sp;return ($51|0);
 }
 $30 = $5;
 $31 = HEAP32[12776]|0;
 $32 = ((($31)) + 31332|0);
 $33 = (($32) + ($30<<2)|0);
 $3 = $33;
 $34 = $3;
 $35 = ((($34)) + 26|0);
 $36 = HEAP16[$35>>1]|0;
 $37 = ($36<<16>>16)!=(0);
 if ($37) {
  $38 = $3;
  $39 = ((($38)) + 28|0);
  $40 = ((($39)) + 4|0);
  $41 = $3;
  $42 = ((($41)) + 26|0);
  $43 = HEAP16[$42>>1]|0;
  $44 = $43 << 16 >> 16;
  $45 = (_for_updatePositions($40,1,$44,0)|0);
  $1 = $45;
  $51 = $1;
  STACKTOP = sp;return ($51|0);
 } else {
  $46 = $2;
  $47 = (_getDotsForChar($46)|0);
  HEAP32[$6>>2] = $47;
  $48 = (_for_updatePositions($6,1,1,0)|0);
  $1 = $48;
  $51 = $1;
  STACKTOP = sp;return ($51|0);
 }
 return (0)|0;
}
function _findCharOrDots($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $9 = $3;
 $10 = (($9>>>0) % 1123)&-1;
 $8 = $10;
 $11 = $4;
 $12 = ($11|0)==(0);
 $13 = $8;
 $14 = HEAP32[12776]|0;
 if ($12) {
  $15 = ((($14)) + 3116|0);
  $16 = (($15) + ($13<<2)|0);
  $17 = HEAP32[$16>>2]|0;
  $7 = $17;
  $5 = 588;
 } else {
  $18 = ((($14)) + 7608|0);
  $19 = (($18) + ($13<<2)|0);
  $20 = HEAP32[$19>>2]|0;
  $7 = $20;
  $5 = 616;
 }
 while(1) {
  $21 = $7;
  $22 = ($21|0)!=(0);
  if (!($22)) {
   label = 8;
   break;
  }
  $23 = $7;
  $24 = HEAP32[12776]|0;
  $25 = ((($24)) + 31332|0);
  $26 = (($25) + ($23<<2)|0);
  $6 = $26;
  $27 = $6;
  $28 = ((($27)) + 16|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = $3;
  $31 = ($29|0)==($30|0);
  $32 = $6;
  if ($31) {
   label = 6;
   break;
  }
  $33 = HEAP32[$32>>2]|0;
  $7 = $33;
 }
 if ((label|0) == 6) {
  $2 = $32;
  $42 = $2;
  STACKTOP = sp;return ($42|0);
 }
 else if ((label|0) == 8) {
  $34 = $3;
  $35 = $5;
  $36 = ((($35)) + 24|0);
  HEAP32[$36>>2] = $34;
  $37 = $5;
  $38 = ((($37)) + 20|0);
  HEAP32[$38>>2] = $34;
  $39 = $5;
  $40 = ((($39)) + 16|0);
  HEAP32[$40>>2] = $34;
  $41 = $5;
  $2 = $41;
  $42 = $2;
  STACKTOP = sp;return ($42|0);
 }
 return (0)|0;
}
function _for_updatePositions($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $10 = HEAP32[12802]|0;
 $11 = $7;
 $12 = (($10) + ($11))|0;
 $13 = HEAP32[12779]|0;
 $14 = ($12|0)>($13|0);
 if (!($14)) {
  $15 = HEAP32[12805]|0;
  $16 = $6;
  $17 = (($15) + ($16))|0;
  $18 = HEAP32[12778]|0;
  $19 = ($17|0)>($18|0);
  if (!($19)) {
   $20 = HEAP32[12802]|0;
   $21 = HEAP32[12801]|0;
   $22 = (($21) + ($20<<2)|0);
   $23 = $5;
   $24 = $7;
   $25 = $24<<2;
   _memcpy(($22|0),($23|0),($25|0))|0;
   $26 = HEAP32[12789]|0;
   $27 = ($26|0)!=(0);
   do {
    if ($27) {
     $61 = HEAP32[12789]|0;
     $62 = ($61|0)==(2);
     if ($62) {
      $63 = HEAP32[12790]|0;
      $64 = HEAP32[12805]|0;
      $65 = ($63|0)==($64|0);
      if ($65) {
       $66 = HEAP32[12802]|0;
       HEAP32[12790] = $66;
      }
     }
    } else {
     $28 = HEAP32[12788]|0;
     $29 = $28 & 34;
     $30 = ($29|0)!=(0);
     if ($30) {
      $31 = HEAP32[12805]|0;
      $32 = HEAP32[12791]|0;
      $33 = ($31|0)>=($32|0);
      if (!($33)) {
       break;
      }
      HEAP32[12789] = 2;
      $34 = HEAP32[12791]|0;
      $35 = HEAP32[12792]|0;
      $36 = (_doCompTrans($34,$35)|0);
      $4 = $36;
      $171 = $4;
      STACKTOP = sp;return ($171|0);
     }
     $37 = HEAP32[12790]|0;
     $38 = HEAP32[12805]|0;
     $39 = ($37|0)>=($38|0);
     if ($39) {
      $40 = HEAP32[12790]|0;
      $41 = HEAP32[12805]|0;
      $42 = $6;
      $43 = (($41) + ($42))|0;
      $44 = ($40|0)<($43|0);
      if ($44) {
       $45 = HEAP32[12802]|0;
       HEAP32[12790] = $45;
       HEAP32[12789] = 1;
       break;
      }
     }
     $46 = HEAP32[12790]|0;
     $47 = HEAP32[12777]|0;
     $48 = (($47) + ($46<<2)|0);
     $49 = HEAP32[$48>>2]|0;
     $50 = ($49|0)==(0);
     if ($50) {
      $51 = HEAP32[12790]|0;
      $52 = HEAP32[12805]|0;
      $53 = $6;
      $54 = (($52) + ($53))|0;
      $55 = ($51|0)==($54|0);
      if ($55) {
       $56 = HEAP32[12802]|0;
       $57 = $7;
       $58 = (($57|0) / 2)&-1;
       $59 = (($56) + ($58))|0;
       $60 = (($59) + 1)|0;
       HEAP32[12790] = $60;
       HEAP32[12789] = 1;
      }
     }
    }
   } while(0);
   $67 = HEAP32[12787]|0;
   $68 = ($67|0)!=(0|0);
   $69 = HEAP32[12786]|0;
   $70 = ($69|0)!=(0|0);
   $or$cond = $68 | $70;
   L21: do {
    if ($or$cond) {
     $71 = $7;
     $72 = $6;
     $73 = ($71|0)<=($72|0);
     $9 = 0;
     if ($73) {
      while(1) {
       $74 = $9;
       $75 = $7;
       $76 = ($74|0)<($75|0);
       if (!($76)) {
        break;
       }
       $77 = HEAP32[12787]|0;
       $78 = ($77|0)!=(0|0);
       if ($78) {
        $79 = HEAP32[12805]|0;
        $80 = HEAP32[12795]|0;
        $81 = (($80) + ($79<<2)|0);
        $82 = HEAP32[$81>>2]|0;
        $83 = $8;
        $84 = (($82) + ($83))|0;
        $85 = HEAP32[12802]|0;
        $86 = $9;
        $87 = (($85) + ($86))|0;
        $88 = HEAP32[12794]|0;
        $89 = (($88) + ($87<<2)|0);
        HEAP32[$89>>2] = $84;
       }
       $90 = HEAP32[12786]|0;
       $91 = ($90|0)!=(0|0);
       if ($91) {
        $92 = HEAP32[12802]|0;
        $93 = HEAP32[12805]|0;
        $94 = $9;
        $95 = (($93) + ($94))|0;
        $96 = HEAP32[12795]|0;
        $97 = (($96) + ($95<<2)|0);
        $98 = HEAP32[$97>>2]|0;
        $99 = HEAP32[12786]|0;
        $100 = (($99) + ($98<<2)|0);
        HEAP32[$100>>2] = $92;
       }
       $101 = $9;
       $102 = (($101) + 1)|0;
       $9 = $102;
      }
      $103 = $7;
      $9 = $103;
      while(1) {
       $104 = $9;
       $105 = $6;
       $106 = ($104|0)<($105|0);
       if (!($106)) {
        break L21;
       }
       $107 = HEAP32[12786]|0;
       $108 = ($107|0)!=(0|0);
       if ($108) {
        $109 = HEAP32[12802]|0;
        $110 = HEAP32[12805]|0;
        $111 = $9;
        $112 = (($110) + ($111))|0;
        $113 = HEAP32[12795]|0;
        $114 = (($113) + ($112<<2)|0);
        $115 = HEAP32[$114>>2]|0;
        $116 = HEAP32[12786]|0;
        $117 = (($116) + ($115<<2)|0);
        HEAP32[$117>>2] = $109;
       }
       $118 = $9;
       $119 = (($118) + 1)|0;
       $9 = $119;
      }
     } else {
      while(1) {
       $120 = $9;
       $121 = $6;
       $122 = ($120|0)<($121|0);
       if (!($122)) {
        break;
       }
       $123 = HEAP32[12787]|0;
       $124 = ($123|0)!=(0|0);
       if ($124) {
        $125 = HEAP32[12805]|0;
        $126 = HEAP32[12795]|0;
        $127 = (($126) + ($125<<2)|0);
        $128 = HEAP32[$127>>2]|0;
        $129 = $8;
        $130 = (($128) + ($129))|0;
        $131 = HEAP32[12802]|0;
        $132 = $9;
        $133 = (($131) + ($132))|0;
        $134 = HEAP32[12794]|0;
        $135 = (($134) + ($133<<2)|0);
        HEAP32[$135>>2] = $130;
       }
       $136 = HEAP32[12786]|0;
       $137 = ($136|0)!=(0|0);
       if ($137) {
        $138 = HEAP32[12802]|0;
        $139 = HEAP32[12805]|0;
        $140 = $9;
        $141 = (($139) + ($140))|0;
        $142 = HEAP32[12795]|0;
        $143 = (($142) + ($141<<2)|0);
        $144 = HEAP32[$143>>2]|0;
        $145 = HEAP32[12786]|0;
        $146 = (($145) + ($144<<2)|0);
        HEAP32[$146>>2] = $138;
       }
       $147 = $9;
       $148 = (($147) + 1)|0;
       $9 = $148;
      }
      $149 = $6;
      $9 = $149;
      while(1) {
       $150 = $9;
       $151 = $7;
       $152 = ($150|0)<($151|0);
       if (!($152)) {
        break L21;
       }
       $153 = HEAP32[12787]|0;
       $154 = ($153|0)!=(0|0);
       if ($154) {
        $155 = HEAP32[12805]|0;
        $156 = HEAP32[12795]|0;
        $157 = (($156) + ($155<<2)|0);
        $158 = HEAP32[$157>>2]|0;
        $159 = $8;
        $160 = (($158) + ($159))|0;
        $161 = HEAP32[12802]|0;
        $162 = $9;
        $163 = (($161) + ($162))|0;
        $164 = HEAP32[12794]|0;
        $165 = (($164) + ($163<<2)|0);
        HEAP32[$165>>2] = $160;
       }
       $166 = $9;
       $167 = (($166) + 1)|0;
       $9 = $167;
      }
     }
    }
   } while(0);
   $168 = $7;
   $169 = HEAP32[12802]|0;
   $170 = (($169) + ($168))|0;
   HEAP32[12802] = $170;
   $4 = 1;
   $171 = $4;
   STACKTOP = sp;return ($171|0);
  }
 }
 $4 = 0;
 $171 = $4;
 STACKTOP = sp;return ($171|0);
}
function _undefinedCharacter($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(112|0);
 $2 = sp + 96|0;
 $5 = sp + 8|0;
 HEAP32[$2>>2] = $0;
 $7 = HEAP32[12776]|0;
 $8 = ((($7)) + 32|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)!=(0);
 if ($10) {
  $11 = HEAP32[12776]|0;
  $12 = ((($11)) + 32|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = HEAP32[12776]|0;
  $15 = ((($14)) + 31332|0);
  $16 = (($15) + ($13<<2)|0);
  $6 = $16;
  $17 = $6;
  $18 = ((($17)) + 24|0);
  $19 = HEAP16[$18>>1]|0;
  $20 = $19 << 16 >> 16;
  $21 = $6;
  $22 = ((($21)) + 28|0);
  $23 = (($22) + ($20<<2)|0);
  $24 = $6;
  $25 = ((($24)) + 24|0);
  $26 = HEAP16[$25>>1]|0;
  $27 = $26 << 16 >> 16;
  $28 = $6;
  $29 = ((($28)) + 26|0);
  $30 = HEAP16[$29>>1]|0;
  $31 = $30 << 16 >> 16;
  $32 = (_for_updatePositions($23,$27,$31,0)|0);
  $33 = ($32|0)!=(0);
  if ($33) {
   $1 = 1;
   $53 = $1;
   STACKTOP = sp;return ($53|0);
  } else {
   $1 = 0;
   $53 = $1;
   STACKTOP = sp;return ($53|0);
  }
 }
 $34 = (_showString($2,1)|0);
 $4 = $34;
 $3 = 0;
 while(1) {
  $35 = $3;
  $36 = $4;
  $37 = (_strlen($36)|0);
  $38 = ($35|0)<($37|0);
  if (!($38)) {
   break;
  }
  $39 = $3;
  $40 = $4;
  $41 = (($40) + ($39)|0);
  $42 = HEAP8[$41>>0]|0;
  $43 = $42 << 24 >> 24;
  $44 = (_getDotsForChar($43)|0);
  $45 = $3;
  $46 = (($5) + ($45<<2)|0);
  HEAP32[$46>>2] = $44;
  $47 = $3;
  $48 = (($47) + 1)|0;
  $3 = $48;
 }
 $49 = $4;
 $50 = (_strlen($49)|0);
 $51 = (_for_updatePositions($5,1,$50,0)|0);
 $52 = ($51|0)!=(0);
 if ($52) {
  $1 = 1;
  $53 = $1;
  STACKTOP = sp;return ($53|0);
 } else {
  $1 = 0;
  $53 = $1;
  STACKTOP = sp;return ($53|0);
 }
 return (0)|0;
}
function _doCompTrans($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $8 = sp;
 $3 = $0;
 $4 = $1;
 $6 = 0;
 $9 = HEAP32[12789]|0;
 $10 = ($9|0)!=(2);
 if ($10) {
  $11 = HEAP32[12776]|0;
  $12 = ((($11)) + 1520|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = (_brailleIndicatorDefined($13)|0);
  $15 = ($14|0)!=(0);
  if ($15) {
   $16 = HEAP32[12818]|0;
   $17 = ((($16)) + 28|0);
   $18 = HEAP32[12818]|0;
   $19 = ((($18)) + 26|0);
   $20 = HEAP16[$19>>1]|0;
   $21 = $20 << 16 >> 16;
   $22 = (_for_updatePositions($17,0,$21,0)|0);
   $23 = ($22|0)!=(0);
   if (!($23)) {
    $2 = 0;
    $104 = $2;
    STACKTOP = sp;return ($104|0);
   }
  }
 }
 $24 = $3;
 $5 = $24;
 L7: while(1) {
  $25 = $5;
  $26 = $4;
  $27 = ($25|0)<($26|0);
  if (!($27)) {
   label = 17;
   break;
  }
  $7 = 0;
  $28 = $5;
  $29 = HEAP32[12783]|0;
  $30 = (($29) + ($28<<2)|0);
  HEAP32[$30>>2] = 0;
  $31 = $5;
  $32 = HEAP32[12784]|0;
  $33 = (($32) + ($31<<2)|0);
  HEAP32[$33>>2] = 0;
  $34 = $5;
  $35 = HEAP32[12777]|0;
  $36 = (($35) + ($34<<2)|0);
  $37 = HEAP32[$36>>2]|0;
  $38 = ($37|0)==(65535);
  do {
   if ($38) {
    $6 = 1;
   } else {
    $39 = $5;
    HEAP32[12805] = $39;
    $40 = $5;
    $41 = HEAP32[12777]|0;
    $42 = (($41) + ($40<<2)|0);
    $43 = HEAP32[$42>>2]|0;
    $44 = ($43>>>0)<(256);
    if ($44) {
     $45 = $5;
     $46 = HEAP32[12777]|0;
     $47 = (($46) + ($45<<2)|0);
     $48 = HEAP32[$47>>2]|0;
     $49 = HEAP32[12776]|0;
     $50 = ((($49)) + 21084|0);
     $51 = (($50) + ($48<<2)|0);
     $52 = HEAP32[$51>>2]|0;
     $7 = $52;
    }
    $53 = $7;
    $54 = ($53|0)!=(0);
    if ($54) {
     $55 = $7;
     $56 = HEAP32[12776]|0;
     $57 = ((($56)) + 31332|0);
     $58 = (($57) + ($55<<2)|0);
     HEAP32[12808] = $58;
     $59 = HEAP32[12808]|0;
     $60 = ((($59)) + 24|0);
     $61 = HEAP16[$60>>1]|0;
     $62 = $61 << 16 >> 16;
     $63 = HEAP32[12808]|0;
     $64 = ((($63)) + 28|0);
     $65 = (($64) + ($62<<2)|0);
     $66 = HEAP32[12808]|0;
     $67 = ((($66)) + 24|0);
     $68 = HEAP16[$67>>1]|0;
     $69 = $68 << 16 >> 16;
     $70 = HEAP32[12808]|0;
     $71 = ((($70)) + 26|0);
     $72 = HEAP16[$71>>1]|0;
     $73 = $72 << 16 >> 16;
     $74 = (_for_updatePositions($65,$69,$73,0)|0);
     $75 = ($74|0)!=(0);
     if ($75) {
      break;
     } else {
      label = 13;
      break L7;
     }
    } else {
     $76 = $5;
     $77 = HEAP32[12777]|0;
     $78 = (($77) + ($76<<2)|0);
     $79 = HEAP32[$78>>2]|0;
     $80 = (_putCompChar($79)|0);
     $81 = ($80|0)!=(0);
     if ($81) {
      break;
     } else {
      label = 15;
      break L7;
     }
    }
   }
  } while(0);
  $82 = $5;
  $83 = (($82) + 1)|0;
  $5 = $83;
 }
 if ((label|0) == 13) {
  $2 = 0;
  $104 = $2;
  STACKTOP = sp;return ($104|0);
 }
 else if ((label|0) == 15) {
  $2 = 0;
  $104 = $2;
  STACKTOP = sp;return ($104|0);
 }
 else if ((label|0) == 17) {
  $84 = HEAP32[12789]|0;
  $85 = ($84|0)!=(2);
  if ($85) {
   $86 = HEAP32[12776]|0;
   $87 = ((($86)) + 1560|0);
   $88 = HEAP32[$87>>2]|0;
   $89 = (_brailleIndicatorDefined($88)|0);
   $90 = ($89|0)!=(0);
   if ($90) {
    $91 = HEAP32[12818]|0;
    $92 = ((($91)) + 28|0);
    $93 = HEAP32[12818]|0;
    $94 = ((($93)) + 26|0);
    $95 = HEAP16[$94>>1]|0;
    $96 = $95 << 16 >> 16;
    $97 = (_for_updatePositions($92,0,$96,0)|0);
    $98 = ($97|0)!=(0);
    if (!($98)) {
     $2 = 0;
     $104 = $2;
     STACKTOP = sp;return ($104|0);
    }
   }
  }
  $99 = $4;
  HEAP32[12805] = $99;
  $100 = $6;
  $101 = ($100|0)!=(0);
  if ($101) {
   HEAP32[$8>>2] = 65535;
   $102 = (_for_updatePositions($8,0,1,0)|0);
   $103 = ($102|0)!=(0);
   if (!($103)) {
    $2 = 0;
    $104 = $2;
    STACKTOP = sp;return ($104|0);
   }
  }
  $2 = 1;
  $104 = $2;
  STACKTOP = sp;return ($104|0);
 }
 return (0)|0;
}
function _brailleIndicatorDefined($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $4 = ($3|0)!=(0);
 if ($4) {
  $5 = $2;
  $6 = HEAP32[12776]|0;
  $7 = ((($6)) + 31332|0);
  $8 = (($7) + ($5<<2)|0);
  HEAP32[12818] = $8;
  $9 = HEAP32[12818]|0;
  $10 = ((($9)) + 20|0);
  $11 = HEAP32[$10>>2]|0;
  HEAP32[12819] = $11;
  $1 = 1;
  $12 = $1;
  STACKTOP = sp;return ($12|0);
 } else {
  $1 = 0;
  $12 = $1;
  STACKTOP = sp;return ($12|0);
 }
 return (0)|0;
}
function _putCompChar($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = sp + 8|0;
 $2 = $0;
 $6 = $2;
 $7 = (_findCharOrDots($6,0)|0);
 $8 = ((($7)) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $4 = $9;
 $10 = $4;
 $11 = ($10|0)!=(0);
 if (!($11)) {
  $31 = $2;
  $32 = (_undefinedCharacter($31)|0);
  $1 = $32;
  $33 = $1;
  STACKTOP = sp;return ($33|0);
 }
 $12 = $4;
 $13 = HEAP32[12776]|0;
 $14 = ((($13)) + 31332|0);
 $15 = (($14) + ($12<<2)|0);
 $5 = $15;
 $16 = $5;
 $17 = ((($16)) + 26|0);
 $18 = HEAP16[$17>>1]|0;
 $19 = ($18<<16>>16)!=(0);
 if ($19) {
  $20 = $5;
  $21 = ((($20)) + 28|0);
  $22 = ((($21)) + 4|0);
  $23 = $5;
  $24 = ((($23)) + 26|0);
  $25 = HEAP16[$24>>1]|0;
  $26 = $25 << 16 >> 16;
  $27 = (_for_updatePositions($22,1,$26,0)|0);
  $1 = $27;
  $33 = $1;
  STACKTOP = sp;return ($33|0);
 } else {
  $28 = $2;
  $29 = (_getDotsForChar($28)|0);
  HEAP32[$3>>2] = $29;
  $30 = (_for_updatePositions($3,1,1,0)|0);
  $1 = $30;
  $33 = $1;
  STACKTOP = sp;return ($33|0);
 }
 return (0)|0;
}
function _findForPassRule() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $5 = HEAP32[12820]|0;
 $1 = $5;
 $6 = HEAP32[12808]|0;
 $2 = $6;
 $7 = HEAP32[12807]|0;
 $3 = $7;
 $8 = HEAP32[146]|0;
 $9 = HEAP32[12776]|0;
 $10 = ((($9)) + 22308|0);
 $11 = (($10) + ($8<<2)|0);
 $12 = HEAP32[$11>>2]|0;
 $4 = $12;
 HEAP32[12820] = 0;
 while(1) {
  $13 = $4;
  $14 = ($13|0)!=(0);
  if (!($14)) {
   label = 6;
   break;
  }
  $15 = $4;
  $16 = HEAP32[12776]|0;
  $17 = ((($16)) + 31332|0);
  $18 = (($17) + ($15<<2)|0);
  HEAP32[12808] = $18;
  $19 = HEAP32[12808]|0;
  $20 = ((($19)) + 20|0);
  $21 = HEAP32[$20>>2]|0;
  HEAP32[12807] = $21;
  $22 = (_passDoTest()|0);
  $23 = ($22|0)!=(0);
  if ($23) {
   label = 4;
   break;
  }
  $24 = HEAP32[12808]|0;
  $25 = HEAP32[$24>>2]|0;
  $4 = $25;
 }
 if ((label|0) == 4) {
  $0 = 1;
  $29 = $0;
  STACKTOP = sp;return ($29|0);
 }
 else if ((label|0) == 6) {
  $26 = $1;
  HEAP32[12820] = $26;
  $27 = $2;
  HEAP32[12808] = $27;
  $28 = $3;
  HEAP32[12807] = $28;
  $0 = 0;
  $29 = $0;
  STACKTOP = sp;return ($29|0);
 }
 return (0)|0;
}
function _passDoTest() {
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, $or$cond7 = 0, $or$cond9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $6 = sp;
 $2 = 0;
 $3 = 0;
 $4 = 0;
 $5 = 0;
 HEAP32[12815] = 0;
 $7 = HEAP32[12805]|0;
 HEAP32[12816] = $7;
 $8 = HEAP32[12808]|0;
 $9 = ((($8)) + 24|0);
 $10 = HEAP16[$9>>1]|0;
 $11 = $10 << 16 >> 16;
 $12 = HEAP32[12808]|0;
 $13 = ((($12)) + 28|0);
 $14 = (($13) + ($11<<2)|0);
 HEAP32[12813] = $14;
 HEAP32[12812] = 0;
 $15 = HEAP32[12816]|0;
 HEAP32[12821] = $15;
 HEAP32[12810] = $15;
 HEAP32[12809] = -1;
 HEAP32[12811] = -1;
 $16 = HEAP32[12807]|0;
 $17 = ($16|0)==(70);
 $18 = HEAP32[12807]|0;
 $19 = ($18|0)==(71);
 $or$cond = $17 | $19;
 if ($or$cond) {
  HEAP32[12814] = 0;
 } else {
  HEAP32[12814] = 1;
 }
 L4: while(1) {
  $20 = HEAP32[12812]|0;
  $21 = HEAP32[12808]|0;
  $22 = ((($21)) + 26|0);
  $23 = HEAP16[$22>>1]|0;
  $24 = $23 << 16 >> 16;
  $25 = ($20|0)<($24|0);
  if (!($25)) {
   label = 61;
   break;
  }
  HEAP32[$6>>2] = 1;
  $26 = HEAP32[12816]|0;
  $27 = HEAP32[12778]|0;
  $28 = ($26|0)>($27|0);
  if ($28) {
   label = 6;
   break;
  }
  $29 = HEAP32[12812]|0;
  $30 = HEAP32[12813]|0;
  $31 = (($30) + ($29<<2)|0);
  $32 = HEAP32[$31>>2]|0;
  do {
   switch ($32|0) {
   case 47:  {
    label = 48;
    break L4;
    break;
   }
   case 32:  {
    break L4;
    break;
   }
   case 96:  {
    $33 = HEAP32[12816]|0;
    $34 = ($33|0)!=(0);
    if ($34) {
     HEAP32[$6>>2] = 0;
    }
    $35 = HEAP32[12812]|0;
    $36 = (($35) + 1)|0;
    HEAP32[12812] = $36;
    break;
   }
   case 126:  {
    $37 = HEAP32[12816]|0;
    $38 = HEAP32[12778]|0;
    $39 = ($37|0)!=($38|0);
    if ($39) {
     HEAP32[$6>>2] = 0;
    }
    $40 = HEAP32[12812]|0;
    $41 = (($40) + 1)|0;
    HEAP32[12812] = $41;
    break;
   }
   case 95:  {
    $42 = HEAP32[12812]|0;
    $43 = (($42) + 1)|0;
    $44 = HEAP32[12813]|0;
    $45 = (($44) + ($43<<2)|0);
    $46 = HEAP32[$45>>2]|0;
    $47 = HEAP32[12816]|0;
    $48 = (($47) - ($46))|0;
    HEAP32[12816] = $48;
    $49 = HEAP32[12816]|0;
    $50 = ($49|0)<(0);
    if ($50) {
     HEAP32[12822] = 0;
     HEAP32[$6>>2] = 0;
    }
    $51 = HEAP32[12812]|0;
    $52 = (($51) + 2)|0;
    HEAP32[12812] = $52;
    break;
   }
   case 33:  {
    $53 = $2;
    $54 = ($53|0)!=(0);
    $55 = $54 ^ 1;
    $56 = $55&1;
    $2 = $56;
    $57 = HEAP32[12812]|0;
    $58 = (($57) + 1)|0;
    HEAP32[12812] = $58;
    continue L4;
    break;
   }
   case 64: case 34:  {
    $59 = (_matchCurrentInput()|0);
    HEAP32[$6>>2] = $59;
    $60 = HEAP32[12812]|0;
    $61 = (($60) + 1)|0;
    $62 = HEAP32[12813]|0;
    $63 = (($62) + ($61<<2)|0);
    $64 = HEAP32[$63>>2]|0;
    $65 = HEAP32[12816]|0;
    $66 = (($65) + ($64))|0;
    HEAP32[12816] = $66;
    $67 = HEAP32[12812]|0;
    $68 = (($67) + 1)|0;
    $69 = HEAP32[12813]|0;
    $70 = (($69) + ($68<<2)|0);
    $71 = HEAP32[$70>>2]|0;
    $72 = (($71) + 2)|0;
    $73 = HEAP32[12812]|0;
    $74 = (($73) + ($72))|0;
    HEAP32[12812] = $74;
    break;
   }
   case 91:  {
    $75 = HEAP32[12816]|0;
    HEAP32[12811] = $75;
    $76 = HEAP32[12812]|0;
    $77 = (($76) + 1)|0;
    HEAP32[12812] = $77;
    break;
   }
   case 93:  {
    $78 = HEAP32[12816]|0;
    HEAP32[12809] = $78;
    $79 = HEAP32[12812]|0;
    $80 = (($79) + 1)|0;
    HEAP32[12812] = $80;
    break;
   }
   case 36:  {
    $81 = HEAP32[12812]|0;
    $82 = (($81) + 1)|0;
    $83 = HEAP32[12813]|0;
    $84 = (($83) + ($82<<2)|0);
    $85 = HEAP32[$84>>2]|0;
    $86 = $85 << 16;
    $87 = HEAP32[12812]|0;
    $88 = (($87) + 2)|0;
    $89 = HEAP32[12813]|0;
    $90 = (($89) + ($88<<2)|0);
    $91 = HEAP32[$90>>2]|0;
    $92 = $86 | $91;
    $5 = $92;
    $1 = 0;
    while(1) {
     $93 = $1;
     $94 = HEAP32[12812]|0;
     $95 = (($94) + 3)|0;
     $96 = HEAP32[12813]|0;
     $97 = (($96) + ($95<<2)|0);
     $98 = HEAP32[$97>>2]|0;
     $99 = ($93>>>0)<($98>>>0);
     if (!($99)) {
      break;
     }
     $100 = HEAP32[12816]|0;
     $101 = HEAP32[12778]|0;
     $102 = ($100|0)>=($101|0);
     if ($102) {
      label = 24;
      break;
     }
     $103 = HEAP32[12816]|0;
     $104 = HEAP32[12777]|0;
     $105 = (($104) + ($103<<2)|0);
     $106 = HEAP32[$105>>2]|0;
     $107 = ($106|0)==(65535);
     if ($107) {
      label = 26;
      break;
     }
     $108 = HEAP32[12816]|0;
     $109 = HEAP32[12777]|0;
     $110 = (($109) + ($108<<2)|0);
     $111 = HEAP32[$110>>2]|0;
     $112 = HEAP32[12814]|0;
     $113 = (_findCharOrDots($111,$112)|0);
     $114 = ((($113)) + 12|0);
     $115 = HEAP32[$114>>2]|0;
     $116 = $5;
     $117 = $115 & $116;
     $118 = ($117|0)!=(0);
     if (!($118)) {
      label = 28;
      break;
     }
     $119 = HEAP32[12816]|0;
     $120 = (($119) + 1)|0;
     HEAP32[12816] = $120;
     $121 = $1;
     $122 = (($121) + 1)|0;
     $1 = $122;
    }
    if ((label|0) == 24) {
     label = 0;
     HEAP32[$6>>2] = 0;
    }
    else if ((label|0) == 26) {
     label = 0;
     HEAP32[$6>>2] = 0;
    }
    else if ((label|0) == 28) {
     label = 0;
     HEAP32[$6>>2] = 0;
    }
    $123 = HEAP32[$6>>2]|0;
    $124 = ($123|0)!=(0);
    L38: do {
     if ($124) {
      $125 = HEAP32[12812]|0;
      $126 = (($125) + 3)|0;
      $127 = HEAP32[12813]|0;
      $128 = (($127) + ($126<<2)|0);
      $129 = HEAP32[$128>>2]|0;
      $1 = $129;
      while(1) {
       $130 = $1;
       $131 = HEAP32[12812]|0;
       $132 = (($131) + 4)|0;
       $133 = HEAP32[12813]|0;
       $134 = (($133) + ($132<<2)|0);
       $135 = HEAP32[$134>>2]|0;
       $136 = ($130>>>0)<($135>>>0);
       if (!($136)) {
        break L38;
       }
       $137 = HEAP32[12816]|0;
       $138 = HEAP32[12778]|0;
       $139 = ($137|0)<($138|0);
       if (!($139)) {
        break L38;
       }
       $140 = HEAP32[12816]|0;
       $141 = HEAP32[12777]|0;
       $142 = (($141) + ($140<<2)|0);
       $143 = HEAP32[$142>>2]|0;
       $144 = ($143|0)==(65535);
       if ($144) {
        break;
       }
       $145 = HEAP32[12816]|0;
       $146 = HEAP32[12777]|0;
       $147 = (($146) + ($145<<2)|0);
       $148 = HEAP32[$147>>2]|0;
       $149 = HEAP32[12814]|0;
       $150 = (_findCharOrDots($148,$149)|0);
       $151 = ((($150)) + 12|0);
       $152 = HEAP32[$151>>2]|0;
       $153 = $5;
       $154 = $152 & $153;
       $155 = ($154|0)!=(0);
       if (!($155)) {
        break L38;
       }
       $156 = HEAP32[12816]|0;
       $157 = (($156) + 1)|0;
       HEAP32[12816] = $157;
       $158 = $1;
       $159 = (($158) + 1)|0;
       $1 = $159;
      }
      HEAP32[$6>>2] = 0;
     }
    } while(0);
    $160 = HEAP32[12812]|0;
    $161 = (($160) + 5)|0;
    HEAP32[12812] = $161;
    break;
   }
   case 125: case 123:  {
    $162 = HEAP32[12812]|0;
    $163 = (($162) + 1)|0;
    $164 = HEAP32[12813]|0;
    $165 = (($164) + ($163<<2)|0);
    $166 = HEAP32[$165>>2]|0;
    $167 = $166 << 16;
    $168 = HEAP32[12812]|0;
    $169 = (($168) + 2)|0;
    $170 = HEAP32[12813]|0;
    $171 = (($170) + ($169<<2)|0);
    $172 = HEAP32[$171>>2]|0;
    $173 = $167 | $172;
    $3 = $173;
    $174 = $3;
    $175 = HEAP32[12776]|0;
    $176 = ((($175)) + 31332|0);
    $177 = (($176) + ($174<<2)|0);
    $4 = $177;
    $178 = HEAP32[12812]|0;
    $179 = ($178|0)==(0);
    if ($179) {
     label = 42;
    } else {
     $180 = HEAP32[12812]|0;
     $181 = ($180|0)>(0);
     if ($181) {
      $182 = HEAP32[12812]|0;
      $183 = (($182) - 1)|0;
      $184 = HEAP32[12813]|0;
      $185 = (($184) + ($183<<2)|0);
      $186 = HEAP32[$185>>2]|0;
      $187 = ($186|0)==(91);
      if ($187) {
       label = 42;
      }
     }
    }
    if ((label|0) == 42) {
     label = 0;
     $188 = $4;
     HEAP32[12815] = $188;
     $189 = HEAP32[12812]|0;
     $190 = HEAP32[12813]|0;
     $191 = (($190) + ($189<<2)|0);
     $192 = HEAP32[$191>>2]|0;
     HEAP32[12817] = $192;
    }
    $193 = HEAP32[12812]|0;
    $194 = HEAP32[12813]|0;
    $195 = (($194) + ($193<<2)|0);
    $196 = HEAP32[$195>>2]|0;
    $197 = ($196|0)==(123);
    $198 = HEAP32[12816]|0;
    $199 = HEAP32[12777]|0;
    $200 = (($199) + ($198<<2)|0);
    $201 = HEAP32[$200>>2]|0;
    $202 = HEAP32[12814]|0;
    $203 = $202<<1;
    if ($197) {
     $204 = $4;
     $205 = ((($204)) + 28|0);
     $206 = (($205) + ($203<<2)|0);
     $207 = HEAP32[$206>>2]|0;
     $208 = ($201|0)==($207|0);
     $209 = $208 ? 1 : 0;
     HEAP32[$6>>2] = $209;
    } else {
     $210 = (($203) + 1)|0;
     $211 = $4;
     $212 = ((($211)) + 28|0);
     $213 = (($212) + ($210<<2)|0);
     $214 = HEAP32[$213>>2]|0;
     $215 = ($201|0)==($214|0);
     $216 = $215 ? 1 : 0;
     HEAP32[$6>>2] = $216;
    }
    $217 = HEAP32[12816]|0;
    $218 = (($217) + 1)|0;
    HEAP32[12816] = $218;
    $219 = HEAP32[12812]|0;
    $220 = (($219) + 3)|0;
    HEAP32[12812] = $220;
    break;
   }
   case 37:  {
    $221 = HEAP32[12812]|0;
    $222 = (_swapTest($221,51264)|0);
    HEAP32[$6>>2] = $222;
    $223 = HEAP32[12812]|0;
    $224 = (($223) + 5)|0;
    HEAP32[12812] = $224;
    break;
   }
   default: {
    $243 = HEAP32[12813]|0;
    $244 = (_handlePassVariableTest($243,51248,$6)|0);
    $245 = ($244|0)!=(0);
    if (!($245)) {
     label = 56;
     break L4;
    }
   }
   }
  } while(0);
  $246 = $2;
  $247 = ($246|0)!=(0);
  $248 = HEAP32[$6>>2]|0;
  $249 = ($248|0)!=(0);
  $or$cond7 = $247 | $249;
  if (!($or$cond7)) {
   label = 59;
   break;
  }
  $250 = $2;
  $251 = ($250|0)!=(0);
  $252 = HEAP32[$6>>2]|0;
  $253 = ($252|0)!=(0);
  $or$cond9 = $251 & $253;
  if ($or$cond9) {
   label = 59;
   break;
  }
  $2 = 0;
 }
 do {
  if ((label|0) == 6) {
   $0 = 0;
   $254 = $0;
   STACKTOP = sp;return ($254|0);
  }
  else if ((label|0) == 48) {
   $225 = (_doPassSearch()|0);
   HEAP32[$6>>2] = $225;
   $226 = $2;
   $227 = ($226|0)!=(0);
   $228 = HEAP32[$6>>2]|0;
   $229 = ($228|0)!=(0);
   $or$cond3 = $227 | $229;
   if ($or$cond3) {
    $230 = $2;
    $231 = ($230|0)!=(0);
    $232 = HEAP32[$6>>2]|0;
    $233 = ($232|0)!=(0);
    $or$cond5 = $231 & $233;
    if (!($or$cond5)) {
     $234 = HEAP32[12823]|0;
     HEAP32[12812] = $234;
     $235 = HEAP32[12822]|0;
     HEAP32[12816] = $235;
     break;
    }
   }
   $0 = 0;
   $254 = $0;
   STACKTOP = sp;return ($254|0);
  }
  else if ((label|0) == 56) {
   $0 = 0;
   $254 = $0;
   STACKTOP = sp;return ($254|0);
  }
  else if ((label|0) == 59) {
   $0 = 0;
   $254 = $0;
   STACKTOP = sp;return ($254|0);
  }
  else if ((label|0) == 61) {
   $0 = 0;
   $254 = $0;
   STACKTOP = sp;return ($254|0);
  }
 } while(0);
 $236 = HEAP32[12812]|0;
 $237 = (($236) + 1)|0;
 HEAP32[12812] = $237;
 $238 = HEAP32[12816]|0;
 HEAP32[12821] = $238;
 $239 = HEAP32[12811]|0;
 $240 = ($239|0)==(-1);
 if ($240) {
  $241 = HEAP32[12810]|0;
  HEAP32[12811] = $241;
  $242 = HEAP32[12821]|0;
  HEAP32[12809] = $242;
 }
 $0 = 1;
 $254 = $0;
 STACKTOP = sp;return ($254|0);
}
function _matchCurrentInput() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = HEAP32[12816]|0;
 $2 = $3;
 $4 = HEAP32[12812]|0;
 $5 = (($4) + 2)|0;
 $1 = $5;
 while(1) {
  $6 = $1;
  $7 = HEAP32[12812]|0;
  $8 = (($7) + 2)|0;
  $9 = HEAP32[12812]|0;
  $10 = (($9) + 1)|0;
  $11 = HEAP32[12813]|0;
  $12 = (($11) + ($10<<2)|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = (($8) + ($13))|0;
  $15 = ($6>>>0)<($14>>>0);
  if (!($15)) {
   label = 7;
   break;
  }
  $16 = $2;
  $17 = HEAP32[12777]|0;
  $18 = (($17) + ($16<<2)|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = ($19|0)==(65535);
  if ($20) {
   label = 5;
   break;
  }
  $21 = $1;
  $22 = HEAP32[12813]|0;
  $23 = (($22) + ($21<<2)|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = $2;
  $26 = (($25) + 1)|0;
  $2 = $26;
  $27 = HEAP32[12777]|0;
  $28 = (($27) + ($25<<2)|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = ($24|0)!=($29|0);
  if ($30) {
   label = 5;
   break;
  }
  $31 = $1;
  $32 = (($31) + 1)|0;
  $1 = $32;
 }
 if ((label|0) == 5) {
  $0 = 0;
  $33 = $0;
  STACKTOP = sp;return ($33|0);
 }
 else if ((label|0) == 7) {
  $0 = 1;
  $33 = $0;
  STACKTOP = sp;return ($33|0);
 }
 return (0)|0;
}
function _swapTest($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $10 = $4;
 $11 = HEAP32[$10>>2]|0;
 $7 = $11;
 $12 = $3;
 $13 = (($12) + 1)|0;
 $14 = HEAP32[12813]|0;
 $15 = (($14) + ($13<<2)|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = $16 << 16;
 $18 = $3;
 $19 = (($18) + 2)|0;
 $20 = HEAP32[12813]|0;
 $21 = (($20) + ($19<<2)|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = $17 | $22;
 $8 = $23;
 $24 = $8;
 $25 = HEAP32[12776]|0;
 $26 = ((($25)) + 31332|0);
 $27 = (($26) + ($24<<2)|0);
 $9 = $27;
 $5 = 0;
 while(1) {
  $28 = $5;
  $29 = $3;
  $30 = (($29) + 3)|0;
  $31 = HEAP32[12813]|0;
  $32 = (($31) + ($30<<2)|0);
  $33 = HEAP32[$32>>2]|0;
  $34 = ($28>>>0)<($33>>>0);
  if (!($34)) {
   break;
  }
  $35 = $9;
  $36 = ((($35)) + 20|0);
  $37 = HEAP32[$36>>2]|0;
  $38 = ($37|0)==(56);
  L4: do {
   if ($38) {
    $6 = 1;
    while(1) {
     $39 = $6;
     $40 = $9;
     $41 = ((($40)) + 24|0);
     $42 = HEAP16[$41>>1]|0;
     $43 = $42 << 16 >> 16;
     $44 = ($39|0)<($43|0);
     if (!($44)) {
      break L4;
     }
     $45 = $7;
     $46 = HEAP32[12777]|0;
     $47 = (($46) + ($45<<2)|0);
     $48 = HEAP32[$47>>2]|0;
     $49 = $6;
     $50 = $9;
     $51 = ((($50)) + 28|0);
     $52 = (($51) + ($49<<2)|0);
     $53 = HEAP32[$52>>2]|0;
     $54 = ($48|0)==($53|0);
     if ($54) {
      break L4;
     }
     $55 = $6;
     $56 = (($55) + 2)|0;
     $6 = $56;
    }
   } else {
    $6 = 0;
    while(1) {
     $57 = $6;
     $58 = $9;
     $59 = ((($58)) + 24|0);
     $60 = HEAP16[$59>>1]|0;
     $61 = $60 << 16 >> 16;
     $62 = ($57|0)<($61|0);
     if (!($62)) {
      break L4;
     }
     $63 = $7;
     $64 = HEAP32[12777]|0;
     $65 = (($64) + ($63<<2)|0);
     $66 = HEAP32[$65>>2]|0;
     $67 = $6;
     $68 = $9;
     $69 = ((($68)) + 28|0);
     $70 = (($69) + ($67<<2)|0);
     $71 = HEAP32[$70>>2]|0;
     $72 = ($66|0)==($71|0);
     if ($72) {
      break L4;
     }
     $73 = $6;
     $74 = (($73) + 1)|0;
     $6 = $74;
    }
   }
  } while(0);
  $75 = $6;
  $76 = $9;
  $77 = ((($76)) + 24|0);
  $78 = HEAP16[$77>>1]|0;
  $79 = $78 << 16 >> 16;
  $80 = ($75|0)>=($79|0);
  if ($80) {
   label = 13;
   break;
  }
  $81 = $7;
  $82 = (($81) + 1)|0;
  $7 = $82;
  $83 = $5;
  $84 = (($83) + 1)|0;
  $5 = $84;
 }
 if ((label|0) == 13) {
  $2 = 0;
  $158 = $2;
  STACKTOP = sp;return ($158|0);
 }
 $85 = $3;
 $86 = (($85) + 3)|0;
 $87 = HEAP32[12813]|0;
 $88 = (($87) + ($86<<2)|0);
 $89 = HEAP32[$88>>2]|0;
 $90 = $3;
 $91 = (($90) + 4)|0;
 $92 = HEAP32[12813]|0;
 $93 = (($92) + ($91<<2)|0);
 $94 = HEAP32[$93>>2]|0;
 $95 = ($89|0)==($94|0);
 if ($95) {
  $96 = $7;
  $97 = $4;
  HEAP32[$97>>2] = $96;
  $2 = 1;
  $158 = $2;
  STACKTOP = sp;return ($158|0);
 }
 while(1) {
  $98 = $5;
  $99 = $3;
  $100 = (($99) + 4)|0;
  $101 = HEAP32[12813]|0;
  $102 = (($101) + ($100<<2)|0);
  $103 = HEAP32[$102>>2]|0;
  $104 = ($98>>>0)<($103>>>0);
  if (!($104)) {
   label = 30;
   break;
  }
  $105 = $9;
  $106 = ((($105)) + 20|0);
  $107 = HEAP32[$106>>2]|0;
  $108 = ($107|0)==(56);
  L27: do {
   if ($108) {
    $6 = 1;
    while(1) {
     $109 = $6;
     $110 = $9;
     $111 = ((($110)) + 24|0);
     $112 = HEAP16[$111>>1]|0;
     $113 = $112 << 16 >> 16;
     $114 = ($109|0)<($113|0);
     if (!($114)) {
      break L27;
     }
     $115 = $7;
     $116 = HEAP32[12777]|0;
     $117 = (($116) + ($115<<2)|0);
     $118 = HEAP32[$117>>2]|0;
     $119 = $6;
     $120 = $9;
     $121 = ((($120)) + 28|0);
     $122 = (($121) + ($119<<2)|0);
     $123 = HEAP32[$122>>2]|0;
     $124 = ($118|0)==($123|0);
     if ($124) {
      break L27;
     }
     $125 = $6;
     $126 = (($125) + 2)|0;
     $6 = $126;
    }
   } else {
    $6 = 0;
    while(1) {
     $127 = $6;
     $128 = $9;
     $129 = ((($128)) + 24|0);
     $130 = HEAP16[$129>>1]|0;
     $131 = $130 << 16 >> 16;
     $132 = ($127|0)<($131|0);
     if (!($132)) {
      break L27;
     }
     $133 = $7;
     $134 = HEAP32[12777]|0;
     $135 = (($134) + ($133<<2)|0);
     $136 = HEAP32[$135>>2]|0;
     $137 = $6;
     $138 = $9;
     $139 = ((($138)) + 28|0);
     $140 = (($139) + ($137<<2)|0);
     $141 = HEAP32[$140>>2]|0;
     $142 = ($136|0)==($141|0);
     if ($142) {
      break L27;
     }
     $143 = $6;
     $144 = (($143) + 1)|0;
     $6 = $144;
    }
   }
  } while(0);
  $145 = $6;
  $146 = $9;
  $147 = ((($146)) + 24|0);
  $148 = HEAP16[$147>>1]|0;
  $149 = $148 << 16 >> 16;
  $150 = ($145|0)>=($149|0);
  $151 = $7;
  if ($150) {
   label = 28;
   break;
  }
  $153 = (($151) + 1)|0;
  $7 = $153;
  $154 = $5;
  $155 = (($154) + 1)|0;
  $5 = $155;
 }
 if ((label|0) == 28) {
  $152 = $4;
  HEAP32[$152>>2] = $151;
  $2 = 1;
  $158 = $2;
  STACKTOP = sp;return ($158|0);
 }
 else if ((label|0) == 30) {
  $156 = $7;
  $157 = $4;
  HEAP32[$157>>2] = $156;
  $2 = 1;
  $158 = $2;
  STACKTOP = sp;return ($158|0);
 }
 return (0)|0;
}
function _doPassSearch() {
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0;
 var $or$cond3 = 0, $or$cond3$not = 0, $or$cond5 = 0, $or$cond7 = 0, $or$cond9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $9 = sp;
 $1 = 0;
 $4 = 0;
 $10 = HEAP32[12816]|0;
 $8 = $10;
 L1: while(1) {
  $11 = $8;
  $12 = HEAP32[12778]|0;
  $13 = ($11|0)<($12|0);
  if (!($13)) {
   label = 56;
   break;
  }
  $14 = HEAP32[12812]|0;
  $15 = (($14) + 1)|0;
  HEAP32[12823] = $15;
  $16 = $8;
  HEAP32[12822] = $16;
  L4: while(1) {
   $17 = HEAP32[12823]|0;
   $18 = HEAP32[12808]|0;
   $19 = ((($18)) + 26|0);
   $20 = HEAP16[$19>>1]|0;
   $21 = $20 << 16 >> 16;
   $22 = ($17|0)<($21|0);
   if (!($22)) {
    break;
   }
   HEAP32[$9>>2] = 1;
   $23 = HEAP32[12822]|0;
   $24 = HEAP32[12778]|0;
   $25 = ($23|0)>($24|0);
   if ($25) {
    label = 6;
    break L1;
   }
   $26 = HEAP32[12823]|0;
   $27 = HEAP32[12813]|0;
   $28 = (($27) + ($26<<2)|0);
   $29 = HEAP32[$28>>2]|0;
   do {
    switch ($29|0) {
    case 95:  {
     $30 = HEAP32[12823]|0;
     $31 = (($30) + 1)|0;
     $32 = HEAP32[12813]|0;
     $33 = (($32) + ($31<<2)|0);
     $34 = HEAP32[$33>>2]|0;
     $35 = HEAP32[12822]|0;
     $36 = (($35) - ($34))|0;
     HEAP32[12822] = $36;
     $37 = HEAP32[12822]|0;
     $38 = ($37|0)<(0);
     if ($38) {
      HEAP32[12822] = 0;
      HEAP32[$9>>2] = 0;
     }
     $39 = HEAP32[12823]|0;
     $40 = (($39) + 2)|0;
     HEAP32[12823] = $40;
     break;
    }
    case 33:  {
     $41 = $4;
     $42 = ($41|0)!=(0);
     $43 = $42 ^ 1;
     $44 = $43&1;
     $4 = $44;
     $45 = HEAP32[12823]|0;
     $46 = (($45) + 1)|0;
     HEAP32[12823] = $46;
     continue L4;
     break;
    }
    case 64: case 34:  {
     $47 = HEAP32[12822]|0;
     $3 = $47;
     $48 = HEAP32[12823]|0;
     $49 = (($48) + 2)|0;
     $2 = $49;
     while(1) {
      $50 = $2;
      $51 = HEAP32[12823]|0;
      $52 = (($51) + 2)|0;
      $53 = HEAP32[12823]|0;
      $54 = (($53) + 1)|0;
      $55 = HEAP32[12813]|0;
      $56 = (($55) + ($54<<2)|0);
      $57 = HEAP32[$56>>2]|0;
      $58 = (($52) + ($57))|0;
      $59 = ($50>>>0)<($58>>>0);
      if (!($59)) {
       break;
      }
      $60 = $3;
      $61 = HEAP32[12777]|0;
      $62 = (($61) + ($60<<2)|0);
      $63 = HEAP32[$62>>2]|0;
      $64 = ($63|0)==(65535);
      if ($64) {
       label = 16;
       break;
      }
      $65 = $2;
      $66 = HEAP32[12813]|0;
      $67 = (($66) + ($65<<2)|0);
      $68 = HEAP32[$67>>2]|0;
      $69 = $3;
      $70 = (($69) + 1)|0;
      $3 = $70;
      $71 = HEAP32[12777]|0;
      $72 = (($71) + ($69<<2)|0);
      $73 = HEAP32[$72>>2]|0;
      $74 = ($68|0)!=($73|0);
      if ($74) {
       label = 16;
       break;
      }
      $75 = $2;
      $76 = (($75) + 1)|0;
      $2 = $76;
     }
     if ((label|0) == 16) {
      label = 0;
      HEAP32[$9>>2] = 0;
     }
     $77 = HEAP32[12823]|0;
     $78 = (($77) + 1)|0;
     $79 = HEAP32[12813]|0;
     $80 = (($79) + ($78<<2)|0);
     $81 = HEAP32[$80>>2]|0;
     $82 = HEAP32[12822]|0;
     $83 = (($82) + ($81))|0;
     HEAP32[12822] = $83;
     $84 = HEAP32[12823]|0;
     $85 = (($84) + 1)|0;
     $86 = HEAP32[12813]|0;
     $87 = (($86) + ($85<<2)|0);
     $88 = HEAP32[$87>>2]|0;
     $89 = (($88) + 2)|0;
     $90 = HEAP32[12823]|0;
     $91 = (($90) + ($89))|0;
     HEAP32[12823] = $91;
     break;
    }
    case 91:  {
     $92 = HEAP32[12823]|0;
     $93 = (($92) + 1)|0;
     HEAP32[12823] = $93;
     break;
    }
    case 93:  {
     $94 = HEAP32[12823]|0;
     $95 = (($94) + 1)|0;
     HEAP32[12823] = $95;
     break;
    }
    case 36:  {
     $96 = HEAP32[12823]|0;
     $97 = (($96) + 1)|0;
     $98 = HEAP32[12813]|0;
     $99 = (($98) + ($97<<2)|0);
     $100 = HEAP32[$99>>2]|0;
     $101 = $100 << 16;
     $102 = HEAP32[12823]|0;
     $103 = (($102) + 2)|0;
     $104 = HEAP32[12813]|0;
     $105 = (($104) + ($103<<2)|0);
     $106 = HEAP32[$105>>2]|0;
     $107 = $101 | $106;
     $7 = $107;
     $2 = 0;
     while(1) {
      $108 = $2;
      $109 = HEAP32[12823]|0;
      $110 = (($109) + 3)|0;
      $111 = HEAP32[12813]|0;
      $112 = (($111) + ($110<<2)|0);
      $113 = HEAP32[$112>>2]|0;
      $114 = ($108>>>0)<($113>>>0);
      if (!($114)) {
       break;
      }
      $115 = HEAP32[12822]|0;
      $116 = HEAP32[12777]|0;
      $117 = (($116) + ($115<<2)|0);
      $118 = HEAP32[$117>>2]|0;
      $119 = ($118|0)==(65535);
      if ($119) {
       HEAP32[$9>>2] = 0;
      } else {
       $120 = HEAP32[12822]|0;
       $121 = (($120) + 1)|0;
       HEAP32[12822] = $121;
       $122 = HEAP32[12777]|0;
       $123 = (($122) + ($120<<2)|0);
       $124 = HEAP32[$123>>2]|0;
       $125 = HEAP32[12814]|0;
       $126 = (_findCharOrDots($124,$125)|0);
       $127 = ((($126)) + 12|0);
       $128 = HEAP32[$127>>2]|0;
       $129 = $7;
       $130 = $128 & $129;
       $131 = ($130|0)!=(0);
       $132 = $131 ? 1 : 0;
       HEAP32[$9>>2] = $132;
      }
      $133 = HEAP32[$9>>2]|0;
      $134 = ($133|0)!=(0);
      if (!($134)) {
       break;
      }
      $135 = $2;
      $136 = (($135) + 1)|0;
      $2 = $136;
     }
     $137 = HEAP32[$9>>2]|0;
     $138 = ($137|0)!=(0);
     L36: do {
      if ($138) {
       $139 = HEAP32[12823]|0;
       $140 = (($139) + 3)|0;
       $141 = HEAP32[12813]|0;
       $142 = (($141) + ($140<<2)|0);
       $143 = HEAP32[$142>>2]|0;
       $2 = $143;
       while(1) {
        $144 = $2;
        $145 = HEAP32[12823]|0;
        $146 = (($145) + 4)|0;
        $147 = HEAP32[12813]|0;
        $148 = (($147) + ($146<<2)|0);
        $149 = HEAP32[$148>>2]|0;
        $150 = ($144>>>0)<($149>>>0);
        if (!($150)) {
         break L36;
        }
        $151 = HEAP32[12822]|0;
        $152 = HEAP32[12777]|0;
        $153 = (($152) + ($151<<2)|0);
        $154 = HEAP32[$153>>2]|0;
        $155 = ($154|0)==(65535);
        if ($155) {
         break;
        }
        $156 = HEAP32[12822]|0;
        $157 = HEAP32[12777]|0;
        $158 = (($157) + ($156<<2)|0);
        $159 = HEAP32[$158>>2]|0;
        $160 = HEAP32[12814]|0;
        $161 = (_findCharOrDots($159,$160)|0);
        $162 = ((($161)) + 12|0);
        $163 = HEAP32[$162>>2]|0;
        $164 = $7;
        $165 = $163 & $164;
        $166 = ($165|0)!=(0);
        if (!($166)) {
         break L36;
        }
        $167 = HEAP32[12822]|0;
        $168 = (($167) + 1)|0;
        HEAP32[12822] = $168;
        $169 = $2;
        $170 = (($169) + 1)|0;
        $2 = $170;
       }
       HEAP32[$9>>2] = 0;
      }
     } while(0);
     $171 = HEAP32[12823]|0;
     $172 = (($171) + 5)|0;
     HEAP32[12823] = $172;
     break;
    }
    case 125: case 123:  {
     $173 = HEAP32[12823]|0;
     $174 = (($173) + 1)|0;
     $175 = HEAP32[12813]|0;
     $176 = (($175) + ($174<<2)|0);
     $177 = HEAP32[$176>>2]|0;
     $178 = $177 << 16;
     $179 = HEAP32[12823]|0;
     $180 = (($179) + 2)|0;
     $181 = HEAP32[12813]|0;
     $182 = (($181) + ($180<<2)|0);
     $183 = HEAP32[$182>>2]|0;
     $184 = $178 | $183;
     $5 = $184;
     $185 = $5;
     $186 = HEAP32[12776]|0;
     $187 = ((($186)) + 31332|0);
     $188 = (($187) + ($185<<2)|0);
     $6 = $188;
     $189 = HEAP32[12823]|0;
     $190 = HEAP32[12813]|0;
     $191 = (($190) + ($189<<2)|0);
     $192 = HEAP32[$191>>2]|0;
     $193 = ($192|0)==(123);
     $194 = HEAP32[12822]|0;
     $195 = HEAP32[12777]|0;
     $196 = (($195) + ($194<<2)|0);
     $197 = HEAP32[$196>>2]|0;
     $198 = HEAP32[12814]|0;
     $199 = $198<<1;
     if ($193) {
      $200 = $6;
      $201 = ((($200)) + 28|0);
      $202 = (($201) + ($199<<2)|0);
      $203 = HEAP32[$202>>2]|0;
      $204 = ($197|0)==($203|0);
      $205 = $204 ? 1 : 0;
      HEAP32[$9>>2] = $205;
     } else {
      $206 = (($199) + 1)|0;
      $207 = $6;
      $208 = ((($207)) + 28|0);
      $209 = (($208) + ($206<<2)|0);
      $210 = HEAP32[$209>>2]|0;
      $211 = ($197|0)==($210|0);
      $212 = $211 ? 1 : 0;
      HEAP32[$9>>2] = $212;
     }
     $213 = HEAP32[12815]|0;
     $214 = ($213|0)!=(0|0);
     $215 = HEAP32[12817]|0;
     $216 = ($215|0)==(123);
     $or$cond = $214 & $216;
     do {
      if ($or$cond) {
       $217 = $6;
       $218 = HEAP32[12815]|0;
       $219 = ($217|0)==($218|0);
       if ($219) {
        $220 = HEAP32[12822]|0;
        $221 = HEAP32[12777]|0;
        $222 = (($221) + ($220<<2)|0);
        $223 = HEAP32[$222>>2]|0;
        $224 = HEAP32[12814]|0;
        $225 = $224<<1;
        $226 = $6;
        $227 = ((($226)) + 28|0);
        $228 = (($227) + ($225<<2)|0);
        $229 = HEAP32[$228>>2]|0;
        $230 = ($223|0)==($229|0);
        if ($230) {
         $231 = $1;
         $232 = (($231) + -1)|0;
         $1 = $232;
         break;
        }
        $233 = HEAP32[12822]|0;
        $234 = HEAP32[12777]|0;
        $235 = (($234) + ($233<<2)|0);
        $236 = HEAP32[$235>>2]|0;
        $237 = HEAP32[12814]|0;
        $238 = $237<<1;
        $239 = (($238) + 1)|0;
        $240 = $6;
        $241 = ((($240)) + 28|0);
        $242 = (($241) + ($239<<2)|0);
        $243 = HEAP32[$242>>2]|0;
        $244 = ($236|0)==($243|0);
        if ($244) {
         $245 = $1;
         $246 = (($245) + 1)|0;
         $1 = $246;
        }
       }
      }
     } while(0);
     $247 = HEAP32[12822]|0;
     $248 = (($247) + 1)|0;
     HEAP32[12822] = $248;
     $249 = HEAP32[12823]|0;
     $250 = (($249) + 3)|0;
     HEAP32[12823] = $250;
     break;
    }
    case 37:  {
     $251 = HEAP32[12823]|0;
     $252 = (_swapTest($251,51288)|0);
     HEAP32[$9>>2] = $252;
     $253 = HEAP32[12823]|0;
     $254 = (($253) + 5)|0;
     HEAP32[12823] = $254;
     break;
    }
    case 32:  {
     $255 = HEAP32[$9>>2]|0;
     $256 = ($255|0)!=(0);
     if ($256) {
      $257 = HEAP32[12815]|0;
      $258 = ($257|0)!=(0|0);
      $259 = $1;
      $260 = ($259|0)==(1);
      $or$cond3 = $258 & $260;
      $or$cond3$not = $or$cond3 ^ 1;
      $261 = HEAP32[12815]|0;
      $262 = ($261|0)!=(0|0);
      $or$cond5 = $or$cond3$not & $262;
      if (!($or$cond5)) {
       label = 49;
       break L1;
      }
     }
     $263 = HEAP32[12808]|0;
     $264 = ((($263)) + 26|0);
     $265 = HEAP16[$264>>1]|0;
     $266 = $265 << 16 >> 16;
     HEAP32[12823] = $266;
     break;
    }
    default: {
     $267 = HEAP32[12813]|0;
     (_handlePassVariableTest($267,51292,$9)|0);
    }
    }
   } while(0);
   $268 = $4;
   $269 = ($268|0)!=(0);
   $270 = HEAP32[$9>>2]|0;
   $271 = ($270|0)!=(0);
   $or$cond7 = $269 | $271;
   if (!($or$cond7)) {
    break;
   }
   $272 = $4;
   $273 = ($272|0)!=(0);
   $274 = HEAP32[$9>>2]|0;
   $275 = ($274|0)!=(0);
   $or$cond9 = $273 & $275;
   if ($or$cond9) {
    break;
   }
   $4 = 0;
  }
  $276 = $8;
  $277 = (($276) + 1)|0;
  $8 = $277;
 }
 if ((label|0) == 6) {
  $0 = 0;
  $278 = $0;
  STACKTOP = sp;return ($278|0);
 }
 else if ((label|0) == 49) {
  $0 = 1;
  $278 = $0;
  STACKTOP = sp;return ($278|0);
 }
 else if ((label|0) == 56) {
  $0 = 0;
  $278 = $0;
  STACKTOP = sp;return ($278|0);
 }
 return (0)|0;
}
function _compareChars($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $10 = $7;
 $11 = ($10|0)!=(0);
 if (!($11)) {
  $4 = 0;
  $34 = $4;
  STACKTOP = sp;return ($34|0);
 }
 $9 = 0;
 while(1) {
  $12 = $9;
  $13 = $7;
  $14 = ($12|0)<($13|0);
  if (!($14)) {
   label = 8;
   break;
  }
  $15 = $9;
  $16 = $5;
  $17 = (($16) + ($15<<2)|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = $8;
  $20 = (_findCharOrDots($18,$19)|0);
  $21 = ((($20)) + 24|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = $9;
  $24 = $6;
  $25 = (($24) + ($23<<2)|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = $8;
  $28 = (_findCharOrDots($26,$27)|0);
  $29 = ((($28)) + 24|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = ($22|0)!=($30|0);
  if ($31) {
   label = 6;
   break;
  }
  $32 = $9;
  $33 = (($32) + 1)|0;
  $9 = $33;
 }
 if ((label|0) == 6) {
  $4 = 0;
  $34 = $4;
  STACKTOP = sp;return ($34|0);
 }
 else if ((label|0) == 8) {
  $4 = 1;
  $34 = $4;
  STACKTOP = sp;return ($34|0);
 }
 return (0)|0;
}
function _markSyllables() {
 var $$ = 0, $$old = 0, $$old1 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
 var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $14 = 0;
 var $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $2 = 0;
 $3 = 0;
 $10 = HEAP32[12781]|0;
 $11 = ($10|0)==(0|0);
 if (!($11)) {
  $12 = HEAP32[12776]|0;
  $13 = ((($12)) + 12|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = ($14|0)!=(0);
  if ($15) {
   HEAP32[12805] = 0;
   L4: while(1) {
    $16 = HEAP32[12805]|0;
    $17 = HEAP32[12778]|0;
    $18 = ($16|0)<($17|0);
    if (!($18)) {
     label = 31;
     break;
    }
    $19 = HEAP32[12778]|0;
    $20 = HEAP32[12805]|0;
    $21 = (($19) - ($20))|0;
    $4 = $21;
    $22 = HEAP32[12805]|0;
    $23 = HEAP32[12777]|0;
    $24 = (($23) + ($22<<2)|0);
    $25 = HEAP32[$24>>2]|0;
    $26 = (_findCharOrDots($25,0)|0);
    $5 = $26;
    $7 = 0;
    while(1) {
     $27 = $7;
     $28 = ($27|0)<(3);
     if (!($28)) {
      break;
     }
     $8 = 0;
     $9 = 0;
     $29 = $7;
     switch ($29|0) {
     case 0:  {
      $30 = $4;
      $31 = ($30|0)>=(2);
      if ($31) {
       $32 = $5;
       $33 = ((($32)) + 24|0);
       $34 = HEAP32[$33>>2]|0;
       $35 = $34 << 8;
       $9 = $35;
       $36 = HEAP32[12805]|0;
       $37 = (($36) + 1)|0;
       $38 = HEAP32[12777]|0;
       $39 = (($38) + ($37<<2)|0);
       $40 = HEAP32[$39>>2]|0;
       $41 = (_findCharOrDots($40,0)|0);
       $6 = $41;
       $42 = $6;
       $43 = ((($42)) + 24|0);
       $44 = HEAP32[$43>>2]|0;
       $45 = $9;
       $46 = (($45) + ($44))|0;
       $9 = $46;
       $47 = $9;
       $48 = (($47>>>0) % 1123)&-1;
       $9 = $48;
       $49 = $9;
       $50 = HEAP32[12776]|0;
       $51 = ((($50)) + 22348|0);
       $52 = (($51) + ($49<<2)|0);
       $53 = HEAP32[$52>>2]|0;
       $8 = $53;
      }
      break;
     }
     case 1:  {
      $54 = $4;
      $55 = ($54|0)>=(1);
      if ($55) {
       $4 = 1;
       $56 = $5;
       $57 = ((($56)) + 8|0);
       $58 = HEAP32[$57>>2]|0;
       $8 = $58;
      }
      break;
     }
     case 2:  {
      HEAP32[12807] = 78;
      $8 = 0;
      break;
     }
     default: {
     }
     }
     while(1) {
      $59 = $8;
      $60 = ($59|0)!=(0);
      if (!($60)) {
       break;
      }
      $61 = $8;
      $62 = HEAP32[12776]|0;
      $63 = ((($62)) + 31332|0);
      $64 = (($63) + ($61<<2)|0);
      HEAP32[12808] = $64;
      $65 = HEAP32[12808]|0;
      $66 = ((($65)) + 20|0);
      $67 = HEAP32[$66>>2]|0;
      HEAP32[12807] = $67;
      $68 = HEAP32[12808]|0;
      $69 = ((($68)) + 24|0);
      $70 = HEAP16[$69>>1]|0;
      $71 = $70 << 16 >> 16;
      HEAP32[12820] = $71;
      $72 = $7;
      $73 = ($72|0)==(1);
      if ($73) {
       $$old = HEAP32[12807]|0;
       $$old1 = ($$old|0)==(81);
       if ($$old1) {
        label = 19;
        break;
       }
      } else {
       $74 = HEAP32[12820]|0;
       $75 = $4;
       $76 = ($74|0)<=($75|0);
       if ($76) {
        $77 = HEAP32[12808]|0;
        $78 = ((($77)) + 28|0);
        $79 = HEAP32[12805]|0;
        $80 = HEAP32[12777]|0;
        $81 = (($80) + ($79<<2)|0);
        $82 = HEAP32[12820]|0;
        $83 = (_compareChars($78,$81,$82,0)|0);
        $84 = ($83|0)!=(0);
        $85 = HEAP32[12807]|0;
        $86 = ($85|0)==(81);
        $or$cond = $84 & $86;
        if ($or$cond) {
         label = 19;
         break;
        }
       }
      }
      $87 = HEAP32[12808]|0;
      $88 = HEAP32[$87>>2]|0;
      $8 = $88;
     }
     if ((label|0) == 19) {
      label = 0;
      $7 = 4;
     }
     $89 = $7;
     $90 = (($89) + 1)|0;
     $7 = $90;
    }
    $91 = HEAP32[12807]|0;
    switch ($91|0) {
    case 78:  {
     $92 = HEAP32[12805]|0;
     $93 = HEAP32[12778]|0;
     $94 = ($92|0)>=($93|0);
     if ($94) {
      label = 24;
      break L4;
     }
     $95 = $3;
     $96 = HEAP32[12805]|0;
     $97 = (($96) + 1)|0;
     HEAP32[12805] = $97;
     $98 = HEAP32[12781]|0;
     $99 = (($98) + ($96<<1)|0);
     $100 = HEAP16[$99>>1]|0;
     $101 = $100&65535;
     $102 = $101 | $95;
     $103 = $102&65535;
     HEAP16[$99>>1] = $103;
     continue L4;
     break;
    }
    case 81:  {
     break;
    }
    default: {
     continue L4;
    }
    }
    $104 = $2;
    $105 = (($104) + 1)|0;
    $2 = $105;
    $106 = $2;
    $107 = ($106|0)>(2);
    $$ = $107 ? 1 : $105;
    $2 = $$;
    $108 = $2;
    $109 = $108 << 14;
    $3 = $109;
    $110 = HEAP32[12805]|0;
    $111 = HEAP32[12820]|0;
    $112 = (($110) + ($111))|0;
    $113 = HEAP32[12778]|0;
    $114 = ($112|0)>($113|0);
    if ($114) {
     label = 27;
     break;
    }
    $1 = 0;
    while(1) {
     $115 = $1;
     $116 = HEAP32[12820]|0;
     $117 = ($115|0)<($116|0);
     if (!($117)) {
      continue L4;
     }
     $118 = $3;
     $119 = HEAP32[12805]|0;
     $120 = (($119) + 1)|0;
     HEAP32[12805] = $120;
     $121 = HEAP32[12781]|0;
     $122 = (($121) + ($119<<1)|0);
     $123 = HEAP16[$122>>1]|0;
     $124 = $123&65535;
     $125 = $124 | $118;
     $126 = $125&65535;
     HEAP16[$122>>1] = $126;
     $127 = $1;
     $128 = (($127) + 1)|0;
     $1 = $128;
    }
   }
   if ((label|0) == 24) {
    $0 = 0;
    $129 = $0;
    STACKTOP = sp;return ($129|0);
   }
   else if ((label|0) == 27) {
    $0 = 0;
    $129 = $0;
    STACKTOP = sp;return ($129|0);
   }
   else if ((label|0) == 31) {
    $0 = 1;
    $129 = $0;
    STACKTOP = sp;return ($129|0);
   }
  }
 }
 $0 = 1;
 $129 = $0;
 STACKTOP = sp;return ($129|0);
}
function _markEmphases() {
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $3 = sp + 8|0;
 $0 = -1;
 $1 = -1;
 $2 = 0;
 dest=$3; src=644; stop=dest+40|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $4 = 0;
 while(1) {
  $6 = $4;
  $7 = HEAP32[12778]|0;
  $8 = ($6|0)<($7|0);
  if (!($8)) {
   break;
  }
  $9 = $4;
  $10 = HEAP32[12777]|0;
  $11 = (($10) + ($9<<2)|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = (_checkAttr($12,1,0)|0);
  $14 = ($13|0)!=(0);
  if ($14) {
   $20 = $2;
   $21 = ($20|0)>(0);
   if ($21) {
    $22 = $4;
    $1 = $22;
    $2 = 0;
   }
  } else {
   $15 = $4;
   $16 = HEAP32[12782]|0;
   $17 = (($16) + ($15<<2)|0);
   $18 = HEAP32[$17>>2]|0;
   $19 = $18 | 1;
   HEAP32[$17>>2] = $19;
  }
  $23 = $4;
  $24 = HEAP32[12777]|0;
  $25 = (($24) + ($23<<2)|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = (_checkAttr($26,16,0)|0);
  $28 = ($27|0)!=(0);
  $29 = $0;
  if ($28) {
   $30 = ($29|0)<(0);
   if ($30) {
    $31 = $4;
    $0 = $31;
   }
   $32 = $2;
   $33 = (($32) + 1)|0;
   $2 = $33;
  } else {
   $34 = ($29|0)>=(0);
   if ($34) {
    $35 = $4;
    $36 = HEAP32[12777]|0;
    $37 = (($36) + ($35<<2)|0);
    $38 = HEAP32[$37>>2]|0;
    $39 = (_checkAttr($38,2,0)|0);
    $40 = ($39|0)!=(0);
    if ($40) {
     $41 = $4;
     $42 = HEAP32[12777]|0;
     $43 = (($42) + ($41<<2)|0);
     $44 = HEAP32[$43>>2]|0;
     $45 = (_checkAttr($44,32,0)|0);
     $46 = ($45|0)!=(0);
     if ($46) {
      $47 = $0;
      $48 = HEAP32[12783]|0;
      $49 = (($48) + ($47<<2)|0);
      $50 = HEAP32[$49>>2]|0;
      $51 = $50 | 16;
      HEAP32[$49>>2] = $51;
      $52 = $2;
      $53 = ($52|0)>(0);
      if ($53) {
       $54 = $4;
       $55 = HEAP32[12783]|0;
       $56 = (($55) + ($54<<2)|0);
       $57 = HEAP32[$56>>2]|0;
       $58 = $57 | 32;
       HEAP32[$56>>2] = $58;
      } else {
       $59 = $1;
       $60 = HEAP32[12783]|0;
       $61 = (($60) + ($59<<2)|0);
       $62 = HEAP32[$61>>2]|0;
       $63 = $62 | 32;
       HEAP32[$61>>2] = $63;
      }
      $0 = -1;
      $1 = -1;
      $2 = 0;
     }
    }
   }
  }
  $64 = HEAP32[12780]|0;
  $65 = ($64|0)!=(0);
  L23: do {
   if ($65) {
    $5 = 0;
    while(1) {
     $66 = $5;
     $67 = ($66|0)<(10);
     if (!($67)) {
      break L23;
     }
     $68 = $4;
     $69 = HEAP32[12781]|0;
     $70 = (($69) + ($68<<1)|0);
     $71 = HEAP16[$70>>1]|0;
     $72 = $71&65535;
     $73 = $5;
     $74 = 1 << $73;
     $75 = $72 & $74;
     $76 = ($75|0)!=(0);
     $77 = $5;
     $78 = (($3) + ($77<<2)|0);
     $79 = HEAP32[$78>>2]|0;
     if ($76) {
      $80 = ($79|0)<(0);
      if ($80) {
       $81 = $4;
       $82 = $5;
       $83 = (($3) + ($82<<2)|0);
       HEAP32[$83>>2] = $81;
      }
     } else {
      $84 = ($79|0)>=(0);
      if ($84) {
       $85 = $5;
       $86 = ($85|0)<(5);
       $87 = $5;
       if ($86) {
        $88 = $87<<2;
        $89 = 256 << $88;
        $90 = $5;
        $91 = (($3) + ($90<<2)|0);
        $92 = HEAP32[$91>>2]|0;
        $93 = HEAP32[12783]|0;
        $94 = (($93) + ($92<<2)|0);
        $95 = HEAP32[$94>>2]|0;
        $96 = $95 | $89;
        HEAP32[$94>>2] = $96;
        $97 = $5;
        $98 = $97<<2;
        $99 = 512 << $98;
        $100 = $4;
        $101 = HEAP32[12783]|0;
        $102 = (($101) + ($100<<2)|0);
        $103 = HEAP32[$102>>2]|0;
        $104 = $103 | $99;
        HEAP32[$102>>2] = $104;
       } else {
        $105 = (($87) - 5)|0;
        $106 = $105<<2;
        $107 = 1 << $106;
        $108 = $5;
        $109 = (($3) + ($108<<2)|0);
        $110 = HEAP32[$109>>2]|0;
        $111 = HEAP32[12784]|0;
        $112 = (($111) + ($110<<2)|0);
        $113 = HEAP32[$112>>2]|0;
        $114 = $113 | $107;
        HEAP32[$112>>2] = $114;
        $115 = $5;
        $116 = (($115) - 5)|0;
        $117 = $116<<2;
        $118 = 2 << $117;
        $119 = $4;
        $120 = HEAP32[12784]|0;
        $121 = (($120) + ($119<<2)|0);
        $122 = HEAP32[$121>>2]|0;
        $123 = $122 | $118;
        HEAP32[$121>>2] = $123;
       }
       $124 = $5;
       $125 = (($3) + ($124<<2)|0);
       HEAP32[$125>>2] = -1;
      }
     }
     $126 = $5;
     $127 = (($126) + 1)|0;
     $5 = $127;
    }
   }
  } while(0);
  $128 = $4;
  $129 = (($128) + 1)|0;
  $4 = $129;
 }
 $130 = $0;
 $131 = ($130|0)>=(0);
 do {
  if ($131) {
   $132 = $0;
   $133 = HEAP32[12783]|0;
   $134 = (($133) + ($132<<2)|0);
   $135 = HEAP32[$134>>2]|0;
   $136 = $135 | 16;
   HEAP32[$134>>2] = $136;
   $137 = $2;
   $138 = ($137|0)>(0);
   if ($138) {
    $139 = HEAP32[12778]|0;
    $140 = HEAP32[12783]|0;
    $141 = (($140) + ($139<<2)|0);
    $142 = HEAP32[$141>>2]|0;
    $143 = $142 | 32;
    HEAP32[$141>>2] = $143;
    break;
   } else {
    $144 = $1;
    $145 = HEAP32[12783]|0;
    $146 = (($145) + ($144<<2)|0);
    $147 = HEAP32[$146>>2]|0;
    $148 = $147 | 32;
    HEAP32[$146>>2] = $148;
    break;
   }
  }
 } while(0);
 $149 = HEAP32[12780]|0;
 $150 = ($149|0)!=(0);
 L46: do {
  if ($150) {
   $5 = 0;
   while(1) {
    $151 = $5;
    $152 = ($151|0)<(10);
    if (!($152)) {
     break L46;
    }
    $153 = $5;
    $154 = (($3) + ($153<<2)|0);
    $155 = HEAP32[$154>>2]|0;
    $156 = ($155|0)>=(0);
    do {
     if ($156) {
      $157 = $5;
      $158 = ($157|0)<(5);
      $159 = $5;
      if ($158) {
       $160 = $159<<2;
       $161 = 256 << $160;
       $162 = $5;
       $163 = (($3) + ($162<<2)|0);
       $164 = HEAP32[$163>>2]|0;
       $165 = HEAP32[12783]|0;
       $166 = (($165) + ($164<<2)|0);
       $167 = HEAP32[$166>>2]|0;
       $168 = $167 | $161;
       HEAP32[$166>>2] = $168;
       $169 = $5;
       $170 = $169<<2;
       $171 = 512 << $170;
       $172 = HEAP32[12778]|0;
       $173 = HEAP32[12783]|0;
       $174 = (($173) + ($172<<2)|0);
       $175 = HEAP32[$174>>2]|0;
       $176 = $175 | $171;
       HEAP32[$174>>2] = $176;
       break;
      } else {
       $177 = (($159) - 5)|0;
       $178 = $177<<2;
       $179 = 1 << $178;
       $180 = $5;
       $181 = (($3) + ($180<<2)|0);
       $182 = HEAP32[$181>>2]|0;
       $183 = HEAP32[12784]|0;
       $184 = (($183) + ($182<<2)|0);
       $185 = HEAP32[$184>>2]|0;
       $186 = $185 | $179;
       HEAP32[$184>>2] = $186;
       $187 = $5;
       $188 = (($187) - 5)|0;
       $189 = $188<<2;
       $190 = 2 << $189;
       $191 = HEAP32[12778]|0;
       $192 = HEAP32[12784]|0;
       $193 = (($192) + ($191<<2)|0);
       $194 = HEAP32[$193>>2]|0;
       $195 = $194 | $190;
       HEAP32[$193>>2] = $195;
       break;
      }
     }
    } while(0);
    $196 = $5;
    $197 = (($196) + 1)|0;
    $5 = $197;
   }
  }
 } while(0);
 $198 = HEAP32[12776]|0;
 $199 = ((($198)) + 1124|0);
 $200 = ((($199)) + 24|0);
 $201 = HEAP32[$200>>2]|0;
 $202 = ($201|0)!=(0);
 if ($202) {
  $203 = HEAP32[12783]|0;
  _resolveEmphasisWords($203,16,32,64,128);
  $204 = HEAP32[12776]|0;
  $205 = ((($204)) + 1124|0);
  $206 = ((($205)) + 32|0);
  $207 = HEAP32[$206>>2]|0;
  $208 = ($207|0)!=(0);
  if ($208) {
   $209 = HEAP32[12783]|0;
   _resolveEmphasisPassages($209,0,16,32,64,128);
  }
  $210 = HEAP32[12783]|0;
  _resolveEmphasisResets($210,16,32,64,128);
 } else {
  $211 = HEAP32[12776]|0;
  $212 = ((($211)) + 1124|0);
  $213 = ((($212)) + 20|0);
  $214 = HEAP32[$213>>2]|0;
  $215 = ($214|0)!=(0);
  if ($215) {
   $216 = HEAP32[12783]|0;
   _resolveEmphasisSymbols($216,16,32,128);
  }
 }
 $217 = HEAP32[12780]|0;
 $218 = ($217|0)!=(0);
 if (!($218)) {
  STACKTOP = sp;return;
 }
 $5 = 0;
 while(1) {
  $219 = $5;
  $220 = ($219|0)<(5);
  if (!($220)) {
   break;
  }
  $221 = $5;
  $222 = (1 + ($221))|0;
  $223 = HEAP32[12776]|0;
  $224 = ((($223)) + 1124|0);
  $225 = (($224) + (($222*36)|0)|0);
  $226 = ((($225)) + 24|0);
  $227 = HEAP32[$226>>2]|0;
  $228 = ($227|0)!=(0);
  if ($228) {
   $229 = HEAP32[12783]|0;
   $230 = $5;
   $231 = $230<<2;
   $232 = 256 << $231;
   $233 = $5;
   $234 = $233<<2;
   $235 = 512 << $234;
   $236 = $5;
   $237 = $236<<2;
   $238 = 1024 << $237;
   $239 = $5;
   $240 = $239<<2;
   $241 = 2048 << $240;
   _resolveEmphasisWords($229,$232,$235,$238,$241);
   $242 = $5;
   $243 = (1 + ($242))|0;
   $244 = HEAP32[12776]|0;
   $245 = ((($244)) + 1124|0);
   $246 = (($245) + (($243*36)|0)|0);
   $247 = ((($246)) + 32|0);
   $248 = HEAP32[$247>>2]|0;
   $249 = ($248|0)!=(0);
   if ($249) {
    $250 = HEAP32[12783]|0;
    $251 = $5;
    $252 = (1 + ($251))|0;
    $253 = $5;
    $254 = $253<<2;
    $255 = 256 << $254;
    $256 = $5;
    $257 = $256<<2;
    $258 = 512 << $257;
    $259 = $5;
    $260 = $259<<2;
    $261 = 1024 << $260;
    $262 = $5;
    $263 = $262<<2;
    $264 = 2048 << $263;
    _resolveEmphasisPassages($250,$252,$255,$258,$261,$264);
   }
  } else {
   $265 = $5;
   $266 = (1 + ($265))|0;
   $267 = HEAP32[12776]|0;
   $268 = ((($267)) + 1124|0);
   $269 = (($268) + (($266*36)|0)|0);
   $270 = ((($269)) + 20|0);
   $271 = HEAP32[$270>>2]|0;
   $272 = ($271|0)!=(0);
   if ($272) {
    $273 = HEAP32[12783]|0;
    $274 = $5;
    $275 = $274<<2;
    $276 = 256 << $275;
    $277 = $5;
    $278 = $277<<2;
    $279 = 512 << $278;
    $280 = $5;
    $281 = $280<<2;
    $282 = 2048 << $281;
    _resolveEmphasisSymbols($273,$276,$279,$282);
   }
  }
  $283 = $5;
  $284 = (($283) + 1)|0;
  $5 = $284;
 }
 $5 = 0;
 while(1) {
  $285 = $5;
  $286 = ($285|0)<(5);
  if (!($286)) {
   break;
  }
  $287 = $5;
  $288 = (6 + ($287))|0;
  $289 = HEAP32[12776]|0;
  $290 = ((($289)) + 1124|0);
  $291 = (($290) + (($288*36)|0)|0);
  $292 = ((($291)) + 24|0);
  $293 = HEAP32[$292>>2]|0;
  $294 = ($293|0)!=(0);
  if ($294) {
   $295 = HEAP32[12784]|0;
   $296 = $5;
   $297 = $296<<2;
   $298 = 1 << $297;
   $299 = $5;
   $300 = $299<<2;
   $301 = 2 << $300;
   $302 = $5;
   $303 = $302<<2;
   $304 = 4 << $303;
   $305 = $5;
   $306 = $305<<2;
   $307 = 8 << $306;
   _resolveEmphasisWords($295,$298,$301,$304,$307);
   $308 = $5;
   $309 = (6 + ($308))|0;
   $310 = HEAP32[12776]|0;
   $311 = ((($310)) + 1124|0);
   $312 = (($311) + (($309*36)|0)|0);
   $313 = ((($312)) + 32|0);
   $314 = HEAP32[$313>>2]|0;
   $315 = ($314|0)!=(0);
   if ($315) {
    $316 = HEAP32[12784]|0;
    $317 = $5;
    $318 = (($317) + 6)|0;
    $319 = $5;
    $320 = $319<<2;
    $321 = 1 << $320;
    $322 = $5;
    $323 = $322<<2;
    $324 = 2 << $323;
    $325 = $5;
    $326 = $325<<2;
    $327 = 4 << $326;
    $328 = $5;
    $329 = $328<<2;
    $330 = 8 << $329;
    _resolveEmphasisPassages($316,$318,$321,$324,$327,$330);
   }
  } else {
   $331 = $5;
   $332 = (6 + ($331))|0;
   $333 = HEAP32[12776]|0;
   $334 = ((($333)) + 1124|0);
   $335 = (($334) + (($332*36)|0)|0);
   $336 = ((($335)) + 20|0);
   $337 = HEAP32[$336>>2]|0;
   $338 = ($337|0)!=(0);
   if ($338) {
    $339 = HEAP32[12784]|0;
    $340 = $5;
    $341 = $340<<2;
    $342 = 1 << $341;
    $343 = $5;
    $344 = $343<<2;
    $345 = 2 << $344;
    $346 = $5;
    $347 = $346<<2;
    $348 = 8 << $347;
    _resolveEmphasisSymbols($339,$342,$345,$348);
   }
  }
  $349 = $5;
  $350 = (($349) + 1)|0;
  $5 = $350;
 }
 STACKTOP = sp;return;
}
function _setBefore() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[12805]|0;
 $1 = ($0|0)>=(2);
 if ($1) {
  $2 = HEAP32[12805]|0;
  $3 = (($2) - 1)|0;
  $4 = HEAP32[12777]|0;
  $5 = (($4) + ($3<<2)|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = ($6|0)==(65535);
  if ($7) {
   $8 = HEAP32[12805]|0;
   $9 = (($8) - 2)|0;
   $10 = HEAP32[12777]|0;
   $11 = (($10) + ($9<<2)|0);
   $12 = HEAP32[$11>>2]|0;
   HEAP32[12899] = $12;
  } else {
   label = 4;
  }
 } else {
  label = 4;
 }
 if ((label|0) == 4) {
  $13 = HEAP32[12805]|0;
  $14 = ($13|0)==(0);
  if ($14) {
   $20 = 32;
  } else {
   $15 = HEAP32[12805]|0;
   $16 = (($15) - 1)|0;
   $17 = HEAP32[12777]|0;
   $18 = (($17) + ($16<<2)|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = $19;
  }
  HEAP32[12899] = $20;
 }
 $21 = HEAP32[12899]|0;
 $22 = (_findCharOrDots($21,0)|0);
 $23 = ((($22)) + 12|0);
 $24 = HEAP32[$23>>2]|0;
 HEAP32[12895] = $24;
 return;
}
function _insertBrailleIndicators($0) {
 $0 = $0|0;
 var $$old = 0, $$old2 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
 var $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0;
 var $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0;
 var $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0;
 var $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $or$cond3 = 0, $or$cond6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = $0;
 $3 = 0;
 $4 = 0;
 $6 = HEAP32[12805]|0;
 $7 = HEAP32[12833]|0;
 $8 = ($6|0)!=($7|0);
 $9 = $2;
 $10 = ($9|0)!=(0);
 $or$cond = $8 | $10;
 if (!($or$cond)) {
  $1 = 1;
  $204 = $1;
  STACKTOP = sp;return ($204|0);
 }
 $11 = HEAP32[12805]|0;
 $12 = HEAP32[12833]|0;
 $13 = ($11|0)!=($12|0);
 do {
  if ($13) {
   $14 = HEAP32[12780]|0;
   $15 = ($14|0)!=(0);
   if ($15) {
    $16 = HEAP32[12805]|0;
    $17 = HEAP32[12778]|0;
    $18 = (($17) - 1)|0;
    $19 = ($16|0)<($18|0);
    if ($19) {
     $20 = HEAP32[12805]|0;
     $21 = (($20) + 1)|0;
     $22 = HEAP32[12781]|0;
     $23 = (($22) + ($21<<1)|0);
     $24 = HEAP16[$23>>1]|0;
     $25 = $24&65535;
     $26 = $25 & 16383;
     HEAP32[12829] = $26;
    } else {
     label = 7;
    }
   } else {
    label = 7;
   }
   if ((label|0) == 7) {
    HEAP32[12829] = 0;
   }
   $27 = HEAP32[12805]|0;
   $28 = ($27|0)>(2);
   if ($28) {
    $29 = HEAP32[12780]|0;
    $30 = ($29|0)!=(0);
    if ($30) {
     $31 = HEAP32[12805]|0;
     $32 = (($31) - 2)|0;
     $33 = HEAP32[12781]|0;
     $34 = (($33) + ($32<<1)|0);
     $35 = HEAP16[$34>>1]|0;
     $36 = $35&65535;
     $37 = $36 & 16383;
     HEAP32[12831] = $37;
    } else {
     HEAP32[12831] = 0;
    }
    $38 = HEAP32[12805]|0;
    $39 = (($38) - 2)|0;
    $40 = HEAP32[12777]|0;
    $41 = (($40) + ($39<<2)|0);
    $42 = HEAP32[$41>>2]|0;
    $43 = (_findCharOrDots($42,0)|0);
    $44 = ((($43)) + 12|0);
    $45 = HEAP32[$44>>2]|0;
    HEAP32[12898] = $45;
   } else {
    HEAP32[12831] = 0;
    HEAP32[12898] = 1;
   }
   $46 = HEAP32[12780]|0;
   $47 = ($46|0)!=(0);
   if ($47) {
    $48 = HEAP32[12805]|0;
    $49 = HEAP32[12781]|0;
    $50 = (($49) + ($48<<1)|0);
    $51 = HEAP16[$50>>1]|0;
    $52 = $51&65535;
    $53 = $52 & 16383;
    $54 = HEAP32[12828]|0;
    $55 = ($53|0)!=($54|0);
    if ($55) {
     $56 = HEAP32[12828]|0;
     $57 = $56 & 16383;
     HEAP32[12832] = $57;
     $58 = HEAP32[12805]|0;
     $59 = HEAP32[12781]|0;
     $60 = (($59) + ($58<<1)|0);
     $61 = HEAP16[$60>>1]|0;
     $62 = $61&65535;
     $63 = $62 & 16383;
     HEAP32[12830] = $63;
     $3 = 2;
     break;
    }
   }
   $64 = $2;
   $65 = ($64|0)!=(0);
   if ($65) {
    $3 = 3;
    break;
   } else {
    $3 = 0;
    break;
   }
  }
 } while(0);
 $66 = $2;
 $67 = ($66|0)==(1);
 if ($67) {
  $3 = 3;
 }
 while(1) {
  $4 = 0;
  $68 = $3;
  L33: do {
   switch ($68|0) {
   case 0:  {
    $4 = 0;
    break;
   }
   case 1:  {
    $69 = HEAP32[12780]|0;
    $70 = ($69|0)!=(0);
    if ($70) {
     $4 = 0;
     HEAP32[12830] = 0;
    }
    $71 = HEAP32[12830]|0;
    $72 = ($71|0)==(0);
    if ($72) {
     $73 = $2;
     $74 = ($73|0)!=(0);
     if ($74) {
      $3 = 3;
      break L33;
     } else {
      $3 = 0;
      break L33;
     }
    }
    break;
   }
   case 2:  {
    $75 = HEAP32[12780]|0;
    $76 = ($75|0)!=(0);
    if ($76) {
     $4 = 0;
     HEAP32[12832] = 0;
    }
    $77 = HEAP32[12832]|0;
    $78 = ($77|0)==(0);
    if ($78) {
     $3 = 1;
     $79 = HEAP32[12805]|0;
     $80 = HEAP32[12781]|0;
     $81 = (($80) + ($79<<1)|0);
     $82 = HEAP16[$81>>1]|0;
     $83 = $82&65535;
     $84 = $83 & 16383;
     HEAP32[12828] = $84;
    }
    break;
   }
   case 3:  {
    $85 = HEAP32[12776]|0;
    $86 = ((($85)) + 40|0);
    $87 = HEAP32[$86>>2]|0;
    $88 = (_brailleIndicatorDefined($87)|0);
    $89 = ($88|0)!=(0);
    do {
     if ($89) {
      $90 = HEAP32[12777]|0;
      $91 = HEAP32[12805]|0;
      $92 = (_checkAttr_safe($90,$91,4,0)|0);
      $93 = ($92|0)!=(0);
      if ($93) {
       $94 = HEAP32[12804]|0;
       $95 = ($94|0)==(79);
       if ($95) {
        $$old = HEAP32[12804]|0;
        $$old2 = ($$old|0)!=(103);
        if (!($$old2)) {
         break;
        }
       } else {
        $96 = HEAP32[12895]|0;
        $97 = $96 & 4;
        $98 = ($97|0)==(0);
        $99 = HEAP32[12804]|0;
        $100 = ($99|0)!=(103);
        $or$cond3 = $98 & $100;
        if (!($or$cond3)) {
         break;
        }
       }
       $101 = HEAP32[12776]|0;
       $102 = ((($101)) + 20|0);
       $103 = HEAP32[$102>>2]|0;
       $104 = ($103|0)!=(0);
       $105 = $104 ^ 1;
       $106 = $105&1;
       $4 = $106;
       $3 = 0;
       break L33;
      }
     }
    } while(0);
    $3 = 4;
    break;
   }
   case 4:  {
    $107 = HEAP32[12776]|0;
    $108 = ((($107)) + 36|0);
    $109 = HEAP32[$108>>2]|0;
    $110 = (_brailleIndicatorDefined($109)|0);
    $111 = ($110|0)!=(0);
    if (!($111)) {
     $4 = 0;
     $3 = 0;
     break L33;
    }
    $112 = HEAP32[12807]|0;
    $113 = ($112|0)==(92);
    if ($113) {
     $4 = 1;
     $3 = 0;
     break L33;
    }
    $114 = HEAP32[12777]|0;
    $115 = HEAP32[12805]|0;
    $116 = (_checkAttr_safe($114,$115,2,0)|0);
    $117 = ($116|0)!=(0);
    L65: do {
     if ($117) {
      $118 = HEAP32[12895]|0;
      $119 = $118 & 2;
      $120 = ($119|0)!=(0);
      if (!($120)) {
       $121 = HEAP32[12777]|0;
       $122 = HEAP32[12805]|0;
       $123 = (($122) + 1)|0;
       $124 = (_checkAttr_safe($121,$123,2,0)|0);
       $125 = ($124|0)!=(0);
       if ($125) {
        $126 = HEAP32[12895]|0;
        $127 = $126 & 4;
        $128 = ($127|0)!=(0);
        if (!($128)) {
         break;
        }
       }
       $4 = 1;
       $129 = HEAP32[12805]|0;
       $130 = ($129|0)>(0);
       L71: do {
        if ($130) {
         $5 = 0;
         while(1) {
          $131 = $5;
          $132 = HEAP32[12776]|0;
          $133 = ((($132)) + 2080|0);
          $134 = HEAP32[$133>>2]|0;
          $135 = ($131|0)<($134|0);
          if (!($135)) {
           break L71;
          }
          $136 = HEAP32[12805]|0;
          $137 = (($136) - 1)|0;
          $138 = HEAP32[12777]|0;
          $139 = (($138) + ($137<<2)|0);
          $140 = HEAP32[$139>>2]|0;
          $141 = $5;
          $142 = HEAP32[12776]|0;
          $143 = ((($142)) + 1568|0);
          $144 = (($143) + ($141<<2)|0);
          $145 = HEAP32[$144>>2]|0;
          $146 = ($140|0)==($145|0);
          if ($146) {
           break;
          }
          $147 = $5;
          $148 = (($147) + 1)|0;
          $5 = $148;
         }
         $4 = 0;
        }
       } while(0);
       $5 = 0;
       while(1) {
        $149 = $5;
        $150 = HEAP32[12776]|0;
        $151 = ((($150)) + 2596|0);
        $152 = HEAP32[$151>>2]|0;
        $153 = ($149|0)<($152|0);
        if (!($153)) {
         break;
        }
        $154 = HEAP32[12805]|0;
        $155 = HEAP32[12777]|0;
        $156 = (($155) + ($154<<2)|0);
        $157 = HEAP32[$156>>2]|0;
        $158 = $5;
        $159 = HEAP32[12776]|0;
        $160 = ((($159)) + 2084|0);
        $161 = (($160) + ($158<<2)|0);
        $162 = HEAP32[$161>>2]|0;
        $163 = ($157|0)==($162|0);
        if ($163) {
         label = 58;
         break;
        }
        $164 = $5;
        $165 = (($164) + 1)|0;
        $5 = $165;
       }
       if ((label|0) == 58) {
        label = 0;
        $4 = 0;
       }
       $166 = HEAP32[12805]|0;
       $167 = (($166) + 1)|0;
       $168 = HEAP32[12778]|0;
       $169 = ($167|0)<($168|0);
       if ($169) {
        $5 = 0;
        while(1) {
         $170 = $5;
         $171 = HEAP32[12776]|0;
         $172 = ((($171)) + 3112|0);
         $173 = HEAP32[$172>>2]|0;
         $174 = ($170|0)<($173|0);
         if (!($174)) {
          break L65;
         }
         $175 = HEAP32[12805]|0;
         $176 = (($175) + 1)|0;
         $177 = HEAP32[12777]|0;
         $178 = (($177) + ($176<<2)|0);
         $179 = HEAP32[$178>>2]|0;
         $180 = $5;
         $181 = HEAP32[12776]|0;
         $182 = ((($181)) + 2600|0);
         $183 = (($182) + ($180<<2)|0);
         $184 = HEAP32[$183>>2]|0;
         $185 = ($179|0)==($184|0);
         if ($185) {
          break;
         }
         $186 = $5;
         $187 = (($186) + 1)|0;
         $5 = $187;
        }
        $4 = 0;
       }
      }
     }
    } while(0);
    $3 = 0;
    break;
   }
   default: {
    $4 = 0;
    $3 = 0;
   }
   }
  } while(0);
  $188 = $4;
  $189 = ($188|0)!=(0);
  $190 = HEAP32[12818]|0;
  $191 = ($190|0)!=(0|0);
  $or$cond6 = $189 & $191;
  if ($or$cond6) {
   $192 = HEAP32[12818]|0;
   $193 = ((($192)) + 28|0);
   $194 = HEAP32[12818]|0;
   $195 = ((($194)) + 26|0);
   $196 = HEAP16[$195>>1]|0;
   $197 = $196 << 16 >> 16;
   $198 = (_for_updatePositions($193,0,$197,0)|0);
   $199 = ($198|0)!=(0);
   if (!($199)) {
    label = 70;
    break;
   }
   $200 = HEAP32[12789]|0;
   $201 = ($200|0)==(2);
   if ($201) {
    $3 = 0;
   }
  }
  $202 = $3;
  $203 = ($202|0)!=(0);
  if (!($203)) {
   label = 74;
   break;
  }
 }
 if ((label|0) == 70) {
  $1 = 0;
  $204 = $1;
  STACKTOP = sp;return ($204|0);
 }
 else if ((label|0) == 74) {
  $1 = 1;
  $204 = $1;
  STACKTOP = sp;return ($204|0);
 }
 return (0)|0;
}
function _for_selectRule() {
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0;
 var $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0;
 var $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0;
 var $495 = 0, $496 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0;
 var $or$cond7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $9 = HEAP32[12778]|0;
 $10 = HEAP32[12805]|0;
 $11 = (($9) - ($10))|0;
 $0 = $11;
 $4 = 0;
 $12 = HEAP32[12805]|0;
 $13 = HEAP32[12777]|0;
 $14 = (($13) + ($12<<2)|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = (_findCharOrDots($15,0)|0);
 HEAP32[12835] = $16;
 $1 = 0;
 L1: while(1) {
  $17 = $1;
  $18 = ($17|0)<(3);
  if (!($18)) {
   label = 138;
   break;
  }
  $5 = 0;
  $19 = $1;
  switch ($19|0) {
  case 2:  {
   label = 8;
   break L1;
   break;
  }
  case 0:  {
   $20 = $0;
   $21 = ($20|0)>=(2);
   if ($21) {
    $22 = HEAP32[12835]|0;
    $23 = ((($22)) + 24|0);
    $24 = HEAP32[$23>>2]|0;
    $25 = $24 << 8;
    $5 = $25;
    $26 = HEAP32[12805]|0;
    $27 = (($26) + 1)|0;
    $28 = HEAP32[12777]|0;
    $29 = (($28) + ($27<<2)|0);
    $30 = HEAP32[$29>>2]|0;
    $31 = (_findCharOrDots($30,0)|0);
    $2 = $31;
    $32 = $2;
    $33 = ((($32)) + 24|0);
    $34 = HEAP32[$33>>2]|0;
    $35 = $5;
    $36 = (($35) + ($34))|0;
    $5 = $36;
    $37 = $5;
    $38 = (($37>>>0) % 1123)&-1;
    $5 = $38;
    $39 = $5;
    $40 = HEAP32[12776]|0;
    $41 = ((($40)) + 22348|0);
    $42 = (($41) + ($39<<2)|0);
    $43 = HEAP32[$42>>2]|0;
    $4 = $43;
   }
   break;
  }
  case 1:  {
   $44 = $0;
   $45 = ($44|0)>=(1);
   if ($45) {
    $0 = 1;
    $46 = HEAP32[12835]|0;
    $47 = ((($46)) + 8|0);
    $48 = HEAP32[$47>>2]|0;
    $4 = $48;
   }
   break;
  }
  default: {
  }
  }
  L9: while(1) {
   $53 = $4;
   $54 = ($53|0)!=(0);
   if (!($54)) {
    break;
   }
   $55 = $4;
   $56 = HEAP32[12776]|0;
   $57 = ((($56)) + 31332|0);
   $58 = (($57) + ($55<<2)|0);
   HEAP32[12808] = $58;
   $59 = HEAP32[12808]|0;
   $60 = ((($59)) + 20|0);
   $61 = HEAP32[$60>>2]|0;
   HEAP32[12807] = $61;
   $62 = HEAP32[12808]|0;
   $63 = ((($62)) + 24|0);
   $64 = HEAP16[$63>>1]|0;
   $65 = $64 << 16 >> 16;
   HEAP32[12820] = $65;
   $66 = $1;
   $67 = ($66|0)==(1);
   if ($67) {
    label = 13;
   } else {
    $68 = HEAP32[12820]|0;
    $69 = $0;
    $70 = ($68|0)<=($69|0);
    if ($70) {
     $71 = (_validMatch()|0);
     $72 = ($71|0)!=(0);
     if ($72) {
      label = 13;
     }
    }
   }
   L15: do {
    if ((label|0) == 13) {
     label = 0;
     $73 = HEAP32[12808]|0;
     $74 = ((($73)) + 12|0);
     $75 = HEAP32[$74>>2]|0;
     $76 = $75 & 268435456;
     $77 = ($76|0)!=(0);
     if ($77) {
      $78 = HEAP32[12805]|0;
      $79 = HEAP32[12783]|0;
      $80 = (($79) + ($78<<2)|0);
      $81 = HEAP32[$80>>2]|0;
      $82 = ($81|0)!=(0);
      if ($82) {
       break L9;
      }
      $83 = HEAP32[12805]|0;
      $84 = HEAP32[12784]|0;
      $85 = (($84) + ($83<<2)|0);
      $86 = HEAP32[$85>>2]|0;
      $87 = ($86|0)!=(0);
      if ($87) {
       break L9;
      }
     }
     $88 = HEAP32[12808]|0;
     $89 = ((($88)) + 8|0);
     $90 = HEAP32[$89>>2]|0;
     $91 = $90 & 268435456;
     $92 = ($91|0)!=(0);
     if ($92) {
      $93 = HEAP32[12805]|0;
      $94 = HEAP32[12820]|0;
      $95 = (($93) + ($94))|0;
      $96 = HEAP32[12783]|0;
      $97 = (($96) + ($95<<2)|0);
      $98 = HEAP32[$97>>2]|0;
      $99 = ($98|0)!=(0);
      if ($99) {
       break L9;
      }
      $100 = HEAP32[12805]|0;
      $101 = HEAP32[12820]|0;
      $102 = (($100) + ($101))|0;
      $103 = HEAP32[12784]|0;
      $104 = (($103) + ($102<<2)|0);
      $105 = HEAP32[$104>>2]|0;
      $106 = ($105|0)!=(0);
      if ($106) {
       break L9;
      }
     }
     $107 = HEAP32[12820]|0;
     _setAfter($107);
     $108 = HEAP32[12808]|0;
     $109 = ((($108)) + 8|0);
     $110 = HEAP32[$109>>2]|0;
     $111 = $110 & -268435457;
     $112 = ($111|0)!=(0);
     if ($112) {
      $113 = HEAP32[12895]|0;
      $114 = HEAP32[12808]|0;
      $115 = ((($114)) + 8|0);
      $116 = HEAP32[$115>>2]|0;
      $117 = $113 & $116;
      $118 = ($117|0)!=(0);
      if (!($118)) {
       break;
      }
     }
     $119 = HEAP32[12808]|0;
     $120 = ((($119)) + 12|0);
     $121 = HEAP32[$120>>2]|0;
     $122 = $121 & -268435457;
     $123 = ($122|0)!=(0);
     if ($123) {
      $124 = HEAP32[12896]|0;
      $125 = HEAP32[12808]|0;
      $126 = ((($125)) + 12|0);
      $127 = HEAP32[$126>>2]|0;
      $128 = $124 & $127;
      $129 = ($128|0)!=(0);
      if (!($129)) {
       break;
      }
     }
     $130 = HEAP32[12807]|0;
     do {
      switch ($130|0) {
      case 79: case 85: case 84: case 69: case 106: case 61: case 60: case 59: case 67: case 58: case 64: case 63: case 62: case 57:  {
       label = 138;
       break L1;
       break;
      }
      case 75:  {
       $131 = HEAP32[12788]|0;
       $132 = $131 & 34;
       $133 = ($132|0)!=(0);
       if (!($133)) {
        label = 138;
        break L1;
       }
       $134 = HEAP32[12805]|0;
       $135 = HEAP32[12791]|0;
       $136 = ($134|0)>=($135|0);
       if (!($136)) {
        label = 138;
        break L1;
       }
       $137 = HEAP32[12805]|0;
       $138 = HEAP32[12792]|0;
       $139 = ($137|0)<=($138|0);
       if ($139) {
        break L15;
       } else {
        label = 138;
        break L1;
       }
       break;
      }
      case 76:  {
       $140 = HEAP32[12827]|0;
       $141 = ($140|0)!=(0);
       if ($141) {
        break L15;
       }
       $142 = HEAP32[12788]|0;
       $143 = $142 & 1;
       $144 = ($143|0)!=(0);
       if ($144) {
        break L15;
       }
       $145 = (_isRepeatedWord()|0);
       $146 = ($145|0)!=(0);
       if ($146) {
        label = 138;
        break L1;
       } else {
        break L15;
       }
       break;
      }
      case 83:  {
       $147 = HEAP32[12827]|0;
       $148 = ($147|0)!=(0);
       if ($148) {
        break L15;
       }
       $149 = HEAP32[12788]|0;
       $150 = $149 & 1;
       $151 = ($150|0)!=(0);
       if ($151) {
        break L15;
       } else {
        label = 138;
        break L1;
       }
       break;
      }
      case 81:  {
       HEAP32[12807] = 78;
       label = 33;
       break;
      }
      case 78:  {
       label = 33;
       break;
      }
      case 80:  {
       $159 = HEAP32[12827]|0;
       $160 = ($159|0)!=(0);
       if ($160) {
        break L15;
       }
       $161 = HEAP32[12788]|0;
       $162 = $161 & 1;
       $163 = ($162|0)!=(0);
       if ($163) {
        break L15;
       }
       $164 = (_syllableBreak()|0);
       $165 = ($164|0)!=(0);
       if ($165) {
        break L15;
       } else {
        label = 138;
        break L1;
       }
       break;
      }
      case 70:  {
       $166 = HEAP32[12806]|0;
       $167 = ($166|0)!=(0);
       if (!($167)) {
        break L15;
       }
       $168 = (_passDoTest()|0);
       $169 = ($168|0)!=(0);
       if ($169) {
        label = 138;
        break L1;
       } else {
        break L15;
       }
       break;
      }
      case 86:  {
       $170 = HEAP32[12827]|0;
       $171 = ($170|0)!=(0);
       if ($171) {
        break L15;
       }
       $172 = HEAP32[12788]|0;
       $173 = $172 & 1;
       $174 = ($173|0)!=(0);
       if ($174) {
        break L15;
       } else {
        label = 42;
        break L1;
       }
       break;
      }
      case 87:  {
       $190 = HEAP32[12827]|0;
       $191 = ($190|0)!=(0);
       if ($191) {
        break L15;
       }
       $192 = HEAP32[12788]|0;
       $193 = $192 & 1;
       $194 = ($193|0)!=(0);
       if ($194) {
        break L15;
       }
       $195 = (_checkEmphasisChange(0)|0);
       $196 = ($195|0)!=(0);
       if ($196) {
        break L15;
       }
       break;
      }
      case 92:  {
       break;
      }
      case 88:  {
       $209 = HEAP32[12827]|0;
       $210 = ($209|0)!=(0);
       if ($210) {
        break L15;
       }
       $211 = HEAP32[12788]|0;
       $212 = $211 & 1;
       $213 = ($212|0)!=(0);
       if ($213) {
        break L15;
       }
       $214 = HEAP32[12895]|0;
       $215 = $214 & 2;
       $216 = ($215|0)!=(0);
       if ($216) {
        label = 138;
        break L1;
       }
       $217 = HEAP32[12896]|0;
       $218 = $217 & 2;
       $219 = ($218|0)!=(0);
       if ($219) {
        label = 138;
        break L1;
       } else {
        break L15;
       }
       break;
      }
      case 89:  {
       $220 = HEAP32[12827]|0;
       $221 = ($220|0)!=(0);
       if ($221) {
        break L15;
       }
       $222 = HEAP32[12788]|0;
       $223 = $222 & 1;
       $224 = ($223|0)!=(0);
       if ($224) {
        break L15;
       }
       $225 = HEAP32[12895]|0;
       $226 = $225 & 9;
       $227 = ($226|0)!=(0);
       if (!($227)) {
        break L15;
       }
       $228 = HEAP32[12896]|0;
       $229 = $228 & 1;
       $230 = ($229|0)!=(0);
       if (!($230)) {
        break L15;
       }
       $231 = HEAP32[12802]|0;
       $232 = HEAP32[12808]|0;
       $233 = ((($232)) + 26|0);
       $234 = HEAP16[$233>>1]|0;
       $235 = $234 << 16 >> 16;
       $236 = (($231) + ($235))|0;
       $237 = HEAP32[12779]|0;
       $238 = ($236|0)<($237|0);
       if (!($238)) {
        break L15;
       }
       $239 = HEAP32[12805]|0;
       $240 = HEAP32[12820]|0;
       $241 = (($239) + ($240))|0;
       $242 = (($241) + 1)|0;
       $6 = $242;
       while(1) {
        $243 = $6;
        $244 = HEAP32[12778]|0;
        $245 = ($243|0)<($244|0);
        if (!($245)) {
         break L15;
        }
        $246 = $6;
        $247 = HEAP32[12777]|0;
        $248 = (($247) + ($246<<2)|0);
        $249 = HEAP32[$248>>2]|0;
        $250 = (_checkAttr($249,1,0)|0);
        $251 = ($250|0)!=(0);
        $252 = $6;
        if (!($251)) {
         break;
        }
        $258 = (($252) + 1)|0;
        $6 = $258;
       }
       $253 = HEAP32[12777]|0;
       $254 = (($253) + ($252<<2)|0);
       $255 = HEAP32[$254>>2]|0;
       $256 = (_checkAttr($255,4,0)|0);
       $257 = ($256|0)!=(0);
       if ($257) {
        label = 138;
        break L1;
       } else {
        break L15;
       }
       break;
      }
      case 91:  {
       $259 = HEAP32[12827]|0;
       $260 = ($259|0)!=(0);
       if ($260) {
        break L15;
       }
       $261 = HEAP32[12788]|0;
       $262 = $261 & 1;
       $263 = ($262|0)!=(0);
       if ($263) {
        break L15;
       }
       $264 = HEAP32[12895]|0;
       $265 = $264 & 1;
       $266 = ($265|0)!=(0);
       if (!($266)) {
        break L15;
       }
       $267 = HEAP32[12896]|0;
       $268 = $267 & 1;
       $269 = ($268|0)!=(0);
       $270 = HEAP32[12804]|0;
       $271 = ($270|0)!=(90);
       $or$cond3 = $269 & $271;
       if ($or$cond3) {
        label = 138;
        break L1;
       } else {
        break L15;
       }
       break;
      }
      case 90:  {
       $272 = HEAP32[12827]|0;
       $273 = ($272|0)!=(0);
       if ($273) {
        break L15;
       }
       $274 = HEAP32[12788]|0;
       $275 = $274 & 1;
       $276 = ($275|0)!=(0);
       if ($276) {
        break L15;
       }
       $277 = HEAP32[12895]|0;
       $278 = $277 & 9;
       $279 = ($278|0)!=(0);
       if (!($279)) {
        break L15;
       }
       $280 = (_onlyLettersAhead()|0);
       $281 = ($280|0)!=(0);
       if (!($281)) {
        break L15;
       }
       $282 = (_noCompbrlAhead()|0);
       $283 = ($282|0)!=(0);
       if ($283) {
        label = 138;
        break L1;
       } else {
        break L15;
       }
       break;
      }
      case 93:  {
       $284 = HEAP32[12827]|0;
       $285 = ($284|0)!=(0);
       if ($285) {
        break L15;
       }
       $286 = HEAP32[12788]|0;
       $287 = $286 & 1;
       $288 = ($287|0)!=(0);
       if ($288) {
        break L15;
       }
       $289 = HEAP32[12895]|0;
       $290 = $289 & 9;
       $291 = ($290|0)!=(0);
       if (!($291)) {
        break L15;
       }
       $292 = HEAP32[12896]|0;
       $293 = $292 & 11;
       $294 = ($293|0)!=(0);
       if ($294) {
        label = 138;
        break L1;
       } else {
        break L15;
       }
       break;
      }
      case 94:  {
       $295 = HEAP32[12827]|0;
       $296 = ($295|0)!=(0);
       if ($296) {
        break L15;
       }
       $297 = HEAP32[12788]|0;
       $298 = $297 & 1;
       $299 = ($298|0)!=(0);
       if ($299) {
        break L15;
       }
       $300 = HEAP32[12895]|0;
       $301 = $300 & 11;
       $302 = ($301|0)!=(0);
       if (!($302)) {
        break L15;
       }
       $303 = HEAP32[12896]|0;
       $304 = $303 & 9;
       $305 = ($304|0)!=(0);
       if ($305) {
        label = 138;
        break L1;
       } else {
        break L15;
       }
       break;
      }
      case 95:  {
       $306 = HEAP32[12827]|0;
       $307 = ($306|0)!=(0);
       if ($307) {
        break L15;
       }
       $308 = HEAP32[12788]|0;
       $309 = $308 & 1;
       $310 = ($309|0)!=(0);
       if ($310) {
        break L15;
       }
       $311 = HEAP32[12895]|0;
       $312 = $311 & 9;
       $313 = ($312|0)!=(0);
       if (!($313)) {
        break L15;
       }
       $314 = HEAP32[12896]|0;
       $315 = $314 & 2;
       $316 = ($315|0)!=(0);
       if ($316) {
        label = 138;
        break L1;
       } else {
        break L15;
       }
       break;
      }
      case 96:  {
       $317 = HEAP32[12827]|0;
       $318 = ($317|0)!=(0);
       if ($318) {
        break L15;
       }
       $319 = HEAP32[12788]|0;
       $320 = $319 & 1;
       $321 = ($320|0)!=(0);
       if ($321) {
        break L15;
       }
       $322 = HEAP32[12895]|0;
       $323 = $322 & 11;
       $324 = ($323|0)!=(0);
       if (!($324)) {
        break L15;
       }
       $325 = HEAP32[12896]|0;
       $326 = $325 & 2;
       $327 = ($326|0)!=(0);
       if ($327) {
        label = 138;
        break L1;
       } else {
        break L15;
       }
       break;
      }
      case 97:  {
       $328 = HEAP32[12827]|0;
       $329 = ($328|0)!=(0);
       if ($329) {
        break L15;
       }
       $330 = HEAP32[12788]|0;
       $331 = $330 & 1;
       $332 = ($331|0)!=(0);
       if ($332) {
        break L15;
       }
       $333 = HEAP32[12895]|0;
       $334 = $333 & 2;
       $335 = ($334|0)!=(0);
       if (!($335)) {
        break L15;
       }
       $336 = HEAP32[12896]|0;
       $337 = $336 & 2;
       $338 = ($337|0)!=(0);
       if ($338) {
        label = 138;
        break L1;
       } else {
        break L15;
       }
       break;
      }
      case 98:  {
       $339 = HEAP32[12827]|0;
       $340 = ($339|0)!=(0);
       if ($340) {
        break L15;
       }
       $341 = HEAP32[12788]|0;
       $342 = $341 & 1;
       $343 = ($342|0)!=(0);
       if ($343) {
        break L15;
       }
       $344 = HEAP32[12895]|0;
       $345 = $344 & 2;
       $346 = ($345|0)!=(0);
       if (!($346)) {
        break L15;
       }
       $347 = HEAP32[12896]|0;
       $348 = $347 & 11;
       $349 = ($348|0)!=(0);
       if ($349) {
        label = 138;
        break L1;
       } else {
        break L15;
       }
       break;
      }
      case 99:  {
       $350 = HEAP32[12827]|0;
       $351 = ($350|0)!=(0);
       if ($351) {
        break L15;
       }
       $352 = HEAP32[12788]|0;
       $353 = $352 & 1;
       $354 = ($353|0)!=(0);
       if ($354) {
        break L15;
       }
       $355 = HEAP32[12895]|0;
       $356 = $355 & 2;
       $357 = ($356|0)!=(0);
       if (!($357)) {
        break L15;
       }
       $358 = HEAP32[12896]|0;
       $359 = $358 & 9;
       $360 = ($359|0)!=(0);
       if ($360) {
        label = 138;
        break L1;
       } else {
        break L15;
       }
       break;
      }
      case 102:  {
       $361 = HEAP32[12895]|0;
       $362 = $361 & 9;
       $363 = ($362|0)!=(0);
       if (!($363)) {
        break L15;
       }
       $364 = HEAP32[12896]|0;
       $365 = $364 & 4;
       $366 = ($365|0)!=(0);
       if ($366) {
        label = 138;
        break L1;
       } else {
        break L15;
       }
       break;
      }
      case 103:  {
       $367 = HEAP32[12804]|0;
       $368 = ($367|0)!=(79);
       if (!($368)) {
        break L15;
       }
       $369 = HEAP32[12895]|0;
       $370 = $369 & 4;
       $371 = ($370|0)!=(0);
       if (!($371)) {
        break L15;
       }
       $372 = HEAP32[12896]|0;
       $373 = $372 & 4;
       $374 = ($373|0)!=(0);
       if ($374) {
        label = 138;
        break L1;
       } else {
        break L15;
       }
       break;
      }
      case 104:  {
       $375 = HEAP32[12895]|0;
       $376 = $375 & 4;
       $377 = ($376|0)!=(0);
       $378 = HEAP32[12804]|0;
       $379 = ($378|0)!=(79);
       $or$cond5 = $377 & $379;
       if ($or$cond5) {
        label = 138;
        break L1;
       } else {
        break L15;
       }
       break;
      }
      case 105:  {
       $380 = HEAP32[12896]|0;
       $381 = $380 & 4;
       $382 = ($381|0)!=(0);
       if ($382) {
        label = 113;
        break L1;
       } else {
        break L15;
       }
       break;
      }
      case 100:  {
       $386 = HEAP32[12805]|0;
       $387 = HEAP32[12777]|0;
       $388 = (($387) + ($386<<2)|0);
       $389 = HEAP32[$388>>2]|0;
       $390 = (_checkAttr($389,8,0)|0);
       $391 = ($390|0)!=(0);
       if (!($391)) {
        break L15;
       }
       $392 = HEAP32[12805]|0;
       $393 = ($392|0)>(0);
       if ($393) {
        $394 = HEAP32[12805]|0;
        $395 = (($394) - 1)|0;
        $396 = HEAP32[12777]|0;
        $397 = (($396) + ($395<<2)|0);
        $398 = HEAP32[$397>>2]|0;
        $399 = (_checkAttr($398,2,0)|0);
        $400 = ($399|0)!=(0);
        if ($400) {
         break L15;
        }
       }
       $401 = HEAP32[12805]|0;
       $402 = HEAP32[12820]|0;
       $403 = (($401) + ($402))|0;
       $3 = $403;
       while(1) {
        $404 = $3;
        $405 = HEAP32[12778]|0;
        $406 = ($404|0)<($405|0);
        if (!($406)) {
         break L15;
        }
        $407 = $3;
        $408 = HEAP32[12777]|0;
        $409 = (($408) + ($407<<2)|0);
        $410 = HEAP32[$409>>2]|0;
        $411 = (_checkAttr($410,6,0)|0);
        $412 = ($411|0)!=(0);
        if ($412) {
         label = 138;
         break L1;
        }
        $413 = $3;
        $414 = HEAP32[12777]|0;
        $415 = (($414) + ($413<<2)|0);
        $416 = HEAP32[$415>>2]|0;
        $417 = (_checkAttr($416,1,0)|0);
        $418 = ($417|0)!=(0);
        if ($418) {
         break L15;
        }
        $419 = $3;
        $420 = (($419) + 1)|0;
        $3 = $420;
       }
       break;
      }
      case 101:  {
       $421 = HEAP32[12805]|0;
       $422 = HEAP32[12777]|0;
       $423 = (($422) + ($421<<2)|0);
       $424 = HEAP32[$423>>2]|0;
       $425 = (_checkAttr($424,8,0)|0);
       $426 = ($425|0)!=(0);
       if (!($426)) {
        break L15;
       }
       $427 = HEAP32[12805]|0;
       $428 = HEAP32[12778]|0;
       $429 = (($428) - 1)|0;
       $430 = ($427|0)<($429|0);
       if ($430) {
        $431 = HEAP32[12805]|0;
        $432 = (($431) + 1)|0;
        $433 = HEAP32[12777]|0;
        $434 = (($433) + ($432<<2)|0);
        $435 = HEAP32[$434>>2]|0;
        $436 = (_checkAttr($435,2,0)|0);
        $437 = ($436|0)!=(0);
        if ($437) {
         break L15;
        }
       }
       $438 = HEAP32[12805]|0;
       $3 = $438;
       while(1) {
        $439 = $3;
        $440 = ($439|0)>=(0);
        if (!($440)) {
         break L15;
        }
        $441 = $3;
        $442 = HEAP32[12777]|0;
        $443 = (($442) + ($441<<2)|0);
        $444 = HEAP32[$443>>2]|0;
        $445 = (_checkAttr($444,6,0)|0);
        $446 = ($445|0)!=(0);
        if ($446) {
         label = 138;
         break L1;
        }
        $447 = $3;
        $448 = HEAP32[12777]|0;
        $449 = (($448) + ($447<<2)|0);
        $450 = HEAP32[$449>>2]|0;
        $451 = (_checkAttr($450,1,0)|0);
        $452 = ($451|0)!=(0);
        if ($452) {
         break L15;
        }
        $453 = $3;
        $454 = (($453) + -1)|0;
        $3 = $454;
       }
       break;
      }
      case 108:  {
       $455 = HEAP32[12827]|0;
       $456 = ($455|0)!=(0);
       if ($456) {
        break L15;
       }
       $457 = HEAP32[12788]|0;
       $458 = $457 & 1;
       $459 = ($458|0)!=(0);
       if ($459) {
        break L15;
       }
       $460 = (_checkEmphasisChange(0)|0);
       $461 = ($460|0)!=(0);
       if ($461) {
        break L15;
       }
       $462 = HEAP32[12808]|0;
       $463 = ((($462)) + 16|0);
       $464 = HEAP32[$463>>2]|0;
       $465 = HEAP32[12776]|0;
       $466 = ((($465)) + 31332|0);
       $467 = (($466) + ($464<<2)|0);
       $7 = $467;
       $468 = $7;
       $469 = ((($468)) + 4|0);
       $8 = $469;
       $470 = HEAP32[12777]|0;
       $471 = HEAP32[12805]|0;
       $472 = (($471) - 1)|0;
       $473 = $8;
       $474 = HEAP32[12776]|0;
       $475 = (_pattern_check($470,$472,-1,-1,$473,$474)|0);
       $476 = ($475|0)!=(0);
       if (!($476)) {
        break L15;
       }
       $477 = $7;
       $478 = HEAP32[$477>>2]|0;
       $479 = $7;
       $480 = (($479) + ($478<<2)|0);
       $8 = $480;
       $481 = HEAP32[12777]|0;
       $482 = HEAP32[12805]|0;
       $483 = HEAP32[12808]|0;
       $484 = ((($483)) + 24|0);
       $485 = HEAP16[$484>>1]|0;
       $486 = $485 << 16 >> 16;
       $487 = (($482) + ($486))|0;
       $488 = HEAP32[12778]|0;
       $489 = $8;
       $490 = HEAP32[12776]|0;
       $491 = (_pattern_check($481,$487,$488,1,$489,$490)|0);
       $492 = ($491|0)!=(0);
       if ($492) {
        label = 138;
        break L1;
       } else {
        break L15;
       }
       break;
      }
      default: {
       break L15;
      }
      }
     } while(0);
     if ((label|0) == 33) {
      label = 0;
      $152 = (_checkEmphasisChange(0)|0);
      $153 = ($152|0)!=(0);
      $154 = HEAP32[12827]|0;
      $155 = ($154|0)!=(0);
      $or$cond7 = $153 | $155;
      if ($or$cond7) {
       break;
      }
      $156 = HEAP32[12788]|0;
      $157 = $156 & 1;
      $158 = ($157|0)!=(0);
      if ($158) {
       break;
      } else {
       label = 138;
       break L1;
      }
     }
     $197 = HEAP32[12776]|0;
     $198 = ((($197)) + 16|0);
     $199 = HEAP32[$198>>2]|0;
     $200 = ($199|0)!=(0);
     if ($200) {
      $201 = (_inSequence()|0);
      $202 = ($201|0)!=(0);
      if ($202) {
       label = 138;
       break L1;
      } else {
       break;
      }
     }
     $203 = HEAP32[12895]|0;
     $204 = $203 & 9;
     $205 = ($204|0)!=(0);
     if ($205) {
      $206 = HEAP32[12896]|0;
      $207 = $206 & 9;
      $208 = ($207|0)!=(0);
      if ($208) {
       label = 138;
       break L1;
      }
     }
    }
   } while(0);
   $493 = HEAP32[12808]|0;
   $494 = HEAP32[$493>>2]|0;
   $4 = $494;
  }
  $495 = $1;
  $496 = (($495) + 1)|0;
  $1 = $496;
 }
 if ((label|0) == 8) {
  HEAP32[12808] = 51352;
  HEAP32[(51372)>>2] = 111;
  HEAP32[12807] = 111;
  HEAP16[(51376)>>1] = 1;
  HEAP32[12820] = 1;
  $49 = HEAP32[12805]|0;
  $50 = HEAP32[12777]|0;
  $51 = (($50) + ($49<<2)|0);
  $52 = HEAP32[$51>>2]|0;
  HEAP32[(51380)>>2] = $52;
  HEAP16[(51378)>>1] = 0;
  STACKTOP = sp;return;
 }
 else if ((label|0) == 42) {
  $175 = HEAP32[12895]|0;
  $176 = $175 & 9;
  $177 = ($176|0)!=(0);
  if ($177) {
   label = 44;
  } else {
   $178 = (_onlyLettersBehind()|0);
   $179 = ($178|0)!=(0);
   if ($179) {
    label = 44;
   }
  }
  if ((label|0) == 44) {
   $180 = HEAP32[12896]|0;
   $181 = $180 & 1;
   $182 = ($181|0)!=(0);
   $183 = HEAP32[12804]|0;
   $184 = ($183|0)==(86);
   $or$cond = $182 | $184;
   if ($or$cond) {
    $185 = HEAP32[12896]|0;
    $186 = $185 & 2;
    $187 = ($186|0)!=(0);
    if (!($187)) {
     $188 = (_noCompbrlAhead()|0);
     $189 = ($188|0)!=(0);
     if ($189) {
      STACKTOP = sp;return;
     }
    }
   }
  }
  HEAP32[12807] = 78;
  STACKTOP = sp;return;
 }
 else if ((label|0) == 113) {
  $383 = HEAP32[12895]|0;
  $384 = $383 & 4;
  $385 = ($384|0)!=(0);
  if (!($385)) {
   STACKTOP = sp;return;
  }
  HEAP32[12807] = 103;
  STACKTOP = sp;return;
 }
 else if ((label|0) == 138) {
  STACKTOP = sp;return;
 }
}
function _doCompbrl() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = HEAP32[12805]|0;
 $4 = HEAP32[12777]|0;
 $5 = (($4) + ($3<<2)|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (_checkAttr($6,1,0)|0);
 $8 = ($7|0)!=(0);
 if ($8) {
  $0 = 1;
  $41 = $0;
  STACKTOP = sp;return ($41|0);
 }
 $9 = HEAP32[12826]|0;
 $10 = ($9|0)!=(0);
 if ($10) {
  $11 = HEAP32[12825]|0;
  HEAP32[12805] = $11;
  $12 = HEAP32[12826]|0;
  HEAP32[12802] = $12;
 } else {
  HEAP32[12805] = 0;
  HEAP32[12802] = 0;
 }
 $13 = HEAP32[12805]|0;
 $1 = $13;
 while(1) {
  $14 = $1;
  $15 = ($14|0)>=(0);
  if (!($15)) {
   break;
  }
  $16 = $1;
  $17 = HEAP32[12777]|0;
  $18 = (($17) + ($16<<2)|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = (_checkAttr($19,1,0)|0);
  $21 = ($20|0)!=(0);
  if ($21) {
   break;
  }
  $22 = $1;
  $23 = (($22) + -1)|0;
  $1 = $23;
 }
 $24 = $1;
 $25 = (($24) + 1)|0;
 $1 = $25;
 $26 = HEAP32[12805]|0;
 $2 = $26;
 while(1) {
  $27 = $2;
  $28 = HEAP32[12778]|0;
  $29 = ($27|0)<($28|0);
  if (!($29)) {
   break;
  }
  $30 = $2;
  $31 = HEAP32[12777]|0;
  $32 = (($31) + ($30<<2)|0);
  $33 = HEAP32[$32>>2]|0;
  $34 = (_checkAttr($33,1,0)|0);
  $35 = ($34|0)!=(0);
  if ($35) {
   break;
  }
  $36 = $2;
  $37 = (($36) + 1)|0;
  $2 = $37;
 }
 $38 = $1;
 $39 = $2;
 $40 = (_doCompTrans($38,$39)|0);
 $0 = $40;
 $41 = $0;
 STACKTOP = sp;return ($41|0);
}
function _insertEmphases() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = HEAP32[12834]|0;
 $0 = $1;
 while(1) {
  $2 = $0;
  $3 = HEAP32[12805]|0;
  $4 = ($2|0)<=($3|0);
  if (!($4)) {
   break;
  }
  $5 = $0;
  _insertEmphasesAt($5);
  $6 = $0;
  $7 = (($6) + 1)|0;
  $0 = $7;
 }
 $8 = HEAP32[12805]|0;
 $9 = (($8) + 1)|0;
 HEAP32[12834] = $9;
 STACKTOP = sp;return;
}
function _checkNumericMode() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = HEAP32[12776]|0;
 $2 = ((($1)) + 40|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (_brailleIndicatorDefined($3)|0);
 $5 = ($4|0)!=(0);
 if (!($5)) {
  STACKTOP = sp;return;
 }
 $6 = HEAP32[12824]|0;
 $7 = ($6|0)!=(0);
 $8 = HEAP32[12805]|0;
 $9 = HEAP32[12777]|0;
 $10 = (($9) + ($8<<2)|0);
 $11 = HEAP32[$10>>2]|0;
 if ($7) {
  $51 = (_checkAttr($11,33554692,0)|0);
  $52 = ($51|0)!=(0);
  if ($52) {
   STACKTOP = sp;return;
  }
  HEAP32[12824] = 0;
  $53 = HEAP32[12776]|0;
  $54 = ((($53)) + 44|0);
  $55 = HEAP32[$54>>2]|0;
  $56 = (_brailleIndicatorDefined($55)|0);
  $57 = ($56|0)!=(0);
  if (!($57)) {
   STACKTOP = sp;return;
  }
  $58 = HEAP32[12805]|0;
  $59 = HEAP32[12777]|0;
  $60 = (($59) + ($58<<2)|0);
  $61 = HEAP32[$60>>2]|0;
  $62 = (_checkAttr($61,67108864,0)|0);
  $63 = ($62|0)!=(0);
  if (!($63)) {
   STACKTOP = sp;return;
  }
  $64 = HEAP32[12818]|0;
  $65 = ((($64)) + 28|0);
  $66 = HEAP32[12818]|0;
  $67 = ((($66)) + 26|0);
  $68 = HEAP16[$67>>1]|0;
  $69 = $68 << 16 >> 16;
  (_for_updatePositions($65,0,$69,0)|0);
  STACKTOP = sp;return;
 }
 $12 = (_checkAttr($11,260,0)|0);
 $13 = ($12|0)!=(0);
 if ($13) {
  HEAP32[12824] = 1;
  HEAP32[12827] = 1;
  $14 = HEAP32[12818]|0;
  $15 = ((($14)) + 28|0);
  $16 = HEAP32[12818]|0;
  $17 = ((($16)) + 26|0);
  $18 = HEAP16[$17>>1]|0;
  $19 = $18 << 16 >> 16;
  (_for_updatePositions($15,0,$19,0)|0);
  STACKTOP = sp;return;
 }
 $20 = HEAP32[12805]|0;
 $21 = HEAP32[12777]|0;
 $22 = (($21) + ($20<<2)|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = (_checkAttr($23,33554432,0)|0);
 $25 = ($24|0)!=(0);
 if (!($25)) {
  STACKTOP = sp;return;
 }
 $26 = HEAP32[12805]|0;
 $27 = (($26) + 1)|0;
 $0 = $27;
 while(1) {
  $28 = $0;
  $29 = HEAP32[12778]|0;
  $30 = ($28|0)<($29|0);
  if (!($30)) {
   label = 16;
   break;
  }
  $31 = $0;
  $32 = HEAP32[12777]|0;
  $33 = (($32) + ($31<<2)|0);
  $34 = HEAP32[$33>>2]|0;
  $35 = (_checkAttr($34,260,0)|0);
  $36 = ($35|0)!=(0);
  if ($36) {
   label = 9;
   break;
  }
  $43 = $0;
  $44 = HEAP32[12777]|0;
  $45 = (($44) + ($43<<2)|0);
  $46 = HEAP32[$45>>2]|0;
  $47 = (_checkAttr($46,33554432,0)|0);
  $48 = ($47|0)!=(0);
  if (!($48)) {
   label = 16;
   break;
  }
  $49 = $0;
  $50 = (($49) + 1)|0;
  $0 = $50;
 }
 if ((label|0) == 9) {
  HEAP32[12824] = 1;
  $37 = HEAP32[12818]|0;
  $38 = ((($37)) + 28|0);
  $39 = HEAP32[12818]|0;
  $40 = ((($39)) + 26|0);
  $41 = HEAP16[$40>>1]|0;
  $42 = $41 << 16 >> 16;
  (_for_updatePositions($38,0,$42,0)|0);
  STACKTOP = sp;return;
 }
 else if ((label|0) == 16) {
  STACKTOP = sp;return;
 }
}
function _doNocont() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = HEAP32[12805]|0;
 $2 = HEAP32[12777]|0;
 $3 = (($2) + ($1<<2)|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (_checkAttr($4,1,0)|0);
 $6 = ($5|0)!=(0);
 $7 = HEAP32[12827]|0;
 $8 = ($7|0)!=(0);
 $or$cond = $6 | $8;
 if (!($or$cond)) {
  $9 = HEAP32[12788]|0;
  $10 = $9 & 1;
  $11 = ($10|0)!=(0);
  if (!($11)) {
   $12 = HEAP32[12826]|0;
   $13 = ($12|0)!=(0);
   if ($13) {
    $14 = HEAP32[12825]|0;
    HEAP32[12805] = $14;
    $15 = HEAP32[12826]|0;
    HEAP32[12802] = $15;
   } else {
    HEAP32[12805] = 0;
    HEAP32[12802] = 0;
   }
   HEAP32[12827] = 1;
   $0 = 1;
   $16 = $0;
   STACKTOP = sp;return ($16|0);
  }
 }
 $0 = 1;
 $16 = $0;
 STACKTOP = sp;return ($16|0);
}
function _putCharacters($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = 0;
 while(1) {
  $6 = $5;
  $7 = $4;
  $8 = ($6|0)<($7|0);
  if (!($8)) {
   label = 6;
   break;
  }
  $9 = $5;
  $10 = $3;
  $11 = (($10) + ($9<<2)|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = (_putCharacter($12)|0);
  $14 = ($13|0)!=(0);
  if (!($14)) {
   label = 4;
   break;
  }
  $15 = $5;
  $16 = (($15) + 1)|0;
  $5 = $16;
 }
 if ((label|0) == 4) {
  $2 = 0;
  $17 = $2;
  STACKTOP = sp;return ($17|0);
 }
 else if ((label|0) == 6) {
  $2 = 1;
  $17 = $2;
  STACKTOP = sp;return ($17|0);
 }
 return (0)|0;
}
function _insertEmphasesAt($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0;
 var $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0;
 var $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0;
 var $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0;
 var $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0;
 var $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0;
 var $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0;
 var $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $2 = sp + 16|0;
 $1 = $0;
 $7 = HEAP32[12780]|0;
 $8 = ($7|0)!=(0);
 if (!($8)) {
  $9 = HEAP32[12807]|0;
  $10 = ($9|0)==(92);
  if ($10) {
   $11 = HEAP32[12776]|0;
   $12 = ((($11)) + 44|0);
   $13 = HEAP32[$12>>2]|0;
   $14 = (_brailleIndicatorDefined($13)|0);
   $15 = ($14|0)!=(0);
   if ($15) {
    $16 = HEAP32[12818]|0;
    $17 = ((($16)) + 28|0);
    $18 = HEAP32[12818]|0;
    $19 = ((($18)) + 26|0);
    $20 = HEAP16[$19>>1]|0;
    $21 = $20 << 16 >> 16;
    (_for_updatePositions($17,0,$21,0)|0);
   }
  }
  $22 = $1;
  $23 = HEAP32[12783]|0;
  $24 = (($23) + ($22<<2)|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = $25 & 240;
  $27 = ($26|0)!=(0);
  if (!($27)) {
   STACKTOP = sp;return;
  }
  $28 = HEAP32[12783]|0;
  $29 = $1;
  _insertEmphasisEnd($28,$29,0,32,64);
  $30 = HEAP32[12783]|0;
  $31 = $1;
  _insertEmphasisBegin($30,$31,0,16,32,64);
  $32 = HEAP32[12783]|0;
  $33 = $1;
  _insertEmphasisSymbol($32,$33,0,128);
  STACKTOP = sp;return;
 }
 $34 = $1;
 $35 = HEAP32[12783]|0;
 $36 = (($35) + ($34<<2)|0);
 $37 = HEAP32[$36>>2]|0;
 $38 = $37 & 240;
 $39 = ($38|0)!=(0);
 if ($39) {
  $40 = HEAP32[12783]|0;
  $41 = $1;
  _insertEmphasisEnd($40,$41,0,32,64);
 }
 $3 = 0;
 while(1) {
  $42 = $3;
  $43 = ($42|0)<(10);
  if (!($43)) {
   break;
  }
  $44 = $3;
  $45 = ($44|0)<(5);
  if ($45) {
   $46 = HEAP32[12783]|0;
   $47 = $1;
   $48 = $3;
   $49 = $48<<2;
   $50 = 512 << $49;
   $51 = $3;
   $52 = $51<<2;
   $53 = 256 << $52;
   $54 = $3;
   $55 = $54<<2;
   $56 = 1024 << $55;
   $57 = (_endCount($46,$47,$50,$53,$56)|0);
   $58 = $3;
   $59 = (($2) + ($58<<2)|0);
   HEAP32[$59>>2] = $57;
  } else {
   $60 = HEAP32[12784]|0;
   $61 = $1;
   $62 = $3;
   $63 = (($62) - 5)|0;
   $64 = $63<<2;
   $65 = 2 << $64;
   $66 = $3;
   $67 = (($66) - 5)|0;
   $68 = $67<<2;
   $69 = 1 << $68;
   $70 = $3;
   $71 = (($70) - 5)|0;
   $72 = $71<<2;
   $73 = 4 << $72;
   $74 = (_endCount($60,$61,$65,$69,$73)|0);
   $75 = $3;
   $76 = (($2) + ($75<<2)|0);
   HEAP32[$76>>2] = $74;
  }
  $77 = $3;
  $78 = (($77) + 1)|0;
  $3 = $78;
 }
 $3 = 0;
 while(1) {
  $79 = $3;
  $80 = ($79|0)<(10);
  if (!($80)) {
   break;
  }
  $5 = -1;
  $4 = 0;
  while(1) {
   $81 = $4;
   $82 = ($81|0)<(10);
   if (!($82)) {
    break;
   }
   $83 = $4;
   $84 = (($2) + ($83<<2)|0);
   $85 = HEAP32[$84>>2]|0;
   $86 = ($85|0)>(0);
   do {
    if ($86) {
     $87 = $5;
     $88 = ($87|0)<(0);
     if (!($88)) {
      $89 = $4;
      $90 = (($2) + ($89<<2)|0);
      $91 = HEAP32[$90>>2]|0;
      $92 = $5;
      $93 = (($2) + ($92<<2)|0);
      $94 = HEAP32[$93>>2]|0;
      $95 = ($91|0)<($94|0);
      if (!($95)) {
       break;
      }
     }
     $96 = $4;
     $5 = $96;
    }
   } while(0);
   $97 = $4;
   $98 = (($97) + 1)|0;
   $4 = $98;
  }
  $99 = $5;
  $100 = ($99|0)<(0);
  if ($100) {
   break;
  }
  $101 = $5;
  $102 = (($2) + ($101<<2)|0);
  HEAP32[$102>>2] = 0;
  $103 = $5;
  $104 = ($103|0)<(5);
  if ($104) {
   $105 = HEAP32[12783]|0;
   $106 = $1;
   $107 = $5;
   $108 = (1 + ($107))|0;
   $109 = $5;
   $110 = $109<<2;
   $111 = 512 << $110;
   $112 = $5;
   $113 = $112<<2;
   $114 = 1024 << $113;
   _insertEmphasisEnd($105,$106,$108,$111,$114);
  } else {
   $115 = HEAP32[12784]|0;
   $116 = $1;
   $117 = $5;
   $118 = (1 + ($117))|0;
   $119 = $5;
   $120 = (($119) - 5)|0;
   $121 = $120<<2;
   $122 = 2 << $121;
   $123 = $5;
   $124 = (($123) - 5)|0;
   $125 = $124<<2;
   $126 = 4 << $125;
   _insertEmphasisEnd($115,$116,$118,$122,$126);
  }
  $127 = $3;
  $128 = (($127) + 1)|0;
  $3 = $128;
 }
 $3 = 0;
 while(1) {
  $129 = $3;
  $130 = ($129|0)<(10);
  if (!($130)) {
   break;
  }
  $131 = $3;
  $132 = ($131|0)<(5);
  if ($132) {
   $133 = HEAP32[12783]|0;
   $134 = $1;
   $135 = $3;
   $136 = $135<<2;
   $137 = 512 << $136;
   $138 = $3;
   $139 = $138<<2;
   $140 = 256 << $139;
   $141 = $3;
   $142 = $141<<2;
   $143 = 1024 << $142;
   $144 = (_beginCount($133,$134,$137,$140,$143)|0);
   $145 = $3;
   $146 = (($2) + ($145<<2)|0);
   HEAP32[$146>>2] = $144;
  } else {
   $147 = HEAP32[12784]|0;
   $148 = $1;
   $149 = $3;
   $150 = (($149) - 5)|0;
   $151 = $150<<2;
   $152 = 2 << $151;
   $153 = $3;
   $154 = (($153) - 5)|0;
   $155 = $154<<2;
   $156 = 1 << $155;
   $157 = $3;
   $158 = (($157) - 5)|0;
   $159 = $158<<2;
   $160 = 4 << $159;
   $161 = (_beginCount($147,$148,$152,$156,$160)|0);
   $162 = $3;
   $163 = (($2) + ($162<<2)|0);
   HEAP32[$163>>2] = $161;
  }
  $164 = $3;
  $165 = (($164) + 1)|0;
  $3 = $165;
 }
 $3 = 9;
 while(1) {
  $166 = $3;
  $167 = ($166|0)>=(0);
  if (!($167)) {
   break;
  }
  $6 = 9;
  $4 = 9;
  while(1) {
   $168 = $4;
   $169 = ($168|0)>=(0);
   $170 = $6;
   $171 = (($2) + ($170<<2)|0);
   $172 = HEAP32[$171>>2]|0;
   if (!($169)) {
    break;
   }
   $173 = $4;
   $174 = (($2) + ($173<<2)|0);
   $175 = HEAP32[$174>>2]|0;
   $176 = ($172|0)<($175|0);
   if ($176) {
    $177 = $4;
    $6 = $177;
   }
   $178 = $4;
   $179 = (($178) + -1)|0;
   $4 = $179;
  }
  $180 = ($172|0)!=(0);
  if (!($180)) {
   break;
  }
  $181 = $6;
  $182 = (($2) + ($181<<2)|0);
  HEAP32[$182>>2] = 0;
  $183 = $6;
  $184 = ($183|0)>=(5);
  if ($184) {
   $185 = HEAP32[12784]|0;
   $186 = $1;
   $187 = $6;
   $188 = (1 + ($187))|0;
   $189 = $6;
   $190 = (($189) - 5)|0;
   $191 = $190<<2;
   $192 = 1 << $191;
   $193 = $6;
   $194 = (($193) - 5)|0;
   $195 = $194<<2;
   $196 = 2 << $195;
   $197 = $6;
   $198 = (($197) - 5)|0;
   $199 = $198<<2;
   $200 = 4 << $199;
   _insertEmphasisBegin($185,$186,$188,$192,$196,$200);
  } else {
   $201 = HEAP32[12783]|0;
   $202 = $1;
   $203 = $6;
   $204 = (1 + ($203))|0;
   $205 = $6;
   $206 = $205<<2;
   $207 = 256 << $206;
   $208 = $6;
   $209 = $208<<2;
   $210 = 512 << $209;
   $211 = $6;
   $212 = $211<<2;
   $213 = 1024 << $212;
   _insertEmphasisBegin($201,$202,$204,$207,$210,$213);
  }
  $214 = $3;
  $215 = (($214) + -1)|0;
  $3 = $215;
 }
 $3 = 4;
 while(1) {
  $216 = $3;
  $217 = ($216|0)>=(0);
  if (!($217)) {
   break;
  }
  $218 = $1;
  $219 = HEAP32[12784]|0;
  $220 = (($219) + ($218<<2)|0);
  $221 = HEAP32[$220>>2]|0;
  $222 = $3;
  $223 = $222<<2;
  $224 = 15 << $223;
  $225 = $221 & $224;
  $226 = ($225|0)!=(0);
  if ($226) {
   $227 = HEAP32[12784]|0;
   $228 = $1;
   $229 = $3;
   $230 = (6 + ($229))|0;
   $231 = $3;
   $232 = $231<<2;
   $233 = 8 << $232;
   _insertEmphasisSymbol($227,$228,$230,$233);
  }
  $234 = $3;
  $235 = (($234) + -1)|0;
  $3 = $235;
 }
 $3 = 4;
 while(1) {
  $236 = $3;
  $237 = ($236|0)>=(0);
  if (!($237)) {
   break;
  }
  $238 = $1;
  $239 = HEAP32[12783]|0;
  $240 = (($239) + ($238<<2)|0);
  $241 = HEAP32[$240>>2]|0;
  $242 = $3;
  $243 = $242<<2;
  $244 = 3840 << $243;
  $245 = $241 & $244;
  $246 = ($245|0)!=(0);
  if ($246) {
   $247 = HEAP32[12783]|0;
   $248 = $1;
   $249 = $3;
   $250 = (1 + ($249))|0;
   $251 = $3;
   $252 = $251<<2;
   $253 = 2048 << $252;
   _insertEmphasisSymbol($247,$248,$250,$253);
  }
  $254 = $3;
  $255 = (($254) + -1)|0;
  $3 = $255;
 }
 $256 = HEAP32[12807]|0;
 $257 = ($256|0)==(92);
 if ($257) {
  $258 = HEAP32[12776]|0;
  $259 = ((($258)) + 44|0);
  $260 = HEAP32[$259>>2]|0;
  $261 = (_brailleIndicatorDefined($260)|0);
  $262 = ($261|0)!=(0);
  if ($262) {
   $263 = HEAP32[12818]|0;
   $264 = ((($263)) + 28|0);
   $265 = HEAP32[12818]|0;
   $266 = ((($265)) + 26|0);
   $267 = HEAP16[$266>>1]|0;
   $268 = $267 << 16 >> 16;
   (_for_updatePositions($264,0,$268,0)|0);
  }
 }
 $269 = $1;
 $270 = HEAP32[12783]|0;
 $271 = (($270) + ($269<<2)|0);
 $272 = HEAP32[$271>>2]|0;
 $273 = $272 & 240;
 $274 = ($273|0)!=(0);
 if (!($274)) {
  STACKTOP = sp;return;
 }
 $275 = HEAP32[12783]|0;
 $276 = $1;
 _insertEmphasisBegin($275,$276,0,16,32,64);
 $277 = HEAP32[12783]|0;
 $278 = $1;
 _insertEmphasisSymbol($277,$278,0,128);
 STACKTOP = sp;return;
}
function _insertEmphasisEnd($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = $4;
 $10 = $6;
 $11 = $5;
 $12 = (($11) + ($10<<2)|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = $8;
 $15 = $13 & $14;
 $16 = ($15|0)!=(0);
 if (!($16)) {
  STACKTOP = sp;return;
 }
 $17 = $6;
 $18 = $5;
 $19 = (($18) + ($17<<2)|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = $9;
 $22 = $20 & $21;
 $23 = ($22|0)!=(0);
 $24 = $7;
 $25 = HEAP32[12776]|0;
 $26 = ((($25)) + 1124|0);
 $27 = (($26) + (($24*36)|0)|0);
 if ($23) {
  $28 = ((($27)) + 28|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = (_brailleIndicatorDefined($29)|0);
  $31 = ($30|0)!=(0);
  if (!($31)) {
   STACKTOP = sp;return;
  }
  $32 = HEAP32[12818]|0;
  $33 = ((($32)) + 28|0);
  $34 = HEAP32[12818]|0;
  $35 = ((($34)) + 26|0);
  $36 = HEAP16[$35>>1]|0;
  $37 = $36 << 16 >> 16;
  (_for_updatePositions($33,0,$37,-1)|0);
  STACKTOP = sp;return;
 }
 $38 = ((($27)) + 16|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = (_brailleIndicatorDefined($39)|0);
 $41 = ($40|0)!=(0);
 if ($41) {
  $42 = HEAP32[12818]|0;
  $43 = ((($42)) + 28|0);
  $44 = HEAP32[12818]|0;
  $45 = ((($44)) + 26|0);
  $46 = HEAP16[$45>>1]|0;
  $47 = $46 << 16 >> 16;
  (_for_updatePositions($43,0,$47,-1)|0);
  STACKTOP = sp;return;
 }
 $48 = $7;
 $49 = HEAP32[12776]|0;
 $50 = ((($49)) + 1124|0);
 $51 = (($50) + (($48*36)|0)|0);
 $52 = ((($51)) + 8|0);
 $53 = HEAP32[$52>>2]|0;
 $54 = (_brailleIndicatorDefined($53)|0);
 $55 = ($54|0)!=(0);
 if ($55) {
  $56 = HEAP32[12818]|0;
  $57 = ((($56)) + 28|0);
  $58 = HEAP32[12818]|0;
  $59 = ((($58)) + 26|0);
  $60 = HEAP16[$59>>1]|0;
  $61 = $60 << 16 >> 16;
  (_for_updatePositions($57,0,$61,-1)|0);
  STACKTOP = sp;return;
 }
 $62 = $7;
 $63 = HEAP32[12776]|0;
 $64 = ((($63)) + 1124|0);
 $65 = (($64) + (($62*36)|0)|0);
 $66 = ((($65)) + 4|0);
 $67 = HEAP32[$66>>2]|0;
 $68 = (_brailleIndicatorDefined($67)|0);
 $69 = ($68|0)!=(0);
 if (!($69)) {
  STACKTOP = sp;return;
 }
 $70 = HEAP32[12818]|0;
 $71 = ((($70)) + 28|0);
 $72 = HEAP32[12818]|0;
 $73 = ((($72)) + 26|0);
 $74 = HEAP16[$73>>1]|0;
 $75 = $74 << 16 >> 16;
 (_for_updatePositions($71,0,$75,0)|0);
 STACKTOP = sp;return;
}
function _insertEmphasisBegin($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $11 = $5;
 $12 = $7;
 $13 = $6;
 $14 = (($13) + ($12<<2)|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = $9;
 $17 = $15 & $16;
 $18 = ($17|0)!=(0);
 do {
  if ($18) {
   $19 = $8;
   $20 = HEAP32[12776]|0;
   $21 = ((($20)) + 1124|0);
   $22 = (($21) + (($19*36)|0)|0);
   $23 = HEAP32[$22>>2]|0;
   $24 = (_brailleIndicatorDefined($23)|0);
   $25 = ($24|0)!=(0);
   if ($25) {
    $26 = HEAP32[12818]|0;
    $27 = ((($26)) + 28|0);
    $28 = HEAP32[12818]|0;
    $29 = ((($28)) + 26|0);
    $30 = HEAP16[$29>>1]|0;
    $31 = $30 << 16 >> 16;
    (_for_updatePositions($27,0,$31,0)|0);
    break;
   }
   $32 = $8;
   $33 = HEAP32[12776]|0;
   $34 = ((($33)) + 1124|0);
   $35 = (($34) + (($32*36)|0)|0);
   $36 = ((($35)) + 12|0);
   $37 = HEAP32[$36>>2]|0;
   $38 = (_brailleIndicatorDefined($37)|0);
   $39 = ($38|0)!=(0);
   if ($39) {
    $40 = HEAP32[12818]|0;
    $41 = ((($40)) + 28|0);
    $42 = HEAP32[12818]|0;
    $43 = ((($42)) + 26|0);
    $44 = HEAP16[$43>>1]|0;
    $45 = $44 << 16 >> 16;
    (_for_updatePositions($41,0,$45,0)|0);
   }
  }
 } while(0);
 $46 = $7;
 $47 = $6;
 $48 = (($47) + ($46<<2)|0);
 $49 = HEAP32[$48>>2]|0;
 $50 = $11;
 $51 = $49 & $50;
 $52 = ($51|0)!=(0);
 if (!($52)) {
  STACKTOP = sp;return;
 }
 $53 = $7;
 $54 = $6;
 $55 = (($54) + ($53<<2)|0);
 $56 = HEAP32[$55>>2]|0;
 $57 = $10;
 $58 = $56 & $57;
 $59 = ($58|0)!=(0);
 if ($59) {
  STACKTOP = sp;return;
 }
 $60 = $8;
 $61 = HEAP32[12776]|0;
 $62 = ((($61)) + 1124|0);
 $63 = (($62) + (($60*36)|0)|0);
 $64 = ((($63)) + 24|0);
 $65 = HEAP32[$64>>2]|0;
 $66 = (_brailleIndicatorDefined($65)|0);
 $67 = ($66|0)!=(0);
 if (!($67)) {
  STACKTOP = sp;return;
 }
 $68 = HEAP32[12818]|0;
 $69 = ((($68)) + 28|0);
 $70 = HEAP32[12818]|0;
 $71 = ((($70)) + 26|0);
 $72 = HEAP16[$71>>1]|0;
 $73 = $72 << 16 >> 16;
 (_for_updatePositions($69,0,$73,0)|0);
 STACKTOP = sp;return;
}
function _insertEmphasisSymbol($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $8 = $5;
 $9 = $4;
 $10 = (($9) + ($8<<2)|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = $7;
 $13 = $11 & $12;
 $14 = ($13|0)!=(0);
 if (!($14)) {
  STACKTOP = sp;return;
 }
 $15 = $6;
 $16 = HEAP32[12776]|0;
 $17 = ((($16)) + 1124|0);
 $18 = (($17) + (($15*36)|0)|0);
 $19 = ((($18)) + 20|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = (_brailleIndicatorDefined($20)|0);
 $22 = ($21|0)!=(0);
 if (!($22)) {
  STACKTOP = sp;return;
 }
 $23 = HEAP32[12818]|0;
 $24 = ((($23)) + 28|0);
 $25 = HEAP32[12818]|0;
 $26 = ((($25)) + 26|0);
 $27 = HEAP16[$26>>1]|0;
 $28 = $27 << 16 >> 16;
 (_for_updatePositions($24,0,$28,0)|0);
 STACKTOP = sp;return;
}
function _endCount($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $12 = 1;
 $13 = $7;
 $14 = $6;
 $15 = (($14) + ($13<<2)|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = $8;
 $18 = $16 & $17;
 $19 = ($18|0)!=(0);
 if (!($19)) {
  $5 = 0;
  $43 = $5;
  STACKTOP = sp;return ($43|0);
 }
 $20 = $7;
 $21 = (($20) - 1)|0;
 $11 = $21;
 while(1) {
  $22 = $11;
  $23 = ($22|0)>=(0);
  if (!($23)) {
   break;
  }
  $24 = $11;
  $25 = $6;
  $26 = (($25) + ($24<<2)|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = $9;
  $29 = $27 & $28;
  $30 = ($29|0)!=(0);
  if ($30) {
   break;
  }
  $31 = $11;
  $32 = $6;
  $33 = (($32) + ($31<<2)|0);
  $34 = HEAP32[$33>>2]|0;
  $35 = $10;
  $36 = $34 & $35;
  $37 = ($36|0)!=(0);
  if ($37) {
   break;
  }
  $38 = $12;
  $39 = (($38) + 1)|0;
  $12 = $39;
  $40 = $11;
  $41 = (($40) + -1)|0;
  $11 = $41;
 }
 $42 = $12;
 $5 = $42;
 $43 = $5;
 STACKTOP = sp;return ($43|0);
}
function _beginCount($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $15 = $7;
 $16 = $6;
 $17 = (($16) + ($15<<2)|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = $9;
 $20 = $18 & $19;
 $21 = ($20|0)!=(0);
 if ($21) {
  $12 = 1;
  $22 = $7;
  $23 = (($22) + 1)|0;
  $11 = $23;
  while(1) {
   $24 = $11;
   $25 = HEAP32[12778]|0;
   $26 = ($24|0)<($25|0);
   if (!($26)) {
    break;
   }
   $27 = $11;
   $28 = $6;
   $29 = (($28) + ($27<<2)|0);
   $30 = HEAP32[$29>>2]|0;
   $31 = $8;
   $32 = $30 & $31;
   $33 = ($32|0)!=(0);
   if ($33) {
    break;
   }
   $34 = $12;
   $35 = (($34) + 1)|0;
   $12 = $35;
   $36 = $11;
   $37 = (($36) + 1)|0;
   $11 = $37;
  }
  $38 = $12;
  $5 = $38;
  $69 = $5;
  STACKTOP = sp;return ($69|0);
 }
 $39 = $7;
 $40 = $6;
 $41 = (($40) + ($39<<2)|0);
 $42 = HEAP32[$41>>2]|0;
 $43 = $10;
 $44 = $42 & $43;
 $45 = ($44|0)!=(0);
 if (!($45)) {
  $5 = 0;
  $69 = $5;
  STACKTOP = sp;return ($69|0);
 }
 $14 = 1;
 $46 = $7;
 $47 = (($46) + 1)|0;
 $13 = $47;
 while(1) {
  $48 = $13;
  $49 = HEAP32[12778]|0;
  $50 = ($48|0)<($49|0);
  if (!($50)) {
   break;
  }
  $51 = $13;
  $52 = $6;
  $53 = (($52) + ($51<<2)|0);
  $54 = HEAP32[$53>>2]|0;
  $55 = $8;
  $56 = $54 & $55;
  $57 = ($56|0)!=(0);
  if ($57) {
   break;
  }
  $58 = $13;
  $59 = HEAP32[12777]|0;
  $60 = (($59) + ($58<<2)|0);
  $61 = HEAP32[$60>>2]|0;
  $62 = (_checkAttr($61,8193,0)|0);
  $63 = ($62|0)!=(0);
  if ($63) {
   break;
  }
  $64 = $14;
  $65 = (($64) + 1)|0;
  $14 = $65;
  $66 = $13;
  $67 = (($66) + 1)|0;
  $13 = $67;
 }
 $68 = $14;
 $5 = $68;
 $69 = $5;
 STACKTOP = sp;return ($69|0);
}
function _validMatch() {
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = 0;
 $5 = 0;
 $6 = HEAP32[12820]|0;
 $7 = ($6|0)!=(0);
 if (!($7)) {
  $0 = 0;
  $102 = $0;
  STACKTOP = sp;return ($102|0);
 }
 $8 = HEAP32[12805]|0;
 $4 = $8;
 while(1) {
  $9 = $4;
  $10 = HEAP32[12805]|0;
  $11 = HEAP32[12820]|0;
  $12 = (($10) + ($11))|0;
  $13 = ($9|0)<($12|0);
  if (!($13)) {
   label = 24;
   break;
  }
  $14 = $4;
  $15 = HEAP32[12777]|0;
  $16 = (($15) + ($14<<2)|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = ($17|0)==(65535);
  $19 = $4;
  if ($18) {
   label = 6;
   break;
  }
  $24 = HEAP32[12777]|0;
  $25 = (($24) + ($19<<2)|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = (_findCharOrDots($26,0)|0);
  $1 = $27;
  $28 = $4;
  $29 = HEAP32[12805]|0;
  $30 = ($28|0)==($29|0);
  if ($30) {
   $31 = $1;
   $32 = ((($31)) + 12|0);
   $33 = HEAP32[$32>>2]|0;
   $3 = $33;
  }
  $34 = $5;
  $35 = (($34) + 1)|0;
  $5 = $35;
  $36 = HEAP32[12808]|0;
  $37 = ((($36)) + 28|0);
  $38 = (($37) + ($34<<2)|0);
  $39 = HEAP32[$38>>2]|0;
  $40 = (_findCharOrDots($39,0)|0);
  $2 = $40;
  $41 = $1;
  $42 = ((($41)) + 24|0);
  $43 = HEAP32[$42>>2]|0;
  $44 = $2;
  $45 = ((($44)) + 24|0);
  $46 = HEAP32[$45>>2]|0;
  $47 = ($43|0)!=($46|0);
  if ($47) {
   label = 12;
   break;
  }
  $48 = HEAP32[12781]|0;
  $49 = ($48|0)!=(0|0);
  if ($49) {
   $50 = HEAP32[12805]|0;
   $51 = HEAP32[12781]|0;
   $52 = (($51) + ($50<<1)|0);
   $53 = HEAP16[$52>>1]|0;
   $54 = $53&65535;
   $55 = $54 & 32768;
   $56 = ($55|0)==(0);
   if ($56) {
    $57 = $4;
    $58 = HEAP32[12781]|0;
    $59 = (($58) + ($57<<1)|0);
    $60 = HEAP16[$59>>1]|0;
    $61 = $60&65535;
    $62 = HEAP32[12805]|0;
    $63 = HEAP32[12781]|0;
    $64 = (($63) + ($62<<1)|0);
    $65 = HEAP16[$64>>1]|0;
    $66 = $65&65535;
    $67 = $61 | $66;
    $68 = HEAP32[12805]|0;
    $69 = HEAP32[12781]|0;
    $70 = (($69) + ($68<<1)|0);
    $71 = HEAP16[$70>>1]|0;
    $72 = $71&65535;
    $73 = ($67|0)!=($72|0);
    if ($73) {
     label = 16;
     break;
    }
   }
  }
  $74 = $1;
  $75 = ((($74)) + 12|0);
  $76 = HEAP32[$75>>2]|0;
  $77 = ($76|0)!=(2);
  if ($77) {
   $78 = $4;
   $79 = HEAP32[12805]|0;
   $80 = (($79) + 1)|0;
   $81 = ($78|0)!=($80|0);
   if ($81) {
    $82 = $3;
    $83 = $82 & 2;
    $84 = ($83|0)!=(0);
    if ($84) {
     $85 = $1;
     $86 = ((($85)) + 12|0);
     $87 = HEAP32[$86>>2]|0;
     $88 = $87 & 2;
     $89 = ($88|0)!=(0);
     if ($89) {
      $90 = $1;
      $91 = ((($90)) + 12|0);
      $92 = HEAP32[$91>>2]|0;
      $93 = $92 & 50;
      $94 = $3;
      $95 = $94 & 50;
      $96 = ($93|0)!=($95|0);
      if ($96) {
       label = 22;
       break;
      }
     }
    }
   }
  }
  $97 = $1;
  $98 = ((($97)) + 12|0);
  $99 = HEAP32[$98>>2]|0;
  $3 = $99;
  $100 = $4;
  $101 = (($100) + 1)|0;
  $4 = $101;
 }
 if ((label|0) == 6) {
  $20 = HEAP32[12805]|0;
  $21 = ($19|0)==($20|0);
  $22 = HEAP32[12820]|0;
  $23 = ($22|0)==(1);
  $or$cond = $21 & $23;
  if ($or$cond) {
   $0 = 1;
   $102 = $0;
   STACKTOP = sp;return ($102|0);
  } else {
   $0 = 0;
   $102 = $0;
   STACKTOP = sp;return ($102|0);
  }
 }
 else if ((label|0) == 12) {
  $0 = 0;
  $102 = $0;
  STACKTOP = sp;return ($102|0);
 }
 else if ((label|0) == 16) {
  $0 = 0;
  $102 = $0;
  STACKTOP = sp;return ($102|0);
 }
 else if ((label|0) == 22) {
  $0 = 0;
  $102 = $0;
  STACKTOP = sp;return ($102|0);
 }
 else if ((label|0) == 24) {
  $0 = 1;
  $102 = $0;
  STACKTOP = sp;return ($102|0);
 }
 return (0)|0;
}
function _setAfter($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = HEAP32[12805]|0;
 $3 = $1;
 $4 = (($2) + ($3))|0;
 $5 = (($4) + 2)|0;
 $6 = HEAP32[12778]|0;
 $7 = ($5|0)<($6|0);
 if ($7) {
  $8 = HEAP32[12805]|0;
  $9 = (($8) + 1)|0;
  $10 = HEAP32[12777]|0;
  $11 = (($10) + ($9<<2)|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = ($12|0)==(65535);
  if ($13) {
   $14 = HEAP32[12805]|0;
   $15 = (($14) + 2)|0;
   $16 = HEAP32[12777]|0;
   $17 = (($16) + ($15<<2)|0);
   $18 = HEAP32[$17>>2]|0;
   HEAP32[12897] = $18;
   $31 = HEAP32[12897]|0;
   $32 = (_findCharOrDots($31,0)|0);
   $33 = ((($32)) + 12|0);
   $34 = HEAP32[$33>>2]|0;
   HEAP32[12896] = $34;
   STACKTOP = sp;return;
  }
 }
 $19 = HEAP32[12805]|0;
 $20 = $1;
 $21 = (($19) + ($20))|0;
 $22 = HEAP32[12778]|0;
 $23 = ($21|0)<($22|0);
 if ($23) {
  $24 = HEAP32[12805]|0;
  $25 = $1;
  $26 = (($24) + ($25))|0;
  $27 = HEAP32[12777]|0;
  $28 = (($27) + ($26<<2)|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = $29;
 } else {
  $30 = 32;
 }
 HEAP32[12897] = $30;
 $31 = HEAP32[12897]|0;
 $32 = (_findCharOrDots($31,0)|0);
 $33 = ((($32)) + 12|0);
 $34 = HEAP32[$33>>2]|0;
 HEAP32[12896] = $34;
 STACKTOP = sp;return;
}
function _isRepeatedWord() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = HEAP32[12805]|0;
 $3 = ($2|0)==(0);
 if (!($3)) {
  $4 = HEAP32[12805]|0;
  $5 = (($4) - 1)|0;
  $6 = HEAP32[12777]|0;
  $7 = (($6) + ($5<<2)|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = (_checkAttr($8,2,0)|0);
  $10 = ($9|0)!=(0);
  if ($10) {
   $11 = HEAP32[12805]|0;
   $12 = HEAP32[12820]|0;
   $13 = (($11) + ($12))|0;
   $14 = HEAP32[12778]|0;
   $15 = ($13|0)>=($14|0);
   if (!($15)) {
    $16 = HEAP32[12805]|0;
    $17 = HEAP32[12820]|0;
    $18 = (($16) + ($17))|0;
    $19 = HEAP32[12777]|0;
    $20 = (($19) + ($18<<2)|0);
    $21 = HEAP32[$20>>2]|0;
    $22 = (_checkAttr($21,2,0)|0);
    $23 = ($22|0)!=(0);
    if ($23) {
     $24 = HEAP32[12805]|0;
     $25 = (($24) - 2)|0;
     $1 = $25;
     while(1) {
      $26 = $1;
      $27 = ($26|0)>=(0);
      if (!($27)) {
       break;
      }
      $28 = $1;
      $29 = HEAP32[12777]|0;
      $30 = (($29) + ($28<<2)|0);
      $31 = HEAP32[$30>>2]|0;
      $32 = (_checkAttr($31,2,0)|0);
      $33 = ($32|0)!=(0);
      if (!($33)) {
       break;
      }
      $34 = $1;
      $35 = (($34) + -1)|0;
      $1 = $35;
     }
     $36 = $1;
     $37 = (($36) + 1)|0;
     $1 = $37;
     $38 = $1;
     $39 = HEAP32[12777]|0;
     $40 = (($39) + ($38<<2)|0);
     HEAP32[12836] = $40;
     $41 = HEAP32[12805]|0;
     $42 = $1;
     $43 = (($41) - ($42))|0;
     HEAP32[12837] = $43;
     $44 = HEAP32[12836]|0;
     $45 = HEAP32[12805]|0;
     $46 = HEAP32[12820]|0;
     $47 = (($45) + ($46))|0;
     $48 = HEAP32[12777]|0;
     $49 = (($48) + ($47<<2)|0);
     $50 = HEAP32[12837]|0;
     $51 = (_compareChars($44,$49,$50,0)|0);
     $52 = ($51|0)!=(0);
     if ($52) {
      $0 = 1;
      $53 = $0;
      STACKTOP = sp;return ($53|0);
     } else {
      $0 = 0;
      $53 = $0;
      STACKTOP = sp;return ($53|0);
     }
    }
   }
   $0 = 0;
   $53 = $0;
   STACKTOP = sp;return ($53|0);
  }
 }
 $0 = 0;
 $53 = $0;
 STACKTOP = sp;return ($53|0);
}
function _checkEmphasisChange($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $4 = HEAP32[12805]|0;
 $5 = $2;
 $6 = (($5) + 1)|0;
 $7 = (($4) + ($6))|0;
 $3 = $7;
 while(1) {
  $8 = $3;
  $9 = HEAP32[12805]|0;
  $10 = HEAP32[12808]|0;
  $11 = ((($10)) + 24|0);
  $12 = HEAP16[$11>>1]|0;
  $13 = $12 << 16 >> 16;
  $14 = (($9) + ($13))|0;
  $15 = ($8|0)<($14|0);
  if (!($15)) {
   label = 7;
   break;
  }
  $16 = $3;
  $17 = HEAP32[12783]|0;
  $18 = (($17) + ($16<<2)|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = ($19|0)!=(0);
  if ($20) {
   label = 5;
   break;
  }
  $21 = $3;
  $22 = HEAP32[12784]|0;
  $23 = (($22) + ($21<<2)|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = ($24|0)!=(0);
  if ($25) {
   label = 5;
   break;
  }
  $26 = $3;
  $27 = (($26) + 1)|0;
  $3 = $27;
 }
 if ((label|0) == 5) {
  $1 = 1;
  $28 = $1;
  STACKTOP = sp;return ($28|0);
 }
 else if ((label|0) == 7) {
  $1 = 0;
  $28 = $1;
  STACKTOP = sp;return ($28|0);
 }
 return (0)|0;
}
function _syllableBreak() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $1 = 0;
 $2 = 0;
 $3 = 0;
 $4 = 0;
 $5 = 0;
 $6 = HEAP32[12805]|0;
 $1 = $6;
 while(1) {
  $7 = $1;
  $8 = ($7|0)>=(0);
  if (!($8)) {
   break;
  }
  $9 = $1;
  $10 = HEAP32[12777]|0;
  $11 = (($10) + ($9<<2)|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = (_findCharOrDots($12,0)|0);
  $14 = ((($13)) + 12|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = $15 & 2;
  $17 = ($16|0)!=(0);
  $18 = $1;
  if (!($17)) {
   label = 4;
   break;
  }
  $20 = (($18) + -1)|0;
  $1 = $20;
 }
 if ((label|0) == 4) {
  $19 = (($18) + 1)|0;
  $1 = $19;
 }
 $21 = $1;
 $22 = ($21|0)<(0);
 if ($22) {
  $1 = 0;
 }
 $23 = HEAP32[12805]|0;
 $2 = $23;
 while(1) {
  $24 = $2;
  $25 = HEAP32[12778]|0;
  $26 = ($24|0)<($25|0);
  if (!($26)) {
   break;
  }
  $27 = $2;
  $28 = HEAP32[12777]|0;
  $29 = (($28) + ($27<<2)|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = (_findCharOrDots($30,0)|0);
  $32 = ((($31)) + 12|0);
  $33 = HEAP32[$32>>2]|0;
  $34 = $33 & 2;
  $35 = ($34|0)!=(0);
  $36 = $2;
  if (!($35)) {
   label = 11;
   break;
  }
  $38 = (($36) + 1)|0;
  $2 = $38;
 }
 if ((label|0) == 11) {
  $37 = (($36) + -1)|0;
  $2 = $37;
 }
 $39 = $2;
 $40 = HEAP32[12778]|0;
 $41 = ($39|0)==($40|0);
 if ($41) {
  $42 = $2;
  $43 = (($42) + -1)|0;
  $2 = $43;
 }
 $44 = $2;
 $45 = $1;
 $46 = (($44) - ($45))|0;
 $47 = (($46) + 1)|0;
 $3 = $47;
 $48 = $3;
 $49 = (($48) + 1)|0;
 $50 = (_calloc($49,1)|0);
 $5 = $50;
 $51 = $1;
 $52 = HEAP32[12777]|0;
 $53 = (($52) + ($51<<2)|0);
 $54 = $3;
 $55 = $5;
 $56 = (_hyphenate($53,$54,$55)|0);
 $57 = ($56|0)!=(0);
 if (!($57)) {
  $58 = $5;
  _free($58);
  $0 = 0;
  $81 = $0;
  STACKTOP = sp;return ($81|0);
 }
 $59 = HEAP32[12805]|0;
 $60 = $1;
 $61 = (($59) - ($60))|0;
 $62 = (($61) + 1)|0;
 $4 = $62;
 while(1) {
  $63 = $4;
  $64 = HEAP32[12805]|0;
  $65 = $1;
  $66 = (($64) - ($65))|0;
  $67 = HEAP32[12820]|0;
  $68 = (($66) + ($67))|0;
  $69 = ($63|0)<($68|0);
  if (!($69)) {
   label = 22;
   break;
  }
  $70 = $4;
  $71 = $5;
  $72 = (($71) + ($70)|0);
  $73 = HEAP8[$72>>0]|0;
  $74 = $73 << 24 >> 24;
  $75 = $74 & 1;
  $76 = ($75|0)!=(0);
  if ($76) {
   label = 20;
   break;
  }
  $78 = $4;
  $79 = (($78) + 1)|0;
  $4 = $79;
 }
 if ((label|0) == 20) {
  $77 = $5;
  _free($77);
  $0 = 1;
  $81 = $0;
  STACKTOP = sp;return ($81|0);
 }
 else if ((label|0) == 22) {
  $80 = $5;
  _free($80);
  $0 = 0;
  $81 = $0;
  STACKTOP = sp;return ($81|0);
 }
 return (0)|0;
}
function _onlyLettersBehind() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = HEAP32[12895]|0;
 $4 = $3 & 1;
 $5 = ($4|0)!=(0);
 do {
  if ($5) {
   $6 = HEAP32[12805]|0;
   $7 = (($6) - 2)|0;
   $1 = $7;
   while(1) {
    $8 = $1;
    $9 = ($8|0)>=(0);
    if (!($9)) {
     label = 10;
     break;
    }
    $10 = $1;
    $11 = HEAP32[12777]|0;
    $12 = (($11) + ($10<<2)|0);
    $13 = HEAP32[$12>>2]|0;
    $14 = (_findCharOrDots($13,0)|0);
    $15 = ((($14)) + 12|0);
    $16 = HEAP32[$15>>2]|0;
    $2 = $16;
    $17 = $2;
    $18 = $17 & 1;
    $19 = ($18|0)!=(0);
    if (!($19)) {
     break;
    }
    $23 = $1;
    $24 = (($23) + -1)|0;
    $1 = $24;
   }
   if ((label|0) == 10) {
    $0 = 1;
    break;
   }
   $20 = $2;
   $21 = $20 & 2;
   $22 = ($21|0)!=(0);
   if ($22) {
    $0 = 1;
    break;
   } else {
    $0 = 0;
    break;
   }
  } else {
   $0 = 0;
  }
 } while(0);
 $25 = $0;
 STACKTOP = sp;return ($25|0);
}
function _noCompbrlAhead() {
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $12 = HEAP32[12805]|0;
 $13 = HEAP32[12820]|0;
 $14 = (($12) + ($13))|0;
 $1 = $14;
 $15 = $1;
 $16 = HEAP32[12778]|0;
 $17 = ($15|0)>=($16|0);
 if ($17) {
  $0 = 1;
  $168 = $0;
  STACKTOP = sp;return ($168|0);
 }
 while(1) {
  $18 = $1;
  $19 = HEAP32[12778]|0;
  $20 = ($18|0)<($19|0);
  if ($20) {
   $21 = $1;
   $22 = HEAP32[12777]|0;
   $23 = (($22) + ($21<<2)|0);
   $24 = HEAP32[$23>>2]|0;
   $25 = (_checkAttr($24,1,0)|0);
   $26 = ($25|0)!=(0);
   $169 = $26;
  } else {
   $169 = 0;
  }
  $27 = $1;
  if (!($169)) {
   break;
  }
  $28 = (($27) + 1)|0;
  $1 = $28;
 }
 $29 = HEAP32[12778]|0;
 $30 = ($27|0)==($29|0);
 do {
  if (!($30)) {
   $31 = HEAP32[12807]|0;
   $32 = ($31|0)==(90);
   if ($32) {
    $33 = $1;
    $34 = HEAP32[12777]|0;
    $35 = (($34) + ($33<<2)|0);
    $36 = HEAP32[$35>>2]|0;
    $37 = (_checkAttr($36,6,0)|0);
    $38 = ($37|0)!=(0);
    if (!($38)) {
     break;
    }
    $39 = $1;
    $40 = (($39) - 1)|0;
    $41 = HEAP32[12777]|0;
    $42 = (($41) + ($40<<2)|0);
    $43 = HEAP32[$42>>2]|0;
    $44 = (_checkAttr($43,1,0)|0);
    $45 = ($44|0)!=(0);
    if (!($45)) {
     break;
    }
   }
   $46 = $1;
   $2 = $46;
   while(1) {
    $47 = $2;
    $48 = HEAP32[12778]|0;
    $49 = ($47|0)<($48|0);
    if (!($49)) {
     break;
    }
    $50 = $2;
    $51 = HEAP32[12777]|0;
    $52 = (($51) + ($50<<2)|0);
    $53 = HEAP32[$52>>2]|0;
    $54 = (_checkAttr($53,1,0)|0);
    $55 = ($54|0)!=(0);
    $56 = $55 ^ 1;
    if (!($56)) {
     break;
    }
    $57 = $2;
    $58 = (($57) + 1)|0;
    $2 = $58;
   }
   $59 = HEAP32[12788]|0;
   $60 = $59 & 34;
   $61 = ($60|0)!=(0);
   if ($61) {
    $62 = HEAP32[12790]|0;
    $63 = $1;
    $64 = ($62|0)>=($63|0);
    if ($64) {
     $65 = HEAP32[12790]|0;
     $66 = $2;
     $67 = ($65|0)<($66|0);
     if ($67) {
      $0 = 0;
      $168 = $0;
      STACKTOP = sp;return ($168|0);
     }
    }
   }
   $68 = $1;
   $3 = $68;
   L28: while(1) {
    $69 = $3;
    $70 = $2;
    $71 = ($69|0)<($70|0);
    if (!($71)) {
     label = 42;
     break;
    }
    $72 = HEAP32[12778]|0;
    $73 = $3;
    $74 = (($72) - ($73))|0;
    $4 = $74;
    $75 = $3;
    $76 = HEAP32[12777]|0;
    $77 = (($76) + ($75<<2)|0);
    $78 = HEAP32[$77>>2]|0;
    $79 = (_findCharOrDots($78,0)|0);
    $6 = $79;
    $5 = 0;
    while(1) {
     $80 = $5;
     $81 = ($80|0)<(2);
     if (!($81)) {
      break;
     }
     $9 = 0;
     $11 = 0;
     $82 = $5;
     switch ($82|0) {
     case 0:  {
      $83 = $4;
      $84 = ($83|0)>=(2);
      if ($84) {
       $85 = $6;
       $86 = ((($85)) + 24|0);
       $87 = HEAP32[$86>>2]|0;
       $88 = $87 << 8;
       $11 = $88;
       $89 = $3;
       $90 = (($89) + 1)|0;
       $91 = HEAP32[12777]|0;
       $92 = (($91) + ($90<<2)|0);
       $93 = HEAP32[$92>>2]|0;
       $94 = (_findCharOrDots($93,0)|0);
       $7 = $94;
       $95 = $7;
       $96 = ((($95)) + 24|0);
       $97 = HEAP32[$96>>2]|0;
       $98 = $11;
       $99 = (($98) + ($97))|0;
       $11 = $99;
       $100 = $11;
       $101 = (($100>>>0) % 1123)&-1;
       $11 = $101;
       $102 = $11;
       $103 = HEAP32[12776]|0;
       $104 = ((($103)) + 22348|0);
       $105 = (($104) + ($102<<2)|0);
       $106 = HEAP32[$105>>2]|0;
       $9 = $106;
      }
      break;
     }
     case 1:  {
      $107 = $4;
      $108 = ($107|0)>=(1);
      if ($108) {
       $4 = 1;
       $109 = $6;
       $110 = ((($109)) + 8|0);
       $111 = HEAP32[$110>>2]|0;
       $9 = $111;
      }
      break;
     }
     default: {
     }
     }
     while(1) {
      $112 = $9;
      $113 = ($112|0)!=(0);
      if (!($113)) {
       break;
      }
      $114 = $9;
      $115 = HEAP32[12776]|0;
      $116 = ((($115)) + 31332|0);
      $117 = (($116) + ($114<<2)|0);
      $10 = $117;
      $8 = 0;
      while(1) {
       $118 = $8;
       $119 = $10;
       $120 = ((($119)) + 24|0);
       $121 = HEAP16[$120>>1]|0;
       $122 = $121 << 16 >> 16;
       $123 = ($118|0)<($122|0);
       if (!($123)) {
        break;
       }
       $124 = $8;
       $125 = $10;
       $126 = ((($125)) + 28|0);
       $127 = (($126) + ($124<<2)|0);
       $128 = HEAP32[$127>>2]|0;
       $129 = (_findCharOrDots($128,0)|0);
       $6 = $129;
       $130 = $3;
       $131 = $8;
       $132 = (($130) + ($131))|0;
       $133 = HEAP32[12777]|0;
       $134 = (($133) + ($132<<2)|0);
       $135 = HEAP32[$134>>2]|0;
       $136 = (_findCharOrDots($135,0)|0);
       $7 = $136;
       $137 = $6;
       $138 = ((($137)) + 24|0);
       $139 = HEAP32[$138>>2]|0;
       $140 = $7;
       $141 = ((($140)) + 24|0);
       $142 = HEAP32[$141>>2]|0;
       $143 = ($139|0)!=($142|0);
       if ($143) {
        break;
       }
       $144 = $8;
       $145 = (($144) + 1)|0;
       $8 = $145;
      }
      $146 = $5;
      $147 = ($146|0)==(1);
      if ($147) {
       label = 36;
      } else {
       $148 = $8;
       $149 = $10;
       $150 = ((($149)) + 24|0);
       $151 = HEAP16[$150>>1]|0;
       $152 = $151 << 16 >> 16;
       $153 = ($148|0)==($152|0);
       if ($153) {
        label = 36;
       }
      }
      if ((label|0) == 36) {
       label = 0;
       $154 = $10;
       $155 = ((($154)) + 20|0);
       $156 = HEAP32[$155>>2]|0;
       $157 = ($156|0)==(84);
       if ($157) {
        label = 38;
        break L28;
       }
       $158 = $10;
       $159 = ((($158)) + 20|0);
       $160 = HEAP32[$159>>2]|0;
       $161 = ($160|0)==(85);
       if ($161) {
        label = 38;
        break L28;
       }
      }
      $162 = $10;
      $163 = HEAP32[$162>>2]|0;
      $9 = $163;
     }
     $164 = $5;
     $165 = (($164) + 1)|0;
     $5 = $165;
    }
    $166 = $3;
    $167 = (($166) + 1)|0;
    $3 = $167;
   }
   if ((label|0) == 38) {
    $0 = 0;
    $168 = $0;
    STACKTOP = sp;return ($168|0);
   }
   else if ((label|0) == 42) {
    $0 = 1;
    $168 = $0;
    STACKTOP = sp;return ($168|0);
   }
  }
 } while(0);
 $0 = 1;
 $168 = $0;
 STACKTOP = sp;return ($168|0);
}
function _inSequence() {
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $12 = 0;
 var $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $5 = HEAP32[12805]|0;
 $6 = (($5) - 1)|0;
 $1 = $6;
 while(1) {
  $7 = $1;
  $8 = ($7|0)>=(0);
  if (!($8)) {
   break;
  }
  $9 = $1;
  $10 = HEAP32[12777]|0;
  $11 = (($10) + ($9<<2)|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = (_checkAttr($12,16384,0)|0);
  $14 = ($13|0)!=(0);
  $15 = $1;
  if (!($14)) {
   label = 4;
   break;
  }
  $21 = (($15) + -1)|0;
  $1 = $21;
 }
 if ((label|0) == 4) {
  $16 = HEAP32[12777]|0;
  $17 = (($16) + ($15<<2)|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = (_checkAttr($18,8193,0)|0);
  $20 = ($19|0)!=(0);
  if (!($20)) {
   $0 = 0;
   $114 = $0;
   STACKTOP = sp;return ($114|0);
  }
 }
 $22 = HEAP32[12805]|0;
 $23 = HEAP32[12808]|0;
 $24 = ((($23)) + 24|0);
 $25 = HEAP16[$24>>1]|0;
 $26 = $25 << 16 >> 16;
 $27 = (($22) + ($26))|0;
 $1 = $27;
 L10: while(1) {
  $28 = $1;
  $29 = HEAP32[12778]|0;
  $30 = ($28|0)<($29|0);
  if (!($30)) {
   break;
  }
  $31 = HEAP32[12776]|0;
  $32 = ((($31)) + 604|0);
  $33 = HEAP32[$32>>2]|0;
  $34 = ($33|0)!=(0);
  L13: do {
   if ($34) {
    $4 = 0;
    $35 = $1;
    $2 = $35;
    $3 = 0;
    L15: while(1) {
     $36 = $2;
     $37 = HEAP32[12778]|0;
     $38 = ($36|0)<=($37|0);
     if (!($38)) {
      break L13;
     }
     $39 = $3;
     $40 = HEAP32[12776]|0;
     $41 = ((($40)) + 604|0);
     $42 = HEAP32[$41>>2]|0;
     $43 = ($39|0)<($42|0);
     if (!($43)) {
      break L13;
     }
     $44 = $4;
     $45 = ($44|0)==(1);
     do {
      if ($45) {
       $46 = $3;
       $47 = HEAP32[12776]|0;
       $48 = ((($47)) + 48|0);
       $49 = (($48) + ($46<<2)|0);
       $50 = HEAP32[$49>>2]|0;
       $51 = ($50|0)!=(0);
       $52 = $2;
       if (!($51)) {
        break L15;
       }
       $53 = HEAP32[12777]|0;
       $54 = (($53) + ($52<<2)|0);
       $55 = HEAP32[$54>>2]|0;
       $56 = $3;
       $57 = HEAP32[12776]|0;
       $58 = ((($57)) + 48|0);
       $59 = (($58) + ($56<<2)|0);
       $60 = HEAP32[$59>>2]|0;
       $61 = ($55|0)==($60|0);
       if ($61) {
        $4 = 1;
        break;
       } else {
        $4 = -1;
        $62 = $1;
        $63 = (($62) - 1)|0;
        $2 = $63;
        break;
       }
      } else {
       $67 = $4;
       $68 = ($67|0)==(0);
       if (!($68)) {
        $87 = $4;
        $88 = ($87|0)==(-1);
        if (!($88)) {
         break;
        }
        $89 = $3;
        $90 = HEAP32[12776]|0;
        $91 = ((($90)) + 48|0);
        $92 = (($91) + ($89<<2)|0);
        $93 = HEAP32[$92>>2]|0;
        $94 = ($93|0)!=(0);
        if ($94) {
         break;
        }
        $4 = 0;
        $95 = $1;
        $96 = (($95) - 1)|0;
        $2 = $96;
        break;
       }
       $69 = $3;
       $70 = HEAP32[12776]|0;
       $71 = ((($70)) + 48|0);
       $72 = (($71) + ($69<<2)|0);
       $73 = HEAP32[$72>>2]|0;
       $74 = ($73|0)!=(0);
       if ($74) {
        $75 = $2;
        $76 = HEAP32[12777]|0;
        $77 = (($76) + ($75<<2)|0);
        $78 = HEAP32[$77>>2]|0;
        $79 = $3;
        $80 = HEAP32[12776]|0;
        $81 = ((($80)) + 48|0);
        $82 = (($81) + ($79<<2)|0);
        $83 = HEAP32[$82>>2]|0;
        $84 = ($78|0)==($83|0);
        if ($84) {
         $4 = 1;
         break;
        } else {
         $4 = -1;
         $85 = $1;
         $86 = (($85) - 1)|0;
         $2 = $86;
         break;
        }
       }
      }
     } while(0);
     $97 = $2;
     $98 = (($97) + 1)|0;
     $2 = $98;
     $99 = $3;
     $100 = (($99) + 1)|0;
     $3 = $100;
    }
    $64 = HEAP32[12778]|0;
    $65 = ($52|0)>=($64|0);
    if ($65) {
     label = 19;
     break L10;
    }
    $66 = $2;
    $1 = $66;
   }
  } while(0);
  $101 = $1;
  $102 = HEAP32[12777]|0;
  $103 = (($102) + ($101<<2)|0);
  $104 = HEAP32[$103>>2]|0;
  $105 = (_checkAttr($104,32768,0)|0);
  $106 = ($105|0)!=(0);
  $107 = $1;
  if (!($106)) {
   label = 31;
   break;
  }
  $113 = (($107) + 1)|0;
  $1 = $113;
 }
 if ((label|0) == 19) {
  $0 = 1;
  $114 = $0;
  STACKTOP = sp;return ($114|0);
 }
 if ((label|0) == 31) {
  $108 = HEAP32[12777]|0;
  $109 = (($108) + ($107<<2)|0);
  $110 = HEAP32[$109>>2]|0;
  $111 = (_checkAttr($110,8193,0)|0);
  $112 = ($111|0)!=(0);
  if (!($112)) {
   $0 = 0;
   $114 = $0;
   STACKTOP = sp;return ($114|0);
  }
 }
 $0 = 1;
 $114 = $0;
 STACKTOP = sp;return ($114|0);
}
function _onlyLettersAhead() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = HEAP32[12896]|0;
 $4 = $3 & 1;
 $5 = ($4|0)!=(0);
 do {
  if ($5) {
   $6 = HEAP32[12805]|0;
   $7 = HEAP32[12820]|0;
   $8 = (($6) + ($7))|0;
   $9 = (($8) + 1)|0;
   $1 = $9;
   while(1) {
    $10 = $1;
    $11 = HEAP32[12778]|0;
    $12 = ($10|0)<($11|0);
    if (!($12)) {
     label = 10;
     break;
    }
    $13 = $1;
    $14 = HEAP32[12777]|0;
    $15 = (($14) + ($13<<2)|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = (_findCharOrDots($16,0)|0);
    $18 = ((($17)) + 12|0);
    $19 = HEAP32[$18>>2]|0;
    $2 = $19;
    $20 = $2;
    $21 = $20 & 1;
    $22 = ($21|0)!=(0);
    if (!($22)) {
     break;
    }
    $26 = $1;
    $27 = (($26) + 1)|0;
    $1 = $27;
   }
   if ((label|0) == 10) {
    $0 = 0;
    break;
   }
   $23 = $2;
   $24 = $23 & 258;
   $25 = ($24|0)!=(0);
   if ($25) {
    $0 = 1;
    break;
   } else {
    $0 = 0;
    break;
   }
  } else {
   $0 = 0;
  }
 } while(0);
 $28 = $0;
 STACKTOP = sp;return ($28|0);
}
function _hyphenate($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $18 = HEAP32[12776]|0;
 $19 = ((($18)) + 1564|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = HEAP32[12776]|0;
 $22 = ((($21)) + 31332|0);
 $23 = (($22) + ($20<<2)|0);
 $13 = $23;
 $24 = HEAP32[12776]|0;
 $25 = ((($24)) + 1564|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = ($26|0)!=(0);
 if ($27) {
  $28 = $5;
  $29 = (($28) + 3)|0;
  $30 = ($29|0)>(2048);
  if (!($30)) {
   $31 = $5;
   $32 = (($31) + 3)|0;
   $33 = (_calloc($32,4)|0);
   $7 = $33;
   $34 = $7;
   HEAP32[$34>>2] = 46;
   $8 = 0;
   while(1) {
    $35 = $8;
    $36 = $5;
    $37 = ($35|0)<($36|0);
    if (!($37)) {
     break;
    }
    $38 = $8;
    $39 = $4;
    $40 = (($39) + ($38<<2)|0);
    $41 = HEAP32[$40>>2]|0;
    $42 = (_findCharOrDots($41,0)|0);
    $43 = ((($42)) + 24|0);
    $44 = HEAP32[$43>>2]|0;
    $45 = $8;
    $46 = (($45) + 1)|0;
    $47 = $7;
    $48 = (($47) + ($46<<2)|0);
    HEAP32[$48>>2] = $44;
    $49 = $8;
    $50 = $6;
    $51 = (($50) + ($49)|0);
    HEAP8[$51>>0] = 48;
    $52 = $8;
    $53 = (($52) + 1)|0;
    $8 = $53;
   }
   $54 = $5;
   $55 = (($54) + 1)|0;
   $56 = $7;
   $57 = (($56) + ($55<<2)|0);
   HEAP32[$57>>2] = 46;
   $11 = 0;
   $8 = 0;
   while(1) {
    $58 = $8;
    $59 = $5;
    $60 = (($59) + 2)|0;
    $61 = ($58|0)<($60|0);
    if (!($61)) {
     break;
    }
    $62 = $8;
    $63 = $7;
    $64 = (($63) + ($62<<2)|0);
    $65 = HEAP32[$64>>2]|0;
    $12 = $65;
    L11: while(1) {
     $66 = $11;
     $67 = ($66|0)==(65535);
     if ($67) {
      label = 11;
      break;
     }
     $68 = $11;
     $69 = $13;
     $70 = (($69) + ($68<<4)|0);
     $14 = $70;
     $71 = $14;
     $72 = HEAP32[$71>>2]|0;
     $73 = ($72|0)!=(0);
     L14: do {
      if ($73) {
       $74 = $14;
       $75 = HEAP32[$74>>2]|0;
       $76 = HEAP32[12776]|0;
       $77 = ((($76)) + 31332|0);
       $78 = (($77) + ($75<<2)|0);
       $15 = $78;
       $9 = 0;
       while(1) {
        $79 = $9;
        $80 = $14;
        $81 = ((($80)) + 12|0);
        $82 = HEAP32[$81>>2]|0;
        $83 = ($79>>>0)<($82>>>0);
        if (!($83)) {
         break L14;
        }
        $84 = $9;
        $85 = $15;
        $86 = (($85) + ($84<<3)|0);
        $87 = HEAP32[$86>>2]|0;
        $88 = $12;
        $89 = ($87|0)==($88|0);
        $90 = $9;
        if ($89) {
         label = 16;
         break L11;
        }
        $102 = (($90) + 1)|0;
        $9 = $102;
       }
      }
     } while(0);
     $103 = $14;
     $104 = ((($103)) + 8|0);
     $105 = HEAP32[$104>>2]|0;
     $11 = $105;
    }
    L21: do {
     if ((label|0) == 11) {
      label = 0;
      $11 = 0;
     }
     else if ((label|0) == 16) {
      label = 0;
      $91 = $15;
      $92 = (($91) + ($90<<3)|0);
      $93 = ((($92)) + 4|0);
      $94 = HEAP32[$93>>2]|0;
      $11 = $94;
      $95 = $11;
      $96 = $13;
      $97 = (($96) + ($95<<4)|0);
      $14 = $97;
      $98 = $14;
      $99 = ((($98)) + 4|0);
      $100 = HEAP32[$99>>2]|0;
      $101 = ($100|0)!=(0);
      if ($101) {
       $106 = $14;
       $107 = ((($106)) + 4|0);
       $108 = HEAP32[$107>>2]|0;
       $109 = HEAP32[12776]|0;
       $110 = ((($109)) + 31332|0);
       $111 = (($110) + ($108<<2)|0);
       $16 = $111;
       $112 = $8;
       $113 = (($112) + 1)|0;
       $114 = $16;
       $115 = (_strlen($114)|0);
       $116 = (($113) - ($115))|0;
       $17 = $116;
       $117 = $16;
       $118 = (_strlen($117)|0);
       $119 = $5;
       $120 = $17;
       $121 = (($119) - ($120))|0;
       $122 = ($118|0)<($121|0);
       if ($122) {
        $123 = $16;
        $124 = (_strlen($123)|0);
        $128 = $124;
       } else {
        $125 = $5;
        $126 = $17;
        $127 = (($125) - ($126))|0;
        $128 = $127;
       }
       $10 = $128;
       $9 = 0;
       while(1) {
        $129 = $9;
        $130 = $10;
        $131 = ($129|0)<($130|0);
        if (!($131)) {
         break L21;
        }
        $132 = $17;
        $133 = $9;
        $134 = (($132) + ($133))|0;
        $135 = $6;
        $136 = (($135) + ($134)|0);
        $137 = HEAP8[$136>>0]|0;
        $138 = $137 << 24 >> 24;
        $139 = $9;
        $140 = $16;
        $141 = (($140) + ($139)|0);
        $142 = HEAP8[$141>>0]|0;
        $143 = $142 << 24 >> 24;
        $144 = ($138|0)<($143|0);
        if ($144) {
         $145 = $9;
         $146 = $16;
         $147 = (($146) + ($145)|0);
         $148 = HEAP8[$147>>0]|0;
         $149 = $17;
         $150 = $9;
         $151 = (($149) + ($150))|0;
         $152 = $6;
         $153 = (($152) + ($151)|0);
         HEAP8[$153>>0] = $148;
        }
        $154 = $9;
        $155 = (($154) + 1)|0;
        $9 = $155;
       }
      }
     }
    } while(0);
    $156 = $8;
    $157 = (($156) + 1)|0;
    $8 = $157;
   }
   $158 = $5;
   $159 = $6;
   $160 = (($159) + ($158)|0);
   HEAP8[$160>>0] = 0;
   $161 = $7;
   _free($161);
   $3 = 1;
   $162 = $3;
   STACKTOP = sp;return ($162|0);
  }
 }
 $3 = 0;
 $162 = $3;
 STACKTOP = sp;return ($162|0);
}
function _checkAttr_safe($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $8 = $5;
 $9 = HEAP32[12778]|0;
 $10 = ($8|0)<($9|0);
 if (!($10)) {
  $18 = 0;
  STACKTOP = sp;return ($18|0);
 }
 $11 = $5;
 $12 = $4;
 $13 = (($12) + ($11<<2)|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = $6;
 $16 = $7;
 $17 = (_checkAttr($14,$15,$16)|0);
 $18 = $17;
 STACKTOP = sp;return ($18|0);
}
function _resolveEmphasisWords($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = $4;
 $10 = 0;
 $11 = 0;
 $12 = -1;
 $13 = 0;
 $15 = 0;
 while(1) {
  $16 = $15;
  $17 = HEAP32[12778]|0;
  $18 = ($16|0)<($17|0);
  if (!($18)) {
   break;
  }
  $19 = $15;
  $20 = HEAP32[12782]|0;
  $21 = (($20) + ($19<<2)|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = $22 & -9;
  HEAP32[$21>>2] = $23;
  $24 = $11;
  $25 = ($24|0)!=(0);
  if (!($25)) {
   $26 = $15;
   $27 = $5;
   $28 = (($27) + ($26<<2)|0);
   $29 = HEAP32[$28>>2]|0;
   $30 = $6;
   $31 = $29 & $30;
   $32 = ($31|0)!=(0);
   if ($32) {
    $11 = 1;
    $33 = $6;
    $34 = $33 ^ -1;
    $35 = $15;
    $36 = $5;
    $37 = (($36) + ($35<<2)|0);
    $38 = HEAP32[$37>>2]|0;
    $39 = $38 & $34;
    HEAP32[$37>>2] = $39;
    $40 = $10;
    $41 = ($40|0)!=(0);
    if ($41) {
     $42 = $15;
     $12 = $42;
     $13 = 0;
    }
    $43 = $15;
    $44 = HEAP32[12782]|0;
    $45 = (($44) + ($43<<2)|0);
    $46 = HEAP32[$45>>2]|0;
    $47 = $46 & 1;
    $48 = ($47|0)!=(0);
    if (!($48)) {
     $12 = -1;
    }
   }
  }
  $49 = $11;
  $50 = ($49|0)!=(0);
  if ($50) {
   $51 = $15;
   $52 = $5;
   $53 = (($52) + ($51<<2)|0);
   $54 = HEAP32[$53>>2]|0;
   $55 = $7;
   $56 = $54 & $55;
   $57 = ($56|0)!=(0);
   if ($57) {
    $11 = 0;
    $58 = $7;
    $59 = $58 ^ -1;
    $60 = $15;
    $61 = $5;
    $62 = (($61) + ($60<<2)|0);
    $63 = HEAP32[$62>>2]|0;
    $64 = $63 & $59;
    HEAP32[$62>>2] = $64;
    $65 = $10;
    $66 = ($65|0)!=(0);
    $67 = $12;
    $68 = ($67|0)>=(0);
    $or$cond = $66 & $68;
    if ($or$cond) {
     $69 = $7;
     $70 = $8;
     $71 = $69 | $70;
     $14 = $71;
     $72 = $15;
     $73 = HEAP32[12782]|0;
     $74 = (($73) + ($72<<2)|0);
     $75 = HEAP32[$74>>2]|0;
     $76 = $75 & 1;
     $77 = ($76|0)!=(0);
     if ($77) {
      $13 = 0;
     } else {
      $14 = 0;
     }
     $78 = $9;
     $79 = ($78|0)!=(0);
     if ($79) {
      $80 = $12;
      $81 = (($80) + 1)|0;
      $82 = $15;
      $83 = ($81|0)==($82|0);
      if ($83) {
       $84 = $9;
       $85 = $12;
       $86 = $5;
       $87 = (($86) + ($85<<2)|0);
       $88 = HEAP32[$87>>2]|0;
       $89 = $88 | $84;
       HEAP32[$87>>2] = $89;
      } else {
       label = 18;
      }
     } else {
      label = 18;
     }
     if ((label|0) == 18) {
      label = 0;
      $90 = $8;
      $91 = $12;
      $92 = $5;
      $93 = (($92) + ($91<<2)|0);
      $94 = HEAP32[$93>>2]|0;
      $95 = $94 | $90;
      HEAP32[$93>>2] = $95;
      $96 = $14;
      $97 = $15;
      $98 = $5;
      $99 = (($98) + ($97<<2)|0);
      $100 = HEAP32[$99>>2]|0;
      $101 = $100 | $96;
      HEAP32[$99>>2] = $101;
     }
     $102 = $13;
     $103 = $12;
     $104 = HEAP32[12782]|0;
     $105 = (($104) + ($103<<2)|0);
     $106 = HEAP32[$105>>2]|0;
     $107 = $106 | $102;
     HEAP32[$105>>2] = $107;
    }
   }
  }
  $108 = $10;
  $109 = ($108|0)!=(0);
  if (!($109)) {
   $110 = $15;
   $111 = HEAP32[12782]|0;
   $112 = (($111) + ($110<<2)|0);
   $113 = HEAP32[$112>>2]|0;
   $114 = $113 & 1;
   $115 = ($114|0)!=(0);
   if ($115) {
    $10 = 1;
    $116 = $11;
    $117 = ($116|0)!=(0);
    if ($117) {
     $13 = 8;
     $118 = $15;
     $12 = $118;
    }
   }
  }
  $119 = $10;
  $120 = ($119|0)!=(0);
  if ($120) {
   $121 = $15;
   $122 = HEAP32[12782]|0;
   $123 = (($122) + ($121<<2)|0);
   $124 = HEAP32[$123>>2]|0;
   $125 = $124 & 1;
   $126 = ($125|0)!=(0);
   if (!($126)) {
    $127 = $11;
    $128 = ($127|0)!=(0);
    $129 = $12;
    $130 = ($129|0)>=(0);
    $or$cond3 = $128 & $130;
    if ($or$cond3) {
     $131 = $9;
     $132 = ($131|0)!=(0);
     if ($132) {
      $133 = $12;
      $134 = (($133) + 1)|0;
      $135 = $15;
      $136 = ($134|0)==($135|0);
      if ($136) {
       $137 = $9;
       $138 = $12;
       $139 = $5;
       $140 = (($139) + ($138<<2)|0);
       $141 = HEAP32[$140>>2]|0;
       $142 = $141 | $137;
       HEAP32[$140>>2] = $142;
      } else {
       label = 30;
      }
     } else {
      label = 30;
     }
     if ((label|0) == 30) {
      label = 0;
      $143 = $8;
      $144 = $12;
      $145 = $5;
      $146 = (($145) + ($144<<2)|0);
      $147 = HEAP32[$146>>2]|0;
      $148 = $147 | $143;
      HEAP32[$146>>2] = $148;
     }
     $149 = $13;
     $150 = $12;
     $151 = HEAP32[12782]|0;
     $152 = (($151) + ($150<<2)|0);
     $153 = HEAP32[$152>>2]|0;
     $154 = $153 | $149;
     HEAP32[$152>>2] = $154;
    }
    $10 = 0;
    $13 = 0;
    $12 = -1;
   }
  }
  $155 = $15;
  $156 = (($155) + 1)|0;
  $15 = $156;
 }
 $157 = $11;
 $158 = ($157|0)!=(0);
 if (!($158)) {
  STACKTOP = sp;return;
 }
 $159 = $7;
 $160 = $159 ^ -1;
 $161 = $15;
 $162 = $5;
 $163 = (($162) + ($161<<2)|0);
 $164 = HEAP32[$163>>2]|0;
 $165 = $164 & $160;
 HEAP32[$163>>2] = $165;
 $166 = $10;
 $167 = ($166|0)!=(0);
 $168 = $12;
 $169 = ($168|0)>=(0);
 $or$cond5 = $167 & $169;
 if (!($or$cond5)) {
  STACKTOP = sp;return;
 }
 $170 = $9;
 $171 = ($170|0)!=(0);
 if ($171) {
  $172 = $12;
  $173 = (($172) + 1)|0;
  $174 = $15;
  $175 = ($173|0)==($174|0);
  if ($175) {
   $176 = $9;
   $177 = $12;
   $178 = $5;
   $179 = (($178) + ($177<<2)|0);
   $180 = HEAP32[$179>>2]|0;
   $181 = $180 | $176;
   HEAP32[$179>>2] = $181;
  } else {
   label = 39;
  }
 } else {
  label = 39;
 }
 if ((label|0) == 39) {
  $182 = $8;
  $183 = $12;
  $184 = $5;
  $185 = (($184) + ($183<<2)|0);
  $186 = HEAP32[$185>>2]|0;
  $187 = $186 | $182;
  HEAP32[$185>>2] = $187;
 }
 $188 = $13;
 $189 = $12;
 $190 = HEAP32[12782]|0;
 $191 = (($190) + ($189<<2)|0);
 $192 = HEAP32[$191>>2]|0;
 $193 = $192 | $188;
 HEAP32[$191>>2] = $193;
 STACKTOP = sp;return;
}
function _resolveEmphasisPassages($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $11 = $5;
 $12 = 0;
 $13 = -1;
 $14 = -1;
 $15 = -1;
 $16 = 0;
 $17 = 0;
 $18 = 0;
 while(1) {
  $19 = $18;
  $20 = HEAP32[12778]|0;
  $21 = ($19|0)<($20|0);
  if (!($21)) {
   break;
  }
  $22 = $16;
  $23 = ($22|0)!=(0);
  do {
   if ($23) {
    label = 14;
   } else {
    $24 = $18;
    $25 = HEAP32[12782]|0;
    $26 = (($25) + ($24<<2)|0);
    $27 = HEAP32[$26>>2]|0;
    $28 = $27 & 1;
    $29 = ($28|0)!=(0);
    if ($29) {
     $16 = 1;
     $30 = $18;
     $31 = HEAP32[12782]|0;
     $32 = (($31) + ($30<<2)|0);
     $33 = HEAP32[$32>>2]|0;
     $34 = $33 & 8;
     $35 = ($34|0)!=(0);
     $36 = $17;
     $37 = ($36|0)!=(0);
     if ($35) {
      if ($37) {
       $39 = $12;
       $40 = (($39) + 1)|0;
       $12 = $40;
      } else {
       $17 = 1;
       $38 = $18;
       $13 = $38;
       $14 = -1;
       $12 = 1;
      }
      $41 = $18;
      $15 = $41;
      break;
     } else {
      if (!($37)) {
       label = 14;
       break;
      }
      $42 = $12;
      $43 = $7;
      $44 = HEAP32[12776]|0;
      $45 = ((($44)) + 1124|0);
      $46 = (($45) + (($43*36)|0)|0);
      $47 = ((($46)) + 32|0);
      $48 = HEAP32[$47>>2]|0;
      $49 = ($42>>>0)>=($48>>>0);
      $50 = $14;
      $51 = ($50|0)>=(0);
      $or$cond = $49 & $51;
      if ($or$cond) {
       $52 = $13;
       $53 = $14;
       $54 = $15;
       $55 = $6;
       $56 = $7;
       $57 = $8;
       $58 = $9;
       $59 = $10;
       $60 = $11;
       _convertToPassage($52,$53,$54,$55,$56,$57,$58,$59,$60);
      }
      $17 = 0;
      label = 14;
      break;
     }
    } else {
     label = 14;
    }
   }
  } while(0);
  do {
   if ((label|0) == 14) {
    label = 0;
    $61 = $16;
    $62 = ($61|0)!=(0);
    if ($62) {
     $63 = $18;
     $64 = HEAP32[12782]|0;
     $65 = (($64) + ($63<<2)|0);
     $66 = HEAP32[$65>>2]|0;
     $67 = $66 & 1;
     $68 = ($67|0)!=(0);
     if (!($68)) {
      $16 = 0;
      $69 = $17;
      $70 = ($69|0)!=(0);
      if ($70) {
       $71 = $18;
       $14 = $71;
      }
     }
    }
    $72 = $17;
    $73 = ($72|0)!=(0);
    if ($73) {
     $74 = $18;
     $75 = $6;
     $76 = (($75) + ($74<<2)|0);
     $77 = HEAP32[$76>>2]|0;
     $78 = $8;
     $79 = $77 & $78;
     $80 = ($79|0)!=(0);
     if (!($80)) {
      $81 = $18;
      $82 = $6;
      $83 = (($82) + ($81<<2)|0);
      $84 = HEAP32[$83>>2]|0;
      $85 = $9;
      $86 = $84 & $85;
      $87 = ($86|0)!=(0);
      if (!($87)) {
       $88 = $18;
       $89 = $6;
       $90 = (($89) + ($88<<2)|0);
       $91 = HEAP32[$90>>2]|0;
       $92 = $10;
       $93 = $91 & $92;
       $94 = ($93|0)!=(0);
       if (!($94)) {
        $95 = $18;
        $96 = $6;
        $97 = (($96) + ($95<<2)|0);
        $98 = HEAP32[$97>>2]|0;
        $99 = $11;
        $100 = $98 & $99;
        $101 = ($100|0)!=(0);
        if (!($101)) {
         break;
        }
       }
      }
     }
     $102 = $12;
     $103 = $7;
     $104 = HEAP32[12776]|0;
     $105 = ((($104)) + 1124|0);
     $106 = (($105) + (($103*36)|0)|0);
     $107 = ((($106)) + 32|0);
     $108 = HEAP32[$107>>2]|0;
     $109 = ($102>>>0)>=($108>>>0);
     $110 = $14;
     $111 = ($110|0)>=(0);
     $or$cond3 = $109 & $111;
     if ($or$cond3) {
      $112 = $13;
      $113 = $14;
      $114 = $15;
      $115 = $6;
      $116 = $7;
      $117 = $8;
      $118 = $9;
      $119 = $10;
      $120 = $11;
      _convertToPassage($112,$113,$114,$115,$116,$117,$118,$119,$120);
     }
     $17 = 0;
    }
   }
  } while(0);
  $121 = $18;
  $122 = (($121) + 1)|0;
  $18 = $122;
 }
 $123 = $17;
 $124 = ($123|0)!=(0);
 if (!($124)) {
  STACKTOP = sp;return;
 }
 $125 = $12;
 $126 = $7;
 $127 = HEAP32[12776]|0;
 $128 = ((($127)) + 1124|0);
 $129 = (($128) + (($126*36)|0)|0);
 $130 = ((($129)) + 32|0);
 $131 = HEAP32[$130>>2]|0;
 $132 = ($125>>>0)>=($131>>>0);
 $133 = $14;
 $134 = ($133|0)>=(0);
 $or$cond5 = $132 & $134;
 if (!($or$cond5)) {
  STACKTOP = sp;return;
 }
 $135 = $16;
 $136 = ($135|0)!=(0);
 $137 = $13;
 if ($136) {
  $138 = $18;
  $139 = $15;
  $140 = $6;
  $141 = $7;
  $142 = $8;
  $143 = $9;
  $144 = $10;
  $145 = $11;
  _convertToPassage($137,$138,$139,$140,$141,$142,$143,$144,$145);
  STACKTOP = sp;return;
 } else {
  $146 = $14;
  $147 = $15;
  $148 = $6;
  $149 = $7;
  $150 = $8;
  $151 = $9;
  $152 = $10;
  $153 = $11;
  _convertToPassage($137,$146,$147,$148,$149,$150,$151,$152,$153);
  STACKTOP = sp;return;
 }
}
function _resolveEmphasisResets($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0;
 var $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0;
 var $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0;
 var $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0;
 var $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0;
 var $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0;
 var $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0;
 var $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0;
 var $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = $4;
 $10 = 0;
 $11 = 0;
 $12 = -1;
 $13 = 0;
 $14 = -1;
 $15 = 0;
 $16 = 0;
 while(1) {
  $18 = $16;
  $19 = HEAP32[12778]|0;
  $20 = ($18|0)<($19|0);
  if (!($20)) {
   break;
  }
  $21 = $11;
  $22 = ($21|0)!=(0);
  if ($22) {
   $23 = $16;
   $24 = $5;
   $25 = (($24) + ($23<<2)|0);
   $26 = HEAP32[$25>>2]|0;
   $27 = $7;
   $28 = $26 & $27;
   $29 = ($28|0)!=(0);
   if ($29) {
    $11 = 0;
   }
  }
  $30 = $11;
  $31 = ($30|0)!=(0);
  L8: do {
   if (!($31)) {
    $32 = $16;
    $33 = $5;
    $34 = (($33) + ($32<<2)|0);
    $35 = HEAP32[$34>>2]|0;
    $36 = $6;
    $37 = $35 & $36;
    $38 = ($37|0)!=(0);
    if ($38) {
     $11 = 1;
     break;
    }
    $39 = $10;
    $40 = ($39|0)!=(0);
    do {
     if (!($40)) {
      $41 = $16;
      $42 = $5;
      $43 = (($42) + ($41<<2)|0);
      $44 = HEAP32[$43>>2]|0;
      $45 = $8;
      $46 = $44 & $45;
      $47 = ($46|0)!=(0);
      $48 = $16;
      if (!($47)) {
       $111 = $5;
       $112 = (($111) + ($48<<2)|0);
       $113 = HEAP32[$112>>2]|0;
       $114 = $9;
       $115 = $113 & $114;
       $116 = ($115|0)!=(0);
       if (!($116)) {
        break;
       }
       $117 = $16;
       $118 = HEAP32[12782]|0;
       $119 = (($118) + ($117<<2)|0);
       $120 = HEAP32[$119>>2]|0;
       $121 = $120 & 2;
       $122 = ($121|0)!=(0);
       if (!($122)) {
        $123 = $16;
        $124 = HEAP32[12777]|0;
        $125 = (($124) + ($123<<2)|0);
        $126 = HEAP32[$125>>2]|0;
        $127 = (_checkAttr($126,2,0)|0);
        $128 = ($127|0)!=(0);
        if ($128) {
         break;
        }
       }
       $129 = $9;
       $130 = $129 ^ -1;
       $131 = $16;
       $132 = $5;
       $133 = (($132) + ($131<<2)|0);
       $134 = HEAP32[$133>>2]|0;
       $135 = $134 & $130;
       HEAP32[$133>>2] = $135;
       break;
      }
      $49 = HEAP32[12782]|0;
      $50 = (($49) + ($48<<2)|0);
      $51 = HEAP32[$50>>2]|0;
      $52 = $51 & 2;
      $53 = ($52|0)!=(0);
      if (!($53)) {
       $54 = $16;
       $55 = HEAP32[12777]|0;
       $56 = (($55) + ($54<<2)|0);
       $57 = HEAP32[$56>>2]|0;
       $58 = (_checkAttr($57,2,0)|0);
       $59 = ($58|0)!=(0);
       if ($59) {
        $10 = 1;
        $110 = $16;
        $12 = $110;
        $15 = 0;
        $13 = 0;
        break;
       }
      }
      $60 = $16;
      $61 = (($60) + 1)|0;
      $62 = HEAP32[12782]|0;
      $63 = (($62) + ($61<<2)|0);
      $64 = HEAP32[$63>>2]|0;
      $65 = $64 & 1;
      $66 = ($65|0)!=(0);
      if ($66) {
       $67 = $8;
       $68 = $16;
       $69 = (($68) + 1)|0;
       $70 = $5;
       $71 = (($70) + ($69<<2)|0);
       $72 = HEAP32[$71>>2]|0;
       $73 = $72 | $67;
       HEAP32[$71>>2] = $73;
       $74 = $16;
       $75 = HEAP32[12782]|0;
       $76 = (($75) + ($74<<2)|0);
       $77 = HEAP32[$76>>2]|0;
       $78 = $77 & 8;
       $79 = ($78|0)!=(0);
       if ($79) {
        $80 = $16;
        $81 = (($80) + 1)|0;
        $82 = HEAP32[12782]|0;
        $83 = (($82) + ($81<<2)|0);
        $84 = HEAP32[$83>>2]|0;
        $85 = $84 | 8;
        HEAP32[$83>>2] = $85;
       }
      }
      $86 = $8;
      $87 = $86 ^ -1;
      $88 = $16;
      $89 = $5;
      $90 = (($89) + ($88<<2)|0);
      $91 = HEAP32[$90>>2]|0;
      $92 = $91 & $87;
      HEAP32[$90>>2] = $92;
      $93 = $16;
      $94 = HEAP32[12782]|0;
      $95 = (($94) + ($93<<2)|0);
      $96 = HEAP32[$95>>2]|0;
      $97 = $96 & -9;
      HEAP32[$95>>2] = $97;
      $98 = $16;
      $99 = HEAP32[12777]|0;
      $100 = (($99) + ($98<<2)|0);
      $101 = HEAP32[$100>>2]|0;
      $102 = (_checkAttr($101,2,0)|0);
      $103 = ($102|0)!=(0);
      if (!($103)) {
       break L8;
      }
      $104 = $9;
      $105 = $16;
      $106 = $5;
      $107 = (($106) + ($105<<2)|0);
      $108 = HEAP32[$107>>2]|0;
      $109 = $108 | $104;
      HEAP32[$107>>2] = $109;
      break L8;
     }
    } while(0);
    $136 = $10;
    $137 = ($136|0)!=(0);
    if ($137) {
     $138 = $16;
     $139 = HEAP32[12782]|0;
     $140 = (($139) + ($138<<2)|0);
     $141 = HEAP32[$140>>2]|0;
     $142 = $141 & 1;
     $143 = ($142|0)!=(0);
     do {
      if ($143) {
       $144 = $16;
       $145 = $5;
       $146 = (($145) + ($144<<2)|0);
       $147 = HEAP32[$146>>2]|0;
       $148 = $8;
       $149 = $147 & $148;
       $150 = ($149|0)!=(0);
       if ($150) {
        $151 = $16;
        $152 = $5;
        $153 = (($152) + ($151<<2)|0);
        $154 = HEAP32[$153>>2]|0;
        $155 = $7;
        $156 = $154 & $155;
        $157 = ($156|0)!=(0);
        if ($157) {
         break;
        }
       }
       $229 = $16;
       $230 = HEAP32[12782]|0;
       $231 = (($230) + ($229<<2)|0);
       $232 = HEAP32[$231>>2]|0;
       $233 = $232 & 2;
       $234 = ($233|0)!=(0);
       if (!($234)) {
        $235 = $16;
        $236 = HEAP32[12777]|0;
        $237 = (($236) + ($235<<2)|0);
        $238 = HEAP32[$237>>2]|0;
        $239 = (_checkAttr($238,2,0)|0);
        $240 = ($239|0)!=(0);
        if ($240) {
         $304 = $13;
         $305 = ($304|0)!=(0);
         if ($305) {
          $13 = 0;
          $306 = $16;
          $12 = $306;
          $15 = 0;
          $307 = $8;
          $308 = $16;
          $309 = $5;
          $310 = (($309) + ($308<<2)|0);
          $311 = HEAP32[$310>>2]|0;
          $312 = $311 | $307;
          HEAP32[$310>>2] = $312;
         }
         $313 = $15;
         $314 = (($313) + 1)|0;
         $15 = $314;
         break L8;
        }
       }
       $241 = $16;
       $242 = HEAP32[12777]|0;
       $243 = (($242) + ($241<<2)|0);
       $244 = HEAP32[$243>>2]|0;
       $245 = (_checkAttr($244,2,0)|0);
       $246 = ($245|0)!=(0);
       if (!($246)) {
        $247 = $16;
        $248 = HEAP32[12777]|0;
        $249 = (($248) + ($247<<2)|0);
        $250 = HEAP32[$249>>2]|0;
        $251 = (_checkAttr($250,16777216,0)|0);
        $252 = ($251|0)!=(0);
        if ($252) {
         $253 = $16;
         $14 = $253;
         break L8;
        }
        $254 = $14;
        $255 = ($254|0)>=(0);
        if ($255) {
         $256 = $14;
         $17 = $256;
         while(1) {
          $257 = $17;
          $258 = $16;
          $259 = ($257|0)<($258|0);
          if (!($259)) {
           break;
          }
          $260 = $8;
          $261 = $260 ^ -1;
          $262 = $17;
          $263 = $5;
          $264 = (($263) + ($262<<2)|0);
          $265 = HEAP32[$264>>2]|0;
          $266 = $265 & $261;
          HEAP32[$264>>2] = $266;
          $267 = $17;
          $268 = (($267) + 1)|0;
          $17 = $268;
         }
         $14 = -1;
        }
       }
       $269 = $9;
       $270 = ($269|0)!=(0);
       $271 = $15;
       $272 = ($271|0)==(1);
       $or$cond3 = $270 & $272;
       if ($or$cond3) {
        $273 = $9;
        $274 = $12;
        $275 = $5;
        $276 = (($275) + ($274<<2)|0);
        $277 = HEAP32[$276>>2]|0;
        $278 = $277 | $273;
        HEAP32[$276>>2] = $278;
        $279 = $8;
        $280 = $279 ^ -1;
        $281 = $12;
        $282 = $5;
        $283 = (($282) + ($281<<2)|0);
        $284 = HEAP32[$283>>2]|0;
        $285 = $284 & $280;
        HEAP32[$283>>2] = $285;
        $286 = $12;
        $287 = HEAP32[12782]|0;
        $288 = (($287) + ($286<<2)|0);
        $289 = HEAP32[$288>>2]|0;
        $290 = $289 & -9;
        HEAP32[$288>>2] = $290;
       }
       $291 = $16;
       $292 = HEAP32[12777]|0;
       $293 = (($292) + ($291<<2)|0);
       $294 = HEAP32[$293>>2]|0;
       $295 = (_checkAttr($294,2,0)|0);
       $296 = ($295|0)!=(0);
       if ($296) {
        $13 = 0;
        $297 = $16;
        $12 = $297;
        $15 = 1;
        $298 = $8;
        $299 = $16;
        $300 = $5;
        $301 = (($300) + ($299<<2)|0);
        $302 = HEAP32[$301>>2]|0;
        $303 = $302 | $298;
        HEAP32[$301>>2] = $303;
        break L8;
       } else {
        $13 = 1;
        break L8;
       }
      }
     } while(0);
     $10 = 0;
     $158 = $9;
     $159 = ($158|0)!=(0);
     $160 = $15;
     $161 = ($160|0)==(1);
     $or$cond = $159 & $161;
     if ($or$cond) {
      $162 = $9;
      $163 = $12;
      $164 = $5;
      $165 = (($164) + ($163<<2)|0);
      $166 = HEAP32[$165>>2]|0;
      $167 = $166 | $162;
      HEAP32[$165>>2] = $167;
      $168 = $8;
      $169 = $168 ^ -1;
      $170 = $12;
      $171 = $5;
      $172 = (($171) + ($170<<2)|0);
      $173 = HEAP32[$172>>2]|0;
      $174 = $173 & $169;
      HEAP32[$172>>2] = $174;
      $175 = $12;
      $176 = HEAP32[12782]|0;
      $177 = (($176) + ($175<<2)|0);
      $178 = HEAP32[$177>>2]|0;
      $179 = $178 & -9;
      HEAP32[$177>>2] = $179;
      $180 = $7;
      $181 = $8;
      $182 = $180 | $181;
      $183 = $182 ^ -1;
      $184 = $16;
      $185 = $5;
      $186 = (($185) + ($184<<2)|0);
      $187 = HEAP32[$186>>2]|0;
      $188 = $187 & $183;
      HEAP32[$186>>2] = $188;
     }
     $189 = $13;
     $190 = ($189|0)!=(0);
     if ($190) {
      label = 32;
     } else {
      $191 = $16;
      $192 = HEAP32[12782]|0;
      $193 = (($192) + ($191<<2)|0);
      $194 = HEAP32[$193>>2]|0;
      $195 = $194 & 2;
      $196 = ($195|0)!=(0);
      if ($196) {
       label = 32;
      } else {
       $197 = $16;
       $198 = HEAP32[12777]|0;
       $199 = (($198) + ($197<<2)|0);
       $200 = HEAP32[$199>>2]|0;
       $201 = (_checkAttr($200,2,0)|0);
       $202 = ($201|0)!=(0);
       if (!($202)) {
        label = 32;
       }
      }
     }
     if ((label|0) == 32) {
      label = 0;
      $203 = $7;
      $204 = $8;
      $205 = $203 | $204;
      $206 = $205 ^ -1;
      $207 = $16;
      $208 = $5;
      $209 = (($208) + ($207<<2)|0);
      $210 = HEAP32[$209>>2]|0;
      $211 = $210 & $206;
      HEAP32[$209>>2] = $211;
     }
     $212 = $16;
     $213 = $12;
     $214 = ($212|0)==($213|0);
     if ($214) {
      $215 = $12;
      $216 = HEAP32[12782]|0;
      $217 = (($216) + ($215<<2)|0);
      $218 = HEAP32[$217>>2]|0;
      $219 = $218 & -9;
      HEAP32[$217>>2] = $219;
      $220 = $7;
      $221 = $8;
      $222 = $220 | $221;
      $223 = $222 ^ -1;
      $224 = $16;
      $225 = $5;
      $226 = (($225) + ($224<<2)|0);
      $227 = HEAP32[$226>>2]|0;
      $228 = $227 & $223;
      HEAP32[$226>>2] = $228;
     }
     $14 = -1;
    }
   }
  } while(0);
  $315 = $16;
  $316 = (($315) + 1)|0;
  $16 = $316;
 }
 $317 = $10;
 $318 = ($317|0)!=(0);
 if (!($318)) {
  STACKTOP = sp;return;
 }
 $319 = $9;
 $320 = ($319|0)!=(0);
 $321 = $15;
 $322 = ($321|0)==(1);
 $or$cond5 = $320 & $322;
 if ($or$cond5) {
  $323 = $9;
  $324 = $12;
  $325 = $5;
  $326 = (($325) + ($324<<2)|0);
  $327 = HEAP32[$326>>2]|0;
  $328 = $327 | $323;
  HEAP32[$326>>2] = $328;
  $329 = $8;
  $330 = $329 ^ -1;
  $331 = $12;
  $332 = $5;
  $333 = (($332) + ($331<<2)|0);
  $334 = HEAP32[$333>>2]|0;
  $335 = $334 & $330;
  HEAP32[$333>>2] = $335;
  $336 = $12;
  $337 = HEAP32[12782]|0;
  $338 = (($337) + ($336<<2)|0);
  $339 = HEAP32[$338>>2]|0;
  $340 = $339 & -9;
  HEAP32[$338>>2] = $340;
  $341 = $7;
  $342 = $8;
  $343 = $341 | $342;
  $344 = $343 ^ -1;
  $345 = $16;
  $346 = $5;
  $347 = (($346) + ($345<<2)|0);
  $348 = HEAP32[$347>>2]|0;
  $349 = $348 & $344;
  HEAP32[$347>>2] = $349;
 }
 $350 = $13;
 $351 = ($350|0)!=(0);
 if (!($351)) {
  STACKTOP = sp;return;
 }
 $352 = $7;
 $353 = $8;
 $354 = $352 | $353;
 $355 = $354 ^ -1;
 $356 = $16;
 $357 = $5;
 $358 = (($357) + ($356<<2)|0);
 $359 = HEAP32[$358>>2]|0;
 $360 = $359 & $355;
 HEAP32[$358>>2] = $360;
 STACKTOP = sp;return;
}
function _resolveEmphasisSymbols($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $8 = 0;
 while(1) {
  $9 = $8;
  $10 = HEAP32[12778]|0;
  $11 = ($9|0)<($10|0);
  if (!($11)) {
   break;
  }
  $12 = $8;
  $13 = $4;
  $14 = (($13) + ($12<<2)|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = $5;
  $17 = $15 & $16;
  $18 = ($17|0)!=(0);
  if ($18) {
   $19 = $8;
   $20 = (($19) + 1)|0;
   $21 = $4;
   $22 = (($21) + ($20<<2)|0);
   $23 = HEAP32[$22>>2]|0;
   $24 = $6;
   $25 = $23 & $24;
   $26 = ($25|0)!=(0);
   if ($26) {
    $27 = $5;
    $28 = $27 ^ -1;
    $29 = $8;
    $30 = $4;
    $31 = (($30) + ($29<<2)|0);
    $32 = HEAP32[$31>>2]|0;
    $33 = $32 & $28;
    HEAP32[$31>>2] = $33;
    $34 = $6;
    $35 = $34 ^ -1;
    $36 = $8;
    $37 = (($36) + 1)|0;
    $38 = $4;
    $39 = (($38) + ($37<<2)|0);
    $40 = HEAP32[$39>>2]|0;
    $41 = $40 & $35;
    HEAP32[$39>>2] = $41;
    $42 = $7;
    $43 = $8;
    $44 = $4;
    $45 = (($44) + ($43<<2)|0);
    $46 = HEAP32[$45>>2]|0;
    $47 = $46 | $42;
    HEAP32[$45>>2] = $47;
   }
  }
  $48 = $8;
  $49 = (($48) + 1)|0;
  $8 = $49;
 }
 STACKTOP = sp;return;
}
function _convertToPassage($0,$1,$2,$3,$4,$5,$6,$7,$8) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $9 = $0;
 $10 = $1;
 $11 = $2;
 $12 = $3;
 $13 = $4;
 $14 = $5;
 $15 = $6;
 $16 = $7;
 $17 = $8;
 $19 = $9;
 $18 = $19;
 while(1) {
  $20 = $18;
  $21 = $10;
  $22 = ($20|0)<=($21|0);
  if (!($22)) {
   break;
  }
  $23 = $18;
  $24 = HEAP32[12782]|0;
  $25 = (($24) + ($23<<2)|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = $26 & 8;
  $28 = ($27|0)!=(0);
  if ($28) {
   $29 = $17;
   $30 = $16;
   $31 = $29 | $30;
   $32 = $31 ^ -1;
   $33 = $18;
   $34 = $12;
   $35 = (($34) + ($33<<2)|0);
   $36 = HEAP32[$35>>2]|0;
   $37 = $36 & $32;
   HEAP32[$35>>2] = $37;
   $38 = $18;
   $39 = HEAP32[12782]|0;
   $40 = (($39) + ($38<<2)|0);
   $41 = HEAP32[$40>>2]|0;
   $42 = $41 & -9;
   HEAP32[$40>>2] = $42;
  }
  $43 = $18;
  $44 = (($43) + 1)|0;
  $18 = $44;
 }
 $45 = $14;
 $46 = $9;
 $47 = $12;
 $48 = (($47) + ($46<<2)|0);
 $49 = HEAP32[$48>>2]|0;
 $50 = $49 | $45;
 HEAP32[$48>>2] = $50;
 $51 = $13;
 $52 = HEAP32[12776]|0;
 $53 = ((($52)) + 1124|0);
 $54 = (($53) + (($51*36)|0)|0);
 $55 = ((($54)) + 16|0);
 $56 = HEAP32[$55>>2]|0;
 $57 = (_brailleIndicatorDefined($56)|0);
 $58 = ($57|0)!=(0);
 if (!($58)) {
  $59 = $13;
  $60 = HEAP32[12776]|0;
  $61 = ((($60)) + 1124|0);
  $62 = (($61) + (($59*36)|0)|0);
  $63 = ((($62)) + 8|0);
  $64 = HEAP32[$63>>2]|0;
  $65 = (_brailleIndicatorDefined($64)|0);
  $66 = ($65|0)!=(0);
  if (!($66)) {
   $73 = $13;
   $74 = HEAP32[12776]|0;
   $75 = ((($74)) + 1124|0);
   $76 = (($75) + (($73*36)|0)|0);
   $77 = ((($76)) + 4|0);
   $78 = HEAP32[$77>>2]|0;
   $79 = (_brailleIndicatorDefined($78)|0);
   $80 = ($79|0)!=(0);
   if (!($80)) {
    STACKTOP = sp;return;
   }
   $81 = $15;
   $82 = $11;
   $83 = $12;
   $84 = (($83) + ($82<<2)|0);
   $85 = HEAP32[$84>>2]|0;
   $86 = $85 | $81;
   HEAP32[$84>>2] = $86;
   STACKTOP = sp;return;
  }
 }
 $67 = $15;
 $68 = $10;
 $69 = $12;
 $70 = (($69) + ($68<<2)|0);
 $71 = HEAP32[$70>>2]|0;
 $72 = $71 | $67;
 HEAP32[$70>>2] = $72;
 STACKTOP = sp;return;
}
function _lou_hyphenate($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $or$cond3 = 0;
 var $or$cond5 = 0, $or$cond7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1360|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(1360|0);
 $11 = sp + 832|0;
 $12 = sp + 824|0;
 $13 = sp + 820|0;
 $17 = sp + 408|0;
 $18 = sp + 8|0;
 $19 = sp + 1256|0;
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $21 = $6;
 $22 = (_getTable($21)|0);
 HEAP32[12776] = $22;
 $23 = HEAP32[12776]|0;
 $24 = ($23|0)==(0|0);
 $25 = $7;
 $26 = ($25|0)==(0|0);
 $or$cond = $24 | $26;
 $27 = $9;
 $28 = ($27|0)==(0|0);
 $or$cond3 = $or$cond | $28;
 if (!($or$cond3)) {
  $29 = HEAP32[12776]|0;
  $30 = ((($29)) + 1564|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = ($31|0)==(0);
  $33 = $8;
  $34 = ($33|0)>=(100);
  $or$cond5 = $32 | $34;
  if (!($or$cond5)) {
   $35 = $10;
   $36 = ($35|0)!=(0);
   if ($36) {
    $37 = $8;
    HEAP32[$12>>2] = $37;
    HEAP32[$13>>2] = 100;
    $38 = $6;
    $39 = $7;
    $40 = (_lou_backTranslate($38,$39,$12,$11,$13,0,0,0,0,0,0)|0);
    $41 = ($40|0)!=(0);
    if (!($41)) {
     $5 = 0;
     $182 = $5;
     STACKTOP = sp;return ($182|0);
    }
   } else {
    $42 = $7;
    $43 = $8;
    $44 = $43<<2;
    _memcpy(($11|0),($42|0),($44|0))|0;
    $45 = $8;
    HEAP32[$13>>2] = $45;
   }
   $14 = 0;
   while(1) {
    $46 = $14;
    $47 = HEAP32[$13>>2]|0;
    $48 = ($46|0)<($47|0);
    if (!($48)) {
     break;
    }
    $49 = $14;
    $50 = (($11) + ($49<<2)|0);
    $51 = HEAP32[$50>>2]|0;
    $52 = (_findCharOrDots($51,0)|0);
    $53 = ((($52)) + 12|0);
    $54 = HEAP32[$53>>2]|0;
    $55 = $54 & 2;
    $56 = ($55|0)!=(0);
    if ($56) {
     break;
    }
    $57 = $14;
    $58 = (($57) + 1)|0;
    $14 = $58;
   }
   $59 = $14;
   $60 = HEAP32[$13>>2]|0;
   $61 = ($59|0)==($60|0);
   if ($61) {
    $5 = 0;
    $182 = $5;
    STACKTOP = sp;return ($182|0);
   }
   $62 = HEAP32[$13>>2]|0;
   $63 = (($62) - 1)|0;
   $15 = $63;
   while(1) {
    $64 = $15;
    $65 = ($64|0)>=(0);
    if (!($65)) {
     break;
    }
    $66 = $15;
    $67 = (($11) + ($66<<2)|0);
    $68 = HEAP32[$67>>2]|0;
    $69 = (_findCharOrDots($68,0)|0);
    $70 = ((($69)) + 12|0);
    $71 = HEAP32[$70>>2]|0;
    $72 = $71 & 2;
    $73 = ($72|0)!=(0);
    if ($73) {
     break;
    }
    $74 = $15;
    $75 = (($74) + -1)|0;
    $15 = $75;
   }
   $76 = $14;
   HEAP32[$12>>2] = $76;
   while(1) {
    $77 = HEAP32[$12>>2]|0;
    $78 = $15;
    $79 = ($77|0)<=($78|0);
    if (!($79)) {
     break;
    }
    $80 = HEAP32[$12>>2]|0;
    $81 = (($11) + ($80<<2)|0);
    $82 = HEAP32[$81>>2]|0;
    $83 = (_findCharOrDots($82,0)|0);
    $16 = $83;
    $84 = $16;
    $85 = ((($84)) + 12|0);
    $86 = HEAP32[$85>>2]|0;
    $87 = $86 & 2;
    $88 = ($87|0)!=(0);
    if (!($88)) {
     label = 21;
     break;
    }
    $89 = HEAP32[$12>>2]|0;
    $90 = (($89) + 1)|0;
    HEAP32[$12>>2] = $90;
   }
   if ((label|0) == 21) {
    $5 = 0;
    $182 = $5;
    STACKTOP = sp;return ($182|0);
   }
   $91 = $14;
   $92 = (($11) + ($91<<2)|0);
   $93 = $15;
   $94 = $14;
   $95 = (($93) - ($94))|0;
   $96 = (($95) + 1)|0;
   $97 = $14;
   $98 = $9;
   $99 = (($98) + ($97)|0);
   $100 = (_hyphenate($92,$96,$99)|0);
   $101 = ($100|0)!=(0);
   if (!($101)) {
    $5 = 0;
    $182 = $5;
    STACKTOP = sp;return ($182|0);
   }
   HEAP32[$12>>2] = 0;
   while(1) {
    $102 = HEAP32[$12>>2]|0;
    $103 = $14;
    $104 = ($102|0)<=($103|0);
    if (!($104)) {
     break;
    }
    $105 = HEAP32[$12>>2]|0;
    $106 = $9;
    $107 = (($106) + ($105)|0);
    HEAP8[$107>>0] = 48;
    $108 = HEAP32[$12>>2]|0;
    $109 = (($108) + 1)|0;
    HEAP32[$12>>2] = $109;
   }
   $110 = $10;
   $111 = ($110|0)!=(0);
   L40: do {
    if ($111) {
     $112 = $15;
     $113 = $14;
     $114 = (($112) - ($113))|0;
     $115 = (($114) + 1)|0;
     HEAP32[$13>>2] = $115;
     HEAP32[$12>>2] = 100;
     $116 = $6;
     $117 = $14;
     $118 = (($11) + ($117<<2)|0);
     $119 = (_lou_translate($116,$118,$13,$17,$12,0,0,$18,0,0,0)|0);
     $120 = ($119|0)!=(0);
     if (!($120)) {
      $5 = 0;
      $182 = $5;
      STACKTOP = sp;return ($182|0);
     }
     HEAP32[$13>>2] = 0;
     while(1) {
      $121 = HEAP32[$13>>2]|0;
      $122 = HEAP32[$12>>2]|0;
      $123 = ($121|0)<($122|0);
      if (!($123)) {
       break;
      }
      $124 = HEAP32[$13>>2]|0;
      $125 = (($18) + ($124<<2)|0);
      $126 = HEAP32[$125>>2]|0;
      $20 = $126;
      $127 = $20;
      $128 = HEAP32[$12>>2]|0;
      $129 = ($127|0)>($128|0);
      $130 = $20;
      $131 = ($130|0)<(0);
      $or$cond7 = $129 | $131;
      if ($or$cond7) {
       break;
      }
      $132 = $14;
      $133 = HEAP32[$13>>2]|0;
      $134 = (($132) + ($133))|0;
      $135 = $9;
      $136 = (($135) + ($134)|0);
      $137 = HEAP8[$136>>0]|0;
      $138 = $137 << 24 >> 24;
      $139 = $138 & 1;
      $140 = ($139|0)!=(0);
      $141 = $20;
      $142 = (($19) + ($141)|0);
      if ($140) {
       HEAP8[$142>>0] = 49;
      } else {
       HEAP8[$142>>0] = 48;
      }
      $143 = HEAP32[$13>>2]|0;
      $144 = (($143) + 1)|0;
      HEAP32[$13>>2] = $144;
     }
     $145 = $14;
     HEAP32[$13>>2] = $145;
     while(1) {
      $146 = HEAP32[$13>>2]|0;
      $147 = $14;
      $148 = HEAP32[$12>>2]|0;
      $149 = (($147) + ($148))|0;
      $150 = ($146|0)<($149|0);
      if (!($150)) {
       break L40;
      }
      $151 = HEAP32[$13>>2]|0;
      $152 = (($19) + ($151)|0);
      $153 = HEAP8[$152>>0]|0;
      $154 = $153 << 24 >> 24;
      $155 = ($154|0)==(48);
      if ($155) {
       $156 = HEAP32[$13>>2]|0;
       $157 = (($19) + ($156)|0);
       $158 = HEAP8[$157>>0]|0;
       $159 = HEAP32[$13>>2]|0;
       $160 = $9;
       $161 = (($160) + ($159)|0);
       HEAP8[$161>>0] = $158;
      }
      $162 = HEAP32[$13>>2]|0;
      $163 = (($162) + 1)|0;
      HEAP32[$13>>2] = $163;
     }
    }
   } while(0);
   HEAP32[$12>>2] = 0;
   while(1) {
    $164 = HEAP32[$12>>2]|0;
    $165 = $8;
    $166 = ($164|0)<($165|0);
    if (!($166)) {
     break;
    }
    $167 = HEAP32[$12>>2]|0;
    $168 = $9;
    $169 = (($168) + ($167)|0);
    $170 = HEAP8[$169>>0]|0;
    $171 = $170 << 24 >> 24;
    $172 = $171 & 1;
    $173 = ($172|0)!=(0);
    $174 = HEAP32[$12>>2]|0;
    $175 = $9;
    $176 = (($175) + ($174)|0);
    if ($173) {
     HEAP8[$176>>0] = 49;
    } else {
     HEAP8[$176>>0] = 48;
    }
    $177 = HEAP32[$12>>2]|0;
    $178 = (($177) + 1)|0;
    HEAP32[$12>>2] = $178;
   }
   $179 = $8;
   $180 = $9;
   $181 = (($180) + ($179)|0);
   HEAP8[$181>>0] = 0;
   $5 = 1;
   $182 = $5;
   STACKTOP = sp;return ($182|0);
  }
 }
 $5 = 0;
 $182 = $5;
 STACKTOP = sp;return ($182|0);
}
function _lou_dotsToChar($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $13 = $6;
 $14 = ($13|0)==(0|0);
 $15 = $7;
 $16 = ($15|0)==(0|0);
 $or$cond = $14 | $16;
 $17 = $8;
 $18 = ($17|0)==(0|0);
 $or$cond3 = $or$cond | $18;
 if ($or$cond3) {
  $5 = 0;
  $56 = $5;
  STACKTOP = sp;return ($56|0);
 }
 $19 = $10;
 $20 = $19 & 64;
 $21 = ($20|0)!=(0);
 $22 = $6;
 if ($21) {
  $23 = $7;
  $24 = $8;
  $25 = $9;
  $26 = $10;
  $27 = (_other_dotsToChar($22,$23,$24,$25,$26)|0);
  $5 = $27;
  $56 = $5;
  STACKTOP = sp;return ($56|0);
 }
 $28 = (_getTable($22)|0);
 HEAP32[12776] = $28;
 $29 = HEAP32[12776]|0;
 $30 = ($29|0)==(0|0);
 $31 = $9;
 $32 = ($31|0)<=(0);
 $or$cond5 = $30 | $32;
 if ($or$cond5) {
  $5 = 0;
  $56 = $5;
  STACKTOP = sp;return ($56|0);
 }
 $11 = 0;
 while(1) {
  $33 = $11;
  $34 = $9;
  $35 = ($33|0)<($34|0);
  if (!($35)) {
   break;
  }
  $36 = $11;
  $37 = $7;
  $38 = (($37) + ($36<<2)|0);
  $39 = HEAP32[$38>>2]|0;
  $12 = $39;
  $40 = $12;
  $41 = $40 & 32768;
  $42 = ($41|0)!=(0);
  if (!($42)) {
   $43 = $12;
   $44 = $43 & 65280;
   $45 = ($44|0)==(10240);
   if ($45) {
    $46 = $12;
    $47 = $46 & 255;
    $48 = $47 | 32768;
    $12 = $48;
   }
  }
  $49 = $12;
  $50 = (_getCharFromDots($49)|0);
  $51 = $11;
  $52 = $8;
  $53 = (($52) + ($51<<2)|0);
  HEAP32[$53>>2] = $50;
  $54 = $11;
  $55 = (($54) + 1)|0;
  $11 = $55;
 }
 $5 = 1;
 $56 = $5;
 STACKTOP = sp;return ($56|0);
}
function _lou_charToDots($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $12 = $6;
 $13 = ($12|0)==(0|0);
 $14 = $7;
 $15 = ($14|0)==(0|0);
 $or$cond = $13 | $15;
 $16 = $8;
 $17 = ($16|0)==(0|0);
 $or$cond3 = $or$cond | $17;
 if ($or$cond3) {
  $5 = 0;
  $53 = $5;
  STACKTOP = sp;return ($53|0);
 }
 $18 = $10;
 $19 = $18 & 64;
 $20 = ($19|0)!=(0);
 $21 = $6;
 if ($20) {
  $22 = $7;
  $23 = $8;
  $24 = $9;
  $25 = $10;
  $26 = (_other_charToDots($21,$22,$23,$24,$25)|0);
  $5 = $26;
  $53 = $5;
  STACKTOP = sp;return ($53|0);
 }
 $27 = (_getTable($21)|0);
 HEAP32[12776] = $27;
 $28 = HEAP32[12776]|0;
 $29 = ($28|0)==(0|0);
 $30 = $9;
 $31 = ($30|0)<=(0);
 $or$cond5 = $29 | $31;
 if ($or$cond5) {
  $5 = 0;
  $53 = $5;
  STACKTOP = sp;return ($53|0);
 }
 $11 = 0;
 while(1) {
  $32 = $11;
  $33 = $9;
  $34 = ($32|0)<($33|0);
  if (!($34)) {
   break;
  }
  $35 = $10;
  $36 = $35 & 128;
  $37 = ($36|0)!=(0);
  $38 = $11;
  $39 = $7;
  $40 = (($39) + ($38<<2)|0);
  $41 = HEAP32[$40>>2]|0;
  $42 = (_getDotsForChar($41)|0);
  if ($37) {
   $43 = $42 & 255;
   $44 = $43 | 10240;
   $45 = $11;
   $46 = $8;
   $47 = (($46) + ($45<<2)|0);
   HEAP32[$47>>2] = $44;
  } else {
   $48 = $11;
   $49 = $8;
   $50 = (($49) + ($48<<2)|0);
   HEAP32[$50>>2] = $42;
  }
  $51 = $11;
  $52 = (($51) + 1)|0;
  $11 = $52;
 }
 $5 = 1;
 $53 = $5;
 STACKTOP = sp;return ($53|0);
}
function _lou_backTranslateString($0,$1,$2,$3,$4,$5,$6,$7) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $8 = $0;
 $9 = $1;
 $10 = $2;
 $11 = $3;
 $12 = $4;
 $13 = $5;
 $14 = $6;
 $15 = $7;
 $16 = $8;
 $17 = $9;
 $18 = $10;
 $19 = $11;
 $20 = $12;
 $21 = $13;
 $22 = $14;
 $23 = $15;
 $24 = (_lou_backTranslate($16,$17,$18,$19,$20,$21,$22,0,0,0,$23)|0);
 STACKTOP = sp;return ($24|0);
}
function _lou_backTranslate($0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 $9 = $9|0;
 $10 = $10|0;
 var $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $11 = $0;
 $12 = $1;
 $13 = $2;
 $14 = $3;
 $15 = $4;
 $16 = $5;
 $17 = $6;
 $18 = $7;
 $19 = $8;
 $20 = $9;
 $21 = $10;
 $22 = $11;
 $23 = $12;
 $24 = $13;
 $25 = $14;
 $26 = $15;
 $27 = $16;
 $28 = $17;
 $29 = $18;
 $30 = $19;
 $31 = $20;
 $32 = $21;
 $33 = (_backTranslateWithTracing($22,$23,$24,$25,$26,$27,$28,$29,$30,$31,$32,0,0)|0);
 STACKTOP = sp;return ($33|0);
}
function _backTranslateWithTracing($0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 $9 = $9|0;
 $10 = $10|0;
 $11 = $11|0;
 $12 = $12|0;
 var $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0;
 var $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0;
 var $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0;
 var $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0;
 var $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0;
 var $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0;
 var $or$cond7 = 0, $or$cond9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $14 = $0;
 $15 = $1;
 $16 = $2;
 $17 = $3;
 $18 = $4;
 $19 = $5;
 $20 = $6;
 $21 = $7;
 $22 = $8;
 $23 = $9;
 $24 = $10;
 $25 = $11;
 $26 = $12;
 $28 = 1;
 $30 = $14;
 $31 = ($30|0)==(0|0);
 $32 = $15;
 $33 = ($32|0)==(0|0);
 $or$cond = $31 | $33;
 $34 = $16;
 $35 = ($34|0)==(0|0);
 $or$cond3 = $or$cond | $35;
 $36 = $17;
 $37 = ($36|0)==(0|0);
 $or$cond5 = $or$cond3 | $37;
 $38 = $18;
 $39 = ($38|0)==(0|0);
 $or$cond7 = $or$cond5 | $39;
 if ($or$cond7) {
  $13 = 0;
  $209 = $13;
  STACKTOP = sp;return ($209|0);
 }
 $40 = $24;
 $41 = $40 & 64;
 $42 = ($41|0)!=(0);
 $43 = $14;
 if ($42) {
  $44 = $15;
  $45 = $16;
  $46 = $17;
  $47 = $18;
  $48 = $19;
  $49 = $20;
  $50 = $21;
  $51 = $22;
  $52 = $23;
  $53 = $24;
  $54 = (_other_backTranslate($43,$44,$45,$46,$47,$48,$49,$50,$51,$52,$53)|0);
  $13 = $54;
  $209 = $13;
  STACKTOP = sp;return ($209|0);
 }
 $55 = (_getTable($43)|0);
 HEAP32[12902] = $55;
 $56 = HEAP32[12902]|0;
 $57 = ($56|0)==(0|0);
 if ($57) {
  $13 = 0;
  $209 = $13;
  STACKTOP = sp;return ($209|0);
 }
 HEAP32[12903] = 0;
 while(1) {
  $58 = HEAP32[12903]|0;
  $59 = $16;
  $60 = HEAP32[$59>>2]|0;
  $61 = ($58|0)<($60|0);
  if (!($61)) {
   break;
  }
  $62 = HEAP32[12903]|0;
  $63 = $15;
  $64 = (($63) + ($62<<2)|0);
  $65 = HEAP32[$64>>2]|0;
  $66 = ($65|0)!=(0);
  if (!($66)) {
   break;
  }
  $67 = HEAP32[12903]|0;
  $68 = (($67) + 1)|0;
  HEAP32[12903] = $68;
 }
 $69 = $18;
 $70 = HEAP32[$69>>2]|0;
 HEAP32[12904] = $70;
 $71 = $19;
 HEAP32[12905] = $71;
 $72 = $20;
 HEAP32[12906] = $72;
 $73 = $21;
 HEAP32[12907] = $73;
 $74 = $21;
 $75 = ($74|0)!=(0|0);
 L18: do {
  if ($75) {
   $27 = 0;
   while(1) {
    $76 = $27;
    $77 = HEAP32[12903]|0;
    $78 = ($76|0)<($77|0);
    if (!($78)) {
     break L18;
    }
    $79 = $27;
    $80 = $21;
    $81 = (($80) + ($79<<2)|0);
    HEAP32[$81>>2] = -1;
    $82 = $27;
    $83 = (($82) + 1)|0;
    $27 = $83;
   }
  }
 } while(0);
 $84 = $22;
 HEAP32[12908] = $84;
 $85 = $23;
 $86 = ($85|0)!=(0|0);
 if ($86) {
  $87 = $23;
  $88 = HEAP32[$87>>2]|0;
  HEAP32[12909] = $88;
 } else {
  HEAP32[12909] = -1;
 }
 HEAP32[12910] = 0;
 $89 = $24;
 HEAP32[12911] = $89;
 $90 = HEAP32[12903]|0;
 $91 = HEAP32[12904]|0;
 $92 = (_liblouis_allocMem(5,$90,$91)|0);
 HEAP32[12912] = $92;
 $93 = ($92|0)!=(0|0);
 if (!($93)) {
  $13 = 0;
  $209 = $13;
  STACKTOP = sp;return ($209|0);
 }
 $94 = HEAP32[12905]|0;
 $95 = ($94|0)!=(0|0);
 if ($95) {
  $96 = HEAP32[12905]|0;
  $97 = HEAP32[12904]|0;
  _memset(($96|0),48,($97|0))|0;
 }
 $98 = HEAP32[12906]|0;
 $99 = ($98|0)!=(0|0);
 if ($99) {
  $100 = HEAP32[12906]|0;
  $101 = HEAP32[12904]|0;
  _memset(($100|0),42,($101|0))|0;
 }
 $27 = 0;
 while(1) {
  $102 = $27;
  $103 = HEAP32[12903]|0;
  $104 = ($102|0)<($103|0);
  if (!($104)) {
   break;
  }
  $105 = HEAP32[12911]|0;
  $106 = $105 & 4;
  $107 = ($106|0)!=(0);
  $108 = $27;
  $109 = $15;
  $110 = (($109) + ($108<<2)|0);
  $111 = HEAP32[$110>>2]|0;
  if ($107) {
   $112 = $111 | 32768;
   $113 = $27;
   $114 = HEAP32[12912]|0;
   $115 = (($114) + ($113<<2)|0);
   HEAP32[$115>>2] = $112;
  } else {
   $116 = (_getDotsForChar($111)|0);
   $117 = $27;
   $118 = HEAP32[12912]|0;
   $119 = (($118) + ($117<<2)|0);
   HEAP32[$119>>2] = $116;
  }
  $120 = $27;
  $121 = (($120) + 1)|0;
  $27 = $121;
 }
 $122 = (_getDotsForChar(32)|0);
 $123 = HEAP32[12903]|0;
 $124 = HEAP32[12912]|0;
 $125 = (($124) + ($123<<2)|0);
 HEAP32[$125>>2] = $122;
 $126 = HEAP32[12903]|0;
 $127 = HEAP32[12904]|0;
 $128 = (_liblouis_allocMem(7,$126,$127)|0);
 HEAP32[12913] = $128;
 $129 = ($128|0)!=(0|0);
 if (!($129)) {
  $13 = 0;
  $209 = $13;
  STACKTOP = sp;return ($209|0);
 }
 $27 = 0;
 while(1) {
  $130 = $27;
  $131 = HEAP32[12903]|0;
  $132 = ($130|0)<=($131|0);
  if (!($132)) {
   break;
  }
  $133 = $27;
  $134 = $27;
  $135 = HEAP32[12913]|0;
  $136 = (($135) + ($134<<2)|0);
  HEAP32[$136>>2] = $133;
  $137 = $27;
  $138 = (($137) + 1)|0;
  $27 = $138;
 }
 $139 = HEAP32[12903]|0;
 $140 = HEAP32[12903]|0;
 $141 = HEAP32[12913]|0;
 $142 = (($141) + ($140<<2)|0);
 HEAP32[$142>>2] = $139;
 $143 = HEAP32[12912]|0;
 HEAP32[12914] = $143;
 $144 = HEAP32[12911]|0;
 $145 = $144 & 16;
 $146 = ($145|0)!=(0);
 do {
  if (!($146)) {
   $147 = HEAP32[12902]|0;
   $148 = ((($147)) + 4|0);
   $149 = HEAP32[$148>>2]|0;
   $150 = ($149|0)>(1);
   if (!($150)) {
    $151 = HEAP32[12902]|0;
    $152 = ((($151)) + 8|0);
    $153 = HEAP32[$152>>2]|0;
    $154 = ($153|0)!=(0);
    if (!($154)) {
     break;
    }
   }
   $155 = HEAP32[12903]|0;
   $156 = HEAP32[12904]|0;
   $157 = (_liblouis_allocMem(6,$155,$156)|0);
   HEAP32[12915] = $157;
   $158 = ($157|0)!=(0|0);
   if (!($158)) {
    $13 = 0;
    $209 = $13;
    STACKTOP = sp;return ($209|0);
   }
  }
 } while(0);
 HEAP32[12916] = 0;
 $159 = $25;
 $160 = ($159|0)!=(0|0);
 $161 = $26;
 $162 = ($161|0)!=(0|0);
 $or$cond9 = $160 & $162;
 if ($or$cond9) {
  $163 = $25;
  HEAP32[12917] = $163;
  $164 = $26;
  $165 = HEAP32[$164>>2]|0;
  HEAP32[12918] = $165;
 } else {
  HEAP32[12917] = 0;
  HEAP32[12918] = 0;
 }
 $166 = $17;
 $167 = (_doPasses($166)|0);
 $28 = $167;
 $168 = HEAP32[12919]|0;
 $169 = $16;
 $170 = HEAP32[$169>>2]|0;
 $171 = ($168|0)<($170|0);
 if ($171) {
  $172 = HEAP32[12919]|0;
  $173 = HEAP32[12913]|0;
  $174 = (($173) + ($172<<2)|0);
  $175 = HEAP32[$174>>2]|0;
  $176 = $16;
  HEAP32[$176>>2] = $175;
 }
 $177 = HEAP32[12920]|0;
 $178 = $18;
 HEAP32[$178>>2] = $177;
 $179 = $21;
 $180 = ($179|0)!=(0|0);
 L69: do {
  if ($180) {
   $29 = 0;
   $27 = 0;
   while(1) {
    $181 = $27;
    $182 = $16;
    $183 = HEAP32[$182>>2]|0;
    $184 = ($181|0)<($183|0);
    if (!($184)) {
     break L69;
    }
    $185 = $27;
    $186 = $21;
    $187 = (($186) + ($185<<2)|0);
    $188 = HEAP32[$187>>2]|0;
    $189 = ($188|0)==(-1);
    if ($189) {
     $190 = $29;
     $191 = $27;
     $192 = $21;
     $193 = (($192) + ($191<<2)|0);
     HEAP32[$193>>2] = $190;
    } else {
     $194 = $27;
     $195 = $21;
     $196 = (($195) + ($194<<2)|0);
     $197 = HEAP32[$196>>2]|0;
     $29 = $197;
    }
    $198 = $27;
    $199 = (($198) + 1)|0;
    $27 = $199;
   }
  }
 } while(0);
 $200 = $23;
 $201 = ($200|0)!=(0|0);
 if ($201) {
  $202 = HEAP32[12909]|0;
  $203 = $23;
  HEAP32[$203>>2] = $202;
 }
 $204 = $26;
 $205 = ($204|0)!=(0|0);
 if ($205) {
  $206 = HEAP32[12916]|0;
  $207 = $26;
  HEAP32[$207>>2] = $206;
 }
 $208 = $28;
 $13 = $208;
 $209 = $13;
 STACKTOP = sp;return ($209|0);
}
function _doPasses($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $5 = HEAP32[12902]|0;
 $6 = ((($5)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $3 = $7;
 $4 = 1;
 $8 = HEAP32[12902]|0;
 $9 = ((($8)) + 8|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($10|0)!=(0);
 if ($11) {
  $12 = $4;
  $13 = (($12) - 1)|0;
  $4 = $13;
 }
 $14 = HEAP32[12911]|0;
 $15 = $14 & 16;
 $16 = ($15|0)!=(0);
 if ($16) {
  $3 = 1;
  $4 = 1;
 }
 $17 = $3;
 HEAP32[171] = $17;
 L7: while(1) {
  $18 = HEAP32[171]|0;
  $19 = $4;
  $20 = ($18|0)==($19|0);
  if ($20) {
   $21 = $2;
   $28 = $21;
  } else {
   $22 = HEAP32[12914]|0;
   $23 = HEAP32[12912]|0;
   $24 = ($22|0)==($23|0);
   $25 = HEAP32[12915]|0;
   $26 = HEAP32[12912]|0;
   $27 = $24 ? $25 : $26;
   $28 = $27;
  }
  HEAP32[12921] = $28;
  $29 = HEAP32[171]|0;
  switch ($29|0) {
  case 1:  {
   $30 = (_backTranslateString()|0);
   $31 = ($30|0)!=(0);
   if (!($31)) {
    label = 11;
    break L7;
   }
   break;
  }
  case 0:  {
   $32 = (_makeCorrections_339()|0);
   $33 = ($32|0)!=(0);
   if (!($33)) {
    label = 13;
    break L7;
   }
   break;
  }
  default: {
   $34 = (_translatePass_340()|0);
   $35 = ($34|0)!=(0);
   if (!($35)) {
    label = 15;
    break L7;
   }
  }
  }
  $36 = HEAP32[171]|0;
  $37 = $4;
  $38 = ($36|0)==($37|0);
  if ($38) {
   label = 17;
   break;
  }
  $39 = HEAP32[12921]|0;
  HEAP32[12914] = $39;
  $40 = HEAP32[12920]|0;
  HEAP32[12903] = $40;
  $41 = HEAP32[171]|0;
  $42 = (($41) - 1)|0;
  HEAP32[171] = $42;
 }
 if ((label|0) == 11) {
  $1 = 0;
  $43 = $1;
  STACKTOP = sp;return ($43|0);
 }
 else if ((label|0) == 13) {
  $1 = 0;
  $43 = $1;
  STACKTOP = sp;return ($43|0);
 }
 else if ((label|0) == 15) {
  $1 = 0;
  $43 = $1;
  STACKTOP = sp;return ($43|0);
 }
 else if ((label|0) == 17) {
  $1 = 1;
  $43 = $1;
  STACKTOP = sp;return ($43|0);
 }
 return (0)|0;
}
function _backTranslateString() {
 var $$off = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
 var $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0;
 var $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0;
 var $17 = 0, $170 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, $switch = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = 0;
 $2 = 0;
 _resetPassVariables();
 HEAP32[186] = 0;
 HEAP32[12938] = 0;
 HEAP32[12939] = 0;
 HEAP32[12940] = 0;
 HEAP32[12935] = 0;
 HEAP32[12934] = 0;
 HEAP32[12933] = 0;
 HEAP32[12922] = 111;
 HEAP32[12920] = 0;
 HEAP32[12919] = 0;
 L1: while(1) {
  $4 = HEAP32[12919]|0;
  $5 = HEAP32[12903]|0;
  $6 = ($4|0)<($5|0);
  if (!($6)) {
   break;
  }
  _back_setBefore();
  _back_selectRule();
  $7 = HEAP32[12917]|0;
  $8 = ($7|0)!=(0|0);
  if ($8) {
   $9 = HEAP32[12916]|0;
   $10 = HEAP32[12918]|0;
   $11 = ($9|0)<($10|0);
   if ($11) {
    $12 = HEAP32[12924]|0;
    $13 = HEAP32[12916]|0;
    $14 = (($13) + 1)|0;
    HEAP32[12916] = $14;
    $15 = HEAP32[12917]|0;
    $16 = (($15) + ($13<<2)|0);
    HEAP32[$16>>2] = $12;
   }
  }
  $17 = HEAP32[12923]|0;
  do {
   switch ($17|0) {
   case 106:  {
    HEAP32[12940] = 0;
    break;
   }
   case 86:  {
    $18 = HEAP32[12922]|0;
    $19 = ($18|0)==(86);
    if ($19) {
     $20 = (_insertSpace()|0);
     $21 = ($20|0)!=(0);
     if (!($21)) {
      break L1;
     }
    }
    break;
   }
   case 115:  {
    HEAP32[12933] = 1;
    $22 = HEAP32[12941]|0;
    $23 = HEAP32[12919]|0;
    $24 = (($23) + ($22))|0;
    HEAP32[12919] = $24;
    continue L1;
    break;
   }
   case 116:  {
    HEAP32[12934] = 1;
    $25 = HEAP32[12941]|0;
    $26 = HEAP32[12919]|0;
    $27 = (($26) + ($25))|0;
    HEAP32[12919] = $27;
    continue L1;
    break;
   }
   case 118:  {
    HEAP32[12935] = 1;
    $28 = HEAP32[12941]|0;
    $29 = HEAP32[12919]|0;
    $30 = (($29) + ($28))|0;
    HEAP32[12919] = $30;
    continue L1;
    break;
   }
   case 117:  {
    HEAP32[12934] = 0;
    $31 = HEAP32[12941]|0;
    $32 = HEAP32[12919]|0;
    $33 = (($32) + ($31))|0;
    HEAP32[12919] = $33;
    continue L1;
    break;
   }
   case 119:  {
    HEAP32[12935] = 0;
    $34 = HEAP32[12941]|0;
    $35 = HEAP32[12919]|0;
    $36 = (($35) + ($34))|0;
    HEAP32[12919] = $36;
    continue L1;
    break;
   }
   case 112:  {
    HEAP32[12939] = 1;
    HEAP32[12940] = 0;
    $37 = HEAP32[12941]|0;
    $38 = HEAP32[12919]|0;
    $39 = (($38) + ($37))|0;
    HEAP32[12919] = $39;
    continue L1;
    break;
   }
   case 113:  {
    HEAP32[12940] = 1;
    $40 = HEAP32[12941]|0;
    $41 = HEAP32[12919]|0;
    $42 = (($41) + ($40))|0;
    HEAP32[12919] = $42;
    continue L1;
    break;
   }
   case 126:  {
    HEAP16[26517] = 1;
    $43 = HEAP32[12941]|0;
    $44 = HEAP32[12919]|0;
    $45 = (($44) + ($43))|0;
    HEAP32[12919] = $45;
    continue L1;
    break;
   }
   case 134:  {
    HEAP16[26517] = 2;
    $46 = HEAP32[12941]|0;
    $47 = HEAP32[12919]|0;
    $48 = (($47) + ($46))|0;
    HEAP32[12919] = $48;
    continue L1;
    break;
   }
   case 142:  {
    HEAP16[26517] = 4;
    $49 = HEAP32[12941]|0;
    $50 = HEAP32[12919]|0;
    $51 = (($50) + ($49))|0;
    HEAP32[12919] = $51;
    continue L1;
    break;
   }
   case 143: case 135: case 127:  {
    HEAP16[26517] = 0;
    $52 = HEAP32[12941]|0;
    $53 = HEAP32[12919]|0;
    $54 = (($53) + ($52))|0;
    HEAP32[12919] = $54;
    continue L1;
    break;
   }
   case 203:  {
    HEAP32[12938] = 1;
    HEAP16[26517] = 1024;
    $55 = HEAP32[12941]|0;
    $56 = HEAP32[12919]|0;
    $57 = (($56) + ($55))|0;
    HEAP32[12919] = $57;
    continue L1;
    break;
   }
   case 213:  {
    HEAP32[12938] = 0;
    HEAP16[26517] = 0;
    $58 = HEAP32[12941]|0;
    $59 = HEAP32[12919]|0;
    $60 = (($59) + ($58))|0;
    HEAP32[12919] = $60;
    continue L1;
    break;
   }
   default: {
   }
   }
  } while(0);
  $61 = HEAP32[12923]|0;
  switch ($61|0) {
  case 70:  {
   $62 = (_back_passDoAction()|0);
   $63 = ($62|0)!=(0);
   if (!($63)) {
    label = 25;
    break L1;
   }
   $64 = HEAP32[12925]|0;
   HEAP32[12919] = $64;
   break;
  }
  case 69:  {
   $65 = HEAP32[12941]|0;
   $66 = HEAP32[12919]|0;
   $67 = (($66) + ($65))|0;
   HEAP32[12919] = $67;
   $68 = HEAP32[12924]|0;
   $69 = ((($68)) + 28|0);
   $70 = HEAP32[12924]|0;
   $71 = ((($70)) + 24|0);
   $72 = HEAP16[$71>>1]|0;
   $73 = $72 << 16 >> 16;
   $74 = (_putCharacters_355($69,$73)|0);
   $75 = ($74|0)!=(0);
   if (!($75)) {
    break L1;
   }
   break;
  }
  case 111:  {
   $76 = HEAP32[12919]|0;
   $77 = HEAP32[12914]|0;
   $78 = (($77) + ($76<<2)|0);
   $79 = HEAP32[$78>>2]|0;
   $80 = (_undefinedDots($79)|0);
   $81 = ($80|0)!=(0);
   if (!($81)) {
    break L1;
   }
   $82 = HEAP32[12919]|0;
   $83 = (($82) + 1)|0;
   HEAP32[12919] = $83;
   break;
  }
  case 102:  {
   HEAP32[12940] = 1;
   label = 33;
   break;
  }
  case 104:  {
   HEAP32[12940] = 0;
   label = 33;
   break;
  }
  case 57:  {
   HEAP32[12933] = 0;
   HEAP32[12934] = 0;
   HEAP32[12940] = 0;
   HEAP32[12939] = 0;
   label = 33;
   break;
  }
  default: {
   label = 33;
  }
  }
  do {
   if ((label|0) == 33) {
    label = 0;
    $84 = HEAP32[12924]|0;
    $85 = ((($84)) + 24|0);
    $86 = HEAP16[$85>>1]|0;
    $87 = ($86<<16>>16)!=(0);
    if ($87) {
     $88 = HEAP32[12924]|0;
     $89 = ((($88)) + 28|0);
     $90 = HEAP32[12924]|0;
     $91 = ((($90)) + 26|0);
     $92 = HEAP16[$91>>1]|0;
     $93 = $92 << 16 >> 16;
     $94 = HEAP32[12924]|0;
     $95 = ((($94)) + 24|0);
     $96 = HEAP16[$95>>1]|0;
     $97 = $96 << 16 >> 16;
     $98 = (_back_updatePositions($89,$93,$97)|0);
     $99 = ($98|0)!=(0);
     if (!($99)) {
      break L1;
     }
     $100 = HEAP32[12941]|0;
     $101 = HEAP32[12919]|0;
     $102 = (($101) + ($100))|0;
     HEAP32[12919] = $102;
     break;
    }
    $103 = HEAP32[12919]|0;
    $104 = HEAP32[12941]|0;
    $105 = (($103) + ($104))|0;
    $3 = $105;
    while(1) {
     $106 = HEAP32[12919]|0;
     $107 = HEAP32[12914]|0;
     $108 = (($107) + ($106<<2)|0);
     $109 = HEAP32[$108>>2]|0;
     $110 = (_putCharacter_352($109)|0);
     $111 = ($110|0)!=(0);
     if (!($111)) {
      break L1;
     }
     $112 = HEAP32[12919]|0;
     $113 = (($112) + 1)|0;
     HEAP32[12919] = $113;
     $114 = $3;
     $115 = ($113|0)==($114|0);
     if ($115) {
      break;
     }
    }
   }
  } while(0);
  $116 = HEAP32[12923]|0;
  $$off = (($116) + -89)|0;
  $switch = ($$off>>>0)<(2);
  if ($switch) {
   $117 = (_insertSpace()|0);
   $118 = ($117|0)!=(0);
   if (!($118)) {
    break;
   }
  } else {
   _passSelectRule_341();
   $119 = HEAP32[12923]|0;
   $120 = ($119|0)==(70);
   if ($120) {
    (_back_passDoAction()|0);
    $121 = HEAP32[12925]|0;
    HEAP32[12919] = $121;
   }
  }
  $122 = HEAP32[12919]|0;
  $123 = ($122|0)>(0);
  if ($123) {
   $124 = HEAP32[12919]|0;
   $125 = (($124) - 1)|0;
   $126 = HEAP32[12914]|0;
   $127 = (($126) + ($125<<2)|0);
   $128 = HEAP32[$127>>2]|0;
   $129 = (_checkAttr_343($128,1,1)|0);
   $130 = ($129|0)!=(0);
   $131 = HEAP32[12923]|0;
   $132 = ($131|0)!=(90);
   $or$cond = $130 & $132;
   if ($or$cond) {
    $133 = HEAP32[12919]|0;
    $1 = $133;
    $134 = HEAP32[12920]|0;
    $2 = $134;
   }
  }
  $135 = HEAP32[12923]|0;
  $136 = ($135>>>0)>=(78);
  $137 = HEAP32[12923]|0;
  $138 = ($137>>>0)<=(111);
  $or$cond3 = $136 & $138;
  if (!($or$cond3)) {
   $139 = HEAP32[12923]|0;
   $140 = ($139>>>0)>=(58);
   $141 = HEAP32[12923]|0;
   $142 = ($141>>>0)<=(67);
   $or$cond5 = $140 & $142;
   if (!($or$cond5)) {
    continue;
   }
  }
  $143 = HEAP32[12923]|0;
  HEAP32[12922] = $143;
 }
 if ((label|0) == 25) {
  $0 = 0;
  $170 = $0;
  STACKTOP = sp;return ($170|0);
 }
 $144 = $2;
 $145 = ($144|0)!=(0);
 if ($145) {
  $146 = HEAP32[12919]|0;
  $147 = HEAP32[12903]|0;
  $148 = ($146|0)<($147|0);
  if ($148) {
   $149 = HEAP32[12919]|0;
   $150 = HEAP32[12914]|0;
   $151 = (($150) + ($149<<2)|0);
   $152 = HEAP32[$151>>2]|0;
   $153 = (_checkAttr_343($152,1,1)|0);
   $154 = ($153|0)!=(0);
   if (!($154)) {
    $155 = $1;
    HEAP32[12919] = $155;
    $156 = $2;
    HEAP32[12920] = $156;
   }
  }
 }
 $157 = HEAP32[12919]|0;
 $158 = HEAP32[12903]|0;
 $159 = ($157|0)<($158|0);
 L66: do {
  if ($159) {
   while(1) {
    $160 = HEAP32[12919]|0;
    $161 = HEAP32[12914]|0;
    $162 = (($161) + ($160<<2)|0);
    $163 = HEAP32[$162>>2]|0;
    $164 = (_checkAttr_343($163,1,1)|0);
    $165 = ($164|0)!=(0);
    if (!($165)) {
     break L66;
    }
    $166 = HEAP32[12919]|0;
    $167 = (($166) + 1)|0;
    HEAP32[12919] = $167;
    $168 = HEAP32[12903]|0;
    $169 = ($167|0)==($168|0);
    if ($169) {
     break;
    }
   }
  }
 } while(0);
 $0 = 1;
 $170 = $0;
 STACKTOP = sp;return ($170|0);
}
function _makeCorrections_339() {
 var $$old = 0, $$old1 = 0, $$old2 = 0, $$old3 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0;
 var $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $or$cond4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $7 = HEAP32[12902]|0;
 $8 = ((($7)) + 8|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)!=(0);
 if (!($10)) {
  $0 = 1;
  $124 = $0;
  STACKTOP = sp;return ($124|0);
 }
 HEAP32[12919] = 0;
 HEAP32[12920] = 0;
 _resetPassVariables();
 L5: while(1) {
  $11 = HEAP32[12919]|0;
  $12 = HEAP32[12903]|0;
  $13 = ($11|0)<($12|0);
  if (!($13)) {
   break;
  }
  $14 = HEAP32[12903]|0;
  $15 = HEAP32[12919]|0;
  $16 = (($14) - ($15))|0;
  $1 = $16;
  $17 = HEAP32[12919]|0;
  $18 = HEAP32[12914]|0;
  $19 = (($18) + ($17<<2)|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = (_back_findCharOrDots($20,0)|0);
  $2 = $21;
  $4 = 0;
  $22 = (_findBackPassRule()|0);
  $23 = ($22|0)==(0);
  $24 = $4;
  $25 = ($24|0)<(3);
  $or$cond = $23 & $25;
  L8: do {
   if ($or$cond) {
    while(1) {
     $5 = 0;
     $6 = 0;
     $26 = $4;
     switch ($26|0) {
     case 0:  {
      $27 = $1;
      $28 = ($27|0)>=(2);
      if ($28) {
       $29 = $2;
       $30 = ((($29)) + 24|0);
       $31 = HEAP32[$30>>2]|0;
       $32 = $31 << 8;
       $6 = $32;
       $33 = HEAP32[12919]|0;
       $34 = (($33) + 1)|0;
       $35 = HEAP32[12914]|0;
       $36 = (($35) + ($34<<2)|0);
       $37 = HEAP32[$36>>2]|0;
       $38 = (_back_findCharOrDots($37,0)|0);
       $3 = $38;
       $39 = $3;
       $40 = ((($39)) + 24|0);
       $41 = HEAP32[$40>>2]|0;
       $42 = $6;
       $43 = (($42) + ($41))|0;
       $6 = $43;
       $44 = $6;
       $45 = (($44>>>0) % 1123)&-1;
       $6 = $45;
       $46 = $6;
       $47 = HEAP32[12902]|0;
       $48 = ((($47)) + 22348|0);
       $49 = (($48) + ($46<<2)|0);
       $50 = HEAP32[$49>>2]|0;
       $5 = $50;
      }
      break;
     }
     case 1:  {
      $51 = $1;
      $52 = ($51|0)>=(1);
      if ($52) {
       $1 = 1;
       $53 = $2;
       $54 = ((($53)) + 8|0);
       $55 = HEAP32[$54>>2]|0;
       $5 = $55;
      }
      break;
     }
     case 2:  {
      HEAP32[12923] = 78;
      $5 = 0;
      break;
     }
     default: {
     }
     }
     while(1) {
      $56 = $5;
      $57 = ($56|0)!=(0);
      if (!($57)) {
       break;
      }
      $58 = $5;
      $59 = HEAP32[12902]|0;
      $60 = ((($59)) + 31332|0);
      $61 = (($60) + ($58<<2)|0);
      HEAP32[12924] = $61;
      $62 = HEAP32[12924]|0;
      $63 = ((($62)) + 20|0);
      $64 = HEAP32[$63>>2]|0;
      HEAP32[12923] = $64;
      $65 = HEAP32[12924]|0;
      $66 = ((($65)) + 24|0);
      $67 = HEAP16[$66>>1]|0;
      $68 = $67 << 16 >> 16;
      HEAP32[12936] = $68;
      $69 = $4;
      $70 = ($69|0)==(1);
      if ($70) {
       $$old2 = HEAP32[12923]|0;
       $$old3 = ($$old2|0)==(71);
       if ($$old3) {
        label = 17;
       }
      } else {
       $71 = HEAP32[12936]|0;
       $72 = $1;
       $73 = ($71|0)<=($72|0);
       if ($73) {
        $74 = HEAP32[12924]|0;
        $75 = ((($74)) + 28|0);
        $76 = HEAP32[12919]|0;
        $77 = HEAP32[12914]|0;
        $78 = (($77) + ($76<<2)|0);
        $79 = HEAP32[12936]|0;
        $80 = (_compareChars_354($75,$78,$79,0)|0);
        $81 = ($80|0)!=(0);
        $82 = HEAP32[12923]|0;
        $83 = ($82|0)==(71);
        $or$cond4 = $81 & $83;
        if ($or$cond4) {
         label = 17;
        }
       }
      }
      if ((label|0) == 17) {
       label = 0;
       $84 = (_back_passDoTest()|0);
       $85 = ($84|0)!=(0);
       if ($85) {
        label = 18;
        break;
       }
      }
      $86 = HEAP32[12924]|0;
      $87 = ((($86)) + 4|0);
      $88 = HEAP32[$87>>2]|0;
      $5 = $88;
     }
     if ((label|0) == 18) {
      label = 0;
      $4 = 4;
     }
     $89 = $4;
     $90 = (($89) + 1)|0;
     $4 = $90;
     $$old = $4;
     $$old1 = ($$old|0)<(3);
     if (!($$old1)) {
      break L8;
     }
    }
   }
  } while(0);
  $91 = HEAP32[12923]|0;
  switch ($91|0) {
  case 78:  {
   $92 = HEAP32[12920]|0;
   $93 = HEAP32[12904]|0;
   $94 = ($92|0)>=($93|0);
   if ($94) {
    break L5;
   }
   $95 = HEAP32[12919]|0;
   $96 = HEAP32[12913]|0;
   $97 = (($96) + ($95<<2)|0);
   $98 = HEAP32[$97>>2]|0;
   $99 = HEAP32[12920]|0;
   $100 = HEAP32[12913]|0;
   $101 = (($100) + ($99<<2)|0);
   HEAP32[$101>>2] = $98;
   $102 = HEAP32[12919]|0;
   $103 = (($102) + 1)|0;
   HEAP32[12919] = $103;
   $104 = HEAP32[12914]|0;
   $105 = (($104) + ($102<<2)|0);
   $106 = HEAP32[$105>>2]|0;
   $107 = HEAP32[12920]|0;
   $108 = (($107) + 1)|0;
   HEAP32[12920] = $108;
   $109 = HEAP32[12921]|0;
   $110 = (($109) + ($107<<2)|0);
   HEAP32[$110>>2] = $106;
   continue L5;
   break;
  }
  case 71:  {
   break;
  }
  default: {
   continue L5;
  }
  }
  $111 = HEAP32[12917]|0;
  $112 = ($111|0)!=(0|0);
  if ($112) {
   $113 = HEAP32[12916]|0;
   $114 = HEAP32[12918]|0;
   $115 = ($113|0)<($114|0);
   if ($115) {
    $116 = HEAP32[12924]|0;
    $117 = HEAP32[12916]|0;
    $118 = (($117) + 1)|0;
    HEAP32[12916] = $118;
    $119 = HEAP32[12917]|0;
    $120 = (($119) + ($117<<2)|0);
    HEAP32[$120>>2] = $116;
   }
  }
  $121 = (_back_passDoAction()|0);
  $122 = ($121|0)!=(0);
  if (!($122)) {
   break;
  }
  $123 = HEAP32[12925]|0;
  HEAP32[12919] = $123;
 }
 $0 = 1;
 $124 = $0;
 STACKTOP = sp;return ($124|0);
}
function _translatePass_340() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[12922] = 111;
 HEAP32[12920] = 0;
 HEAP32[12919] = 0;
 _resetPassVariables();
 L1: while(1) {
  $0 = HEAP32[12919]|0;
  $1 = HEAP32[12903]|0;
  $2 = ($0|0)<($1|0);
  if (!($2)) {
   label = 11;
   break;
  }
  _passSelectRule_341();
  $3 = HEAP32[12923]|0;
  switch ($3|0) {
  case 74: case 73: case 72:  {
   break;
  }
  case 78:  {
   $17 = HEAP32[12920]|0;
   $18 = (($17) + 1)|0;
   $19 = HEAP32[12904]|0;
   $20 = ($18|0)>($19|0);
   if ($20) {
    break L1;
   }
   $21 = HEAP32[12919]|0;
   $22 = HEAP32[12913]|0;
   $23 = (($22) + ($21<<2)|0);
   $24 = HEAP32[$23>>2]|0;
   $25 = HEAP32[12920]|0;
   $26 = HEAP32[12913]|0;
   $27 = (($26) + ($25<<2)|0);
   HEAP32[$27>>2] = $24;
   $28 = HEAP32[12919]|0;
   $29 = (($28) + 1)|0;
   HEAP32[12919] = $29;
   $30 = HEAP32[12914]|0;
   $31 = (($30) + ($28<<2)|0);
   $32 = HEAP32[$31>>2]|0;
   $33 = HEAP32[12920]|0;
   $34 = (($33) + 1)|0;
   HEAP32[12920] = $34;
   $35 = HEAP32[12921]|0;
   $36 = (($35) + ($33<<2)|0);
   HEAP32[$36>>2] = $32;
   continue L1;
   break;
  }
  default: {
   break L1;
  }
  }
  $4 = HEAP32[12917]|0;
  $5 = ($4|0)!=(0|0);
  if ($5) {
   $6 = HEAP32[12916]|0;
   $7 = HEAP32[12918]|0;
   $8 = ($6|0)<($7|0);
   if ($8) {
    $9 = HEAP32[12924]|0;
    $10 = HEAP32[12916]|0;
    $11 = (($10) + 1)|0;
    HEAP32[12916] = $11;
    $12 = HEAP32[12917]|0;
    $13 = (($12) + ($10<<2)|0);
    HEAP32[$13>>2] = $9;
   }
  }
  $14 = (_back_passDoAction()|0);
  $15 = ($14|0)!=(0);
  if (!($15)) {
   break;
  }
  $16 = HEAP32[12925]|0;
  HEAP32[12919] = $16;
 }
 if ((label|0) == 11) {
  $37 = HEAP32[12919]|0;
  $38 = HEAP32[12913]|0;
  $39 = (($38) + ($37<<2)|0);
  $40 = HEAP32[$39>>2]|0;
  $41 = HEAP32[12920]|0;
  $42 = HEAP32[12913]|0;
  $43 = (($42) + ($41<<2)|0);
  HEAP32[$43>>2] = $40;
 }
 $44 = HEAP32[12919]|0;
 $45 = HEAP32[12903]|0;
 $46 = ($44|0)<($45|0);
 if (!($46)) {
  return 1;
 }
 while(1) {
  $47 = HEAP32[12919]|0;
  $48 = HEAP32[12914]|0;
  $49 = (($48) + ($47<<2)|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = (_checkAttr_343($50,1,1)|0);
  $52 = ($51|0)!=(0);
  if (!($52)) {
   label = 15;
   break;
  }
  $53 = HEAP32[12919]|0;
  $54 = (($53) + 1)|0;
  HEAP32[12919] = $54;
  $55 = HEAP32[12903]|0;
  $56 = ($54|0)==($55|0);
  if ($56) {
   label = 15;
   break;
  }
 }
 if ((label|0) == 15) {
  return 1;
 }
 return (0)|0;
}
function _passSelectRule_341() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_findBackPassRule()|0);
 $1 = ($0|0)!=(0);
 if ($1) {
  return;
 }
 HEAP32[12923] = 78;
 return;
}
function _back_passDoAction() {
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $8 = HEAP32[12928]|0;
 $2 = $8;
 $9 = HEAP32[12929]|0;
 $3 = $9;
 $10 = HEAP32[12925]|0;
 $4 = $10;
 $11 = HEAP32[12920]|0;
 $5 = $11;
 $12 = $2;
 $13 = $3;
 $14 = (_copyCharacters_348($12,$13)|0);
 $15 = ($14|0)!=(0);
 if (!($15)) {
  $0 = 0;
  $116 = $0;
  STACKTOP = sp;return ($116|0);
 }
 $16 = HEAP32[12920]|0;
 $6 = $16;
 L5: while(1) {
  $17 = HEAP32[12930]|0;
  $18 = HEAP32[12924]|0;
  $19 = ((($18)) + 26|0);
  $20 = HEAP16[$19>>1]|0;
  $21 = $20 << 16 >> 16;
  $22 = ($17|0)<($21|0);
  if (!($22)) {
   label = 23;
   break;
  }
  $23 = HEAP32[12930]|0;
  $24 = HEAP32[12931]|0;
  $25 = (($24) + ($23<<2)|0);
  $26 = HEAP32[$25>>2]|0;
  switch ($26|0) {
  case 64: case 34:  {
   $27 = HEAP32[12920]|0;
   $28 = HEAP32[12930]|0;
   $29 = (($28) + 1)|0;
   $30 = HEAP32[12931]|0;
   $31 = (($30) + ($29<<2)|0);
   $32 = HEAP32[$31>>2]|0;
   $33 = (($27) + ($32))|0;
   $34 = HEAP32[12904]|0;
   $35 = ($33>>>0)>($34>>>0);
   if ($35) {
    label = 7;
    break L5;
   }
   $1 = 0;
   while(1) {
    $36 = $1;
    $37 = HEAP32[12930]|0;
    $38 = (($37) + 1)|0;
    $39 = HEAP32[12931]|0;
    $40 = (($39) + ($38<<2)|0);
    $41 = HEAP32[$40>>2]|0;
    $42 = ($36>>>0)<($41>>>0);
    if (!($42)) {
     break;
    }
    $43 = HEAP32[12928]|0;
    $44 = HEAP32[12920]|0;
    $45 = $1;
    $46 = (($44) + ($45))|0;
    $47 = HEAP32[12913]|0;
    $48 = (($47) + ($46<<2)|0);
    HEAP32[$48>>2] = $43;
    $49 = $1;
    $50 = (($49) + 1)|0;
    $1 = $50;
   }
   $51 = HEAP32[12920]|0;
   $52 = HEAP32[12921]|0;
   $53 = (($52) + ($51<<2)|0);
   $54 = HEAP32[12930]|0;
   $55 = (($54) + 2)|0;
   $56 = HEAP32[12931]|0;
   $57 = (($56) + ($55<<2)|0);
   $58 = HEAP32[12930]|0;
   $59 = (($58) + 1)|0;
   $60 = HEAP32[12931]|0;
   $61 = (($60) + ($59<<2)|0);
   $62 = HEAP32[$61>>2]|0;
   $63 = $62<<2;
   _memcpy(($53|0),($57|0),($63|0))|0;
   $64 = HEAP32[12930]|0;
   $65 = (($64) + 1)|0;
   $66 = HEAP32[12931]|0;
   $67 = (($66) + ($65<<2)|0);
   $68 = HEAP32[$67>>2]|0;
   $69 = HEAP32[12920]|0;
   $70 = (($69) + ($68))|0;
   HEAP32[12920] = $70;
   $71 = HEAP32[12930]|0;
   $72 = (($71) + 1)|0;
   $73 = HEAP32[12931]|0;
   $74 = (($73) + ($72<<2)|0);
   $75 = HEAP32[$74>>2]|0;
   $76 = (($75) + 2)|0;
   $77 = HEAP32[12930]|0;
   $78 = (($77) + ($76))|0;
   HEAP32[12930] = $78;
   continue L5;
   break;
  }
  case 37:  {
   $79 = HEAP32[12929]|0;
   $80 = HEAP32[12925]|0;
   $81 = HEAP32[12929]|0;
   $82 = (($80) - ($81))|0;
   $83 = (_back_swapReplace($79,$82)|0);
   $84 = ($83|0)!=(0);
   if (!($84)) {
    label = 13;
    break L5;
   }
   $85 = HEAP32[12930]|0;
   $86 = (($85) + 3)|0;
   HEAP32[12930] = $86;
   continue L5;
   break;
  }
  case 63:  {
   $87 = HEAP32[12930]|0;
   $88 = (($87) + 1)|0;
   HEAP32[12930] = $88;
   continue L5;
   break;
  }
  case 42:  {
   $89 = $6;
   $90 = $5;
   $91 = (($89) - ($90))|0;
   $7 = $91;
   $92 = $7;
   $93 = ($92|0)>(0);
   if ($93) {
    $94 = $5;
    $95 = HEAP32[12921]|0;
    $96 = (($95) + ($94<<2)|0);
    $97 = $6;
    $98 = HEAP32[12921]|0;
    $99 = (($98) + ($97<<2)|0);
    $100 = $7;
    $101 = $100<<2;
    _memmove(($96|0),($99|0),($101|0))|0;
    $102 = $7;
    $103 = HEAP32[12920]|0;
    $104 = (($103) - ($102))|0;
    HEAP32[12920] = $104;
    $105 = $5;
    $6 = $105;
   }
   $106 = $3;
   $107 = $4;
   $108 = (_copyCharacters_348($106,$107)|0);
   $109 = ($108|0)!=(0);
   if (!($109)) {
    label = 19;
    break L5;
   }
   $110 = HEAP32[12932]|0;
   HEAP32[12925] = $110;
   $111 = HEAP32[12930]|0;
   $112 = (($111) + 1)|0;
   HEAP32[12930] = $112;
   continue L5;
   break;
  }
  default: {
   $113 = HEAP32[12931]|0;
   $114 = (_handlePassVariableAction($113,51720)|0);
   $115 = ($114|0)!=(0);
   if ($115) {
    continue L5;
   } else {
    label = 22;
    break L5;
   }
  }
  }
 }
 if ((label|0) == 7) {
  $0 = 0;
  $116 = $0;
  STACKTOP = sp;return ($116|0);
 }
 else if ((label|0) == 13) {
  $0 = 0;
  $116 = $0;
  STACKTOP = sp;return ($116|0);
 }
 else if ((label|0) == 19) {
  $0 = 0;
  $116 = $0;
  STACKTOP = sp;return ($116|0);
 }
 else if ((label|0) == 22) {
  $0 = 0;
  $116 = $0;
  STACKTOP = sp;return ($116|0);
 }
 else if ((label|0) == 23) {
  $0 = 1;
  $116 = $0;
  STACKTOP = sp;return ($116|0);
 }
 return (0)|0;
}
function _checkAttr_343($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $3;
 $7 = HEAP32[12926]|0;
 $8 = ($6|0)!=($7|0);
 if ($8) {
  $9 = $3;
  $10 = $5;
  $11 = (_back_findCharOrDots($9,$10)|0);
  $12 = ((($11)) + 12|0);
  $13 = HEAP32[$12>>2]|0;
  HEAP32[12927] = $13;
  $14 = $3;
  HEAP32[12926] = $14;
 }
 $15 = HEAP32[12927]|0;
 $16 = $4;
 $17 = $15 & $16;
 $18 = ($17|0)!=(0);
 $19 = $18 ? 1 : 0;
 STACKTOP = sp;return ($19|0);
}
function _back_findCharOrDots($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $9 = $3;
 $10 = (($9>>>0) % 1123)&-1;
 $8 = $10;
 $11 = $4;
 $12 = ($11|0)==(0);
 $13 = $8;
 $14 = HEAP32[12902]|0;
 if ($12) {
  $15 = ((($14)) + 3116|0);
  $16 = (($15) + ($13<<2)|0);
  $17 = HEAP32[$16>>2]|0;
  $7 = $17;
  $5 = 688;
 } else {
  $18 = ((($14)) + 7608|0);
  $19 = (($18) + ($13<<2)|0);
  $20 = HEAP32[$19>>2]|0;
  $7 = $20;
  $5 = 716;
 }
 while(1) {
  $21 = $7;
  $22 = ($21|0)!=(0);
  if (!($22)) {
   label = 8;
   break;
  }
  $23 = $7;
  $24 = HEAP32[12902]|0;
  $25 = ((($24)) + 31332|0);
  $26 = (($25) + ($23<<2)|0);
  $6 = $26;
  $27 = $6;
  $28 = ((($27)) + 16|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = $3;
  $31 = ($29|0)==($30|0);
  $32 = $6;
  if ($31) {
   label = 6;
   break;
  }
  $33 = HEAP32[$32>>2]|0;
  $7 = $33;
 }
 if ((label|0) == 6) {
  $2 = $32;
  $42 = $2;
  STACKTOP = sp;return ($42|0);
 }
 else if ((label|0) == 8) {
  $34 = $3;
  $35 = $5;
  $36 = ((($35)) + 24|0);
  HEAP32[$36>>2] = $34;
  $37 = $5;
  $38 = ((($37)) + 20|0);
  HEAP32[$38>>2] = $34;
  $39 = $5;
  $40 = ((($39)) + 16|0);
  HEAP32[$40>>2] = $34;
  $41 = $5;
  $2 = $41;
  $42 = $2;
  STACKTOP = sp;return ($42|0);
 }
 return (0)|0;
}
function _copyCharacters_348($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $6 = HEAP32[12923]|0;
 $7 = ($6|0)==(70);
 L1: do {
  if ($7) {
   while(1) {
    $8 = $3;
    $9 = $4;
    $10 = ($8|0)<($9|0);
    if (!($10)) {
     break L1;
    }
    $11 = $3;
    $12 = (($11) + 1)|0;
    $3 = $12;
    $13 = HEAP32[12914]|0;
    $14 = (($13) + ($11<<2)|0);
    $15 = HEAP32[$14>>2]|0;
    $16 = (_putCharacter_352($15)|0);
    $17 = ($16|0)!=(0);
    if (!($17)) {
     break;
    }
   }
   $2 = 0;
   $47 = $2;
   STACKTOP = sp;return ($47|0);
  } else {
   $18 = $4;
   $19 = $3;
   $20 = (($18) - ($19))|0;
   $5 = $20;
   $21 = $5;
   $22 = ($21|0)>(0);
   if ($22) {
    $23 = HEAP32[12920]|0;
    $24 = $5;
    $25 = (($23) + ($24))|0;
    $26 = HEAP32[12904]|0;
    $27 = ($25|0)>($26|0);
    if (!($27)) {
     $28 = HEAP32[12920]|0;
     $29 = HEAP32[12913]|0;
     $30 = (($29) + ($28<<2)|0);
     $31 = $3;
     $32 = HEAP32[12913]|0;
     $33 = (($32) + ($31<<2)|0);
     $34 = $5;
     $35 = $34<<2;
     _memmove(($30|0),($33|0),($35|0))|0;
     $36 = HEAP32[12920]|0;
     $37 = HEAP32[12921]|0;
     $38 = (($37) + ($36<<2)|0);
     $39 = $3;
     $40 = HEAP32[12914]|0;
     $41 = (($40) + ($39<<2)|0);
     $42 = $5;
     $43 = $42<<2;
     _memcpy(($38|0),($41|0),($43|0))|0;
     $44 = $5;
     $45 = HEAP32[12920]|0;
     $46 = (($45) + ($44))|0;
     HEAP32[12920] = $46;
     break;
    }
    $2 = 0;
    $47 = $2;
    STACKTOP = sp;return ($47|0);
   }
  }
 } while(0);
 $2 = 1;
 $47 = $2;
 STACKTOP = sp;return ($47|0);
}
function _back_swapReplace($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $3 = $0;
 $4 = $1;
 $10 = 0;
 $11 = 0;
 $15 = $3;
 $13 = $15;
 $16 = HEAP32[12930]|0;
 $17 = (($16) + 1)|0;
 $18 = HEAP32[12931]|0;
 $19 = (($18) + ($17<<2)|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = $20 << 16;
 $22 = HEAP32[12930]|0;
 $23 = (($22) + 2)|0;
 $24 = HEAP32[12931]|0;
 $25 = (($24) + ($23<<2)|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = $21 | $26;
 $5 = $27;
 $28 = $5;
 $29 = HEAP32[12902]|0;
 $30 = ((($29)) + 31332|0);
 $31 = (($30) + ($28<<2)|0);
 $6 = $31;
 $32 = $6;
 $33 = ((($32)) + 24|0);
 $34 = HEAP16[$33>>1]|0;
 $35 = $34 << 16 >> 16;
 $36 = $6;
 $37 = ((($36)) + 28|0);
 $38 = (($37) + ($35<<2)|0);
 $7 = $38;
 while(1) {
  $39 = $13;
  $40 = $4;
  $41 = ($39|0)<($40|0);
  if (!($41)) {
   label = 22;
   break;
  }
  $12 = 0;
  while(1) {
   $42 = $12;
   $43 = $6;
   $44 = ((($43)) + 24|0);
   $45 = HEAP16[$44>>1]|0;
   $46 = $45 << 16 >> 16;
   $47 = ($42|0)<($46|0);
   if (!($47)) {
    break;
   }
   $48 = $13;
   $49 = HEAP32[12914]|0;
   $50 = (($49) + ($48<<2)|0);
   $51 = HEAP32[$50>>2]|0;
   $52 = $12;
   $53 = $6;
   $54 = ((($53)) + 28|0);
   $55 = (($54) + ($52<<2)|0);
   $56 = HEAP32[$55>>2]|0;
   $57 = ($51|0)==($56|0);
   if ($57) {
    break;
   }
   $58 = $12;
   $59 = (($58) + 1)|0;
   $12 = $59;
  }
  $60 = $12;
  $61 = $6;
  $62 = ((($61)) + 24|0);
  $63 = HEAP16[$62>>1]|0;
  $64 = $63 << 16 >> 16;
  $65 = ($60|0)==($64|0);
  if ($65) {
   label = 8;
   break;
  }
  $67 = $12;
  $68 = $11;
  $69 = ($67|0)>=($68|0);
  if ($69) {
   $70 = $10;
   $9 = $70;
   $71 = $11;
   $8 = $71;
  } else {
   $9 = 0;
   $8 = 0;
  }
  while(1) {
   $72 = $9;
   $73 = $6;
   $74 = ((($73)) + 26|0);
   $75 = HEAP16[$74>>1]|0;
   $76 = $75 << 16 >> 16;
   $77 = ($72|0)<($76|0);
   if (!($77)) {
    break;
   }
   $78 = $8;
   $79 = $12;
   $80 = ($78|0)==($79|0);
   if ($80) {
    label = 14;
    break;
   }
   $131 = $8;
   $132 = (($131) + 1)|0;
   $8 = $132;
   $133 = $9;
   $134 = $7;
   $135 = (($134) + ($133<<2)|0);
   $136 = HEAP32[$135>>2]|0;
   $137 = $9;
   $138 = (($137) + ($136))|0;
   $9 = $138;
  }
  if ((label|0) == 14) {
   label = 0;
   $81 = HEAP32[12920]|0;
   $82 = $9;
   $83 = $7;
   $84 = (($83) + ($82<<2)|0);
   $85 = HEAP32[$84>>2]|0;
   $86 = (($81) + ($85))|0;
   $87 = (($86) - 1)|0;
   $88 = HEAP32[12904]|0;
   $89 = ($87>>>0)>=($88>>>0);
   if ($89) {
    label = 15;
    break;
   }
   $90 = HEAP32[12920]|0;
   $91 = $9;
   $92 = $7;
   $93 = (($92) + ($91<<2)|0);
   $94 = HEAP32[$93>>2]|0;
   $95 = (($90) + ($94))|0;
   $96 = (($95) - 2)|0;
   $14 = $96;
   while(1) {
    $97 = $14;
    $98 = HEAP32[12920]|0;
    $99 = ($97|0)>=($98|0);
    if (!($99)) {
     break;
    }
    $100 = $13;
    $101 = HEAP32[12913]|0;
    $102 = (($101) + ($100<<2)|0);
    $103 = HEAP32[$102>>2]|0;
    $104 = $14;
    $105 = HEAP32[12913]|0;
    $106 = (($105) + ($104<<2)|0);
    HEAP32[$106>>2] = $103;
    $107 = $14;
    $108 = (($107) + -1)|0;
    $14 = $108;
   }
   $109 = HEAP32[12920]|0;
   $110 = HEAP32[12921]|0;
   $111 = (($110) + ($109<<2)|0);
   $112 = $9;
   $113 = (($112) + 1)|0;
   $114 = $7;
   $115 = (($114) + ($113<<2)|0);
   $116 = $9;
   $117 = $7;
   $118 = (($117) + ($116<<2)|0);
   $119 = HEAP32[$118>>2]|0;
   $120 = (($119) - 1)|0;
   $121 = $120<<2;
   _memcpy(($111|0),($115|0),($121|0))|0;
   $122 = $9;
   $123 = $7;
   $124 = (($123) + ($122<<2)|0);
   $125 = HEAP32[$124>>2]|0;
   $126 = (($125) - 1)|0;
   $127 = HEAP32[12920]|0;
   $128 = (($127) + ($126))|0;
   HEAP32[12920] = $128;
   $129 = $9;
   $10 = $129;
   $130 = $8;
   $11 = $130;
  }
  $139 = $13;
  $140 = (($139) + 1)|0;
  $13 = $140;
 }
 if ((label|0) == 8) {
  $66 = $13;
  $2 = $66;
  $142 = $2;
  STACKTOP = sp;return ($142|0);
 }
 else if ((label|0) == 15) {
  $2 = 0;
  $142 = $2;
  STACKTOP = sp;return ($142|0);
 }
 else if ((label|0) == 22) {
  $141 = $13;
  $2 = $141;
  $142 = $2;
  STACKTOP = sp;return ($142|0);
 }
 return (0)|0;
}
function _putCharacter_352($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = sp + 4|0;
 $2 = $0;
 $6 = $2;
 $7 = (_back_findCharOrDots($6,1)|0);
 $8 = ((($7)) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $3 = $9;
 $10 = $3;
 $11 = ($10|0)!=(0);
 if (!($11)) {
  $34 = $2;
  $35 = (_undefinedDots($34)|0);
  $1 = $35;
  $36 = $1;
  STACKTOP = sp;return ($36|0);
 }
 $12 = $3;
 $13 = HEAP32[12902]|0;
 $14 = ((($13)) + 31332|0);
 $15 = (($14) + ($12<<2)|0);
 $5 = $15;
 $16 = $5;
 $17 = ((($16)) + 24|0);
 $18 = HEAP16[$17>>1]|0;
 $19 = ($18<<16>>16)!=(0);
 if ($19) {
  $20 = $5;
  $21 = ((($20)) + 28|0);
  $22 = $5;
  $23 = ((($22)) + 26|0);
  $24 = HEAP16[$23>>1]|0;
  $25 = $24 << 16 >> 16;
  $26 = $5;
  $27 = ((($26)) + 24|0);
  $28 = HEAP16[$27>>1]|0;
  $29 = $28 << 16 >> 16;
  $30 = (_back_updatePositions($21,$25,$29)|0);
  $1 = $30;
  $36 = $1;
  STACKTOP = sp;return ($36|0);
 } else {
  $31 = $2;
  $32 = (_getCharFromDots($31)|0);
  HEAP32[$4>>2] = $32;
  $33 = (_back_updatePositions($4,1,1)|0);
  $1 = $33;
  $36 = $1;
  STACKTOP = sp;return ($36|0);
 }
 return (0)|0;
}
function _back_updatePositions($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $8 = HEAP32[12920]|0;
 $9 = $6;
 $10 = (($8) + ($9))|0;
 $11 = HEAP32[12904]|0;
 $12 = ($10|0)>($11|0);
 if (!($12)) {
  $13 = HEAP32[12919]|0;
  $14 = $5;
  $15 = (($13) + ($14))|0;
  $16 = HEAP32[12903]|0;
  $17 = ($15|0)>($16|0);
  if (!($17)) {
   $18 = HEAP32[12910]|0;
   $19 = ($18|0)!=(0);
   if (!($19)) {
    $20 = HEAP32[12909]|0;
    $21 = HEAP32[12919]|0;
    $22 = ($20|0)>=($21|0);
    if ($22) {
     $23 = HEAP32[12909]|0;
     $24 = HEAP32[12919]|0;
     $25 = $5;
     $26 = (($24) + ($25))|0;
     $27 = ($23|0)<($26|0);
     if ($27) {
      $28 = HEAP32[12920]|0;
      $29 = $6;
      $30 = (($29|0) / 2)&-1;
      $31 = (($28) + ($30))|0;
      HEAP32[12909] = $31;
      HEAP32[12910] = 1;
     }
    }
   }
   $32 = HEAP32[12908]|0;
   $33 = ($32|0)!=(0|0);
   $34 = HEAP32[12907]|0;
   $35 = ($34|0)!=(0|0);
   $or$cond = $33 | $35;
   L9: do {
    if ($or$cond) {
     $36 = $6;
     $37 = $5;
     $38 = ($36|0)<=($37|0);
     $7 = 0;
     if ($38) {
      while(1) {
       $39 = $7;
       $40 = $6;
       $41 = ($39|0)<($40|0);
       if (!($41)) {
        break;
       }
       $42 = HEAP32[12908]|0;
       $43 = ($42|0)!=(0|0);
       if ($43) {
        $44 = HEAP32[12919]|0;
        $45 = $7;
        $46 = (($44) + ($45))|0;
        $47 = HEAP32[12913]|0;
        $48 = (($47) + ($46<<2)|0);
        $49 = HEAP32[$48>>2]|0;
        $50 = HEAP32[12920]|0;
        $51 = $7;
        $52 = (($50) + ($51))|0;
        $53 = HEAP32[12908]|0;
        $54 = (($53) + ($52<<2)|0);
        HEAP32[$54>>2] = $49;
       }
       $55 = HEAP32[12907]|0;
       $56 = ($55|0)!=(0|0);
       if ($56) {
        $57 = HEAP32[12920]|0;
        $58 = $7;
        $59 = (($57) + ($58))|0;
        $60 = HEAP32[12919]|0;
        $61 = $7;
        $62 = (($60) + ($61))|0;
        $63 = HEAP32[12913]|0;
        $64 = (($63) + ($62<<2)|0);
        $65 = HEAP32[$64>>2]|0;
        $66 = HEAP32[12907]|0;
        $67 = (($66) + ($65<<2)|0);
        HEAP32[$67>>2] = $59;
       }
       $68 = $7;
       $69 = (($68) + 1)|0;
       $7 = $69;
      }
      $70 = $6;
      $7 = $70;
      while(1) {
       $71 = $7;
       $72 = $5;
       $73 = ($71|0)<($72|0);
       if (!($73)) {
        break L9;
       }
       $74 = HEAP32[12907]|0;
       $75 = ($74|0)!=(0|0);
       if ($75) {
        $76 = HEAP32[12920]|0;
        $77 = $6;
        $78 = (($76) + ($77))|0;
        $79 = (($78) - 1)|0;
        $80 = HEAP32[12919]|0;
        $81 = $7;
        $82 = (($80) + ($81))|0;
        $83 = HEAP32[12913]|0;
        $84 = (($83) + ($82<<2)|0);
        $85 = HEAP32[$84>>2]|0;
        $86 = HEAP32[12907]|0;
        $87 = (($86) + ($85<<2)|0);
        HEAP32[$87>>2] = $79;
       }
       $88 = $7;
       $89 = (($88) + 1)|0;
       $7 = $89;
      }
     } else {
      while(1) {
       $90 = $7;
       $91 = $5;
       $92 = ($90|0)<($91|0);
       if (!($92)) {
        break;
       }
       $93 = HEAP32[12908]|0;
       $94 = ($93|0)!=(0|0);
       if ($94) {
        $95 = HEAP32[12919]|0;
        $96 = $7;
        $97 = (($95) + ($96))|0;
        $98 = HEAP32[12913]|0;
        $99 = (($98) + ($97<<2)|0);
        $100 = HEAP32[$99>>2]|0;
        $101 = HEAP32[12920]|0;
        $102 = $7;
        $103 = (($101) + ($102))|0;
        $104 = HEAP32[12908]|0;
        $105 = (($104) + ($103<<2)|0);
        HEAP32[$105>>2] = $100;
       }
       $106 = HEAP32[12907]|0;
       $107 = ($106|0)!=(0|0);
       if ($107) {
        $108 = HEAP32[12920]|0;
        $109 = $7;
        $110 = (($108) + ($109))|0;
        $111 = HEAP32[12919]|0;
        $112 = $7;
        $113 = (($111) + ($112))|0;
        $114 = HEAP32[12913]|0;
        $115 = (($114) + ($113<<2)|0);
        $116 = HEAP32[$115>>2]|0;
        $117 = HEAP32[12907]|0;
        $118 = (($117) + ($116<<2)|0);
        HEAP32[$118>>2] = $110;
       }
       $119 = $7;
       $120 = (($119) + 1)|0;
       $7 = $120;
      }
      $121 = $5;
      $7 = $121;
      while(1) {
       $122 = $7;
       $123 = $6;
       $124 = ($122|0)<($123|0);
       if (!($124)) {
        break L9;
       }
       $125 = HEAP32[12908]|0;
       $126 = ($125|0)!=(0|0);
       if ($126) {
        $127 = HEAP32[12919]|0;
        $128 = $5;
        $129 = (($127) + ($128))|0;
        $130 = (($129) - 1)|0;
        $131 = HEAP32[12913]|0;
        $132 = (($131) + ($130<<2)|0);
        $133 = HEAP32[$132>>2]|0;
        $134 = HEAP32[12920]|0;
        $135 = $7;
        $136 = (($134) + ($135))|0;
        $137 = HEAP32[12908]|0;
        $138 = (($137) + ($136<<2)|0);
        HEAP32[$138>>2] = $133;
       }
       $139 = $7;
       $140 = (($139) + 1)|0;
       $7 = $140;
      }
     }
    }
   } while(0);
   $141 = $4;
   $142 = $6;
   $143 = (_putchars($141,$142)|0);
   $3 = $143;
   $144 = $3;
   STACKTOP = sp;return ($144|0);
  }
 }
 $3 = 0;
 $144 = $3;
 STACKTOP = sp;return ($144|0);
}
function _undefinedDots($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $12 = 0, $13 = 0;
 var $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(96|0);
 $3 = sp + 8|0;
 $2 = $0;
 $5 = HEAP32[12911]|0;
 $6 = $5 & 256;
 $7 = ($6|0)!=(0);
 if ($7) {
  $1 = 1;
  $114 = $1;
  STACKTOP = sp;return ($114|0);
 }
 $4 = 1;
 HEAP32[$3>>2] = 92;
 $8 = $2;
 $9 = $8 & 1;
 $10 = ($9|0)!=(0);
 if ($10) {
  $11 = $4;
  $12 = (($11) + 1)|0;
  $4 = $12;
  $13 = (($3) + ($11<<2)|0);
  HEAP32[$13>>2] = 49;
 }
 $14 = $2;
 $15 = $14 & 2;
 $16 = ($15|0)!=(0);
 if ($16) {
  $17 = $4;
  $18 = (($17) + 1)|0;
  $4 = $18;
  $19 = (($3) + ($17<<2)|0);
  HEAP32[$19>>2] = 50;
 }
 $20 = $2;
 $21 = $20 & 4;
 $22 = ($21|0)!=(0);
 if ($22) {
  $23 = $4;
  $24 = (($23) + 1)|0;
  $4 = $24;
  $25 = (($3) + ($23<<2)|0);
  HEAP32[$25>>2] = 51;
 }
 $26 = $2;
 $27 = $26 & 8;
 $28 = ($27|0)!=(0);
 if ($28) {
  $29 = $4;
  $30 = (($29) + 1)|0;
  $4 = $30;
  $31 = (($3) + ($29<<2)|0);
  HEAP32[$31>>2] = 52;
 }
 $32 = $2;
 $33 = $32 & 16;
 $34 = ($33|0)!=(0);
 if ($34) {
  $35 = $4;
  $36 = (($35) + 1)|0;
  $4 = $36;
  $37 = (($3) + ($35<<2)|0);
  HEAP32[$37>>2] = 53;
 }
 $38 = $2;
 $39 = $38 & 32;
 $40 = ($39|0)!=(0);
 if ($40) {
  $41 = $4;
  $42 = (($41) + 1)|0;
  $4 = $42;
  $43 = (($3) + ($41<<2)|0);
  HEAP32[$43>>2] = 54;
 }
 $44 = $2;
 $45 = $44 & 64;
 $46 = ($45|0)!=(0);
 if ($46) {
  $47 = $4;
  $48 = (($47) + 1)|0;
  $4 = $48;
  $49 = (($3) + ($47<<2)|0);
  HEAP32[$49>>2] = 55;
 }
 $50 = $2;
 $51 = $50 & 128;
 $52 = ($51|0)!=(0);
 if ($52) {
  $53 = $4;
  $54 = (($53) + 1)|0;
  $4 = $54;
  $55 = (($3) + ($53<<2)|0);
  HEAP32[$55>>2] = 56;
 }
 $56 = $2;
 $57 = $56 & 256;
 $58 = ($57|0)!=(0);
 if ($58) {
  $59 = $4;
  $60 = (($59) + 1)|0;
  $4 = $60;
  $61 = (($3) + ($59<<2)|0);
  HEAP32[$61>>2] = 57;
 }
 $62 = $2;
 $63 = $62 & 512;
 $64 = ($63|0)!=(0);
 if ($64) {
  $65 = $4;
  $66 = (($65) + 1)|0;
  $4 = $66;
  $67 = (($3) + ($65<<2)|0);
  HEAP32[$67>>2] = 65;
 }
 $68 = $2;
 $69 = $68 & 1024;
 $70 = ($69|0)!=(0);
 if ($70) {
  $71 = $4;
  $72 = (($71) + 1)|0;
  $4 = $72;
  $73 = (($3) + ($71<<2)|0);
  HEAP32[$73>>2] = 66;
 }
 $74 = $2;
 $75 = $74 & 2048;
 $76 = ($75|0)!=(0);
 if ($76) {
  $77 = $4;
  $78 = (($77) + 1)|0;
  $4 = $78;
  $79 = (($3) + ($77<<2)|0);
  HEAP32[$79>>2] = 67;
 }
 $80 = $2;
 $81 = $80 & 4096;
 $82 = ($81|0)!=(0);
 if ($82) {
  $83 = $4;
  $84 = (($83) + 1)|0;
  $4 = $84;
  $85 = (($3) + ($83<<2)|0);
  HEAP32[$85>>2] = 68;
 }
 $86 = $2;
 $87 = $86 & 8192;
 $88 = ($87|0)!=(0);
 if ($88) {
  $89 = $4;
  $90 = (($89) + 1)|0;
  $4 = $90;
  $91 = (($3) + ($89<<2)|0);
  HEAP32[$91>>2] = 69;
 }
 $92 = $2;
 $93 = $92 & 16384;
 $94 = ($93|0)!=(0);
 if ($94) {
  $95 = $4;
  $96 = (($95) + 1)|0;
  $4 = $96;
  $97 = (($3) + ($95<<2)|0);
  HEAP32[$97>>2] = 70;
 }
 $98 = $4;
 $99 = (($98) + 1)|0;
 $4 = $99;
 $100 = (($3) + ($98<<2)|0);
 HEAP32[$100>>2] = 47;
 $101 = HEAP32[12920]|0;
 $102 = $4;
 $103 = (($101) + ($102))|0;
 $104 = HEAP32[12904]|0;
 $105 = ($103|0)>($104|0);
 if ($105) {
  $1 = 0;
  $114 = $1;
  STACKTOP = sp;return ($114|0);
 } else {
  $106 = HEAP32[12920]|0;
  $107 = HEAP32[12921]|0;
  $108 = (($107) + ($106<<2)|0);
  $109 = $4;
  $110 = $109<<2;
  _memcpy(($108|0),($3|0),($110|0))|0;
  $111 = $4;
  $112 = HEAP32[12920]|0;
  $113 = (($112) + ($111))|0;
  HEAP32[12920] = $113;
  $1 = 1;
  $114 = $1;
  STACKTOP = sp;return ($114|0);
 }
 return (0)|0;
}
function _putchars($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = 0;
 $6 = $4;
 $7 = ($6|0)!=(0);
 if ($7) {
  $8 = HEAP32[12920]|0;
  $9 = $4;
  $10 = (($8) + ($9))|0;
  $11 = HEAP32[12904]|0;
  $12 = ($10|0)>($11|0);
  if (!($12)) {
   $13 = HEAP32[12933]|0;
   $14 = ($13|0)!=(0);
   if ($14) {
    $15 = $5;
    $16 = (($15) + 1)|0;
    $5 = $16;
    $17 = $3;
    $18 = (($17) + ($15<<2)|0);
    $19 = HEAP32[$18>>2]|0;
    $20 = (_back_findCharOrDots($19,0)|0);
    $21 = ((($20)) + 20|0);
    $22 = HEAP32[$21>>2]|0;
    $23 = HEAP32[12920]|0;
    $24 = (($23) + 1)|0;
    HEAP32[12920] = $24;
    $25 = HEAP32[12921]|0;
    $26 = (($25) + ($23<<2)|0);
    HEAP32[$26>>2] = $22;
    HEAP32[12933] = 0;
   }
   $27 = HEAP32[12934]|0;
   $28 = ($27|0)!=(0);
   $29 = HEAP32[12935]|0;
   $30 = ($29|0)!=(0);
   $or$cond = $28 | $30;
   L7: do {
    if ($or$cond) {
     while(1) {
      $46 = $5;
      $47 = $4;
      $48 = ($46|0)<($47|0);
      if (!($48)) {
       break L7;
      }
      $49 = $5;
      $50 = $3;
      $51 = (($50) + ($49<<2)|0);
      $52 = HEAP32[$51>>2]|0;
      $53 = (_back_findCharOrDots($52,0)|0);
      $54 = ((($53)) + 20|0);
      $55 = HEAP32[$54>>2]|0;
      $56 = HEAP32[12920]|0;
      $57 = (($56) + 1)|0;
      HEAP32[12920] = $57;
      $58 = HEAP32[12921]|0;
      $59 = (($58) + ($56<<2)|0);
      HEAP32[$59>>2] = $55;
      $60 = $5;
      $61 = (($60) + 1)|0;
      $5 = $61;
     }
    } else {
     $31 = HEAP32[12920]|0;
     $32 = HEAP32[12921]|0;
     $33 = (($32) + ($31<<2)|0);
     $34 = $5;
     $35 = $3;
     $36 = (($35) + ($34<<2)|0);
     $37 = $4;
     $38 = $5;
     $39 = (($37) - ($38))|0;
     $40 = $39<<2;
     _memcpy(($33|0),($36|0),($40|0))|0;
     $41 = $4;
     $42 = $5;
     $43 = (($41) - ($42))|0;
     $44 = HEAP32[12920]|0;
     $45 = (($44) + ($43))|0;
     HEAP32[12920] = $45;
    }
   } while(0);
   $2 = 1;
   $62 = $2;
   STACKTOP = sp;return ($62|0);
  }
 }
 $2 = 0;
 $62 = $2;
 STACKTOP = sp;return ($62|0);
}
function _findBackPassRule() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = HEAP32[171]|0;
 $3 = HEAP32[12902]|0;
 $4 = ((($3)) + 22328|0);
 $5 = (($4) + ($2<<2)|0);
 $6 = HEAP32[$5>>2]|0;
 $1 = $6;
 HEAP32[12936] = 0;
 while(1) {
  $7 = $1;
  $8 = ($7|0)!=(0);
  if (!($8)) {
   label = 12;
   break;
  }
  $9 = $1;
  $10 = HEAP32[12902]|0;
  $11 = ((($10)) + 31332|0);
  $12 = (($11) + ($9<<2)|0);
  HEAP32[12924] = $12;
  $13 = HEAP32[12924]|0;
  $14 = ((($13)) + 20|0);
  $15 = HEAP32[$14>>2]|0;
  HEAP32[12923] = $15;
  $16 = HEAP32[12923]|0;
  switch ($16|0) {
  case 71:  {
   $17 = HEAP32[171]|0;
   $18 = ($17|0)!=(0);
   if (!($18)) {
    label = 9;
   }
   break;
  }
  case 70:  {
   $19 = HEAP32[171]|0;
   $20 = ($19|0)!=(1);
   if (!($20)) {
    label = 9;
   }
   break;
  }
  case 72:  {
   $21 = HEAP32[171]|0;
   $22 = ($21|0)!=(2);
   if (!($22)) {
    label = 9;
   }
   break;
  }
  case 73:  {
   $23 = HEAP32[171]|0;
   $24 = ($23|0)!=(3);
   if (!($24)) {
    label = 9;
   }
   break;
  }
  case 74:  {
   $25 = HEAP32[171]|0;
   $26 = ($25|0)!=(4);
   if (!($26)) {
    label = 9;
   }
   break;
  }
  default: {
  }
  }
  if ((label|0) == 9) {
   label = 0;
   $27 = (_back_passDoTest()|0);
   $28 = ($27|0)!=(0);
   if ($28) {
    label = 10;
    break;
   }
  }
  $29 = HEAP32[12924]|0;
  $30 = ((($29)) + 4|0);
  $31 = HEAP32[$30>>2]|0;
  $1 = $31;
 }
 if ((label|0) == 10) {
  $0 = 1;
  $32 = $0;
  STACKTOP = sp;return ($32|0);
 }
 else if ((label|0) == 12) {
  $0 = 0;
  $32 = $0;
  STACKTOP = sp;return ($32|0);
 }
 return (0)|0;
}
function _back_passDoTest() {
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $or$cond3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $5 = sp;
 $3 = 0;
 $6 = HEAP32[12919]|0;
 HEAP32[12932] = $6;
 $7 = HEAP32[12924]|0;
 $8 = ((($7)) + 24|0);
 $9 = HEAP16[$8>>1]|0;
 $10 = $9 << 16 >> 16;
 $11 = HEAP32[12924]|0;
 $12 = ((($11)) + 28|0);
 $13 = (($12) + ($10<<2)|0);
 HEAP32[12931] = $13;
 HEAP32[12930] = 0;
 $14 = HEAP32[12932]|0;
 HEAP32[12928] = $14;
 HEAP32[12929] = -1;
 $15 = HEAP32[12923]|0;
 $16 = ($15|0)==(71);
 if ($16) {
  $2 = 0;
 } else {
  $2 = 1;
 }
 L4: while(1) {
  $17 = HEAP32[12930]|0;
  $18 = HEAP32[12924]|0;
  $19 = ((($18)) + 26|0);
  $20 = HEAP16[$19>>1]|0;
  $21 = $20 << 16 >> 16;
  $22 = ($17|0)<($21|0);
  if (!($22)) {
   label = 45;
   break;
  }
  HEAP32[$5>>2] = 1;
  $23 = HEAP32[12932]|0;
  $24 = HEAP32[12903]|0;
  $25 = ($23|0)>($24|0);
  if ($25) {
   label = 6;
   break;
  }
  $26 = HEAP32[12930]|0;
  $27 = HEAP32[12931]|0;
  $28 = (($27) + ($26<<2)|0);
  $29 = HEAP32[$28>>2]|0;
  do {
   switch ($29|0) {
   case 32:  {
    label = 36;
    break L4;
    break;
   }
   case 96:  {
    $30 = HEAP32[12932]|0;
    $31 = ($30|0)!=(0);
    if ($31) {
     HEAP32[$5>>2] = 0;
    }
    $32 = HEAP32[12930]|0;
    $33 = (($32) + 1)|0;
    HEAP32[12930] = $33;
    break;
   }
   case 126:  {
    $34 = HEAP32[12932]|0;
    $35 = HEAP32[12903]|0;
    $36 = ($34|0)!=($35|0);
    if ($36) {
     HEAP32[$5>>2] = 0;
    }
    $37 = HEAP32[12930]|0;
    $38 = (($37) + 1)|0;
    HEAP32[12930] = $38;
    break;
   }
   case 95:  {
    $39 = HEAP32[12930]|0;
    $40 = (($39) + 1)|0;
    $41 = HEAP32[12931]|0;
    $42 = (($41) + ($40<<2)|0);
    $43 = HEAP32[$42>>2]|0;
    $44 = HEAP32[12932]|0;
    $45 = (($44) - ($43))|0;
    HEAP32[12932] = $45;
    $46 = HEAP32[12932]|0;
    $47 = ($46|0)<(0);
    if ($47) {
     HEAP32[12932] = 0;
     HEAP32[$5>>2] = 0;
    }
    $48 = HEAP32[12930]|0;
    $49 = (($48) + 2)|0;
    HEAP32[12930] = $49;
    break;
   }
   case 33:  {
    $50 = $3;
    $51 = ($50|0)!=(0);
    $52 = $51 ^ 1;
    $53 = $52&1;
    $3 = $53;
    $54 = HEAP32[12930]|0;
    $55 = (($54) + 1)|0;
    HEAP32[12930] = $55;
    continue L4;
    break;
   }
   case 64: case 34:  {
    $56 = (_matchcurrentInput()|0);
    HEAP32[$5>>2] = $56;
    $57 = HEAP32[12930]|0;
    $58 = (($57) + 1)|0;
    $59 = HEAP32[12931]|0;
    $60 = (($59) + ($58<<2)|0);
    $61 = HEAP32[$60>>2]|0;
    $62 = HEAP32[12932]|0;
    $63 = (($62) + ($61))|0;
    HEAP32[12932] = $63;
    $64 = HEAP32[12930]|0;
    $65 = (($64) + 1)|0;
    $66 = HEAP32[12931]|0;
    $67 = (($66) + ($65<<2)|0);
    $68 = HEAP32[$67>>2]|0;
    $69 = (($68) + 2)|0;
    $70 = HEAP32[12930]|0;
    $71 = (($70) + ($69))|0;
    HEAP32[12930] = $71;
    break;
   }
   case 91:  {
    $72 = HEAP32[12932]|0;
    HEAP32[12929] = $72;
    $73 = HEAP32[12930]|0;
    $74 = (($73) + 1)|0;
    HEAP32[12930] = $74;
    break;
   }
   case 93:  {
    $75 = HEAP32[12932]|0;
    HEAP32[12925] = $75;
    $76 = HEAP32[12930]|0;
    $77 = (($76) + 1)|0;
    HEAP32[12930] = $77;
    break;
   }
   case 36:  {
    $78 = HEAP32[12930]|0;
    $79 = (($78) + 1)|0;
    $80 = HEAP32[12931]|0;
    $81 = (($80) + ($79<<2)|0);
    $82 = HEAP32[$81>>2]|0;
    $83 = $82 << 16;
    $84 = HEAP32[12930]|0;
    $85 = (($84) + 2)|0;
    $86 = HEAP32[12931]|0;
    $87 = (($86) + ($85<<2)|0);
    $88 = HEAP32[$87>>2]|0;
    $89 = $83 | $88;
    $4 = $89;
    $1 = 0;
    while(1) {
     $90 = $1;
     $91 = HEAP32[12930]|0;
     $92 = (($91) + 3)|0;
     $93 = HEAP32[12931]|0;
     $94 = (($93) + ($92<<2)|0);
     $95 = HEAP32[$94>>2]|0;
     $96 = ($90>>>0)<($95>>>0);
     if (!($96)) {
      break;
     }
     $97 = HEAP32[12932]|0;
     $98 = HEAP32[12903]|0;
     $99 = ($97|0)>=($98|0);
     if ($99) {
      label = 24;
      break;
     }
     $100 = HEAP32[12932]|0;
     $101 = HEAP32[12914]|0;
     $102 = (($101) + ($100<<2)|0);
     $103 = HEAP32[$102>>2]|0;
     $104 = $2;
     $105 = (_back_findCharOrDots($103,$104)|0);
     $106 = ((($105)) + 12|0);
     $107 = HEAP32[$106>>2]|0;
     $108 = $4;
     $109 = $107 & $108;
     $110 = ($109|0)!=(0);
     if (!($110)) {
      label = 26;
      break;
     }
     $111 = HEAP32[12932]|0;
     $112 = (($111) + 1)|0;
     HEAP32[12932] = $112;
     $113 = $1;
     $114 = (($113) + 1)|0;
     $1 = $114;
    }
    if ((label|0) == 24) {
     label = 0;
     HEAP32[$5>>2] = 0;
    }
    else if ((label|0) == 26) {
     label = 0;
     HEAP32[$5>>2] = 0;
    }
    $115 = HEAP32[$5>>2]|0;
    $116 = ($115|0)!=(0);
    L36: do {
     if ($116) {
      $117 = HEAP32[12930]|0;
      $118 = (($117) + 3)|0;
      $119 = HEAP32[12931]|0;
      $120 = (($119) + ($118<<2)|0);
      $121 = HEAP32[$120>>2]|0;
      $1 = $121;
      while(1) {
       $122 = $1;
       $123 = HEAP32[12930]|0;
       $124 = (($123) + 4)|0;
       $125 = HEAP32[12931]|0;
       $126 = (($125) + ($124<<2)|0);
       $127 = HEAP32[$126>>2]|0;
       $128 = ($122>>>0)<($127>>>0);
       if (!($128)) {
        break L36;
       }
       $129 = HEAP32[12932]|0;
       $130 = HEAP32[12903]|0;
       $131 = ($129|0)<($130|0);
       if (!($131)) {
        break L36;
       }
       $132 = HEAP32[12932]|0;
       $133 = HEAP32[12914]|0;
       $134 = (($133) + ($132<<2)|0);
       $135 = HEAP32[$134>>2]|0;
       $136 = $2;
       $137 = (_back_findCharOrDots($135,$136)|0);
       $138 = ((($137)) + 12|0);
       $139 = HEAP32[$138>>2]|0;
       $140 = $4;
       $141 = $139 & $140;
       $142 = ($141|0)!=(0);
       if (!($142)) {
        break L36;
       }
       $143 = HEAP32[12932]|0;
       $144 = (($143) + 1)|0;
       HEAP32[12932] = $144;
       $145 = $1;
       $146 = (($145) + 1)|0;
       $1 = $146;
      }
     }
    } while(0);
    $147 = HEAP32[12930]|0;
    $148 = (($147) + 5)|0;
    HEAP32[12930] = $148;
    break;
   }
   case 37:  {
    $149 = (_back_swapTest()|0);
    HEAP32[$5>>2] = $149;
    $150 = HEAP32[12930]|0;
    $151 = (($150) + 5)|0;
    HEAP32[12930] = $151;
    break;
   }
   default: {
    $159 = HEAP32[12931]|0;
    $160 = (_handlePassVariableTest($159,51720,$5)|0);
    $161 = ($160|0)!=(0);
    if (!($161)) {
     label = 40;
     break L4;
    }
   }
   }
  } while(0);
  $162 = $3;
  $163 = ($162|0)!=(0);
  $164 = HEAP32[$5>>2]|0;
  $165 = ($164|0)!=(0);
  $or$cond = $163 | $165;
  if (!($or$cond)) {
   label = 43;
   break;
  }
  $166 = $3;
  $167 = ($166|0)!=(0);
  $168 = HEAP32[$5>>2]|0;
  $169 = ($168|0)!=(0);
  $or$cond3 = $167 & $169;
  if ($or$cond3) {
   label = 43;
   break;
  }
  $3 = 0;
 }
 if ((label|0) == 6) {
  $0 = 0;
  $170 = $0;
  STACKTOP = sp;return ($170|0);
 }
 else if ((label|0) == 36) {
  $152 = HEAP32[12930]|0;
  $153 = (($152) + 1)|0;
  HEAP32[12930] = $153;
  $154 = HEAP32[12932]|0;
  HEAP32[12937] = $154;
  $155 = HEAP32[12929]|0;
  $156 = ($155|0)==(-1);
  if ($156) {
   $157 = HEAP32[12928]|0;
   HEAP32[12929] = $157;
   $158 = HEAP32[12937]|0;
   HEAP32[12925] = $158;
  }
  $0 = 1;
  $170 = $0;
  STACKTOP = sp;return ($170|0);
 }
 else if ((label|0) == 40) {
  $0 = 0;
  $170 = $0;
  STACKTOP = sp;return ($170|0);
 }
 else if ((label|0) == 43) {
  $0 = 0;
  $170 = $0;
  STACKTOP = sp;return ($170|0);
 }
 else if ((label|0) == 45) {
  $0 = 1;
  $170 = $0;
  STACKTOP = sp;return ($170|0);
 }
 return (0)|0;
}
function _matchcurrentInput() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = HEAP32[12932]|0;
 $2 = $3;
 $4 = HEAP32[12930]|0;
 $5 = (($4) + 2)|0;
 $1 = $5;
 while(1) {
  $6 = $1;
  $7 = HEAP32[12930]|0;
  $8 = (($7) + 2)|0;
  $9 = HEAP32[12930]|0;
  $10 = (($9) + 1)|0;
  $11 = HEAP32[12931]|0;
  $12 = (($11) + ($10<<2)|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = (($8) + ($13))|0;
  $15 = ($6>>>0)<($14>>>0);
  if (!($15)) {
   label = 6;
   break;
  }
  $16 = $1;
  $17 = HEAP32[12931]|0;
  $18 = (($17) + ($16<<2)|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = $2;
  $21 = (($20) + 1)|0;
  $2 = $21;
  $22 = HEAP32[12914]|0;
  $23 = (($22) + ($20<<2)|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = ($19|0)!=($24|0);
  if ($25) {
   label = 4;
   break;
  }
  $26 = $1;
  $27 = (($26) + 1)|0;
  $1 = $27;
 }
 if ((label|0) == 4) {
  $0 = 0;
  $28 = $0;
  STACKTOP = sp;return ($28|0);
 }
 else if ((label|0) == 6) {
  $0 = 1;
  $28 = $0;
  STACKTOP = sp;return ($28|0);
 }
 return (0)|0;
}
function _back_swapTest() {
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $12 = 0, $13 = 0;
 var $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $6 = HEAP32[12932]|0;
 $3 = $6;
 $7 = HEAP32[12930]|0;
 $8 = (($7) + 1)|0;
 $9 = HEAP32[12931]|0;
 $10 = (($9) + ($8<<2)|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = $11 << 16;
 $13 = HEAP32[12930]|0;
 $14 = (($13) + 2)|0;
 $15 = HEAP32[12931]|0;
 $16 = (($15) + ($14<<2)|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = $12 | $17;
 $4 = $18;
 $19 = $4;
 $20 = HEAP32[12902]|0;
 $21 = ((($20)) + 31332|0);
 $22 = (($21) + ($19<<2)|0);
 $5 = $22;
 $1 = 0;
 while(1) {
  $23 = $1;
  $24 = HEAP32[12930]|0;
  $25 = HEAP32[12931]|0;
  $26 = (($25) + ($24<<2)|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = (($27) + 3)|0;
  $29 = ($23>>>0)<($28>>>0);
  if (!($29)) {
   break;
  }
  $2 = 0;
  while(1) {
   $30 = $2;
   $31 = $5;
   $32 = ((($31)) + 24|0);
   $33 = HEAP16[$32>>1]|0;
   $34 = $33 << 16 >> 16;
   $35 = ($30|0)<($34|0);
   if (!($35)) {
    break;
   }
   $36 = $3;
   $37 = HEAP32[12914]|0;
   $38 = (($37) + ($36<<2)|0);
   $39 = HEAP32[$38>>2]|0;
   $40 = $2;
   $41 = $5;
   $42 = ((($41)) + 28|0);
   $43 = (($42) + ($40<<2)|0);
   $44 = HEAP32[$43>>2]|0;
   $45 = ($39|0)==($44|0);
   if ($45) {
    break;
   }
   $46 = $2;
   $47 = (($46) + 1)|0;
   $2 = $47;
  }
  $48 = $2;
  $49 = $5;
  $50 = ((($49)) + 24|0);
  $51 = HEAP16[$50>>1]|0;
  $52 = $51 << 16 >> 16;
  $53 = ($48|0)==($52|0);
  if ($53) {
   label = 8;
   break;
  }
  $54 = $3;
  $55 = (($54) + 1)|0;
  $3 = $55;
  $56 = $1;
  $57 = (($56) + 1)|0;
  $1 = $57;
 }
 if ((label|0) == 8) {
  $0 = 0;
  $113 = $0;
  STACKTOP = sp;return ($113|0);
 }
 $58 = HEAP32[12930]|0;
 $59 = (($58) + 2)|0;
 $60 = HEAP32[12931]|0;
 $61 = (($60) + ($59<<2)|0);
 $62 = HEAP32[$61>>2]|0;
 $63 = HEAP32[12930]|0;
 $64 = (($63) + 3)|0;
 $65 = HEAP32[12931]|0;
 $66 = (($65) + ($64<<2)|0);
 $67 = HEAP32[$66>>2]|0;
 $68 = ($62|0)==($67|0);
 if ($68) {
  $69 = $3;
  HEAP32[12932] = $69;
  $0 = 1;
  $113 = $0;
  STACKTOP = sp;return ($113|0);
 }
 while(1) {
  $70 = $1;
  $71 = HEAP32[12930]|0;
  $72 = (($71) + 4)|0;
  $73 = HEAP32[12931]|0;
  $74 = (($73) + ($72<<2)|0);
  $75 = HEAP32[$74>>2]|0;
  $76 = ($70>>>0)<($75>>>0);
  if (!($76)) {
   label = 21;
   break;
  }
  $2 = 0;
  while(1) {
   $77 = $2;
   $78 = $5;
   $79 = ((($78)) + 24|0);
   $80 = HEAP16[$79>>1]|0;
   $81 = $80 << 16 >> 16;
   $82 = ($77|0)<($81|0);
   if (!($82)) {
    break;
   }
   $83 = $3;
   $84 = HEAP32[12914]|0;
   $85 = (($84) + ($83<<2)|0);
   $86 = HEAP32[$85>>2]|0;
   $87 = $2;
   $88 = $5;
   $89 = ((($88)) + 28|0);
   $90 = (($89) + ($87<<2)|0);
   $91 = HEAP32[$90>>2]|0;
   $92 = ($86|0)!=($91|0);
   if ($92) {
    break;
   }
   $93 = $2;
   $94 = (($93) + 1)|0;
   $2 = $94;
  }
  $95 = $2;
  $96 = $5;
  $97 = ((($96)) + 24|0);
  $98 = HEAP16[$97>>1]|0;
  $99 = $98 << 16 >> 16;
  $100 = ($95|0)<($99|0);
  if ($100) {
   $101 = $2;
   $102 = $5;
   $103 = ((($102)) + 24|0);
   $104 = HEAP16[$103>>1]|0;
   $105 = $104 << 16 >> 16;
   $106 = ($101|0)<($105|0);
   if ($106) {
    label = 19;
    break;
   }
  }
  $108 = $3;
  $109 = (($108) + 1)|0;
  $3 = $109;
  $110 = $1;
  $111 = (($110) + 1)|0;
  $1 = $111;
 }
 if ((label|0) == 19) {
  $107 = $3;
  HEAP32[12932] = $107;
  $0 = 1;
  $113 = $0;
  STACKTOP = sp;return ($113|0);
 }
 else if ((label|0) == 21) {
  $112 = $3;
  HEAP32[12932] = $112;
  $0 = 1;
  $113 = $0;
  STACKTOP = sp;return ($113|0);
 }
 return (0)|0;
}
function _compareChars_354($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $10 = $7;
 $11 = ($10|0)!=(0);
 if (!($11)) {
  $4 = 0;
  $34 = $4;
  STACKTOP = sp;return ($34|0);
 }
 $9 = 0;
 while(1) {
  $12 = $9;
  $13 = $7;
  $14 = ($12|0)<($13|0);
  if (!($14)) {
   label = 8;
   break;
  }
  $15 = $9;
  $16 = $5;
  $17 = (($16) + ($15<<2)|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = $8;
  $20 = (_back_findCharOrDots($18,$19)|0);
  $21 = ((($20)) + 24|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = $9;
  $24 = $6;
  $25 = (($24) + ($23<<2)|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = $8;
  $28 = (_back_findCharOrDots($26,$27)|0);
  $29 = ((($28)) + 24|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = ($22|0)!=($30|0);
  if ($31) {
   label = 6;
   break;
  }
  $32 = $9;
  $33 = (($32) + 1)|0;
  $9 = $33;
 }
 if ((label|0) == 6) {
  $4 = 0;
  $34 = $4;
  STACKTOP = sp;return ($34|0);
 }
 else if ((label|0) == 8) {
  $4 = 1;
  $34 = $4;
  STACKTOP = sp;return ($34|0);
 }
 return (0)|0;
}
function _back_setBefore() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[12920]|0;
 $1 = ($0|0)==(0);
 if ($1) {
  $7 = 32;
 } else {
  $2 = HEAP32[12920]|0;
  $3 = (($2) - 1)|0;
  $4 = HEAP32[12921]|0;
  $5 = (($4) + ($3<<2)|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = $6;
 }
 HEAP32[13005] = $7;
 $8 = HEAP32[13005]|0;
 $9 = (_back_findCharOrDots($8,0)|0);
 $10 = ((($9)) + 12|0);
 $11 = HEAP32[$10>>2]|0;
 HEAP32[13000] = $11;
 return;
}
function _back_selectRule() {
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0;
 var $or$cond3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $7 = HEAP32[12903]|0;
 $8 = HEAP32[12919]|0;
 $9 = (($7) - ($8))|0;
 $0 = $9;
 $1 = 0;
 $2 = 0;
 $10 = HEAP32[12919]|0;
 $11 = HEAP32[12914]|0;
 $12 = (($11) + ($10<<2)|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = (_back_findCharOrDots($13,1)|0);
 $3 = $14;
 $15 = (_handleMultind()|0);
 $16 = ($15|0)!=(0);
 if ($16) {
  STACKTOP = sp;return;
 }
 $4 = 0;
 L4: while(1) {
  $17 = $4;
  $18 = ($17|0)<(3);
  if (!($18)) {
   label = 70;
   break;
  }
  $19 = $4;
  L7: do {
   switch ($19|0) {
   case 2:  {
    label = 11;
    break L4;
    break;
   }
   case 0:  {
    $20 = $0;
    $21 = ($20|0)<(2);
    if (!($21)) {
     $22 = HEAP32[12940]|0;
     $23 = ($22|0)!=(0);
     if ($23) {
      $24 = $3;
      $25 = ((($24)) + 12|0);
      $26 = HEAP32[$25>>2]|0;
      $27 = $26 & 256;
      $28 = ($27|0)!=(0);
      if ($28) {
       break L7;
      }
     }
     $29 = $3;
     $30 = ((($29)) + 16|0);
     $31 = HEAP32[$30>>2]|0;
     $32 = $31 << 8;
     $2 = $32;
     $33 = HEAP32[12919]|0;
     $34 = (($33) + 1)|0;
     $35 = HEAP32[12914]|0;
     $36 = (($35) + ($34<<2)|0);
     $37 = HEAP32[$36>>2]|0;
     $38 = (_back_findCharOrDots($37,1)|0);
     $39 = ((($38)) + 16|0);
     $40 = HEAP32[$39>>2]|0;
     $41 = $2;
     $42 = (($41) + ($40))|0;
     $2 = $42;
     $43 = $2;
     $44 = (($43>>>0) % 1123)&-1;
     $2 = $44;
     $45 = $2;
     $46 = HEAP32[12902]|0;
     $47 = ((($46)) + 26840|0);
     $48 = (($47) + ($45<<2)|0);
     $49 = HEAP32[$48>>2]|0;
     $1 = $49;
    }
    break;
   }
   case 1:  {
    $50 = $0;
    $51 = ($50|0)>=(1);
    if ($51) {
     $0 = 1;
     $52 = $3;
     $53 = ((($52)) + 8|0);
     $54 = HEAP32[$53>>2]|0;
     $1 = $54;
    }
    break;
   }
   default: {
   }
   }
  } while(0);
  while(1) {
   $59 = $1;
   $60 = ($59|0)!=(0);
   if (!($60)) {
    break;
   }
   $61 = $1;
   $62 = HEAP32[12902]|0;
   $63 = ((($62)) + 31332|0);
   $64 = (($63) + ($61<<2)|0);
   HEAP32[12924] = $64;
   $65 = HEAP32[12924]|0;
   $66 = ((($65)) + 20|0);
   $67 = HEAP32[$66>>2]|0;
   HEAP32[12923] = $67;
   $68 = HEAP32[12923]|0;
   $69 = ($68|0)==(70);
   $70 = HEAP32[12924]|0;
   if ($69) {
    $71 = ((($70)) + 28|0);
    HEAP32[12999] = $71;
    $72 = HEAP32[12924]|0;
    $73 = ((($72)) + 24|0);
    $74 = HEAP16[$73>>1]|0;
    $75 = $74 << 16 >> 16;
    HEAP32[12941] = $75;
   } else {
    $76 = ((($70)) + 24|0);
    $77 = HEAP16[$76>>1]|0;
    $78 = $77 << 16 >> 16;
    $79 = HEAP32[12924]|0;
    $80 = ((($79)) + 28|0);
    $81 = (($80) + ($78<<2)|0);
    HEAP32[12999] = $81;
    $82 = HEAP32[12924]|0;
    $83 = ((($82)) + 26|0);
    $84 = HEAP16[$83>>1]|0;
    $85 = $84 << 16 >> 16;
    HEAP32[12941] = $85;
   }
   $86 = HEAP32[12941]|0;
   $87 = $0;
   $88 = ($86|0)<=($87|0);
   L22: do {
    if ($88) {
     $89 = HEAP32[12919]|0;
     $90 = HEAP32[12914]|0;
     $91 = (($90) + ($89<<2)|0);
     $92 = HEAP32[12999]|0;
     $93 = HEAP32[12941]|0;
     $94 = (_compareDots($91,$92,$93)|0);
     $95 = ($94|0)!=(0);
     if ($95) {
      $96 = HEAP32[12941]|0;
      _back_setAfter($96);
      $97 = HEAP32[12924]|0;
      $98 = ((($97)) + 8|0);
      $99 = HEAP32[$98>>2]|0;
      $100 = $99 & -268435457;
      $101 = ($100|0)!=(0);
      if ($101) {
       $102 = HEAP32[13000]|0;
       $103 = HEAP32[12924]|0;
       $104 = ((($103)) + 8|0);
       $105 = HEAP32[$104>>2]|0;
       $106 = $102 & $105;
       $107 = ($106|0)!=(0);
       if (!($107)) {
        break;
       }
      }
      $108 = HEAP32[12924]|0;
      $109 = ((($108)) + 12|0);
      $110 = HEAP32[$109>>2]|0;
      $111 = $110 & -268435457;
      $112 = ($111|0)!=(0);
      if ($112) {
       $113 = HEAP32[13001]|0;
       $114 = HEAP32[12924]|0;
       $115 = ((($114)) + 12|0);
       $116 = HEAP32[$115>>2]|0;
       $117 = $113 & $116;
       $118 = ($117|0)!=(0);
       if (!($118)) {
        break;
       }
      }
      $119 = HEAP32[12923]|0;
      do {
       switch ($119|0) {
       case 86: case 213: case 203: case 113: case 143: case 142: case 135: case 134: case 127: case 126: case 117: case 116: case 119: case 118: case 115: case 106: case 69: case 75: case 80: case 79: case 61: case 60: case 59: case 64: case 63: case 62: case 58: case 57:  {
        label = 70;
        break L4;
        break;
       }
       case 70:  {
        $120 = (_back_passDoTest()|0);
        $121 = ($120|0)!=(0);
        if ($121) {
         label = 70;
         break L4;
        } else {
         break L22;
        }
        break;
       }
       case 67:  {
        $122 = HEAP32[12940]|0;
        $123 = ($122|0)!=(0);
        if ($123) {
         label = 70;
         break L4;
        } else {
         break L22;
        }
        break;
       }
       case 112:  {
        $124 = HEAP32[13000]|0;
        $125 = $124 & 2;
        $126 = ($125|0)!=(0);
        if ($126) {
         break L22;
        }
        $127 = HEAP32[13001]|0;
        $128 = $127 & 2;
        $129 = ($128|0)!=(0);
        if ($129) {
         label = 70;
         break L4;
        } else {
         break L22;
        }
        break;
       }
       case 44:  {
        $130 = HEAP32[12941]|0;
        HEAP32[13002] = $130;
        $131 = HEAP32[12924]|0;
        HEAP32[13003] = $131;
        $132 = (_handleMultind()|0);
        $133 = ($132|0)!=(0);
        if ($133) {
         label = 70;
         break L4;
        } else {
         break L22;
        }
        break;
       }
       case 87:  {
        $134 = HEAP32[12911]|0;
        $135 = $134 & 512;
        $136 = ($135|0)!=(0);
        if ($136) {
         break L22;
        }
        $137 = HEAP32[12939]|0;
        $138 = ($137|0)!=(0);
        $139 = HEAP32[12940]|0;
        $140 = ($139|0)!=(0);
        $or$cond = $138 | $140;
        if ($or$cond) {
         break L22;
        }
        break;
       }
       case 92:  {
        break;
       }
       case 91:  {
        $149 = HEAP32[12911]|0;
        $150 = $149 & 512;
        $151 = ($150|0)!=(0);
        if ($151) {
         break L22;
        }
        $152 = HEAP32[13000]|0;
        $153 = $152 & 1;
        $154 = ($153|0)!=(0);
        if (!($154)) {
         break L22;
        }
        $155 = HEAP32[13001]|0;
        $156 = $155 & 1;
        $157 = ($156|0)!=(0);
        $158 = HEAP32[12922]|0;
        $159 = ($158|0)!=(90);
        $or$cond3 = $157 & $159;
        if ($or$cond3) {
         label = 70;
         break L4;
        } else {
         break L22;
        }
        break;
       }
       case 90: case 89:  {
        $160 = HEAP32[13000]|0;
        $161 = $160 & 9;
        $162 = ($161|0)!=(0);
        if (!($162)) {
         break L22;
        }
        $163 = HEAP32[13001]|0;
        $164 = $163 & 1;
        $165 = ($164|0)!=(0);
        if (!($165)) {
         label = 70;
         break L4;
        }
        $166 = HEAP32[12911]|0;
        $167 = $166 & 512;
        $168 = ($167|0)!=(0);
        if ($168) {
         label = 70;
         break L4;
        } else {
         break L22;
        }
        break;
       }
       case 93:  {
        $169 = HEAP32[13000]|0;
        $170 = $169 & 9;
        $171 = ($170|0)!=(0);
        if ($171) {
         label = 70;
         break L4;
        } else {
         break L22;
        }
        break;
       }
       case 94:  {
        $172 = HEAP32[13000]|0;
        $173 = $172 & 11;
        $174 = ($173|0)!=(0);
        if (!($174)) {
         break L22;
        }
        $175 = (_isEndWord()|0);
        $176 = ($175|0)!=(0);
        if ($176) {
         label = 70;
         break L4;
        } else {
         break L22;
        }
        break;
       }
       case 95:  {
        $177 = HEAP32[13000]|0;
        $178 = $177 & 9;
        $179 = ($178|0)!=(0);
        if (!($179)) {
         break L22;
        }
        $180 = (_isEndWord()|0);
        $181 = ($180|0)!=(0);
        if ($181) {
         break L22;
        } else {
         label = 70;
         break L4;
        }
        break;
       }
       case 96:  {
        $182 = HEAP32[13000]|0;
        $183 = $182 & 11;
        $184 = ($183|0)!=(0);
        if (!($184)) {
         break L22;
        }
        $185 = (_isEndWord()|0);
        $186 = ($185|0)!=(0);
        if ($186) {
         break L22;
        } else {
         label = 70;
         break L4;
        }
        break;
       }
       case 88:  {
        $187 = HEAP32[13000]|0;
        $188 = $187 & 256;
        $189 = ($188|0)!=(0);
        if ($189) {
         break L22;
        }
        $190 = HEAP32[13000]|0;
        $191 = $190 & 2;
        $192 = ($191|0)!=(0);
        if ($192) {
         label = 70;
         break L4;
        }
        $193 = (_isEndWord()|0);
        $194 = ($193|0)!=(0);
        if ($194) {
         break L22;
        } else {
         label = 70;
         break L4;
        }
        break;
       }
       case 97:  {
        $195 = HEAP32[13000]|0;
        $196 = $195 & 2;
        $197 = ($196|0)!=(0);
        if (!($197)) {
         break L22;
        }
        $198 = (_isEndWord()|0);
        $199 = ($198|0)!=(0);
        if ($199) {
         break L22;
        } else {
         label = 70;
         break L4;
        }
        break;
       }
       case 98:  {
        $200 = HEAP32[13000]|0;
        $201 = $200 & 2;
        $202 = ($201|0)!=(0);
        if ($202) {
         label = 70;
         break L4;
        } else {
         break L22;
        }
        break;
       }
       case 99:  {
        $203 = HEAP32[13000]|0;
        $204 = $203 & 2;
        $205 = ($204|0)!=(0);
        if (!($205)) {
         break L22;
        }
        $206 = (_isEndWord()|0);
        $207 = ($206|0)!=(0);
        if ($207) {
         label = 70;
         break L4;
        } else {
         break L22;
        }
        break;
       }
       case 102:  {
        $208 = HEAP32[13000]|0;
        $209 = $208 & 9;
        $210 = ($209|0)!=(0);
        if (!($210)) {
         break L22;
        }
        $211 = HEAP32[13001]|0;
        $212 = $211 & 384;
        $213 = ($212|0)!=(0);
        if ($213) {
         label = 70;
         break L4;
        } else {
         break L22;
        }
        break;
       }
       case 103:  {
        $214 = HEAP32[13000]|0;
        $215 = $214 & 4;
        $216 = ($215|0)!=(0);
        if (!($216)) {
         break L22;
        }
        $217 = HEAP32[13001]|0;
        $218 = $217 & 256;
        $219 = ($218|0)!=(0);
        if ($219) {
         label = 70;
         break L4;
        } else {
         break L22;
        }
        break;
       }
       case 104:  {
        $220 = HEAP32[12940]|0;
        $221 = ($220|0)!=(0);
        if (!($221)) {
         break L22;
        }
        $222 = HEAP32[13001]|0;
        $223 = $222 & 256;
        $224 = ($223|0)!=(0);
        if ($224) {
         break L22;
        } else {
         label = 70;
         break L4;
        }
        break;
       }
       case 105:  {
        $225 = HEAP32[13001]|0;
        $226 = $225 & 260;
        $227 = ($226|0)!=(0);
        if ($227) {
         label = 70;
         break L4;
        } else {
         break L22;
        }
        break;
       }
       case 100:  {
        $228 = (_isBegWord()|0);
        $229 = ($228|0)!=(0);
        if ($229) {
         label = 70;
         break L4;
        } else {
         break L22;
        }
        break;
       }
       case 101:  {
        $230 = (_isEndWord()|0);
        $231 = ($230|0)!=(0);
        if ($231) {
         label = 70;
         break L4;
        } else {
         break L22;
        }
        break;
       }
       case 78:  {
        $232 = HEAP32[13000]|0;
        $233 = $232 & 256;
        $234 = ($233|0)!=(0);
        if (!($234)) {
         label = 70;
         break L4;
        }
        $235 = HEAP32[13001]|0;
        $236 = $235 & 256;
        $237 = ($236|0)!=(0);
        if (!($237)) {
         label = 70;
         break L4;
        }
        $238 = HEAP32[12924]|0;
        $239 = ((($238)) + 24|0);
        $240 = HEAP16[$239>>1]|0;
        $241 = $240 << 16 >> 16;
        $242 = ($241|0)>(1);
        if ($242) {
         break L22;
        } else {
         label = 70;
         break L4;
        }
        break;
       }
       case 109:  {
        $243 = HEAP32[12924]|0;
        $244 = ((($243)) + 16|0);
        $245 = HEAP32[$244>>2]|0;
        $246 = HEAP32[12902]|0;
        $247 = ((($246)) + 31332|0);
        $248 = (($247) + ($245<<2)|0);
        $5 = $248;
        $249 = $5;
        $250 = ((($249)) + 4|0);
        $6 = $250;
        $251 = HEAP32[12914]|0;
        $252 = HEAP32[12919]|0;
        $253 = (($252) - 1)|0;
        $254 = $6;
        $255 = HEAP32[12902]|0;
        $256 = (_pattern_check($251,$253,-1,-1,$254,$255)|0);
        $257 = ($256|0)!=(0);
        if (!($257)) {
         break L22;
        }
        $258 = $5;
        $259 = HEAP32[$258>>2]|0;
        $260 = $5;
        $261 = (($260) + ($259<<2)|0);
        $6 = $261;
        $262 = HEAP32[12914]|0;
        $263 = HEAP32[12919]|0;
        $264 = HEAP32[12924]|0;
        $265 = ((($264)) + 26|0);
        $266 = HEAP16[$265>>1]|0;
        $267 = $266 << 16 >> 16;
        $268 = (($263) + ($267))|0;
        $269 = HEAP32[12903]|0;
        $270 = $6;
        $271 = HEAP32[12902]|0;
        $272 = (_pattern_check($262,$268,$269,1,$270,$271)|0);
        $273 = ($272|0)!=(0);
        if ($273) {
         label = 70;
         break L4;
        } else {
         break L22;
        }
        break;
       }
       default: {
        break L22;
       }
       }
      } while(0);
      $141 = HEAP32[13000]|0;
      $142 = $141 & 9;
      $143 = ($142|0)!=(0);
      if ($143) {
       $144 = HEAP32[13001]|0;
       $145 = $144 & 1;
       $146 = ($145|0)!=(0);
       if ($146) {
        label = 70;
        break L4;
       }
       $147 = (_isEndWord()|0);
       $148 = ($147|0)!=(0);
       if ($148) {
        label = 70;
        break L4;
       }
      }
     }
    }
   } while(0);
   $274 = HEAP32[12924]|0;
   $275 = ((($274)) + 4|0);
   $276 = HEAP32[$275>>2]|0;
   $1 = $276;
  }
  $277 = $4;
  $278 = (($277) + 1)|0;
  $4 = $278;
 }
 if ((label|0) == 11) {
  HEAP32[12924] = 51768;
  HEAP32[(51788)>>2] = 111;
  HEAP32[12923] = 111;
  HEAP16[(51794)>>1] = 1;
  HEAP32[12941] = 1;
  $55 = HEAP32[12919]|0;
  $56 = HEAP32[12914]|0;
  $57 = (($56) + ($55<<2)|0);
  $58 = HEAP32[$57>>2]|0;
  HEAP32[(51796)>>2] = $58;
  HEAP16[(51792)>>1] = 0;
  STACKTOP = sp;return;
 }
 else if ((label|0) == 70) {
  STACKTOP = sp;return;
 }
}
function _insertSpace() {
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 HEAP32[$1>>2] = 32;
 $2 = (_back_updatePositions($1,1,1)|0);
 $3 = ($2|0)!=(0);
 if (!($3)) {
  $0 = 0;
  $10 = $0;
  STACKTOP = sp;return ($10|0);
 }
 $4 = HEAP32[12906]|0;
 $5 = ($4|0)!=(0|0);
 if ($5) {
  $6 = HEAP32[12920]|0;
  $7 = (($6) - 1)|0;
  $8 = HEAP32[12906]|0;
  $9 = (($8) + ($7)|0);
  HEAP8[$9>>0] = 49;
 }
 $0 = 1;
 $10 = $0;
 STACKTOP = sp;return ($10|0);
}
function _putCharacters_355($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = 0;
 while(1) {
  $6 = $5;
  $7 = $4;
  $8 = ($6|0)<($7|0);
  if (!($8)) {
   label = 6;
   break;
  }
  $9 = $5;
  $10 = $3;
  $11 = (($10) + ($9<<2)|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = (_putCharacter_352($12)|0);
  $14 = ($13|0)!=(0);
  if (!($14)) {
   label = 4;
   break;
  }
  $15 = $5;
  $16 = (($15) + 1)|0;
  $5 = $16;
 }
 if ((label|0) == 4) {
  $2 = 0;
  $17 = $2;
  STACKTOP = sp;return ($17|0);
 }
 else if ((label|0) == 6) {
  $2 = 1;
  $17 = $2;
  STACKTOP = sp;return ($17|0);
 }
 return (0)|0;
}
function _handleMultind() {
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = 0;
 $2 = HEAP32[13002]|0;
 $3 = ($2|0)!=(0);
 if (!($3)) {
  $0 = 0;
  $102 = $0;
  STACKTOP = sp;return ($102|0);
 }
 $4 = HEAP32[13003]|0;
 $5 = ((($4)) + 24|0);
 $6 = HEAP16[$5>>1]|0;
 $7 = $6 << 16 >> 16;
 $8 = HEAP32[13002]|0;
 $9 = (($7) - ($8))|0;
 $10 = HEAP32[13003]|0;
 $11 = ((($10)) + 28|0);
 $12 = (($11) + ($9<<2)|0);
 $13 = HEAP32[$12>>2]|0;
 do {
  switch ($13|0) {
  case 115:  {
   $14 = HEAP32[12902]|0;
   $15 = ((($14)) + 1124|0);
   $16 = ((($15)) + 20|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = (_findBrailleIndicatorRule($17)|0);
   $1 = $18;
   break;
  }
  case 116:  {
   $19 = HEAP32[12902]|0;
   $20 = ((($19)) + 1124|0);
   $21 = ((($20)) + 24|0);
   $22 = HEAP32[$21>>2]|0;
   $23 = (_findBrailleIndicatorRule($22)|0);
   $1 = $23;
   break;
  }
  case 117:  {
   $24 = HEAP32[12902]|0;
   $25 = ((($24)) + 1124|0);
   $26 = ((($25)) + 28|0);
   $27 = HEAP32[$26>>2]|0;
   $28 = (_findBrailleIndicatorRule($27)|0);
   $1 = $28;
   break;
  }
  case 11:  {
   $29 = HEAP32[12902]|0;
   $30 = ((($29)) + 36|0);
   $31 = HEAP32[$30>>2]|0;
   $32 = (_findBrailleIndicatorRule($31)|0);
   $1 = $32;
   break;
  }
  case 15:  {
   $33 = HEAP32[12902]|0;
   $34 = ((($33)) + 40|0);
   $35 = HEAP32[$34>>2]|0;
   $36 = (_findBrailleIndicatorRule($35)|0);
   $1 = $36;
   break;
  }
  case 129:  {
   $37 = HEAP32[12902]|0;
   $38 = ((($37)) + 1124|0);
   $39 = ((($38)) + 36|0);
   $40 = ((($39)) + 4|0);
   $41 = HEAP32[$40>>2]|0;
   $42 = (_findBrailleIndicatorRule($41)|0);
   $1 = $42;
   break;
  }
  case 126:  {
   $43 = HEAP32[12902]|0;
   $44 = ((($43)) + 1124|0);
   $45 = ((($44)) + 36|0);
   $46 = ((($45)) + 12|0);
   $47 = HEAP32[$46>>2]|0;
   $48 = (_findBrailleIndicatorRule($47)|0);
   $1 = $48;
   break;
  }
  case 127:  {
   $49 = HEAP32[12902]|0;
   $50 = ((($49)) + 1124|0);
   $51 = ((($50)) + 36|0);
   $52 = ((($51)) + 16|0);
   $53 = HEAP32[$52>>2]|0;
   $54 = (_findBrailleIndicatorRule($53)|0);
   $1 = $54;
   break;
  }
  case 137:  {
   $55 = HEAP32[12902]|0;
   $56 = ((($55)) + 1124|0);
   $57 = ((($56)) + 72|0);
   $58 = ((($57)) + 4|0);
   $59 = HEAP32[$58>>2]|0;
   $60 = (_findBrailleIndicatorRule($59)|0);
   $1 = $60;
   break;
  }
  case 134:  {
   $61 = HEAP32[12902]|0;
   $62 = ((($61)) + 1124|0);
   $63 = ((($62)) + 72|0);
   $64 = ((($63)) + 12|0);
   $65 = HEAP32[$64>>2]|0;
   $66 = (_findBrailleIndicatorRule($65)|0);
   $1 = $66;
   break;
  }
  case 135:  {
   $67 = HEAP32[12902]|0;
   $68 = ((($67)) + 1124|0);
   $69 = ((($68)) + 72|0);
   $70 = ((($69)) + 16|0);
   $71 = HEAP32[$70>>2]|0;
   $72 = (_findBrailleIndicatorRule($71)|0);
   $1 = $72;
   break;
  }
  case 145:  {
   $73 = HEAP32[12902]|0;
   $74 = ((($73)) + 1124|0);
   $75 = ((($74)) + 108|0);
   $76 = ((($75)) + 4|0);
   $77 = HEAP32[$76>>2]|0;
   $78 = (_findBrailleIndicatorRule($77)|0);
   $1 = $78;
   break;
  }
  case 142:  {
   $79 = HEAP32[12902]|0;
   $80 = ((($79)) + 1124|0);
   $81 = ((($80)) + 108|0);
   $82 = ((($81)) + 12|0);
   $83 = HEAP32[$82>>2]|0;
   $84 = (_findBrailleIndicatorRule($83)|0);
   $1 = $84;
   break;
  }
  case 143:  {
   $85 = HEAP32[12902]|0;
   $86 = ((($85)) + 1124|0);
   $87 = ((($86)) + 108|0);
   $88 = ((($87)) + 16|0);
   $89 = HEAP32[$88>>2]|0;
   $90 = (_findBrailleIndicatorRule($89)|0);
   $1 = $90;
   break;
  }
  case 33:  {
   $91 = HEAP32[12902]|0;
   $92 = ((($91)) + 1520|0);
   $93 = HEAP32[$92>>2]|0;
   $94 = (_findBrailleIndicatorRule($93)|0);
   $1 = $94;
   break;
  }
  case 43:  {
   $95 = HEAP32[12902]|0;
   $96 = ((($95)) + 1560|0);
   $97 = HEAP32[$96>>2]|0;
   $98 = (_findBrailleIndicatorRule($97)|0);
   $1 = $98;
   break;
  }
  default: {
   $1 = 0;
  }
  }
 } while(0);
 $99 = HEAP32[13002]|0;
 $100 = (($99) + -1)|0;
 HEAP32[13002] = $100;
 $101 = $1;
 $0 = $101;
 $102 = $0;
 STACKTOP = sp;return ($102|0);
}
function _compareDots($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $8 = $6;
 $9 = ($8|0)!=(0);
 do {
  if ($9) {
   $7 = 0;
   while(1) {
    $10 = $7;
    $11 = $6;
    $12 = ($10|0)<($11|0);
    if (!($12)) {
     label = 8;
     break;
    }
    $13 = $7;
    $14 = $4;
    $15 = (($14) + ($13<<2)|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = $7;
    $18 = $5;
    $19 = (($18) + ($17<<2)|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = ($16|0)!=($20|0);
    if ($21) {
     label = 6;
     break;
    }
    $22 = $7;
    $23 = (($22) + 1)|0;
    $7 = $23;
   }
   if ((label|0) == 6) {
    $3 = 0;
    break;
   }
   else if ((label|0) == 8) {
    $3 = 1;
    break;
   }
  } else {
   $3 = 0;
  }
 } while(0);
 $24 = $3;
 STACKTOP = sp;return ($24|0);
}
function _back_setAfter($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = HEAP32[12919]|0;
 $3 = $1;
 $4 = (($2) + ($3))|0;
 $5 = HEAP32[12903]|0;
 $6 = ($4|0)<($5|0);
 if ($6) {
  $7 = HEAP32[12919]|0;
  $8 = $1;
  $9 = (($7) + ($8))|0;
  $10 = HEAP32[12914]|0;
  $11 = (($10) + ($9<<2)|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = $12;
 } else {
  $13 = 32;
 }
 HEAP32[13004] = $13;
 $14 = HEAP32[13004]|0;
 $15 = (_back_findCharOrDots($14,1)|0);
 $16 = ((($15)) + 12|0);
 $17 = HEAP32[$16>>2]|0;
 HEAP32[13001] = $17;
 STACKTOP = sp;return;
}
function _isEndWord() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $7 = HEAP32[12911]|0;
 $8 = $7 & 512;
 $9 = ($8|0)!=(0);
 if ($9) {
  $0 = 0;
  $62 = $0;
  STACKTOP = sp;return ($62|0);
 }
 $10 = HEAP32[12919]|0;
 $11 = HEAP32[12941]|0;
 $12 = (($10) + ($11))|0;
 $1 = $12;
 L5: while(1) {
  $13 = $1;
  $14 = HEAP32[12903]|0;
  $15 = ($13|0)<($14|0);
  if (!($15)) {
   label = 19;
   break;
  }
  $5 = 0;
  $6 = 0;
  $16 = $1;
  $17 = HEAP32[12914]|0;
  $18 = (($17) + ($16<<2)|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = (_back_findCharOrDots($19,1)|0);
  $2 = $20;
  $21 = $2;
  $22 = ((($21)) + 8|0);
  $23 = HEAP32[$22>>2]|0;
  $3 = $23;
  $24 = $2;
  $25 = ((($24)) + 12|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = $26 & 1;
  $28 = ($27|0)!=(0);
  if ($28) {
   label = 19;
   break;
  }
  $29 = $2;
  $30 = ((($29)) + 12|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = $31 & 2;
  $33 = ($32|0)!=(0);
  if ($33) {
   label = 7;
   break;
  }
  while(1) {
   $34 = $3;
   $35 = ($34|0)!=(0);
   if (!($35)) {
    break;
   }
   $36 = $3;
   $37 = HEAP32[12902]|0;
   $38 = ((($37)) + 31332|0);
   $39 = (($38) + ($36<<2)|0);
   $4 = $39;
   $40 = $4;
   $41 = ((($40)) + 24|0);
   $42 = HEAP16[$41>>1]|0;
   $43 = $42 << 16 >> 16;
   $44 = ($43|0)>(1);
   if ($44) {
    $6 = 1;
   }
   $45 = $4;
   $46 = ((($45)) + 20|0);
   $47 = HEAP32[$46>>2]|0;
   $48 = ($47|0)==(101);
   if ($48) {
    $5 = 1;
   }
   $49 = $4;
   $50 = ((($49)) + 20|0);
   $51 = HEAP32[$50>>2]|0;
   $52 = ($51|0)==(106);
   if ($52) {
    label = 14;
    break L5;
   }
   $53 = $4;
   $54 = ((($53)) + 4|0);
   $55 = HEAP32[$54>>2]|0;
   $3 = $55;
  }
  $56 = $6;
  $57 = ($56|0)==(0);
  $58 = $5;
  $59 = ($58|0)!=(0);
  $or$cond = $57 | $59;
  if (!($or$cond)) {
   label = 17;
   break;
  }
  $60 = $1;
  $61 = (($60) + 1)|0;
  $1 = $61;
 }
 if ((label|0) == 7) {
  $0 = 0;
  $62 = $0;
  STACKTOP = sp;return ($62|0);
 }
 else if ((label|0) == 14) {
  $0 = 1;
  $62 = $0;
  STACKTOP = sp;return ($62|0);
 }
 else if ((label|0) == 17) {
  $0 = 0;
  $62 = $0;
  STACKTOP = sp;return ($62|0);
 }
 else if ((label|0) == 19) {
  $0 = 1;
  $62 = $0;
  STACKTOP = sp;return ($62|0);
 }
 return (0)|0;
}
function _isBegWord() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = HEAP32[12920]|0;
 $4 = ($3|0)==(0);
 if ($4) {
  $0 = 1;
  $26 = $0;
  STACKTOP = sp;return ($26|0);
 }
 $5 = HEAP32[12920]|0;
 $6 = (($5) - 1)|0;
 $1 = $6;
 while(1) {
  $7 = $1;
  $8 = ($7|0)>=(0);
  if (!($8)) {
   label = 9;
   break;
  }
  $9 = $1;
  $10 = HEAP32[12921]|0;
  $11 = (($10) + ($9<<2)|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = (_back_findCharOrDots($12,0)|0);
  $2 = $13;
  $14 = $2;
  $15 = ((($14)) + 12|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = $16 & 1;
  $18 = ($17|0)!=(0);
  if ($18) {
   label = 9;
   break;
  }
  $19 = $2;
  $20 = ((($19)) + 12|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = $21 & 198;
  $23 = ($22|0)!=(0);
  if ($23) {
   label = 7;
   break;
  }
  $24 = $1;
  $25 = (($24) + -1)|0;
  $1 = $25;
 }
 if ((label|0) == 7) {
  $0 = 0;
  $26 = $0;
  STACKTOP = sp;return ($26|0);
 }
 else if ((label|0) == 9) {
  $0 = 1;
  $26 = $0;
  STACKTOP = sp;return ($26|0);
 }
 return (0)|0;
}
function _findBrailleIndicatorRule($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $4 = ($3|0)!=(0);
 if ($4) {
  $5 = $2;
  $6 = HEAP32[12902]|0;
  $7 = ((($6)) + 31332|0);
  $8 = (($7) + ($5<<2)|0);
  HEAP32[12924] = $8;
  $9 = HEAP32[12924]|0;
  $10 = ((($9)) + 20|0);
  $11 = HEAP32[$10>>2]|0;
  HEAP32[12923] = $11;
  $12 = HEAP32[12924]|0;
  $13 = ((($12)) + 26|0);
  $14 = HEAP16[$13>>1]|0;
  $15 = $14 << 16 >> 16;
  HEAP32[12941] = $15;
  $1 = 1;
  $16 = $1;
  STACKTOP = sp;return ($16|0);
 } else {
  $1 = 0;
  $16 = $1;
  STACKTOP = sp;return ($16|0);
 }
 return (0)|0;
}
function _resetPassVariables() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 _memset((52024|0),0,200)|0;
 return;
}
function _handlePassVariableTest($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $5;
 $8 = HEAP32[$7>>2]|0;
 $9 = $4;
 $10 = (($9) + ($8<<2)|0);
 $11 = HEAP32[$10>>2]|0;
 switch ($11|0) {
 case 61:  {
  $12 = $5;
  $13 = HEAP32[$12>>2]|0;
  $14 = (($13) + 1)|0;
  $15 = $4;
  $16 = (($15) + ($14<<2)|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = (52024 + ($17<<2)|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = $5;
  $21 = HEAP32[$20>>2]|0;
  $22 = (($21) + 2)|0;
  $23 = $4;
  $24 = (($23) + ($22<<2)|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = ($19|0)!=($25|0);
  if ($26) {
   $27 = $6;
   HEAP32[$27>>2] = 0;
  }
  $28 = $5;
  $29 = HEAP32[$28>>2]|0;
  $30 = (($29) + 3)|0;
  HEAP32[$28>>2] = $30;
  $3 = 1;
  $107 = $3;
  STACKTOP = sp;return ($107|0);
  break;
 }
 case 60:  {
  $31 = $5;
  $32 = HEAP32[$31>>2]|0;
  $33 = (($32) + 1)|0;
  $34 = $4;
  $35 = (($34) + ($33<<2)|0);
  $36 = HEAP32[$35>>2]|0;
  $37 = (52024 + ($36<<2)|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = $5;
  $40 = HEAP32[$39>>2]|0;
  $41 = (($40) + 2)|0;
  $42 = $4;
  $43 = (($42) + ($41<<2)|0);
  $44 = HEAP32[$43>>2]|0;
  $45 = ($38>>>0)>=($44>>>0);
  if ($45) {
   $46 = $6;
   HEAP32[$46>>2] = 0;
  }
  $47 = $5;
  $48 = HEAP32[$47>>2]|0;
  $49 = (($48) + 3)|0;
  HEAP32[$47>>2] = $49;
  $3 = 1;
  $107 = $3;
  STACKTOP = sp;return ($107|0);
  break;
 }
 case 62:  {
  $50 = $5;
  $51 = HEAP32[$50>>2]|0;
  $52 = (($51) + 1)|0;
  $53 = $4;
  $54 = (($53) + ($52<<2)|0);
  $55 = HEAP32[$54>>2]|0;
  $56 = (52024 + ($55<<2)|0);
  $57 = HEAP32[$56>>2]|0;
  $58 = $5;
  $59 = HEAP32[$58>>2]|0;
  $60 = (($59) + 2)|0;
  $61 = $4;
  $62 = (($61) + ($60<<2)|0);
  $63 = HEAP32[$62>>2]|0;
  $64 = ($57>>>0)<=($63>>>0);
  if ($64) {
   $65 = $6;
   HEAP32[$65>>2] = 0;
  }
  $66 = $5;
  $67 = HEAP32[$66>>2]|0;
  $68 = (($67) + 3)|0;
  HEAP32[$66>>2] = $68;
  $3 = 1;
  $107 = $3;
  STACKTOP = sp;return ($107|0);
  break;
 }
 case 130:  {
  $69 = $5;
  $70 = HEAP32[$69>>2]|0;
  $71 = (($70) + 1)|0;
  $72 = $4;
  $73 = (($72) + ($71<<2)|0);
  $74 = HEAP32[$73>>2]|0;
  $75 = (52024 + ($74<<2)|0);
  $76 = HEAP32[$75>>2]|0;
  $77 = $5;
  $78 = HEAP32[$77>>2]|0;
  $79 = (($78) + 2)|0;
  $80 = $4;
  $81 = (($80) + ($79<<2)|0);
  $82 = HEAP32[$81>>2]|0;
  $83 = ($76>>>0)>($82>>>0);
  if ($83) {
   $84 = $6;
   HEAP32[$84>>2] = 0;
  }
  $85 = $5;
  $86 = HEAP32[$85>>2]|0;
  $87 = (($86) + 3)|0;
  HEAP32[$85>>2] = $87;
  $3 = 1;
  $107 = $3;
  STACKTOP = sp;return ($107|0);
  break;
 }
 case 131:  {
  $88 = $5;
  $89 = HEAP32[$88>>2]|0;
  $90 = (($89) + 1)|0;
  $91 = $4;
  $92 = (($91) + ($90<<2)|0);
  $93 = HEAP32[$92>>2]|0;
  $94 = (52024 + ($93<<2)|0);
  $95 = HEAP32[$94>>2]|0;
  $96 = $5;
  $97 = HEAP32[$96>>2]|0;
  $98 = (($97) + 2)|0;
  $99 = $4;
  $100 = (($99) + ($98<<2)|0);
  $101 = HEAP32[$100>>2]|0;
  $102 = ($95>>>0)<($101>>>0);
  if ($102) {
   $103 = $6;
   HEAP32[$103>>2] = 0;
  }
  $104 = $5;
  $105 = HEAP32[$104>>2]|0;
  $106 = (($105) + 3)|0;
  HEAP32[$104>>2] = $106;
  $3 = 1;
  $107 = $3;
  STACKTOP = sp;return ($107|0);
  break;
 }
 default: {
  $3 = 0;
  $107 = $3;
  STACKTOP = sp;return ($107|0);
 }
 }
 return (0)|0;
}
function _handlePassVariableAction($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $4;
 $6 = HEAP32[$5>>2]|0;
 $7 = $3;
 $8 = (($7) + ($6<<2)|0);
 $9 = HEAP32[$8>>2]|0;
 switch ($9|0) {
 case 61:  {
  $10 = $4;
  $11 = HEAP32[$10>>2]|0;
  $12 = (($11) + 2)|0;
  $13 = $3;
  $14 = (($13) + ($12<<2)|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = $4;
  $17 = HEAP32[$16>>2]|0;
  $18 = (($17) + 1)|0;
  $19 = $3;
  $20 = (($19) + ($18<<2)|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = (52024 + ($21<<2)|0);
  HEAP32[$22>>2] = $15;
  $23 = $4;
  $24 = HEAP32[$23>>2]|0;
  $25 = (($24) + 3)|0;
  HEAP32[$23>>2] = $25;
  $2 = 1;
  $66 = $2;
  STACKTOP = sp;return ($66|0);
  break;
 }
 case 45:  {
  $26 = $4;
  $27 = HEAP32[$26>>2]|0;
  $28 = (($27) + 1)|0;
  $29 = $3;
  $30 = (($29) + ($28<<2)|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = (52024 + ($31<<2)|0);
  $33 = HEAP32[$32>>2]|0;
  $34 = (($33) - 1)|0;
  HEAP32[$32>>2] = $34;
  $35 = $4;
  $36 = HEAP32[$35>>2]|0;
  $37 = (($36) + 1)|0;
  $38 = $3;
  $39 = (($38) + ($37<<2)|0);
  $40 = HEAP32[$39>>2]|0;
  $41 = (52024 + ($40<<2)|0);
  $42 = HEAP32[$41>>2]|0;
  $43 = ($42|0)<(0);
  if ($43) {
   $44 = $4;
   $45 = HEAP32[$44>>2]|0;
   $46 = (($45) + 1)|0;
   $47 = $3;
   $48 = (($47) + ($46<<2)|0);
   $49 = HEAP32[$48>>2]|0;
   $50 = (52024 + ($49<<2)|0);
   HEAP32[$50>>2] = 0;
  }
  $51 = $4;
  $52 = HEAP32[$51>>2]|0;
  $53 = (($52) + 2)|0;
  HEAP32[$51>>2] = $53;
  $2 = 1;
  $66 = $2;
  STACKTOP = sp;return ($66|0);
  break;
 }
 case 43:  {
  $54 = $4;
  $55 = HEAP32[$54>>2]|0;
  $56 = (($55) + 1)|0;
  $57 = $3;
  $58 = (($57) + ($56<<2)|0);
  $59 = HEAP32[$58>>2]|0;
  $60 = (52024 + ($59<<2)|0);
  $61 = HEAP32[$60>>2]|0;
  $62 = (($61) + 1)|0;
  HEAP32[$60>>2] = $62;
  $63 = $4;
  $64 = HEAP32[$63>>2]|0;
  $65 = (($64) + 2)|0;
  HEAP32[$63>>2] = $65;
  $2 = 1;
  $66 = $2;
  STACKTOP = sp;return ($66|0);
  break;
 }
 default: {
  $2 = 0;
  $66 = $2;
  STACKTOP = sp;return ($66|0);
 }
 }
 return (0)|0;
}
function _pattern_compile($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $11 = sp;
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $12 = $10;
 HEAP32[13056] = $12;
 HEAP32[$11>>2] = 0;
 $13 = $8;
 HEAP32[$13>>2] = 2;
 $14 = $8;
 $15 = ((($14)) + 4|0);
 HEAP32[$15>>2] = 0;
 $16 = $6;
 $17 = $7;
 $18 = $8;
 $19 = $9;
 $20 = $8;
 $21 = $8;
 $22 = ((($21)) + 4|0);
 $23 = (_pattern_compile_1($16,$17,$11,$18,$19,$20,$22)|0);
 $24 = ($23|0)!=(0);
 if (!($24)) {
  $5 = 0;
  $40 = $5;
  STACKTOP = sp;return ($40|0);
 }
 $25 = $8;
 $26 = HEAP32[$25>>2]|0;
 $27 = (($26) + 3)|0;
 HEAP32[$25>>2] = $27;
 $28 = $8;
 $29 = $9;
 $30 = $8;
 $31 = (_pattern_compile_2($28,2,$29,$30)|0);
 $32 = ($31|0)!=(0);
 if (!($32)) {
  $5 = 0;
  $40 = $5;
  STACKTOP = sp;return ($40|0);
 }
 $33 = $8;
 $34 = $9;
 $35 = $8;
 $36 = (_pattern_compile_3($33,2,$34,$35)|0);
 $37 = ($36|0)!=(0);
 if ($37) {
  $38 = $8;
  $39 = HEAP32[$38>>2]|0;
  $5 = $39;
  $40 = $5;
  STACKTOP = sp;return ($40|0);
 } else {
  $5 = 0;
  $40 = $5;
  STACKTOP = sp;return ($40|0);
 }
 return (0)|0;
}
function _pattern_compile_1($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 var $10 = 0, $100 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $8 = $0;
 $9 = $1;
 $10 = $2;
 $11 = $3;
 $12 = $4;
 $13 = $5;
 $14 = $6;
 $16 = $13;
 $17 = HEAP32[$16>>2]|0;
 $18 = (($17) + 6)|0;
 $19 = $12;
 $20 = ($18>>>0)>=($19>>>0);
 if ($20) {
  $7 = 0;
  $100 = $7;
  STACKTOP = sp;return ($100|0);
 }
 $21 = $13;
 $22 = HEAP32[$21>>2]|0;
 $15 = $22;
 $23 = $13;
 $24 = HEAP32[$23>>2]|0;
 $25 = (($24) + 0)|0;
 $26 = $11;
 $27 = (($26) + ($25<<2)|0);
 HEAP32[$27>>2] = 1;
 $28 = $13;
 $29 = HEAP32[$28>>2]|0;
 $30 = (($29) + 1)|0;
 $31 = $11;
 $32 = (($31) + ($30<<2)|0);
 HEAP32[$32>>2] = 65535;
 $33 = $13;
 $34 = HEAP32[$33>>2]|0;
 $35 = (($34) + 3)|0;
 HEAP32[$33>>2] = $35;
 $36 = $13;
 $37 = HEAP32[$36>>2]|0;
 $38 = $15;
 $39 = (($38) + 2)|0;
 $40 = $11;
 $41 = (($40) + ($39<<2)|0);
 HEAP32[$41>>2] = $37;
 $42 = $13;
 $43 = HEAP32[$42>>2]|0;
 $44 = (($43) + 0)|0;
 $45 = $11;
 $46 = (($45) + ($44<<2)|0);
 HEAP32[$46>>2] = 65535;
 $47 = $15;
 $48 = $13;
 $49 = HEAP32[$48>>2]|0;
 $50 = (($49) + 1)|0;
 $51 = $11;
 $52 = (($51) + ($50<<2)|0);
 HEAP32[$52>>2] = $47;
 $53 = $13;
 $54 = HEAP32[$53>>2]|0;
 $55 = (($54) + 2)|0;
 $56 = $11;
 $57 = (($56) + ($55<<2)|0);
 HEAP32[$57>>2] = 65535;
 while(1) {
  $58 = $10;
  $59 = HEAP32[$58>>2]|0;
  $60 = $9;
  $61 = ($59|0)<($60|0);
  $62 = $13;
  $63 = HEAP32[$62>>2]|0;
  if (!($61)) {
   label = 10;
   break;
  }
  $15 = $63;
  $64 = $8;
  $65 = $9;
  $66 = $10;
  $67 = $11;
  $68 = $12;
  $69 = $13;
  $70 = $14;
  $71 = (_pattern_compile_expression($64,$65,$66,$67,$68,$69,$70)|0);
  $72 = ($71|0)!=(0);
  if (!($72)) {
   label = 6;
   break;
  }
  $73 = $13;
  $74 = HEAP32[$73>>2]|0;
  $75 = (($74) + 3)|0;
  $76 = $12;
  $77 = ($75>>>0)>=($76>>>0);
  if ($77) {
   label = 8;
   break;
  }
  $78 = $13;
  $79 = HEAP32[$78>>2]|0;
  $80 = $15;
  $81 = (($80) + 2)|0;
  $82 = $11;
  $83 = (($82) + ($81<<2)|0);
  HEAP32[$83>>2] = $79;
  $84 = $13;
  $85 = HEAP32[$84>>2]|0;
  $86 = (($85) + 0)|0;
  $87 = $11;
  $88 = (($87) + ($86<<2)|0);
  HEAP32[$88>>2] = 65535;
  $89 = $15;
  $90 = $13;
  $91 = HEAP32[$90>>2]|0;
  $92 = (($91) + 1)|0;
  $93 = $11;
  $94 = (($93) + ($92<<2)|0);
  HEAP32[$94>>2] = $89;
  $95 = $13;
  $96 = HEAP32[$95>>2]|0;
  $97 = (($96) + 2)|0;
  $98 = $11;
  $99 = (($98) + ($97<<2)|0);
  HEAP32[$99>>2] = 65535;
 }
 if ((label|0) == 6) {
  $7 = 0;
  $100 = $7;
  STACKTOP = sp;return ($100|0);
 }
 else if ((label|0) == 8) {
  $7 = 0;
  $100 = $7;
  STACKTOP = sp;return ($100|0);
 }
 else if ((label|0) == 10) {
  $7 = $63;
  $100 = $7;
  STACKTOP = sp;return ($100|0);
 }
 return (0)|0;
}
function _pattern_compile_2($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 while(1) {
  $13 = $6;
  $14 = (($13) + 0)|0;
  $15 = $5;
  $16 = (($15) + ($14<<2)|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = ($17|0)!=(65535);
  if (!($18)) {
   label = 16;
   break;
  }
  $19 = $6;
  $20 = (($19) + 0)|0;
  $21 = $5;
  $22 = (($21) + ($20<<2)|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = ($23|0)==(2);
  if ($24) {
   label = 5;
  } else {
   $25 = $6;
   $26 = (($25) + 0)|0;
   $27 = $5;
   $28 = (($27) + ($26<<2)|0);
   $29 = HEAP32[$28>>2]|0;
   $30 = ($29|0)==(3);
   if ($30) {
    label = 5;
   }
  }
  if ((label|0) == 5) {
   label = 0;
   $31 = $5;
   $32 = $6;
   $33 = (($32) + 3)|0;
   $34 = $5;
   $35 = (($34) + ($33<<2)|0);
   $36 = HEAP32[$35>>2]|0;
   $37 = $7;
   $38 = $8;
   $39 = (_pattern_compile_2($31,$36,$37,$38)|0);
   $40 = ($39|0)!=(0);
   if (!($40)) {
    label = 6;
    break;
   }
  }
  $41 = $6;
  $42 = (($41) + 0)|0;
  $43 = $5;
  $44 = (($43) + ($42<<2)|0);
  $45 = HEAP32[$44>>2]|0;
  $46 = ($45|0)==(5);
  if ($46) {
   label = 10;
  } else {
   $47 = $6;
   $48 = (($47) + 0)|0;
   $49 = $5;
   $50 = (($49) + ($48<<2)|0);
   $51 = HEAP32[$50>>2]|0;
   $52 = ($51|0)==(4);
   if ($52) {
    label = 10;
   } else {
    $53 = $6;
    $54 = (($53) + 0)|0;
    $55 = $5;
    $56 = (($55) + ($54<<2)|0);
    $57 = HEAP32[$56>>2]|0;
    $58 = ($57|0)==(6);
    if ($58) {
     label = 10;
    }
   }
  }
  if ((label|0) == 10) {
   label = 0;
   $59 = $8;
   $60 = HEAP32[$59>>2]|0;
   $61 = (($60) + 6)|0;
   $62 = $7;
   $63 = ($61>>>0)>=($62>>>0);
   if ($63) {
    label = 11;
    break;
   }
   $64 = $6;
   $65 = (($64) + 1)|0;
   $66 = $5;
   $67 = (($66) + ($65<<2)|0);
   $68 = HEAP32[$67>>2]|0;
   $12 = $68;
   $69 = $12;
   $70 = (($69) + 0)|0;
   $71 = $5;
   $72 = (($71) + ($70<<2)|0);
   $73 = HEAP32[$72>>2]|0;
   $74 = ($73|0)==(1);
   if ($74) {
    label = 13;
    break;
   }
   $75 = $12;
   $76 = (($75) + 1)|0;
   $77 = $5;
   $78 = (($77) + ($76<<2)|0);
   $79 = HEAP32[$78>>2]|0;
   $11 = $79;
   $80 = $8;
   $81 = HEAP32[$80>>2]|0;
   $9 = $81;
   $82 = $9;
   $83 = (($82) + 0)|0;
   $84 = $5;
   $85 = (($84) + ($83<<2)|0);
   HEAP32[$85>>2] = 1;
   $86 = $9;
   $87 = (($86) + 1)|0;
   $88 = $5;
   $89 = (($88) + ($87<<2)|0);
   HEAP32[$89>>2] = 65535;
   $90 = $12;
   $91 = $9;
   $92 = (($91) + 2)|0;
   $93 = $5;
   $94 = (($93) + ($92<<2)|0);
   HEAP32[$94>>2] = $90;
   $95 = $8;
   $96 = HEAP32[$95>>2]|0;
   $97 = (($96) + 3)|0;
   HEAP32[$95>>2] = $97;
   $98 = $8;
   $99 = HEAP32[$98>>2]|0;
   $10 = $99;
   $100 = $10;
   $101 = (($100) + 0)|0;
   $102 = $5;
   $103 = (($102) + ($101<<2)|0);
   HEAP32[$103>>2] = 65535;
   $104 = $12;
   $105 = $10;
   $106 = (($105) + 1)|0;
   $107 = $5;
   $108 = (($107) + ($106<<2)|0);
   HEAP32[$108>>2] = $104;
   $109 = $6;
   $110 = $10;
   $111 = (($110) + 2)|0;
   $112 = $5;
   $113 = (($112) + ($111<<2)|0);
   HEAP32[$113>>2] = $109;
   $114 = $8;
   $115 = HEAP32[$114>>2]|0;
   $116 = (($115) + 3)|0;
   HEAP32[$114>>2] = $116;
   $117 = $9;
   $118 = $6;
   $119 = (($118) + 3)|0;
   $120 = $5;
   $121 = (($120) + ($119<<2)|0);
   HEAP32[$121>>2] = $117;
   $122 = $6;
   $123 = $11;
   $124 = (($123) + 2)|0;
   $125 = $5;
   $126 = (($125) + ($124<<2)|0);
   HEAP32[$126>>2] = $122;
   $127 = $11;
   $128 = $6;
   $129 = (($128) + 1)|0;
   $130 = $5;
   $131 = (($130) + ($129<<2)|0);
   HEAP32[$131>>2] = $127;
   $132 = $9;
   $133 = $12;
   $134 = (($133) + 1)|0;
   $135 = $5;
   $136 = (($135) + ($134<<2)|0);
   HEAP32[$136>>2] = $132;
   $137 = $10;
   $138 = $12;
   $139 = (($138) + 2)|0;
   $140 = $5;
   $141 = (($140) + ($139<<2)|0);
   HEAP32[$141>>2] = $137;
  }
  $142 = $6;
  $143 = (($142) + 2)|0;
  $144 = $5;
  $145 = (($144) + ($143<<2)|0);
  $146 = HEAP32[$145>>2]|0;
  $6 = $146;
 }
 if ((label|0) == 6) {
  $4 = 0;
  $147 = $4;
  STACKTOP = sp;return ($147|0);
 }
 else if ((label|0) == 11) {
  $4 = 0;
  $147 = $4;
  STACKTOP = sp;return ($147|0);
 }
 else if ((label|0) == 13) {
  $4 = 0;
  $147 = $4;
  STACKTOP = sp;return ($147|0);
 }
 else if ((label|0) == 16) {
  $4 = 1;
  $147 = $4;
  STACKTOP = sp;return ($147|0);
 }
 return (0)|0;
}
function _pattern_compile_3($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0;
 var $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0;
 var $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0;
 var $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 while(1) {
  $14 = $6;
  $15 = (($14) + 0)|0;
  $16 = $5;
  $17 = (($16) + ($15<<2)|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = ($18|0)!=(65535);
  if (!($19)) {
   label = 29;
   break;
  }
  $20 = $6;
  $21 = (($20) + 0)|0;
  $22 = $5;
  $23 = (($22) + ($21<<2)|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = ($24|0)==(2);
  if ($25) {
   label = 8;
  } else {
   $26 = $6;
   $27 = (($26) + 0)|0;
   $28 = $5;
   $29 = (($28) + ($27<<2)|0);
   $30 = HEAP32[$29>>2]|0;
   $31 = ($30|0)==(3);
   if ($31) {
    label = 8;
   } else {
    $32 = $6;
    $33 = (($32) + 0)|0;
    $34 = $5;
    $35 = (($34) + ($33<<2)|0);
    $36 = HEAP32[$35>>2]|0;
    $37 = ($36|0)==(6);
    if ($37) {
     label = 8;
    } else {
     $38 = $6;
     $39 = (($38) + 0)|0;
     $40 = $5;
     $41 = (($40) + ($39<<2)|0);
     $42 = HEAP32[$41>>2]|0;
     $43 = ($42|0)==(5);
     if ($43) {
      label = 8;
     } else {
      $44 = $6;
      $45 = (($44) + 0)|0;
      $46 = $5;
      $47 = (($46) + ($45<<2)|0);
      $48 = HEAP32[$47>>2]|0;
      $49 = ($48|0)==(4);
      if ($49) {
       label = 8;
      }
     }
    }
   }
  }
  if ((label|0) == 8) {
   label = 0;
   $50 = $5;
   $51 = $6;
   $52 = (($51) + 3)|0;
   $53 = $5;
   $54 = (($53) + ($52<<2)|0);
   $55 = HEAP32[$54>>2]|0;
   $56 = $7;
   $57 = $8;
   $58 = (_pattern_compile_3($50,$55,$56,$57)|0);
   $59 = ($58|0)!=(0);
   if (!($59)) {
    label = 9;
    break;
   }
  }
  $60 = $6;
  $61 = (($60) + 0)|0;
  $62 = $5;
  $63 = (($62) + ($61<<2)|0);
  $64 = HEAP32[$63>>2]|0;
  $65 = ($64|0)==(7);
  if ($65) {
   $66 = $8;
   $67 = HEAP32[$66>>2]|0;
   $68 = (($67) + 12)|0;
   $69 = $7;
   $70 = ($68>>>0)>=($69>>>0);
   if ($70) {
    label = 12;
    break;
   }
   $71 = $6;
   $72 = (($71) + 1)|0;
   $73 = $5;
   $74 = (($73) + ($72<<2)|0);
   $75 = HEAP32[$74>>2]|0;
   $9 = $75;
   $76 = $9;
   $77 = (($76) + 0)|0;
   $78 = $5;
   $79 = (($78) + ($77<<2)|0);
   $80 = HEAP32[$79>>2]|0;
   $81 = ($80|0)==(1);
   if ($81) {
    label = 14;
    break;
   }
   $82 = $9;
   $13 = $82;
   while(1) {
    $83 = $9;
    $84 = (($83) + 0)|0;
    $85 = $5;
    $86 = (($85) + ($84<<2)|0);
    $87 = HEAP32[$86>>2]|0;
    $88 = ($87|0)!=(1);
    $89 = $9;
    if (!($88)) {
     break;
    }
    $90 = (($89) + 1)|0;
    $91 = $5;
    $92 = (($91) + ($90<<2)|0);
    $93 = HEAP32[$92>>2]|0;
    $9 = $93;
   }
   $94 = (($89) + 2)|0;
   $95 = $5;
   $96 = (($95) + ($94<<2)|0);
   $97 = HEAP32[$96>>2]|0;
   $12 = $97;
   $98 = $8;
   $99 = HEAP32[$98>>2]|0;
   $10 = $99;
   $100 = $10;
   $101 = (($100) + 0)|0;
   $102 = $5;
   $103 = (($102) + ($101<<2)|0);
   HEAP32[$103>>2] = 1;
   $104 = $10;
   $105 = (($104) + 1)|0;
   $106 = $5;
   $107 = (($106) + ($105<<2)|0);
   HEAP32[$107>>2] = 65535;
   $108 = $12;
   $109 = $10;
   $110 = (($109) + 2)|0;
   $111 = $5;
   $112 = (($111) + ($110<<2)|0);
   HEAP32[$112>>2] = $108;
   $113 = $8;
   $114 = HEAP32[$113>>2]|0;
   $115 = (($114) + 3)|0;
   HEAP32[$113>>2] = $115;
   $116 = $8;
   $117 = HEAP32[$116>>2]|0;
   $11 = $117;
   $118 = $11;
   $119 = (($118) + 0)|0;
   $120 = $5;
   $121 = (($120) + ($119<<2)|0);
   HEAP32[$121>>2] = 65535;
   $122 = $13;
   $123 = $11;
   $124 = (($123) + 1)|0;
   $125 = $5;
   $126 = (($125) + ($124<<2)|0);
   HEAP32[$126>>2] = $122;
   $127 = $6;
   $128 = $11;
   $129 = (($128) + 2)|0;
   $130 = $5;
   $131 = (($130) + ($129<<2)|0);
   HEAP32[$131>>2] = $127;
   $132 = $8;
   $133 = HEAP32[$132>>2]|0;
   $134 = (($133) + 3)|0;
   HEAP32[$132>>2] = $134;
   $135 = $10;
   $136 = $6;
   $137 = (($136) + 3)|0;
   $138 = $5;
   $139 = (($138) + ($137<<2)|0);
   HEAP32[$139>>2] = $135;
   $140 = $6;
   $141 = $9;
   $142 = (($141) + 2)|0;
   $143 = $5;
   $144 = (($143) + ($142<<2)|0);
   HEAP32[$144>>2] = $140;
   $145 = $9;
   $146 = $6;
   $147 = (($146) + 1)|0;
   $148 = $5;
   $149 = (($148) + ($147<<2)|0);
   HEAP32[$149>>2] = $145;
   $150 = $10;
   $151 = $12;
   $152 = (($151) + 1)|0;
   $153 = $5;
   $154 = (($153) + ($152<<2)|0);
   HEAP32[$154>>2] = $150;
   $155 = $11;
   $156 = $13;
   $157 = (($156) + 2)|0;
   $158 = $5;
   $159 = (($158) + ($157<<2)|0);
   HEAP32[$159>>2] = $155;
   $160 = $6;
   $161 = (($160) + 2)|0;
   $162 = $5;
   $163 = (($162) + ($161<<2)|0);
   $164 = HEAP32[$163>>2]|0;
   $9 = $164;
   $165 = $9;
   $166 = (($165) + 0)|0;
   $167 = $5;
   $168 = (($167) + ($166<<2)|0);
   $169 = HEAP32[$168>>2]|0;
   $170 = ($169|0)==(65535);
   if ($170) {
    label = 20;
    break;
   }
   $171 = $9;
   $172 = (($171) + 0)|0;
   $173 = $5;
   $174 = (($173) + ($172<<2)|0);
   $175 = HEAP32[$174>>2]|0;
   $176 = ($175|0)==(7);
   if ($176) {
    label = 20;
    break;
   }
   $177 = $9;
   $12 = $177;
   while(1) {
    $178 = $9;
    $179 = (($178) + 0)|0;
    $180 = $5;
    $181 = (($180) + ($179<<2)|0);
    $182 = HEAP32[$181>>2]|0;
    $183 = ($182|0)!=(65535);
    if ($183) {
     $184 = $9;
     $185 = (($184) + 0)|0;
     $186 = $5;
     $187 = (($186) + ($185<<2)|0);
     $188 = HEAP32[$187>>2]|0;
     $189 = ($188|0)!=(7);
     $277 = $189;
    } else {
     $277 = 0;
    }
    $190 = $9;
    if (!($277)) {
     break;
    }
    $191 = (($190) + 2)|0;
    $192 = $5;
    $193 = (($192) + ($191<<2)|0);
    $194 = HEAP32[$193>>2]|0;
    $9 = $194;
   }
   $195 = (($190) + 1)|0;
   $196 = $5;
   $197 = (($196) + ($195<<2)|0);
   $198 = HEAP32[$197>>2]|0;
   $13 = $198;
   $199 = $8;
   $200 = HEAP32[$199>>2]|0;
   $10 = $200;
   $201 = $10;
   $202 = (($201) + 0)|0;
   $203 = $5;
   $204 = (($203) + ($202<<2)|0);
   HEAP32[$204>>2] = 1;
   $205 = $10;
   $206 = (($205) + 1)|0;
   $207 = $5;
   $208 = (($207) + ($206<<2)|0);
   HEAP32[$208>>2] = 65535;
   $209 = $12;
   $210 = $10;
   $211 = (($210) + 2)|0;
   $212 = $5;
   $213 = (($212) + ($211<<2)|0);
   HEAP32[$213>>2] = $209;
   $214 = $8;
   $215 = HEAP32[$214>>2]|0;
   $216 = (($215) + 3)|0;
   HEAP32[$214>>2] = $216;
   $217 = $8;
   $218 = HEAP32[$217>>2]|0;
   $11 = $218;
   $219 = $11;
   $220 = (($219) + 0)|0;
   $221 = $5;
   $222 = (($221) + ($220<<2)|0);
   HEAP32[$222>>2] = 65535;
   $223 = $13;
   $224 = $11;
   $225 = (($224) + 1)|0;
   $226 = $5;
   $227 = (($226) + ($225<<2)|0);
   HEAP32[$227>>2] = $223;
   $228 = $6;
   $229 = $11;
   $230 = (($229) + 2)|0;
   $231 = $5;
   $232 = (($231) + ($230<<2)|0);
   HEAP32[$232>>2] = $228;
   $233 = $8;
   $234 = HEAP32[$233>>2]|0;
   $235 = (($234) + 3)|0;
   HEAP32[$233>>2] = $235;
   $236 = $10;
   $237 = $6;
   $238 = (($237) + 4)|0;
   $239 = $5;
   $240 = (($239) + ($238<<2)|0);
   HEAP32[$240>>2] = $236;
   $241 = $6;
   $242 = $9;
   $243 = (($242) + 1)|0;
   $244 = $5;
   $245 = (($244) + ($243<<2)|0);
   HEAP32[$245>>2] = $241;
   $246 = $9;
   $247 = $6;
   $248 = (($247) + 2)|0;
   $249 = $5;
   $250 = (($249) + ($248<<2)|0);
   HEAP32[$250>>2] = $246;
   $251 = $10;
   $252 = $12;
   $253 = (($252) + 1)|0;
   $254 = $5;
   $255 = (($254) + ($253<<2)|0);
   HEAP32[$255>>2] = $251;
   $256 = $11;
   $257 = $13;
   $258 = (($257) + 2)|0;
   $259 = $5;
   $260 = (($259) + ($258<<2)|0);
   HEAP32[$260>>2] = $256;
   $261 = $5;
   $262 = $6;
   $263 = (($262) + 4)|0;
   $264 = $5;
   $265 = (($264) + ($263<<2)|0);
   $266 = HEAP32[$265>>2]|0;
   $267 = $7;
   $268 = $8;
   $269 = (_pattern_compile_3($261,$266,$267,$268)|0);
   $270 = ($269|0)!=(0);
   if (!($270)) {
    label = 27;
    break;
   }
  }
  $271 = $6;
  $272 = (($271) + 2)|0;
  $273 = $5;
  $274 = (($273) + ($272<<2)|0);
  $275 = HEAP32[$274>>2]|0;
  $6 = $275;
 }
 if ((label|0) == 9) {
  $4 = 0;
  $276 = $4;
  STACKTOP = sp;return ($276|0);
 }
 else if ((label|0) == 12) {
  $4 = 0;
  $276 = $4;
  STACKTOP = sp;return ($276|0);
 }
 else if ((label|0) == 14) {
  $4 = 0;
  $276 = $4;
  STACKTOP = sp;return ($276|0);
 }
 else if ((label|0) == 20) {
  $4 = 0;
  $276 = $4;
  STACKTOP = sp;return ($276|0);
 }
 else if ((label|0) == 27) {
  $4 = 0;
  $276 = $4;
  STACKTOP = sp;return ($276|0);
 }
 else if ((label|0) == 29) {
  $4 = 1;
  $276 = $4;
  STACKTOP = sp;return ($276|0);
 }
 return (0)|0;
}
function _pattern_compile_expression($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0;
 var $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0;
 var $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0;
 var $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0;
 var $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0;
 var $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0;
 var $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0;
 var $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0;
 var $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0;
 var $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0;
 var $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0;
 var $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0;
 var $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0;
 var $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0;
 var $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0;
 var $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0;
 var $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0;
 var $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0;
 var $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0;
 var $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0;
 var $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0;
 var $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0;
 var $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0;
 var $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0;
 var $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0;
 var $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $or$cond = 0, $or$cond11 = 0, $or$cond13 = 0, $or$cond3 = 0, $or$cond5 = 0, $or$cond7 = 0, $or$cond9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $8 = $0;
 $9 = $1;
 $10 = $2;
 $11 = $3;
 $12 = $4;
 $13 = $5;
 $14 = $6;
 $27 = $10;
 $28 = HEAP32[$27>>2]|0;
 $29 = $8;
 $30 = (($29) + ($28<<2)|0);
 $31 = HEAP32[$30>>2]|0;
 do {
  switch ($31|0) {
  case 40:  {
   $32 = $13;
   $33 = HEAP32[$32>>2]|0;
   $34 = (($33) + 10)|0;
   $35 = $12;
   $36 = ($34>>>0)>=($35>>>0);
   if ($36) {
    $7 = 0;
    $668 = $7;
    STACKTOP = sp;return ($668|0);
   }
   $37 = $10;
   $38 = HEAP32[$37>>2]|0;
   $39 = (($38) + 1)|0;
   HEAP32[$37>>2] = $39;
   $40 = $10;
   $41 = HEAP32[$40>>2]|0;
   $42 = $9;
   $43 = ($41|0)>=($42|0);
   if ($43) {
    $7 = 0;
    $668 = $7;
    STACKTOP = sp;return ($668|0);
   }
   $24 = 0;
   $25 = 0;
   $44 = $10;
   $45 = HEAP32[$44>>2]|0;
   $20 = $45;
   while(1) {
    $46 = $20;
    $47 = $9;
    $48 = ($46|0)<($47|0);
    if (!($48)) {
     break;
    }
    $49 = $20;
    $50 = $8;
    $51 = (($50) + ($49<<2)|0);
    $52 = HEAP32[$51>>2]|0;
    $53 = ($52|0)!=(92);
    $54 = $24;
    $55 = ($54|0)!=(0);
    $or$cond = $53 | $55;
    if ($or$cond) {
     $56 = $20;
     $57 = $8;
     $58 = (($57) + ($56<<2)|0);
     $59 = HEAP32[$58>>2]|0;
     $60 = ($59|0)!=(40);
     $61 = $24;
     $62 = ($61|0)!=(0);
     $or$cond3 = $60 | $62;
     if ($or$cond3) {
      $65 = $20;
      $66 = $8;
      $67 = (($66) + ($65<<2)|0);
      $68 = HEAP32[$67>>2]|0;
      $69 = ($68|0)!=(41);
      $70 = $24;
      $71 = ($70|0)!=(0);
      $or$cond5 = $69 | $71;
      if (!($or$cond5)) {
       $72 = $25;
       $73 = ($72|0)!=(0);
       if (!($73)) {
        break;
       }
       $74 = $25;
       $75 = (($74) + -1)|0;
       $25 = $75;
      }
     } else {
      $63 = $25;
      $64 = (($63) + 1)|0;
      $25 = $64;
     }
     $24 = 0;
    } else {
     $24 = 1;
    }
    $76 = $20;
    $77 = (($76) + 1)|0;
    $20 = $77;
   }
   $78 = $20;
   $79 = $9;
   $80 = ($78|0)>=($79|0);
   if ($80) {
    $7 = 0;
    $668 = $7;
    STACKTOP = sp;return ($668|0);
   }
   $81 = $13;
   $82 = HEAP32[$81>>2]|0;
   $83 = (($82) + 0)|0;
   $84 = $11;
   $85 = (($84) + ($83<<2)|0);
   HEAP32[$85>>2] = 2;
   $86 = $13;
   $87 = HEAP32[$86>>2]|0;
   $19 = $87;
   $88 = $13;
   $89 = HEAP32[$88>>2]|0;
   $90 = (($89) + 4)|0;
   HEAP32[$88>>2] = $90;
   $91 = $13;
   $92 = HEAP32[$91>>2]|0;
   $93 = $19;
   $94 = (($93) + 3)|0;
   $95 = $11;
   $96 = (($95) + ($94<<2)|0);
   HEAP32[$96>>2] = $92;
   $97 = $13;
   $98 = HEAP32[$97>>2]|0;
   $18 = $98;
   $99 = $18;
   $100 = (($99) + 0)|0;
   $101 = $11;
   $102 = (($101) + ($100<<2)|0);
   HEAP32[$102>>2] = 0;
   $103 = $18;
   $104 = (($103) + 1)|0;
   $105 = $11;
   $106 = (($105) + ($104<<2)|0);
   HEAP32[$106>>2] = 65535;
   $107 = $18;
   $108 = (($107) + 2)|0;
   $109 = $11;
   $110 = (($109) + ($108<<2)|0);
   HEAP32[$110>>2] = 65535;
   $111 = $8;
   $112 = $20;
   $113 = $10;
   $114 = $11;
   $115 = $12;
   $116 = $13;
   $117 = $14;
   $118 = (_pattern_compile_1($111,$112,$113,$114,$115,$116,$117)|0);
   $119 = ($118|0)!=(0);
   if ($119) {
    $120 = $10;
    $121 = HEAP32[$120>>2]|0;
    $122 = (($121) + 1)|0;
    HEAP32[$120>>2] = $122;
    $123 = $13;
    $124 = HEAP32[$123>>2]|0;
    $17 = $124;
    $125 = $19;
    $126 = $17;
    $127 = (($126) + 2)|0;
    $128 = $11;
    $129 = (($128) + ($127<<2)|0);
    HEAP32[$129>>2] = $125;
    $130 = $13;
    $131 = HEAP32[$130>>2]|0;
    $132 = (($131) + 3)|0;
    HEAP32[$130>>2] = $132;
    $7 = $132;
    $668 = $7;
    STACKTOP = sp;return ($668|0);
   } else {
    $7 = 0;
    $668 = $7;
    STACKTOP = sp;return ($668|0);
   }
   break;
  }
  case 33:  {
   $133 = $13;
   $134 = HEAP32[$133>>2]|0;
   $135 = (($134) + 10)|0;
   $136 = $12;
   $137 = ($135>>>0)>=($136>>>0);
   if ($137) {
    $7 = 0;
    $668 = $7;
    STACKTOP = sp;return ($668|0);
   }
   $138 = $10;
   $139 = HEAP32[$138>>2]|0;
   $140 = (($139) + 1)|0;
   HEAP32[$138>>2] = $140;
   $141 = $13;
   $142 = HEAP32[$141>>2]|0;
   $143 = (($142) + 0)|0;
   $144 = $11;
   $145 = (($144) + ($143<<2)|0);
   HEAP32[$145>>2] = 3;
   $146 = $13;
   $147 = HEAP32[$146>>2]|0;
   $19 = $147;
   $148 = $13;
   $149 = HEAP32[$148>>2]|0;
   $150 = (($149) + 4)|0;
   HEAP32[$148>>2] = $150;
   $151 = $13;
   $152 = HEAP32[$151>>2]|0;
   $153 = $19;
   $154 = (($153) + 3)|0;
   $155 = $11;
   $156 = (($155) + ($154<<2)|0);
   HEAP32[$156>>2] = $152;
   $157 = $13;
   $158 = HEAP32[$157>>2]|0;
   $16 = $158;
   $159 = $16;
   $160 = (($159) + 0)|0;
   $161 = $11;
   $162 = (($161) + ($160<<2)|0);
   HEAP32[$162>>2] = 1;
   $163 = $16;
   $164 = (($163) + 1)|0;
   $165 = $11;
   $166 = (($165) + ($164<<2)|0);
   HEAP32[$166>>2] = 65535;
   $167 = $13;
   $168 = HEAP32[$167>>2]|0;
   $169 = (($168) + 3)|0;
   HEAP32[$167>>2] = $169;
   $170 = $13;
   $171 = HEAP32[$170>>2]|0;
   $172 = $16;
   $173 = (($172) + 2)|0;
   $174 = $11;
   $175 = (($174) + ($173<<2)|0);
   HEAP32[$175>>2] = $171;
   $176 = $13;
   $177 = HEAP32[$176>>2]|0;
   $18 = $177;
   $178 = $18;
   $179 = (($178) + 0)|0;
   $180 = $11;
   $181 = (($180) + ($179<<2)|0);
   HEAP32[$181>>2] = 0;
   $182 = $16;
   $183 = $18;
   $184 = (($183) + 1)|0;
   $185 = $11;
   $186 = (($185) + ($184<<2)|0);
   HEAP32[$186>>2] = $182;
   $187 = $18;
   $188 = (($187) + 2)|0;
   $189 = $11;
   $190 = (($189) + ($188<<2)|0);
   HEAP32[$190>>2] = 65535;
   $191 = $8;
   $192 = $9;
   $193 = $10;
   $194 = $11;
   $195 = $12;
   $196 = $13;
   $197 = $14;
   $198 = (_pattern_compile_expression($191,$192,$193,$194,$195,$196,$197)|0);
   $199 = ($198|0)!=(0);
   if ($199) {
    $200 = $13;
    $201 = HEAP32[$200>>2]|0;
    $202 = $18;
    $203 = (($202) + 2)|0;
    $204 = $11;
    $205 = (($204) + ($203<<2)|0);
    HEAP32[$205>>2] = $201;
    $206 = $13;
    $207 = HEAP32[$206>>2]|0;
    $17 = $207;
    $208 = $17;
    $209 = (($208) + 0)|0;
    $210 = $11;
    $211 = (($210) + ($209<<2)|0);
    HEAP32[$211>>2] = 65535;
    $212 = $18;
    $213 = $17;
    $214 = (($213) + 1)|0;
    $215 = $11;
    $216 = (($215) + ($214<<2)|0);
    HEAP32[$216>>2] = $212;
    $217 = $19;
    $218 = $17;
    $219 = (($218) + 2)|0;
    $220 = $11;
    $221 = (($220) + ($219<<2)|0);
    HEAP32[$221>>2] = $217;
    $222 = $13;
    $223 = HEAP32[$222>>2]|0;
    $224 = (($223) + 3)|0;
    HEAP32[$222>>2] = $224;
    $7 = $224;
    $668 = $7;
    STACKTOP = sp;return ($668|0);
   } else {
    $7 = 0;
    $668 = $7;
    STACKTOP = sp;return ($668|0);
   }
   break;
  }
  case 43:  {
   $225 = $13;
   $226 = HEAP32[$225>>2]|0;
   $227 = (($226) + 4)|0;
   $228 = $12;
   $229 = ($227>>>0)>=($228>>>0);
   if ($229) {
    $7 = 0;
    $668 = $7;
    STACKTOP = sp;return ($668|0);
   } else {
    $230 = $13;
    $231 = HEAP32[$230>>2]|0;
    $232 = (($231) + 0)|0;
    $233 = $11;
    $234 = (($233) + ($232<<2)|0);
    HEAP32[$234>>2] = 4;
    $235 = $14;
    $236 = HEAP32[$235>>2]|0;
    $237 = (($236) + 1)|0;
    HEAP32[$235>>2] = $237;
    $238 = $13;
    $239 = HEAP32[$238>>2]|0;
    $240 = (($239) + 4)|0;
    $241 = $11;
    $242 = (($241) + ($240<<2)|0);
    HEAP32[$242>>2] = $236;
    $243 = $10;
    $244 = HEAP32[$243>>2]|0;
    $245 = (($244) + 1)|0;
    HEAP32[$243>>2] = $245;
    $246 = $13;
    $247 = HEAP32[$246>>2]|0;
    $248 = (($247) + 5)|0;
    HEAP32[$246>>2] = $248;
    $7 = $248;
    $668 = $7;
    STACKTOP = sp;return ($668|0);
   }
   break;
  }
  case 42:  {
   $249 = $13;
   $250 = HEAP32[$249>>2]|0;
   $251 = (($250) + 4)|0;
   $252 = $12;
   $253 = ($251>>>0)>=($252>>>0);
   if ($253) {
    $7 = 0;
    $668 = $7;
    STACKTOP = sp;return ($668|0);
   } else {
    $254 = $13;
    $255 = HEAP32[$254>>2]|0;
    $256 = (($255) + 0)|0;
    $257 = $11;
    $258 = (($257) + ($256<<2)|0);
    HEAP32[$258>>2] = 5;
    $259 = $14;
    $260 = HEAP32[$259>>2]|0;
    $261 = (($260) + 1)|0;
    HEAP32[$259>>2] = $261;
    $262 = $13;
    $263 = HEAP32[$262>>2]|0;
    $264 = (($263) + 4)|0;
    $265 = $11;
    $266 = (($265) + ($264<<2)|0);
    HEAP32[$266>>2] = $260;
    $267 = $10;
    $268 = HEAP32[$267>>2]|0;
    $269 = (($268) + 1)|0;
    HEAP32[$267>>2] = $269;
    $270 = $13;
    $271 = HEAP32[$270>>2]|0;
    $272 = (($271) + 5)|0;
    HEAP32[$270>>2] = $272;
    $7 = $272;
    $668 = $7;
    STACKTOP = sp;return ($668|0);
   }
   break;
  }
  case 63:  {
   $273 = $13;
   $274 = HEAP32[$273>>2]|0;
   $275 = (($274) + 4)|0;
   $276 = $12;
   $277 = ($275>>>0)>=($276>>>0);
   if ($277) {
    $7 = 0;
    $668 = $7;
    STACKTOP = sp;return ($668|0);
   } else {
    $278 = $13;
    $279 = HEAP32[$278>>2]|0;
    $280 = (($279) + 0)|0;
    $281 = $11;
    $282 = (($281) + ($280<<2)|0);
    HEAP32[$282>>2] = 6;
    $283 = $10;
    $284 = HEAP32[$283>>2]|0;
    $285 = (($284) + 1)|0;
    HEAP32[$283>>2] = $285;
    $286 = $13;
    $287 = HEAP32[$286>>2]|0;
    $288 = (($287) + 4)|0;
    HEAP32[$286>>2] = $288;
    $7 = $288;
    $668 = $7;
    STACKTOP = sp;return ($668|0);
   }
   break;
  }
  case 124:  {
   $289 = $13;
   $290 = HEAP32[$289>>2]|0;
   $291 = (($290) + 5)|0;
   $292 = $12;
   $293 = ($291>>>0)>=($292>>>0);
   if ($293) {
    $7 = 0;
    $668 = $7;
    STACKTOP = sp;return ($668|0);
   } else {
    $294 = $13;
    $295 = HEAP32[$294>>2]|0;
    $296 = (($295) + 0)|0;
    $297 = $11;
    $298 = (($297) + ($296<<2)|0);
    HEAP32[$298>>2] = 7;
    $299 = $10;
    $300 = HEAP32[$299>>2]|0;
    $301 = (($300) + 1)|0;
    HEAP32[$299>>2] = $301;
    $302 = $13;
    $303 = HEAP32[$302>>2]|0;
    $304 = (($303) + 5)|0;
    HEAP32[$302>>2] = $304;
    $7 = $304;
    $668 = $7;
    STACKTOP = sp;return ($668|0);
   }
   break;
  }
  case 46:  {
   $305 = $13;
   $306 = HEAP32[$305>>2]|0;
   $307 = (($306) + 3)|0;
   $308 = $12;
   $309 = ($307>>>0)>=($308>>>0);
   if ($309) {
    $7 = 0;
    $668 = $7;
    STACKTOP = sp;return ($668|0);
   } else {
    $310 = $13;
    $311 = HEAP32[$310>>2]|0;
    $312 = (($311) + 0)|0;
    $313 = $11;
    $314 = (($313) + ($312<<2)|0);
    HEAP32[$314>>2] = 8;
    $315 = $10;
    $316 = HEAP32[$315>>2]|0;
    $317 = (($316) + 1)|0;
    HEAP32[$315>>2] = $317;
    $318 = $13;
    $319 = HEAP32[$318>>2]|0;
    $320 = (($319) + 3)|0;
    HEAP32[$318>>2] = $320;
    $7 = $320;
    $668 = $7;
    STACKTOP = sp;return ($668|0);
   }
   break;
  }
  case 37:  {
   $321 = $13;
   $322 = HEAP32[$321>>2]|0;
   $323 = (($322) + 5)|0;
   $324 = $12;
   $325 = ($323>>>0)>=($324>>>0);
   if ($325) {
    $7 = 0;
    $668 = $7;
    STACKTOP = sp;return ($668|0);
   }
   $326 = $10;
   $327 = HEAP32[$326>>2]|0;
   $328 = (($327) + 1)|0;
   HEAP32[$326>>2] = $328;
   $329 = $10;
   $330 = HEAP32[$329>>2]|0;
   $331 = $9;
   $332 = ($330|0)>=($331|0);
   if ($332) {
    $7 = 0;
    $668 = $7;
    STACKTOP = sp;return ($668|0);
   }
   $333 = $10;
   $334 = HEAP32[$333>>2]|0;
   $335 = $8;
   $336 = (($335) + ($334<<2)|0);
   $337 = HEAP32[$336>>2]|0;
   $338 = ($337|0)==(91);
   if ($338) {
    $23 = 1;
    $339 = $10;
    $340 = HEAP32[$339>>2]|0;
    $341 = (($340) + 1)|0;
    HEAP32[$339>>2] = $341;
    $342 = $10;
    $343 = HEAP32[$342>>2]|0;
    $20 = $343;
    while(1) {
     $344 = $20;
     $345 = $9;
     $346 = ($344|0)<($345|0);
     if (!($346)) {
      break;
     }
     $347 = $20;
     $348 = $8;
     $349 = (($348) + ($347<<2)|0);
     $350 = HEAP32[$349>>2]|0;
     $351 = ($350|0)==(93);
     if ($351) {
      break;
     }
     $352 = $20;
     $353 = (($352) + 1)|0;
     $20 = $353;
    }
    $354 = $20;
    $355 = $9;
    $356 = ($354|0)>=($355|0);
    if ($356) {
     $7 = 0;
     $668 = $7;
     STACKTOP = sp;return ($668|0);
    }
   } else {
    $23 = 0;
    $357 = $10;
    $358 = HEAP32[$357>>2]|0;
    $359 = (($358) + 1)|0;
    $20 = $359;
   }
   $360 = $13;
   $361 = HEAP32[$360>>2]|0;
   $362 = (($361) + 0)|0;
   $363 = $11;
   $364 = (($363) + ($362<<2)|0);
   HEAP32[$364>>2] = 9;
   $22 = 0;
   $21 = 0;
   L94: while(1) {
    $365 = $10;
    $366 = HEAP32[$365>>2]|0;
    $367 = $20;
    $368 = ($366|0)<($367|0);
    if (!($368)) {
     break;
    }
    $369 = $10;
    $370 = HEAP32[$369>>2]|0;
    $371 = $8;
    $372 = (($371) + ($370<<2)|0);
    $373 = HEAP32[$372>>2]|0;
    do {
     switch ($373|0) {
     case 95:  {
      $374 = $21;
      $375 = $374 | 1;
      $21 = $375;
      break;
     }
     case 35:  {
      $376 = $21;
      $377 = $376 | 4;
      $21 = $377;
      break;
     }
     case 97:  {
      $378 = $21;
      $379 = $378 | 2;
      $21 = $379;
      break;
     }
     case 117:  {
      $380 = $21;
      $381 = $380 | 16;
      $21 = $381;
      break;
     }
     case 108:  {
      $382 = $21;
      $383 = $382 | 32;
      $21 = $383;
      break;
     }
     case 46:  {
      $384 = $21;
      $385 = $384 | 8;
      $21 = $385;
      break;
     }
     case 36:  {
      $386 = $21;
      $387 = $386 | 128;
      $21 = $387;
      break;
     }
     case 126:  {
      $388 = $21;
      $389 = $388 | 8192;
      $21 = $389;
      break;
     }
     case 60:  {
      $390 = $21;
      $391 = $390 | 16384;
      $21 = $391;
      break;
     }
     case 62:  {
      $392 = $21;
      $393 = $392 | 32768;
      $21 = $393;
      break;
     }
     case 48:  {
      $394 = $22;
      $395 = $394 | 1;
      $22 = $395;
      break;
     }
     case 49:  {
      $396 = $22;
      $397 = $396 | 2;
      $22 = $397;
      break;
     }
     case 50:  {
      $398 = $22;
      $399 = $398 | 4;
      $22 = $399;
      break;
     }
     case 51:  {
      $400 = $22;
      $401 = $400 | 8;
      $22 = $401;
      break;
     }
     case 52:  {
      $402 = $22;
      $403 = $402 | 16;
      $22 = $403;
      break;
     }
     case 53:  {
      $404 = $22;
      $405 = $404 | 32;
      $22 = $405;
      break;
     }
     case 54:  {
      $406 = $22;
      $407 = $406 | 64;
      $22 = $407;
      break;
     }
     case 55:  {
      $408 = $22;
      $409 = $408 | 128;
      $22 = $409;
      break;
     }
     case 94:  {
      $410 = $22;
      $411 = $410 | 2048;
      $22 = $411;
      break;
     }
     default: {
      label = 76;
      break L94;
     }
     }
    } while(0);
    $412 = $10;
    $413 = HEAP32[$412>>2]|0;
    $414 = (($413) + 1)|0;
    HEAP32[$412>>2] = $414;
   }
   if ((label|0) == 76) {
    $7 = 0;
    $668 = $7;
    STACKTOP = sp;return ($668|0);
   }
   $415 = $22;
   $416 = $13;
   $417 = HEAP32[$416>>2]|0;
   $418 = (($417) + 3)|0;
   $419 = $11;
   $420 = (($419) + ($418<<2)|0);
   HEAP32[$420>>2] = $415;
   $421 = $21;
   $422 = $13;
   $423 = HEAP32[$422>>2]|0;
   $424 = (($423) + 4)|0;
   $425 = $11;
   $426 = (($425) + ($424<<2)|0);
   HEAP32[$426>>2] = $421;
   $427 = $23;
   $428 = ($427|0)!=(0);
   if ($428) {
    $429 = $10;
    $430 = HEAP32[$429>>2]|0;
    $431 = (($430) + 1)|0;
    HEAP32[$429>>2] = $431;
   }
   $432 = $13;
   $433 = HEAP32[$432>>2]|0;
   $434 = (($433) + 5)|0;
   HEAP32[$432>>2] = $434;
   $7 = $434;
   $668 = $7;
   STACKTOP = sp;return ($668|0);
   break;
  }
  case 91:  {
   $435 = $10;
   $436 = HEAP32[$435>>2]|0;
   $437 = (($436) + 1)|0;
   HEAP32[$435>>2] = $437;
   $438 = $10;
   $439 = HEAP32[$438>>2]|0;
   $440 = $9;
   $441 = ($439|0)>=($440|0);
   if ($441) {
    $7 = 0;
    $668 = $7;
    STACKTOP = sp;return ($668|0);
   }
   $24 = 0;
   $442 = $10;
   $443 = HEAP32[$442>>2]|0;
   $20 = $443;
   while(1) {
    $444 = $20;
    $445 = $9;
    $446 = ($444|0)<($445|0);
    if (!($446)) {
     break;
    }
    $447 = $20;
    $448 = $8;
    $449 = (($448) + ($447<<2)|0);
    $450 = HEAP32[$449>>2]|0;
    $451 = ($450|0)!=(92);
    $452 = $24;
    $453 = ($452|0)!=(0);
    $or$cond7 = $451 | $453;
    if ($or$cond7) {
     $454 = $20;
     $455 = $8;
     $456 = (($455) + ($454<<2)|0);
     $457 = HEAP32[$456>>2]|0;
     $458 = ($457|0)!=(93);
     $459 = $24;
     $460 = ($459|0)!=(0);
     $or$cond9 = $458 | $460;
     if (!($or$cond9)) {
      break;
     }
     $24 = 0;
    } else {
     $24 = 1;
    }
    $461 = $20;
    $462 = (($461) + 1)|0;
    $20 = $462;
   }
   $463 = $20;
   $464 = $9;
   $465 = ($463|0)>=($464|0);
   if ($465) {
    $7 = 0;
    $668 = $7;
    STACKTOP = sp;return ($668|0);
   }
   $466 = $13;
   $467 = HEAP32[$466>>2]|0;
   $468 = (($467) + 4)|0;
   $469 = $20;
   $470 = $10;
   $471 = HEAP32[$470>>2]|0;
   $472 = (($469) - ($471))|0;
   $473 = (($468) + ($472))|0;
   $474 = $12;
   $475 = ($473>>>0)>=($474>>>0);
   if ($475) {
    $7 = 0;
    $668 = $7;
    STACKTOP = sp;return ($668|0);
   }
   $476 = $13;
   $477 = HEAP32[$476>>2]|0;
   $478 = (($477) + 0)|0;
   $479 = $11;
   $480 = (($479) + ($478<<2)|0);
   HEAP32[$480>>2] = 10;
   $24 = 0;
   $481 = $13;
   $482 = HEAP32[$481>>2]|0;
   $483 = (($482) + 3)|0;
   $484 = $11;
   $485 = (($484) + ($483<<2)|0);
   $15 = $485;
   $26 = 1;
   while(1) {
    $486 = $10;
    $487 = HEAP32[$486>>2]|0;
    $488 = $20;
    $489 = ($487|0)<($488|0);
    if (!($489)) {
     break;
    }
    $490 = $10;
    $491 = HEAP32[$490>>2]|0;
    $492 = $8;
    $493 = (($492) + ($491<<2)|0);
    $494 = HEAP32[$493>>2]|0;
    $495 = ($494|0)!=(92);
    $496 = $24;
    $497 = ($496|0)!=(0);
    $or$cond11 = $495 | $497;
    if ($or$cond11) {
     $24 = 0;
     $498 = $10;
     $499 = HEAP32[$498>>2]|0;
     $500 = $8;
     $501 = (($500) + ($499<<2)|0);
     $502 = HEAP32[$501>>2]|0;
     $503 = $26;
     $504 = (($503) + 1)|0;
     $26 = $504;
     $505 = $15;
     $506 = (($505) + ($503<<2)|0);
     HEAP32[$506>>2] = $502;
    } else {
     $24 = 1;
    }
    $507 = $10;
    $508 = HEAP32[$507>>2]|0;
    $509 = (($508) + 1)|0;
    HEAP32[$507>>2] = $509;
   }
   $510 = $26;
   $511 = (($510) - 1)|0;
   $512 = $15;
   HEAP32[$512>>2] = $511;
   $513 = $10;
   $514 = HEAP32[$513>>2]|0;
   $515 = (($514) + 1)|0;
   HEAP32[$513>>2] = $515;
   $516 = $15;
   $517 = HEAP32[$516>>2]|0;
   $518 = (4 + ($517))|0;
   $519 = $13;
   $520 = HEAP32[$519>>2]|0;
   $521 = (($520) + ($518))|0;
   HEAP32[$519>>2] = $521;
   $7 = $521;
   $668 = $7;
   STACKTOP = sp;return ($668|0);
   break;
  }
  case 64:  {
   $522 = $10;
   $523 = HEAP32[$522>>2]|0;
   $524 = (($523) + 1)|0;
   HEAP32[$522>>2] = $524;
   $525 = $10;
   $526 = HEAP32[$525>>2]|0;
   $527 = $9;
   $528 = ($526|0)>=($527|0);
   if ($528) {
    $7 = 0;
    $668 = $7;
    STACKTOP = sp;return ($668|0);
   }
   $529 = $10;
   $530 = HEAP32[$529>>2]|0;
   $531 = $8;
   $532 = (($531) + ($530<<2)|0);
   $533 = HEAP32[$532>>2]|0;
   $534 = ($533|0)==(91);
   if ($534) {
    $23 = 1;
    $535 = $10;
    $536 = HEAP32[$535>>2]|0;
    $537 = (($536) + 1)|0;
    HEAP32[$535>>2] = $537;
    $538 = $10;
    $539 = HEAP32[$538>>2]|0;
    $20 = $539;
    while(1) {
     $540 = $20;
     $541 = $9;
     $542 = ($540|0)<($541|0);
     if (!($542)) {
      break;
     }
     $543 = $20;
     $544 = $8;
     $545 = (($544) + ($543<<2)|0);
     $546 = HEAP32[$545>>2]|0;
     $547 = ($546|0)==(93);
     if ($547) {
      break;
     }
     $548 = $20;
     $549 = (($548) + 1)|0;
     $20 = $549;
    }
    $550 = $20;
    $551 = $9;
    $552 = ($550|0)>=($551|0);
    if ($552) {
     $7 = 0;
     $668 = $7;
     STACKTOP = sp;return ($668|0);
    }
   } else {
    $23 = 0;
    $553 = $10;
    $554 = HEAP32[$553>>2]|0;
    $555 = (($554) + 1)|0;
    $20 = $555;
   }
   $556 = $13;
   $557 = HEAP32[$556>>2]|0;
   $558 = (($557) + 4)|0;
   $559 = $20;
   $560 = $10;
   $561 = HEAP32[$560>>2]|0;
   $562 = (($559) - ($561))|0;
   $563 = (($558) + ($562))|0;
   $564 = $12;
   $565 = ($563>>>0)>=($564>>>0);
   if ($565) {
    $7 = 0;
    $668 = $7;
    STACKTOP = sp;return ($668|0);
   }
   $566 = $13;
   $567 = HEAP32[$566>>2]|0;
   $568 = (($567) + 0)|0;
   $569 = $11;
   $570 = (($569) + ($568<<2)|0);
   HEAP32[$570>>2] = 11;
   $24 = 0;
   $571 = $13;
   $572 = HEAP32[$571>>2]|0;
   $573 = (($572) + 3)|0;
   $574 = $11;
   $575 = (($574) + ($573<<2)|0);
   $15 = $575;
   $26 = 1;
   while(1) {
    $576 = $10;
    $577 = HEAP32[$576>>2]|0;
    $578 = $20;
    $579 = ($577|0)<($578|0);
    if (!($579)) {
     break;
    }
    $580 = $10;
    $581 = HEAP32[$580>>2]|0;
    $582 = $8;
    $583 = (($582) + ($581<<2)|0);
    $584 = HEAP32[$583>>2]|0;
    $585 = ($584|0)!=(92);
    $586 = $24;
    $587 = ($586|0)!=(0);
    $or$cond13 = $585 | $587;
    if ($or$cond13) {
     $24 = 0;
     $588 = $10;
     $589 = HEAP32[$588>>2]|0;
     $590 = $8;
     $591 = (($590) + ($589<<2)|0);
     $592 = HEAP32[$591>>2]|0;
     $593 = $26;
     $594 = (($593) + 1)|0;
     $26 = $594;
     $595 = $15;
     $596 = (($595) + ($593<<2)|0);
     HEAP32[$596>>2] = $592;
    } else {
     $24 = 1;
    }
    $597 = $10;
    $598 = HEAP32[$597>>2]|0;
    $599 = (($598) + 1)|0;
    HEAP32[$597>>2] = $599;
   }
   $600 = $26;
   $601 = (($600) - 1)|0;
   $602 = $15;
   HEAP32[$602>>2] = $601;
   $603 = $23;
   $604 = ($603|0)!=(0);
   if ($604) {
    $605 = $10;
    $606 = HEAP32[$605>>2]|0;
    $607 = (($606) + 1)|0;
    HEAP32[$605>>2] = $607;
   }
   $608 = $15;
   $609 = HEAP32[$608>>2]|0;
   $610 = (4 + ($609))|0;
   $611 = $13;
   $612 = HEAP32[$611>>2]|0;
   $613 = (($612) + ($610))|0;
   HEAP32[$611>>2] = $613;
   $7 = $613;
   $668 = $7;
   STACKTOP = sp;return ($668|0);
   break;
  }
  case 36: case 94:  {
   $614 = $13;
   $615 = HEAP32[$614>>2]|0;
   $616 = (($615) + 3)|0;
   $617 = $12;
   $618 = ($616>>>0)>=($617>>>0);
   if ($618) {
    $7 = 0;
    $668 = $7;
    STACKTOP = sp;return ($668|0);
   } else {
    $619 = $13;
    $620 = HEAP32[$619>>2]|0;
    $621 = (($620) + 0)|0;
    $622 = $11;
    $623 = (($622) + ($621<<2)|0);
    HEAP32[$623>>2] = 12;
    $624 = $10;
    $625 = HEAP32[$624>>2]|0;
    $626 = (($625) + 1)|0;
    HEAP32[$624>>2] = $626;
    $627 = $13;
    $628 = HEAP32[$627>>2]|0;
    $629 = (($628) + 3)|0;
    HEAP32[$627>>2] = $629;
    $7 = $629;
    $668 = $7;
    STACKTOP = sp;return ($668|0);
   }
   break;
  }
  case 92:  {
   $630 = $10;
   $631 = HEAP32[$630>>2]|0;
   $632 = (($631) + 1)|0;
   HEAP32[$630>>2] = $632;
   $633 = $10;
   $634 = HEAP32[$633>>2]|0;
   $635 = $9;
   $636 = ($634|0)>=($635|0);
   if ($636) {
    $7 = 0;
    $668 = $7;
    STACKTOP = sp;return ($668|0);
   }
   break;
  }
  default: {
  }
  }
 } while(0);
 $637 = $13;
 $638 = HEAP32[$637>>2]|0;
 $639 = (($638) + 5)|0;
 $640 = $12;
 $641 = ($639>>>0)>=($640>>>0);
 if ($641) {
  $7 = 0;
  $668 = $7;
  STACKTOP = sp;return ($668|0);
 } else {
  $642 = $13;
  $643 = HEAP32[$642>>2]|0;
  $644 = (($643) + 0)|0;
  $645 = $11;
  $646 = (($645) + ($644<<2)|0);
  HEAP32[$646>>2] = 10;
  $647 = $13;
  $648 = HEAP32[$647>>2]|0;
  $649 = (($648) + 3)|0;
  $650 = $11;
  $651 = (($650) + ($649<<2)|0);
  HEAP32[$651>>2] = 1;
  $652 = $10;
  $653 = HEAP32[$652>>2]|0;
  $654 = $8;
  $655 = (($654) + ($653<<2)|0);
  $656 = HEAP32[$655>>2]|0;
  $657 = $13;
  $658 = HEAP32[$657>>2]|0;
  $659 = (($658) + 4)|0;
  $660 = $11;
  $661 = (($660) + ($659<<2)|0);
  HEAP32[$661>>2] = $656;
  $662 = $10;
  $663 = HEAP32[$662>>2]|0;
  $664 = (($663) + 1)|0;
  HEAP32[$662>>2] = $664;
  $665 = $13;
  $666 = HEAP32[$665>>2]|0;
  $667 = (($666) + 5)|0;
  HEAP32[$665>>2] = $667;
  $7 = $667;
  $668 = $7;
  STACKTOP = sp;return ($668|0);
 }
 return (0)|0;
}
function _pattern_reverse($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 _pattern_reverse_expression($2,2);
 STACKTOP = sp;return;
}
function _pattern_reverse_expression($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = $0;
 $3 = $1;
 $7 = $3;
 $8 = (($7) + 2)|0;
 $9 = $2;
 $10 = (($9) + ($8<<2)|0);
 $11 = HEAP32[$10>>2]|0;
 $4 = $11;
 $12 = $4;
 $13 = (($12) + 0)|0;
 $14 = $2;
 $15 = (($14) + ($13<<2)|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = ($16|0)==(65535);
 if ($17) {
  STACKTOP = sp;return;
 }
 while(1) {
  $18 = $4;
  $19 = (($18) + 0)|0;
  $20 = $2;
  $21 = (($20) + ($19<<2)|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = ($22|0)!=(65535);
  $24 = $4;
  if (!($23)) {
   break;
  }
  $25 = (($24) + 2)|0;
  $26 = $2;
  $27 = (($26) + ($25<<2)|0);
  $28 = HEAP32[$27>>2]|0;
  $4 = $28;
 }
 $29 = (($24) + 1)|0;
 $30 = $2;
 $31 = (($30) + ($29<<2)|0);
 $32 = HEAP32[$31>>2]|0;
 $5 = $32;
 $33 = $5;
 $34 = (($33) + 1)|0;
 $35 = $2;
 $36 = (($35) + ($34<<2)|0);
 $37 = HEAP32[$36>>2]|0;
 $6 = $37;
 $38 = $5;
 $39 = $3;
 $40 = (($39) + 2)|0;
 $41 = $2;
 $42 = (($41) + ($40<<2)|0);
 HEAP32[$42>>2] = $38;
 $43 = $3;
 $44 = $5;
 $45 = (($44) + 1)|0;
 $46 = $2;
 $47 = (($46) + ($45<<2)|0);
 HEAP32[$47>>2] = $43;
 $48 = $6;
 $49 = $5;
 $50 = (($49) + 2)|0;
 $51 = $2;
 $52 = (($51) + ($50<<2)|0);
 HEAP32[$52>>2] = $48;
 $53 = $2;
 $54 = $5;
 _pattern_reverse_branch($53,$54);
 while(1) {
  $55 = $6;
  $56 = $3;
  $57 = ($55|0)!=($56|0);
  if (!($57)) {
   break;
  }
  $58 = $6;
  $5 = $58;
  $59 = $6;
  $60 = (($59) + 1)|0;
  $61 = $2;
  $62 = (($61) + ($60<<2)|0);
  $63 = HEAP32[$62>>2]|0;
  $6 = $63;
  $64 = $2;
  $65 = $5;
  _pattern_reverse_branch($64,$65);
  $66 = $5;
  $67 = (($66) + 2)|0;
  $68 = $2;
  $69 = (($68) + ($67<<2)|0);
  $70 = HEAP32[$69>>2]|0;
  $71 = $5;
  $72 = (($71) + 1)|0;
  $73 = $2;
  $74 = (($73) + ($72<<2)|0);
  HEAP32[$74>>2] = $70;
  $75 = $6;
  $76 = $5;
  $77 = (($76) + 2)|0;
  $78 = $2;
  $79 = (($78) + ($77<<2)|0);
  HEAP32[$79>>2] = $75;
 }
 $80 = $5;
 $81 = (($80) + 2)|0;
 $82 = $2;
 $83 = (($82) + ($81<<2)|0);
 $84 = HEAP32[$83>>2]|0;
 $85 = $5;
 $86 = (($85) + 1)|0;
 $87 = $2;
 $88 = (($87) + ($86<<2)|0);
 HEAP32[$88>>2] = $84;
 $89 = $4;
 $90 = $5;
 $91 = (($90) + 2)|0;
 $92 = $2;
 $93 = (($92) + ($91<<2)|0);
 HEAP32[$93>>2] = $89;
 $94 = $5;
 $95 = $4;
 $96 = (($95) + 1)|0;
 $97 = $2;
 $98 = (($97) + ($96<<2)|0);
 HEAP32[$98>>2] = $94;
 STACKTOP = sp;return;
}
function _pattern_reverse_branch($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $5 = $3;
 $6 = (($5) + 0)|0;
 $7 = $2;
 $8 = (($7) + ($6<<2)|0);
 $9 = HEAP32[$8>>2]|0;
 switch ($9|0) {
 case 7:  {
  $10 = $2;
  $11 = $3;
  $12 = (($11) + 3)|0;
  $13 = $2;
  $14 = (($13) + ($12<<2)|0);
  $15 = HEAP32[$14>>2]|0;
  _pattern_reverse_expression($10,$15);
  $16 = $3;
  $17 = (($16) + 3)|0;
  $18 = $2;
  $19 = (($18) + ($17<<2)|0);
  $20 = HEAP32[$19>>2]|0;
  $4 = $20;
  $21 = $3;
  $22 = (($21) + 4)|0;
  $23 = $2;
  $24 = (($23) + ($22<<2)|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = $3;
  $27 = (($26) + 3)|0;
  $28 = $2;
  $29 = (($28) + ($27<<2)|0);
  HEAP32[$29>>2] = $25;
  $30 = $4;
  $31 = $3;
  $32 = (($31) + 4)|0;
  $33 = $2;
  $34 = (($33) + ($32<<2)|0);
  HEAP32[$34>>2] = $30;
  break;
 }
 case 6: case 5: case 4: case 3: case 2:  {
  break;
 }
 default: {
  STACKTOP = sp;return;
 }
 }
 $35 = $2;
 $36 = $3;
 $37 = (($36) + 3)|0;
 $38 = $2;
 $39 = (($38) + ($37<<2)|0);
 $40 = HEAP32[$39>>2]|0;
 _pattern_reverse_expression($35,$40);
 STACKTOP = sp;return;
}
function _pattern_check_hook($0,$1,$2,$3,$4,$5,$6,$7) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $16 = sp + 8|0;
 $8 = $0;
 $9 = $1;
 $10 = $2;
 $11 = $3;
 $12 = $4;
 $13 = $5;
 $14 = $6;
 $15 = $7;
 $19 = $9;
 HEAP32[$16>>2] = $19;
 $20 = $12;
 $21 = ((($20)) + 4|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = $22<<2;
 $24 = (_malloc($23)|0);
 $18 = $24;
 $25 = $18;
 $26 = $12;
 $27 = ((($26)) + 4|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = $28<<2;
 _memset(($25|0),0,($29|0))|0;
 $30 = $8;
 $31 = $10;
 $32 = $11;
 $33 = $12;
 $34 = $13;
 $35 = $14;
 $36 = $15;
 $37 = $18;
 $38 = (_pattern_check_expression($30,$16,$31,$32,$33,$34,$35,$36,2,0,0,$37)|0);
 $17 = $38;
 $39 = $18;
 _free($39);
 $40 = $17;
 STACKTOP = sp;return ($40|0);
}
function _pattern_check_expression($0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 $9 = $9|0;
 $10 = $10|0;
 $11 = $11|0;
 var $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0;
 var $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0;
 var $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0;
 var $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0;
 var $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0;
 var $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0;
 var $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0;
 var $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0;
 var $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0;
 var $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0;
 var $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $30 = 0, $300 = 0;
 var $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0;
 var $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0;
 var $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0;
 var $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0;
 var $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0;
 var $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $or$cond11 = 0, $or$cond3 = 0, $or$cond5 = 0, $or$cond7 = 0, $or$cond9 = 0, $switch$split2D = 0, $switch$split302D = 0, $switch$split332D = 0, $switch$split362D = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $13 = $0;
 $14 = $1;
 $15 = $2;
 $16 = $3;
 $17 = $4;
 $18 = $5;
 $19 = $6;
 $20 = $7;
 $21 = $8;
 $22 = $9;
 $23 = $10;
 $24 = $11;
 $30 = 0;
 $31 = $14;
 $32 = HEAP32[$31>>2]|0;
 $26 = $32;
 L1: while(1) {
  $33 = $21;
  $34 = (($33) + 0)|0;
  $35 = $17;
  $36 = (($35) + ($34<<2)|0);
  $37 = HEAP32[$36>>2]|0;
  $38 = ($37|0)==(65535);
  if ($38) {
   $39 = $21;
   $40 = (($39) + 0)|0;
   $41 = $17;
   $42 = (($41) + ($40<<2)|0);
   $43 = HEAP32[$42>>2]|0;
   $44 = ($43|0)==(65535);
   $46 = $44;
  } else {
   $46 = 0;
  }
  $45 = $46 ^ 1;
  if (!($45)) {
   label = 68;
   break;
  }
  $47 = $21;
  $48 = (($47) + 0)|0;
  $49 = $17;
  $50 = (($49) + ($48<<2)|0);
  $51 = HEAP32[$50>>2]|0;
  $52 = ($51|0)==(12);
  $53 = $14;
  $54 = HEAP32[$53>>2]|0;
  $55 = $16;
  $56 = Math_imul($54, $55)|0;
  $57 = $15;
  $58 = $16;
  $59 = Math_imul($57, $58)|0;
  $60 = ($56|0)>=($59|0);
  if ($52) {
   label = 6;
   break;
  }
  if ($60) {
   $65 = $21;
   $66 = (($65) + 0)|0;
   $67 = $17;
   $68 = (($67) + ($66<<2)|0);
   $69 = HEAP32[$68>>2]|0;
   switch ($69|0) {
   case 9:  {
    label = 11;
    break L1;
    break;
   }
   case 10: case 8:  {
    label = 16;
    break L1;
    break;
   }
   default: {
   }
   }
  }
  $81 = $21;
  $82 = (($81) + 0)|0;
  $83 = $17;
  $84 = (($83) + ($82<<2)|0);
  $85 = HEAP32[$84>>2]|0;
  $switch$split2D = ($85|0)<(7);
  L11: do {
   if ($switch$split2D) {
    switch ($85|0) {
    case 1:  {
     $86 = $21;
     $87 = (($86) + 2)|0;
     $88 = $17;
     $89 = (($88) + ($87<<2)|0);
     $90 = HEAP32[$89>>2]|0;
     $21 = $90;
     break L11;
     break;
    }
    case 2:  {
     $91 = $21;
     $92 = (($91) + 3)|0;
     $93 = $17;
     $94 = (($93) + ($92<<2)|0);
     $95 = HEAP32[$94>>2]|0;
     $21 = $95;
     break L11;
     break;
    }
    case 3:  {
     $96 = $22;
     $97 = ($96|0)!=(0);
     $98 = $97 ^ 1;
     $99 = $98&1;
     $22 = $99;
     $100 = $21;
     $101 = (($100) + 3)|0;
     $102 = $17;
     $103 = (($102) + ($101<<2)|0);
     $104 = HEAP32[$103>>2]|0;
     $21 = $104;
     break L11;
     break;
    }
    case 5: case 4:  {
     $105 = $21;
     $106 = $23;
     $107 = ($105|0)==($106|0);
     if ($107) {
      $108 = $23;
      $109 = (($108) + 4)|0;
      $110 = $17;
      $111 = (($110) + ($109<<2)|0);
      $112 = HEAP32[$111>>2]|0;
      $113 = $24;
      $114 = (($113) + ($112<<2)|0);
      $115 = HEAP32[$114>>2]|0;
      $116 = (($115) + 1)|0;
      HEAP32[$114>>2] = $116;
      label = 25;
     } else {
      $117 = $21;
      $118 = (($117) + 4)|0;
      $119 = $17;
      $120 = (($119) + ($118<<2)|0);
      $121 = HEAP32[$120>>2]|0;
      $122 = $24;
      $123 = (($122) + ($121<<2)|0);
      $124 = HEAP32[$123>>2]|0;
      $125 = ($124|0)!=(0);
      if (!($125)) {
       $126 = $21;
       $23 = $126;
       $127 = $23;
       $128 = (($127) + 4)|0;
       $129 = $17;
       $130 = (($129) + ($128<<2)|0);
       $131 = HEAP32[$130>>2]|0;
       $132 = $24;
       $133 = (($132) + ($131<<2)|0);
       HEAP32[$133>>2] = 1;
       label = 25;
      }
     }
     if ((label|0) == 25) {
      label = 0;
      $134 = $14;
      $135 = HEAP32[$134>>2]|0;
      $25 = $135;
      $136 = $13;
      $137 = $14;
      $138 = $15;
      $139 = $16;
      $140 = $17;
      $141 = $18;
      $142 = $19;
      $143 = $20;
      $144 = $21;
      $145 = (($144) + 3)|0;
      $146 = $17;
      $147 = (($146) + ($145<<2)|0);
      $148 = HEAP32[$147>>2]|0;
      $149 = $22;
      $150 = $23;
      $151 = $24;
      $152 = (_pattern_check_expression($136,$137,$138,$139,$140,$141,$142,$143,$148,$149,$150,$151)|0);
      $28 = $152;
      $153 = $28;
      $154 = ($153|0)!=(0);
      if ($154) {
       label = 26;
       break L1;
      }
      $155 = $25;
      $156 = $14;
      HEAP32[$156>>2] = $155;
      $157 = $23;
      $158 = (($157) + 4)|0;
      $159 = $17;
      $160 = (($159) + ($158<<2)|0);
      $161 = HEAP32[$160>>2]|0;
      $162 = $24;
      $163 = (($162) + ($161<<2)|0);
      $164 = HEAP32[$163>>2]|0;
      $165 = (($164) + -1)|0;
      HEAP32[$163>>2] = $165;
      $166 = $21;
      $167 = (($166) + 0)|0;
      $168 = $17;
      $169 = (($168) + ($167<<2)|0);
      $170 = HEAP32[$169>>2]|0;
      $171 = ($170|0)==(4);
      if ($171) {
       $172 = $23;
       $173 = (($172) + 4)|0;
       $174 = $17;
       $175 = (($174) + ($173<<2)|0);
       $176 = HEAP32[$175>>2]|0;
       $177 = $24;
       $178 = (($177) + ($176<<2)|0);
       $179 = HEAP32[$178>>2]|0;
       $180 = ($179|0)<(1);
       if ($180) {
        label = 29;
        break L1;
       }
      }
     }
     $181 = $21;
     $182 = (($181) + 2)|0;
     $183 = $17;
     $184 = (($183) + ($182<<2)|0);
     $185 = HEAP32[$184>>2]|0;
     $21 = $185;
     break L11;
     break;
    }
    case 6:  {
     $186 = $14;
     $187 = HEAP32[$186>>2]|0;
     $25 = $187;
     $188 = $13;
     $189 = $14;
     $190 = $15;
     $191 = $16;
     $192 = $17;
     $193 = $18;
     $194 = $19;
     $195 = $20;
     $196 = $21;
     $197 = (($196) + 3)|0;
     $198 = $17;
     $199 = (($198) + ($197<<2)|0);
     $200 = HEAP32[$199>>2]|0;
     $201 = $22;
     $202 = $23;
     $203 = $24;
     $204 = (_pattern_check_expression($188,$189,$190,$191,$192,$193,$194,$195,$200,$201,$202,$203)|0);
     $205 = ($204|0)!=(0);
     if ($205) {
      label = 32;
      break L1;
     }
     $206 = $25;
     $207 = $14;
     HEAP32[$207>>2] = $206;
     $208 = $21;
     $209 = (($208) + 2)|0;
     $210 = $17;
     $211 = (($210) + ($209<<2)|0);
     $212 = HEAP32[$211>>2]|0;
     $21 = $212;
     break L11;
     break;
    }
    default: {
     label = 58;
     break L1;
    }
    }
   } else {
    $switch$split302D = ($85|0)<(10);
    if ($switch$split302D) {
     switch ($85|0) {
     case 7:  {
      $213 = $14;
      $214 = HEAP32[$213>>2]|0;
      $25 = $214;
      $215 = $13;
      $216 = $14;
      $217 = $15;
      $218 = $16;
      $219 = $17;
      $220 = $18;
      $221 = $19;
      $222 = $20;
      $223 = $21;
      $224 = (($223) + 3)|0;
      $225 = $17;
      $226 = (($225) + ($224<<2)|0);
      $227 = HEAP32[$226>>2]|0;
      $228 = $22;
      $229 = $23;
      $230 = $24;
      $231 = (_pattern_check_expression($215,$216,$217,$218,$219,$220,$221,$222,$227,$228,$229,$230)|0);
      $232 = ($231|0)!=(0);
      if ($232) {
       label = 35;
       break L1;
      }
      $233 = $25;
      $234 = $14;
      HEAP32[$234>>2] = $233;
      $235 = $21;
      $236 = (($235) + 4)|0;
      $237 = $17;
      $238 = (($237) + ($236<<2)|0);
      $239 = HEAP32[$238>>2]|0;
      $21 = $239;
      break L11;
      break;
     }
     case 8:  {
      $240 = $16;
      $241 = $14;
      $242 = HEAP32[$241>>2]|0;
      $243 = (($242) + ($240))|0;
      HEAP32[$241>>2] = $243;
      $244 = $21;
      $245 = (($244) + 2)|0;
      $246 = $17;
      $247 = (($246) + ($245<<2)|0);
      $248 = HEAP32[$247>>2]|0;
      $21 = $248;
      break L11;
      break;
     }
     case 9:  {
      $249 = $14;
      $250 = HEAP32[$249>>2]|0;
      $251 = $13;
      $252 = (($251) + ($250<<2)|0);
      $253 = HEAP32[$252>>2]|0;
      $254 = $21;
      $255 = (($254) + 3)|0;
      $256 = $17;
      $257 = (($256) + ($255<<2)|0);
      $258 = (_pattern_check_attrs($253,$257)|0);
      $28 = $258;
      $259 = $28;
      $260 = ($259|0)!=(0);
      $261 = $22;
      $262 = ($261|0)!=(0);
      $or$cond = $260 & $262;
      if ($or$cond) {
       label = 39;
       break L1;
      }
      $263 = $28;
      $264 = ($263|0)!=(0);
      $265 = $22;
      $266 = ($265|0)!=(0);
      $or$cond3 = $264 | $266;
      if (!($or$cond3)) {
       label = 41;
       break L1;
      }
      $267 = $16;
      $268 = $14;
      $269 = HEAP32[$268>>2]|0;
      $270 = (($269) + ($267))|0;
      HEAP32[$268>>2] = $270;
      $271 = $21;
      $272 = (($271) + 2)|0;
      $273 = $17;
      $274 = (($273) + ($272<<2)|0);
      $275 = HEAP32[$274>>2]|0;
      $21 = $275;
      break L11;
      break;
     }
     default: {
      label = 58;
      break L1;
     }
     }
    }
    $switch$split332D = ($85|0)<(11);
    if ($switch$split332D) {
     switch ($85|0) {
     case 10:  {
      break;
     }
     default: {
      label = 58;
      break L1;
     }
     }
     $276 = $14;
     $277 = HEAP32[$276>>2]|0;
     $278 = $13;
     $279 = (($278) + ($277<<2)|0);
     $280 = HEAP32[$279>>2]|0;
     $281 = $21;
     $282 = (($281) + 3)|0;
     $283 = $17;
     $284 = (($283) + ($282<<2)|0);
     $285 = (_pattern_check_chars($280,$284)|0);
     $28 = $285;
     $286 = $28;
     $287 = ($286|0)!=(0);
     $288 = $22;
     $289 = ($288|0)!=(0);
     $or$cond5 = $287 & $289;
     if ($or$cond5) {
      label = 44;
      break L1;
     }
     $290 = $28;
     $291 = ($290|0)!=(0);
     $292 = $22;
     $293 = ($292|0)!=(0);
     $or$cond7 = $291 | $293;
     if (!($or$cond7)) {
      label = 46;
      break L1;
     }
     $294 = $16;
     $295 = $14;
     $296 = HEAP32[$295>>2]|0;
     $297 = (($296) + ($294))|0;
     HEAP32[$295>>2] = $297;
     $298 = $21;
     $299 = (($298) + 2)|0;
     $300 = $17;
     $301 = (($300) + ($299<<2)|0);
     $302 = HEAP32[$301>>2]|0;
     $21 = $302;
     break;
    }
    $switch$split362D = ($85|0)<(65535);
    if (!($switch$split362D)) {
     switch ($85|0) {
     case 65535:  {
      break L11;
      break;
     }
     default: {
      label = 58;
      break L1;
     }
     }
    }
    switch ($85|0) {
    case 11:  {
     break;
    }
    default: {
     label = 58;
     break L1;
    }
    }
    $303 = $18;
    $304 = ($303|0)==(0|0);
    if ($304) {
     label = 49;
     break L1;
    }
    $305 = $21;
    $306 = (($305) + 3)|0;
    $307 = $17;
    $308 = (($307) + ($306<<2)|0);
    $30 = $308;
    $29 = 0;
    while(1) {
     $309 = $29;
     $310 = $30;
     $311 = HEAP32[$310>>2]|0;
     $312 = ($309>>>0)<($311>>>0);
     if (!($312)) {
      break;
     }
     $313 = $29;
     $314 = (($313) + 1)|0;
     $315 = $30;
     $316 = (($315) + ($314<<2)|0);
     $317 = HEAP32[$316>>2]|0;
     $318 = $29;
     $319 = $19;
     $320 = (($319) + ($318<<2)|0);
     HEAP32[$320>>2] = $317;
     $321 = $29;
     $322 = (($321) + 1)|0;
     $29 = $322;
    }
    $323 = $18;
    $324 = $14;
    $325 = HEAP32[$324>>2]|0;
    $326 = $13;
    $327 = (($326) + ($325<<2)|0);
    $328 = HEAP32[$327>>2]|0;
    $329 = $30;
    $330 = HEAP32[$329>>2]|0;
    $331 = (FUNCTION_TABLE_iii[$323 & 7]($328,$330)|0);
    $28 = $331;
    $332 = $28;
    $333 = ($332|0)!=(0);
    $334 = $22;
    $335 = ($334|0)!=(0);
    $or$cond9 = $333 & $335;
    if ($or$cond9) {
     label = 54;
     break L1;
    }
    $336 = $28;
    $337 = ($336|0)!=(0);
    $338 = $22;
    $339 = ($338|0)!=(0);
    $or$cond11 = $337 | $339;
    if (!($or$cond11)) {
     label = 56;
     break L1;
    }
    $340 = $16;
    $341 = $14;
    $342 = HEAP32[$341>>2]|0;
    $343 = (($342) + ($340))|0;
    HEAP32[$341>>2] = $343;
    $344 = $21;
    $345 = (($344) + 2)|0;
    $346 = $17;
    $347 = (($346) + ($345<<2)|0);
    $348 = HEAP32[$347>>2]|0;
    $21 = $348;
   }
  } while(0);
  while(1) {
   $349 = $21;
   $350 = (($349) + 0)|0;
   $351 = $17;
   $352 = (($351) + ($350<<2)|0);
   $353 = HEAP32[$352>>2]|0;
   $354 = ($353|0)==(65535);
   if (!($354)) {
    continue L1;
   }
   $355 = $21;
   $356 = (($355) + 2)|0;
   $357 = $17;
   $358 = (($357) + ($356<<2)|0);
   $359 = HEAP32[$358>>2]|0;
   $360 = ($359|0)==(65535);
   if ($360) {
    continue L1;
   }
   $361 = $21;
   $362 = (($361) + 2)|0;
   $363 = $17;
   $364 = (($363) + ($362<<2)|0);
   $365 = HEAP32[$364>>2]|0;
   $21 = $365;
   $366 = $21;
   $367 = (($366) + 0)|0;
   $368 = $17;
   $369 = (($368) + ($367<<2)|0);
   $370 = HEAP32[$369>>2]|0;
   $371 = ($370|0)==(5);
   if ($371) {
    break;
   }
   $372 = $21;
   $373 = (($372) + 0)|0;
   $374 = $17;
   $375 = (($374) + ($373<<2)|0);
   $376 = HEAP32[$375>>2]|0;
   $377 = ($376|0)==(4);
   if ($377) {
    break;
   }
   $382 = $21;
   $383 = (($382) + 0)|0;
   $384 = $17;
   $385 = (($384) + ($383<<2)|0);
   $386 = HEAP32[$385>>2]|0;
   $387 = ($386|0)==(3);
   if ($387) {
    $388 = $22;
    $389 = ($388|0)!=(0);
    $390 = $389 ^ 1;
    $391 = $390&1;
    $22 = $391;
   }
   $392 = $21;
   $393 = (($392) + 2)|0;
   $394 = $17;
   $395 = (($394) + ($393<<2)|0);
   $396 = HEAP32[$395>>2]|0;
   $21 = $396;
  }
  $378 = $14;
  $379 = HEAP32[$378>>2]|0;
  $380 = $26;
  $381 = ($379|0)==($380|0);
  if ($381) {
   label = 64;
   break;
  }
 }
 switch (label|0) {
  case 6: {
   $61 = $22;
   if ($60) {
    $62 = ($61|0)!=(0);
    $63 = $62 ^ 1;
    $64 = $63&1;
    $12 = $64;
    $397 = $12;
    STACKTOP = sp;return ($397|0);
   } else {
    $12 = $61;
    $397 = $12;
    STACKTOP = sp;return ($397|0);
   }
   break;
  }
  case 11: {
   $70 = $21;
   $71 = (($70) + 3)|0;
   $72 = $17;
   $73 = (($72) + ($71<<2)|0);
   $74 = HEAP32[$73>>2]|0;
   $75 = $74 << 16;
   $27 = $75;
   $76 = $27;
   $77 = $76 & 134217728;
   $78 = ($77|0)!=(0);
   if (!($78)) {
    $12 = 0;
    $397 = $12;
    STACKTOP = sp;return ($397|0);
   }
   $79 = $22;
   $80 = ($79|0)!=(0);
   if ($80) {
    $12 = 0;
    $397 = $12;
    STACKTOP = sp;return ($397|0);
   } else {
    $12 = 1;
    $397 = $12;
    STACKTOP = sp;return ($397|0);
   }
   break;
  }
  case 16: {
   $12 = 0;
   $397 = $12;
   STACKTOP = sp;return ($397|0);
   break;
  }
  case 26: {
   $12 = 1;
   $397 = $12;
   STACKTOP = sp;return ($397|0);
   break;
  }
  case 29: {
   $12 = 0;
   $397 = $12;
   STACKTOP = sp;return ($397|0);
   break;
  }
  case 32: {
   $12 = 1;
   $397 = $12;
   STACKTOP = sp;return ($397|0);
   break;
  }
  case 35: {
   $12 = 1;
   $397 = $12;
   STACKTOP = sp;return ($397|0);
   break;
  }
  case 39: {
   $12 = 0;
   $397 = $12;
   STACKTOP = sp;return ($397|0);
   break;
  }
  case 41: {
   $12 = 0;
   $397 = $12;
   STACKTOP = sp;return ($397|0);
   break;
  }
  case 44: {
   $12 = 0;
   $397 = $12;
   STACKTOP = sp;return ($397|0);
   break;
  }
  case 46: {
   $12 = 0;
   $397 = $12;
   STACKTOP = sp;return ($397|0);
   break;
  }
  case 49: {
   $12 = 0;
   $397 = $12;
   STACKTOP = sp;return ($397|0);
   break;
  }
  case 54: {
   $12 = 0;
   $397 = $12;
   STACKTOP = sp;return ($397|0);
   break;
  }
  case 56: {
   $12 = 0;
   $397 = $12;
   STACKTOP = sp;return ($397|0);
   break;
  }
  case 58: {
   $12 = 0;
   $397 = $12;
   STACKTOP = sp;return ($397|0);
   break;
  }
  case 64: {
   $12 = 0;
   $397 = $12;
   STACKTOP = sp;return ($397|0);
   break;
  }
  case 68: {
   $12 = 1;
   $397 = $12;
   STACKTOP = sp;return ($397|0);
   break;
  }
 }
 return (0)|0;
}
function _pattern_check_attrs($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $6 = $4;
 $7 = HEAP32[$6>>2]|0;
 $8 = $7 << 16;
 $9 = $4;
 $10 = ((($9)) + 4|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = $8 | $11;
 $13 = $12 & -402653185;
 $5 = $13;
 $14 = $3;
 $15 = $5;
 $16 = (_checkAttr_441($14,$15,0)|0);
 $17 = ($16|0)!=(0);
 if ($17) {
  $2 = 1;
  $18 = $2;
  STACKTOP = sp;return ($18|0);
 } else {
  $2 = 0;
  $18 = $2;
  STACKTOP = sp;return ($18|0);
 }
 return (0)|0;
}
function _pattern_check_chars($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $7 = $4;
 $8 = HEAP32[$7>>2]|0;
 $9 = (($8) + 1)|0;
 $5 = $9;
 $6 = 1;
 while(1) {
  $10 = $6;
  $11 = $5;
  $12 = ($10|0)<($11|0);
  if (!($12)) {
   break;
  }
  $13 = $3;
  $14 = $6;
  $15 = $4;
  $16 = (($15) + ($14<<2)|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = ($13|0)==($17|0);
  if ($18) {
   break;
  }
  $19 = $6;
  $20 = (($19) + 1)|0;
  $6 = $20;
 }
 $21 = $6;
 $22 = $5;
 $23 = ($21|0)==($22|0);
 if ($23) {
  $2 = 0;
  $24 = $2;
  STACKTOP = sp;return ($24|0);
 } else {
  $2 = 1;
  $24 = $2;
  STACKTOP = sp;return ($24|0);
 }
 return (0)|0;
}
function _checkAttr_441($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $3;
 $7 = HEAP32[13057]|0;
 $8 = ($6|0)!=($7|0);
 if ($8) {
  $9 = HEAP32[186]|0;
  $10 = ($9|0)!=(0);
  $11 = $3;
  if ($10) {
   $12 = (_findCharOrDots_443($11,0)|0);
   $13 = ((($12)) + 12|0);
   $14 = HEAP32[$13>>2]|0;
   HEAP32[13058] = $14;
  } else {
   $15 = (_back_findCharOrDots_445($11,1)|0);
   $16 = ((($15)) + 12|0);
   $17 = HEAP32[$16>>2]|0;
   HEAP32[13058] = $17;
  }
  $18 = $3;
  HEAP32[13057] = $18;
 }
 $19 = HEAP32[13058]|0;
 $20 = $4;
 $21 = $19 & $20;
 $22 = ($21|0)!=(0);
 $23 = $22 ? 1 : 0;
 STACKTOP = sp;return ($23|0);
}
function _findCharOrDots_443($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $9 = $3;
 $10 = (($9>>>0) % 1123)&-1;
 $8 = $10;
 $11 = $4;
 $12 = ($11|0)==(0);
 $13 = $8;
 $14 = HEAP32[13056]|0;
 if ($12) {
  $15 = ((($14)) + 3116|0);
  $16 = (($15) + ($13<<2)|0);
  $17 = HEAP32[$16>>2]|0;
  $7 = $17;
  $5 = 804;
 } else {
  $18 = ((($14)) + 7608|0);
  $19 = (($18) + ($13<<2)|0);
  $20 = HEAP32[$19>>2]|0;
  $7 = $20;
  $5 = 832;
 }
 while(1) {
  $21 = $7;
  $22 = ($21|0)!=(0);
  if (!($22)) {
   label = 8;
   break;
  }
  $23 = $7;
  $24 = HEAP32[13056]|0;
  $25 = ((($24)) + 31332|0);
  $26 = (($25) + ($23<<2)|0);
  $6 = $26;
  $27 = $6;
  $28 = ((($27)) + 16|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = $3;
  $31 = ($29|0)==($30|0);
  $32 = $6;
  if ($31) {
   label = 6;
   break;
  }
  $33 = HEAP32[$32>>2]|0;
  $7 = $33;
 }
 if ((label|0) == 6) {
  $2 = $32;
  $42 = $2;
  STACKTOP = sp;return ($42|0);
 }
 else if ((label|0) == 8) {
  $34 = $3;
  $35 = $5;
  $36 = ((($35)) + 24|0);
  HEAP32[$36>>2] = $34;
  $37 = $5;
  $38 = ((($37)) + 20|0);
  HEAP32[$38>>2] = $34;
  $39 = $5;
  $40 = ((($39)) + 16|0);
  HEAP32[$40>>2] = $34;
  $41 = $5;
  $2 = $41;
  $42 = $2;
  STACKTOP = sp;return ($42|0);
 }
 return (0)|0;
}
function _back_findCharOrDots_445($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $9 = $3;
 $10 = (($9>>>0) % 1123)&-1;
 $8 = $10;
 $11 = $4;
 $12 = ($11|0)==(0);
 $13 = $8;
 $14 = HEAP32[13056]|0;
 if ($12) {
  $15 = ((($14)) + 3116|0);
  $16 = (($15) + ($13<<2)|0);
  $17 = HEAP32[$16>>2]|0;
  $7 = $17;
  $5 = 748;
 } else {
  $18 = ((($14)) + 7608|0);
  $19 = (($18) + ($13<<2)|0);
  $20 = HEAP32[$19>>2]|0;
  $7 = $20;
  $5 = 776;
 }
 while(1) {
  $21 = $7;
  $22 = ($21|0)!=(0);
  if (!($22)) {
   label = 8;
   break;
  }
  $23 = $7;
  $24 = HEAP32[13056]|0;
  $25 = ((($24)) + 31332|0);
  $26 = (($25) + ($23<<2)|0);
  $6 = $26;
  $27 = $6;
  $28 = ((($27)) + 16|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = $3;
  $31 = ($29|0)==($30|0);
  $32 = $6;
  if ($31) {
   label = 6;
   break;
  }
  $33 = HEAP32[$32>>2]|0;
  $7 = $33;
 }
 if ((label|0) == 6) {
  $2 = $32;
  $42 = $2;
  STACKTOP = sp;return ($42|0);
 }
 else if ((label|0) == 8) {
  $34 = $3;
  $35 = $5;
  $36 = ((($35)) + 24|0);
  HEAP32[$36>>2] = $34;
  $37 = $5;
  $38 = ((($37)) + 20|0);
  HEAP32[$38>>2] = $34;
  $39 = $5;
  $40 = ((($39)) + 16|0);
  HEAP32[$40>>2] = $34;
  $41 = $5;
  $2 = $41;
  $42 = $2;
  STACKTOP = sp;return ($42|0);
 }
 return (0)|0;
}
function _pattern_check($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $11 = $5;
 $12 = $11;
 HEAP32[13056] = $12;
 $13 = $6;
 $14 = $7;
 $15 = $8;
 $16 = $9;
 $17 = $10;
 $18 = (_pattern_check_hook($13,$14,$15,$16,$17,0,0,0)|0);
 STACKTOP = sp;return ($18|0);
}
function _logWidecharBuf($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $13 = $7;
 $14 = ($13*15)|0;
 $15 = (($14) + 3)|0;
 $16 = $5;
 $17 = (_strlen($16)|0);
 $18 = (($15) + ($17))|0;
 $8 = $18;
 $19 = $8;
 $20 = (_malloc($19)|0);
 $9 = $20;
 $21 = $9;
 $10 = $21;
 $12 = 0;
 $11 = 7309;
 $12 = 0;
 while(1) {
  $22 = $12;
  $23 = $5;
  $24 = (_strlen($23)|0);
  $25 = ($22|0)<($24|0);
  if (!($25)) {
   break;
  }
  $26 = $12;
  $27 = $5;
  $28 = (($27) + ($26)|0);
  $29 = HEAP8[$28>>0]|0;
  $30 = $12;
  $31 = $9;
  $32 = (($31) + ($30)|0);
  HEAP8[$32>>0] = $29;
  $33 = $12;
  $34 = (($33) + 1)|0;
  $12 = $34;
 }
 $35 = $5;
 $36 = (_strlen($35)|0);
 $37 = $10;
 $38 = (($37) + ($36)|0);
 $10 = $38;
 $12 = 0;
 while(1) {
  $39 = $12;
  $40 = $7;
  $41 = ($39|0)<($40|0);
  $42 = $10;
  if (!($41)) {
   break;
  }
  $43 = $11;
  $44 = $12;
  $45 = $6;
  $46 = (($45) + ($44<<2)|0);
  $47 = HEAP32[$46>>2]|0;
  HEAP32[$vararg_buffer>>2] = $47;
  $48 = (_sprintf($42,$43,$vararg_buffer)|0);
  $49 = $10;
  $50 = (($49) + ($48)|0);
  $10 = $50;
  $51 = $12;
  $52 = (($51) + 1)|0;
  $12 = $52;
 }
 HEAP8[$42>>0] = 126;
 $53 = $10;
 $54 = ((($53)) + 1|0);
 $10 = $54;
 $55 = $10;
 HEAP8[$55>>0] = 32;
 $56 = $10;
 $57 = ((($56)) + 1|0);
 $10 = $57;
 $12 = 0;
 while(1) {
  $58 = $12;
  $59 = $7;
  $60 = ($58|0)<($59|0);
  if (!($60)) {
   break;
  }
  $61 = $12;
  $62 = $6;
  $63 = (($62) + ($61<<2)|0);
  $64 = HEAP32[$63>>2]|0;
  $65 = $64 & 65280;
  $66 = ($65|0)!=(0);
  if ($66) {
   $67 = $10;
   HEAP8[$67>>0] = 32;
  } else {
   $68 = $12;
   $69 = $6;
   $70 = (($69) + ($68<<2)|0);
   $71 = HEAP32[$70>>2]|0;
   $72 = $71&255;
   $73 = $10;
   HEAP8[$73>>0] = $72;
  }
  $74 = $10;
  $75 = ((($74)) + 1|0);
  $10 = $75;
  $76 = $12;
  $77 = (($76) + 1)|0;
  $12 = $77;
 }
 $78 = $10;
 HEAP8[$78>>0] = 0;
 $79 = $4;
 $80 = $9;
 HEAP32[$vararg_buffer1>>2] = $80;
 _logMessage($79,7317,$vararg_buffer1);
 $81 = $9;
 _free($81);
 STACKTOP = sp;return;
}
function _logMessage($0,$1,$varargs) {
 $0 = $0|0;
 $1 = $1|0;
 $varargs = $varargs|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $6 = sp;
 $2 = $0;
 $3 = $1;
 $7 = $3;
 $8 = ($7|0)==(0|0);
 if ($8) {
  STACKTOP = sp;return;
 }
 $9 = $2;
 $10 = HEAP32[215]|0;
 $11 = ($9>>>0)>=($10>>>0);
 $12 = HEAP32[216]|0;
 $13 = ($12|0)!=(0|0);
 $or$cond = $11 & $13;
 if (!($or$cond)) {
  STACKTOP = sp;return;
 }
 HEAP32[$6>>2] = $varargs;
 $14 = $3;
 $15 = (_vsnprintf(0,0,$14,$6)|0);
 $5 = $15;
 $16 = $5;
 $17 = (($16) + 1)|0;
 $18 = (_malloc($17)|0);
 $4 = $18;
 $19 = ($18|0)!=(0|0);
 if (!($19)) {
  STACKTOP = sp;return;
 }
 HEAP32[$6>>2] = $varargs;
 $20 = $4;
 $21 = $5;
 $22 = (($21) + 1)|0;
 $23 = $3;
 (_vsnprintf($20,$22,$23,$6)|0);
 $24 = HEAP32[216]|0;
 $25 = $2;
 $26 = $4;
 FUNCTION_TABLE_vii[$24 & 7]($25,$26);
 $27 = $4;
 _free($27);
 STACKTOP = sp;return;
}
function _defaultLogCallback($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $2 = $0;
 $3 = $1;
 $4 = $3;
 HEAP32[$vararg_buffer>>2] = $4;
 _lou_logPrint(7317,$vararg_buffer);
 STACKTOP = sp;return;
}
function _lou_logPrint($0,$varargs) {
 $0 = $0|0;
 $varargs = $varargs|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $2 = sp + 8|0;
 $1 = $0;
 $3 = $1;
 $4 = ($3|0)==(0|0);
 if ($4) {
  STACKTOP = sp;return;
 }
 $5 = HEAP32[13059]|0;
 $6 = ($5|0)==(0|0);
 if ($6) {
  $7 = (_fopen(57152,7320)|0);
  HEAP32[13059] = $7;
 }
 $8 = HEAP32[13059]|0;
 $9 = ($8|0)==(0|0);
 if ($9) {
  $10 = HEAP32[317]|0;
  HEAP32[13059] = $10;
 }
 HEAP32[$2>>2] = $varargs;
 $11 = HEAP32[13059]|0;
 $12 = $1;
 (_vfprintf($11,$12,$2)|0);
 $13 = HEAP32[13059]|0;
 (_fprintf($13,7322,$vararg_buffer)|0);
 $14 = HEAP32[13059]|0;
 (_fflush($14)|0);
 STACKTOP = sp;return;
}
function _lou_registerLogCallback($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ($2|0)==(0|0);
 if ($3) {
  HEAP32[216] = 5;
 } else {
  $4 = $1;
  HEAP32[216] = $4;
 }
 STACKTOP = sp;return;
}
function _lou_setLogLevel($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 HEAP32[215] = $2;
 STACKTOP = sp;return;
}
function _lou_logFile($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $1 = $0;
 $2 = HEAP32[13059]|0;
 $3 = ($2|0)!=(0|0);
 if ($3) {
  $4 = HEAP32[13059]|0;
  (_fclose($4)|0);
  HEAP32[13059] = 0;
 }
 $5 = $1;
 $6 = ($5|0)==(0|0);
 if ($6) {
  STACKTOP = sp;return;
 }
 $7 = $1;
 $8 = HEAP8[$7>>0]|0;
 $9 = $8 << 24 >> 24;
 $10 = ($9|0)==(0);
 if ($10) {
  STACKTOP = sp;return;
 }
 $11 = HEAP8[57152]|0;
 $12 = $11 << 24 >> 24;
 $13 = ($12|0)==(0);
 if ($13) {
  $14 = $1;
  (_strcpy(57152,$14)|0);
 }
 $15 = $1;
 $16 = (_fopen($15,7320)|0);
 HEAP32[13059] = $16;
 $17 = HEAP32[13059]|0;
 $18 = ($17|0)==(0|0);
 if ($18) {
  $19 = HEAP8[57152]|0;
  $20 = $19 << 24 >> 24;
  $21 = ($20|0)!=(0);
  if ($21) {
   $22 = (_fopen(57152,7320)|0);
   HEAP32[13059] = $22;
  }
 }
 $23 = HEAP32[13059]|0;
 $24 = ($23|0)==(0|0);
 if (!($24)) {
  STACKTOP = sp;return;
 }
 $25 = HEAP32[317]|0;
 $26 = $1;
 HEAP32[$vararg_buffer>>2] = $26;
 (_fprintf($25,7324,$vararg_buffer)|0);
 $27 = HEAP32[317]|0;
 HEAP32[13059] = $27;
 STACKTOP = sp;return;
}
function _lou_logEnd() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 _closeLogFile();
 return;
}
function _closeLogFile() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[13059]|0;
 $1 = ($0|0)!=(0|0);
 if ($1) {
  $2 = HEAP32[13059]|0;
  $3 = HEAP32[317]|0;
  $4 = ($2|0)!=($3|0);
  if ($4) {
   $5 = HEAP32[13059]|0;
   (_fclose($5)|0);
  }
 }
 HEAP32[13059] = 0;
 return;
}
function _other_translate($0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 $9 = $9|0;
 $10 = $10|0;
 var $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $vararg_buffer = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 2112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(2112|0);
 $vararg_buffer = sp;
 $23 = sp + 56|0;
 $12 = $0;
 $13 = $1;
 $14 = $2;
 $15 = $3;
 $16 = $4;
 $17 = $5;
 $18 = $6;
 $19 = $7;
 $20 = $8;
 $21 = $9;
 $22 = $10;
 $25 = $12;
 (_strcpy($23,$25)|0);
 (_findColon($23)|0);
 $26 = (_findAction(868,$23)|0);
 $24 = $26;
 $27 = $24;
 switch ($27|0) {
 case -1:  {
  HEAP32[$vararg_buffer>>2] = $23;
  _logMessage(40000,7349,$vararg_buffer);
  $11 = 0;
  break;
 }
 case 1:  {
  $11 = 1;
  break;
 }
 case 2:  {
  $11 = 1;
  break;
 }
 case 3:  {
  $11 = 1;
  break;
 }
 default: {
  $11 = 0;
 }
 }
 $28 = $11;
 STACKTOP = sp;return ($28|0);
}
function _findColon($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = 0;
 while(1) {
  $4 = $3;
  $5 = $2;
  $6 = (($5) + ($4)|0);
  $7 = HEAP8[$6>>0]|0;
  $8 = ($7<<24>>24)!=(0);
  if (!($8)) {
   label = 6;
   break;
  }
  $9 = $3;
  $10 = $2;
  $11 = (($10) + ($9)|0);
  $12 = HEAP8[$11>>0]|0;
  $13 = $12 << 24 >> 24;
  $14 = ($13|0)==(58);
  $15 = $3;
  if ($14) {
   label = 4;
   break;
  }
  $22 = (($15) + 1)|0;
  $3 = $22;
 }
 if ((label|0) == 4) {
  $16 = $2;
  $17 = (($16) + ($15)|0);
  HEAP8[$17>>0] = 0;
  $18 = $3;
  $19 = (($18) + 1)|0;
  $20 = $2;
  $21 = (($20) + ($19)|0);
  $1 = $21;
  $23 = $1;
  STACKTOP = sp;return ($23|0);
 }
 else if ((label|0) == 6) {
  $1 = 0;
  $23 = $1;
  STACKTOP = sp;return ($23|0);
 }
 return (0)|0;
}
function _findAction($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $7 = $4;
 $8 = (_strlen($7)|0);
 $5 = $8;
 $6 = 0;
 while(1) {
  $9 = $6;
  $10 = $3;
  $11 = (($10) + ($9<<2)|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = ($12|0)!=(0|0);
  if (!($13)) {
   break;
  }
  $14 = $5;
  $15 = $6;
  $16 = $3;
  $17 = (($16) + ($15<<2)|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = (_strlen($18)|0);
  $20 = ($14|0)==($19|0);
  if ($20) {
   $21 = $6;
   $22 = $3;
   $23 = (($22) + ($21<<2)|0);
   $24 = HEAP32[$23>>2]|0;
   $25 = $4;
   $26 = $5;
   $27 = (_ignoreCaseComp($24,$25,$26)|0);
   $28 = ($27|0)==(0);
   if ($28) {
    break;
   }
  }
  $29 = $6;
  $30 = (($29) + 2)|0;
  $6 = $30;
 }
 $31 = $6;
 $32 = $3;
 $33 = (($32) + ($31<<2)|0);
 $34 = HEAP32[$33>>2]|0;
 $35 = ($34|0)==(0|0);
 if ($35) {
  $2 = -1;
  $42 = $2;
  STACKTOP = sp;return ($42|0);
 } else {
  $36 = $6;
  $37 = (($36) + 1)|0;
  $38 = $3;
  $39 = (($38) + ($37<<2)|0);
  $40 = HEAP32[$39>>2]|0;
  $41 = (_atoi($40)|0);
  $2 = $41;
  $42 = $2;
  STACKTOP = sp;return ($42|0);
 }
 return (0)|0;
}
function _ignoreCaseComp($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = 0;
 while(1) {
  $8 = $7;
  $9 = $6;
  $10 = ($8>>>0)<($9>>>0);
  if (!($10)) {
   break;
  }
  $11 = $7;
  $12 = $4;
  $13 = (($12) + ($11)|0);
  $14 = HEAP8[$13>>0]|0;
  $15 = $14 << 24 >> 24;
  $16 = $15 | 32;
  $17 = $7;
  $18 = $5;
  $19 = (($18) + ($17)|0);
  $20 = HEAP8[$19>>0]|0;
  $21 = $20 << 24 >> 24;
  $22 = $21 | 32;
  $23 = ($16|0)!=($22|0);
  if ($23) {
   break;
  }
  $24 = $7;
  $25 = (($24) + 1)|0;
  $7 = $25;
 }
 $26 = $7;
 $27 = $6;
 $28 = ($26|0)!=($27|0);
 if ($28) {
  $3 = 1;
  $29 = $3;
  STACKTOP = sp;return ($29|0);
 } else {
  $3 = 0;
  $29 = $3;
  STACKTOP = sp;return ($29|0);
 }
 return (0)|0;
}
function _other_backTranslate($0,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 $9 = $9|0;
 $10 = $10|0;
 var $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $vararg_buffer = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 2112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(2112|0);
 $vararg_buffer = sp;
 $23 = sp + 56|0;
 $12 = $0;
 $13 = $1;
 $14 = $2;
 $15 = $3;
 $16 = $4;
 $17 = $5;
 $18 = $6;
 $19 = $7;
 $20 = $8;
 $21 = $9;
 $22 = $10;
 $25 = $12;
 (_strcpy($23,$25)|0);
 (_findColon($23)|0);
 $26 = (_findAction(868,$23)|0);
 $24 = $26;
 $27 = $24;
 switch ($27|0) {
 case -1:  {
  HEAP32[$vararg_buffer>>2] = $23;
  _logMessage(40000,7349,$vararg_buffer);
  $11 = 0;
  break;
 }
 case 1:  {
  $11 = 1;
  break;
 }
 case 2:  {
  $11 = 1;
  break;
 }
 case 3:  {
  $11 = 1;
  break;
 }
 default: {
  $11 = 0;
 }
 }
 $28 = $11;
 STACKTOP = sp;return ($28|0);
}
function _other_charToDots($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = $4;
 STACKTOP = sp;return 0;
}
function _other_dotsToChar($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = $4;
 STACKTOP = sp;return 0;
}
function _emscripten_get_global_libc() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (52240|0);
}
function ___stdio_close($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $1 = ((($0)) + 60|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (_dummy_161($2)|0);
 HEAP32[$vararg_buffer>>2] = $3;
 $4 = (___syscall6(6,($vararg_buffer|0))|0);
 $5 = (___syscall_ret($4)|0);
 STACKTOP = sp;return ($5|0);
}
function ___stdout_write($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $3 = sp + 16|0;
 $4 = ((($0)) + 36|0);
 HEAP32[$4>>2] = 9;
 $5 = HEAP32[$0>>2]|0;
 $6 = $5 & 64;
 $7 = ($6|0)==(0);
 if ($7) {
  $8 = ((($0)) + 60|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = $3;
  HEAP32[$vararg_buffer>>2] = $9;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = 21523;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr2>>2] = $10;
  $11 = (___syscall54(54,($vararg_buffer|0))|0);
  $12 = ($11|0)==(0);
  if (!($12)) {
   $13 = ((($0)) + 75|0);
   HEAP8[$13>>0] = -1;
  }
 }
 $14 = (___stdio_write($0,$1,$2)|0);
 STACKTOP = sp;return ($14|0);
}
function ___stdio_seek($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$pre = 0, $10 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, $vararg_ptr4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $3 = sp + 20|0;
 $4 = ((($0)) + 60|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $3;
 HEAP32[$vararg_buffer>>2] = $5;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = 0;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $1;
 $vararg_ptr3 = ((($vararg_buffer)) + 12|0);
 HEAP32[$vararg_ptr3>>2] = $6;
 $vararg_ptr4 = ((($vararg_buffer)) + 16|0);
 HEAP32[$vararg_ptr4>>2] = $2;
 $7 = (___syscall140(140,($vararg_buffer|0))|0);
 $8 = (___syscall_ret($7)|0);
 $9 = ($8|0)<(0);
 if ($9) {
  HEAP32[$3>>2] = -1;
  $10 = -1;
 } else {
  $$pre = HEAP32[$3>>2]|0;
  $10 = $$pre;
 }
 STACKTOP = sp;return ($10|0);
}
function ___syscall_ret($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0>>>0)>(4294963200);
 if ($1) {
  $2 = (0 - ($0))|0;
  $3 = (___errno_location()|0);
  HEAP32[$3>>2] = $2;
  $$0 = -1;
 } else {
  $$0 = $0;
 }
 return ($$0|0);
}
function ___errno_location() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_pthread_self()|0);
 $1 = ((($0)) + 64|0);
 return ($1|0);
}
function _pthread_self() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (1020|0);
}
function ___stdio_write($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$04756 = 0, $$04855 = 0, $$04954 = 0, $$051 = 0, $$1 = 0, $$150 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0;
 var $vararg_ptr6 = 0, $vararg_ptr7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $3 = sp + 32|0;
 $4 = ((($0)) + 28|0);
 $5 = HEAP32[$4>>2]|0;
 HEAP32[$3>>2] = $5;
 $6 = ((($3)) + 4|0);
 $7 = ((($0)) + 20|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (($8) - ($5))|0;
 HEAP32[$6>>2] = $9;
 $10 = ((($3)) + 8|0);
 HEAP32[$10>>2] = $1;
 $11 = ((($3)) + 12|0);
 HEAP32[$11>>2] = $2;
 $12 = (($9) + ($2))|0;
 $13 = ((($0)) + 60|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = $3;
 HEAP32[$vararg_buffer>>2] = $14;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $15;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = 2;
 $16 = (___syscall146(146,($vararg_buffer|0))|0);
 $17 = (___syscall_ret($16)|0);
 $18 = ($12|0)==($17|0);
 L1: do {
  if ($18) {
   label = 3;
  } else {
   $$04756 = 2;$$04855 = $12;$$04954 = $3;$26 = $17;
   while(1) {
    $27 = ($26|0)<(0);
    if ($27) {
     break;
    }
    $35 = (($$04855) - ($26))|0;
    $36 = ((($$04954)) + 4|0);
    $37 = HEAP32[$36>>2]|0;
    $38 = ($26>>>0)>($37>>>0);
    $39 = ((($$04954)) + 8|0);
    $$150 = $38 ? $39 : $$04954;
    $40 = $38 << 31 >> 31;
    $$1 = (($40) + ($$04756))|0;
    $41 = $38 ? $37 : 0;
    $$0 = (($26) - ($41))|0;
    $42 = HEAP32[$$150>>2]|0;
    $43 = (($42) + ($$0)|0);
    HEAP32[$$150>>2] = $43;
    $44 = ((($$150)) + 4|0);
    $45 = HEAP32[$44>>2]|0;
    $46 = (($45) - ($$0))|0;
    HEAP32[$44>>2] = $46;
    $47 = HEAP32[$13>>2]|0;
    $48 = $$150;
    HEAP32[$vararg_buffer3>>2] = $47;
    $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
    HEAP32[$vararg_ptr6>>2] = $48;
    $vararg_ptr7 = ((($vararg_buffer3)) + 8|0);
    HEAP32[$vararg_ptr7>>2] = $$1;
    $49 = (___syscall146(146,($vararg_buffer3|0))|0);
    $50 = (___syscall_ret($49)|0);
    $51 = ($35|0)==($50|0);
    if ($51) {
     label = 3;
     break L1;
    } else {
     $$04756 = $$1;$$04855 = $35;$$04954 = $$150;$26 = $50;
    }
   }
   $28 = ((($0)) + 16|0);
   HEAP32[$28>>2] = 0;
   HEAP32[$4>>2] = 0;
   HEAP32[$7>>2] = 0;
   $29 = HEAP32[$0>>2]|0;
   $30 = $29 | 32;
   HEAP32[$0>>2] = $30;
   $31 = ($$04756|0)==(2);
   if ($31) {
    $$051 = 0;
   } else {
    $32 = ((($$04954)) + 4|0);
    $33 = HEAP32[$32>>2]|0;
    $34 = (($2) - ($33))|0;
    $$051 = $34;
   }
  }
 } while(0);
 if ((label|0) == 3) {
  $19 = ((($0)) + 44|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = ((($0)) + 48|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = (($20) + ($22)|0);
  $24 = ((($0)) + 16|0);
  HEAP32[$24>>2] = $23;
  $25 = $20;
  HEAP32[$4>>2] = $25;
  HEAP32[$7>>2] = $25;
  $$051 = $2;
 }
 STACKTOP = sp;return ($$051|0);
}
function _dummy_161($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return ($0|0);
}
function ___stdio_read($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$cast = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $3 = sp + 16|0;
 HEAP32[$3>>2] = $1;
 $4 = ((($3)) + 4|0);
 $5 = ((($0)) + 48|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)!=(0);
 $8 = $7&1;
 $9 = (($2) - ($8))|0;
 HEAP32[$4>>2] = $9;
 $10 = ((($3)) + 8|0);
 $11 = ((($0)) + 44|0);
 $12 = HEAP32[$11>>2]|0;
 HEAP32[$10>>2] = $12;
 $13 = ((($3)) + 12|0);
 HEAP32[$13>>2] = $6;
 $14 = ((($0)) + 60|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = $3;
 HEAP32[$vararg_buffer>>2] = $15;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $16;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = 2;
 $17 = (___syscall145(145,($vararg_buffer|0))|0);
 $18 = (___syscall_ret($17)|0);
 $19 = ($18|0)<(1);
 if ($19) {
  $20 = $18 & 48;
  $21 = $20 ^ 16;
  $22 = HEAP32[$0>>2]|0;
  $23 = $22 | $21;
  HEAP32[$0>>2] = $23;
  $$0 = $18;
 } else {
  $24 = HEAP32[$4>>2]|0;
  $25 = ($18>>>0)>($24>>>0);
  if ($25) {
   $26 = (($18) - ($24))|0;
   $27 = HEAP32[$11>>2]|0;
   $28 = ((($0)) + 4|0);
   HEAP32[$28>>2] = $27;
   $$cast = $27;
   $29 = (($$cast) + ($26)|0);
   $30 = ((($0)) + 8|0);
   HEAP32[$30>>2] = $29;
   $31 = HEAP32[$5>>2]|0;
   $32 = ($31|0)==(0);
   if ($32) {
    $$0 = $2;
   } else {
    $33 = ((($$cast)) + 1|0);
    HEAP32[$28>>2] = $33;
    $34 = HEAP8[$$cast>>0]|0;
    $35 = (($2) + -1)|0;
    $36 = (($1) + ($35)|0);
    HEAP8[$36>>0] = $34;
    $$0 = $2;
   }
  } else {
   $$0 = $18;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function _strlen($0) {
 $0 = $0|0;
 var $$0 = 0, $$014 = 0, $$015$lcssa = 0, $$01518 = 0, $$1$lcssa = 0, $$pn = 0, $$pn29 = 0, $$pre = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $0;
 $2 = $1 & 3;
 $3 = ($2|0)==(0);
 L1: do {
  if ($3) {
   $$015$lcssa = $0;
   label = 4;
  } else {
   $$01518 = $0;$22 = $1;
   while(1) {
    $4 = HEAP8[$$01518>>0]|0;
    $5 = ($4<<24>>24)==(0);
    if ($5) {
     $$pn = $22;
     break L1;
    }
    $6 = ((($$01518)) + 1|0);
    $7 = $6;
    $8 = $7 & 3;
    $9 = ($8|0)==(0);
    if ($9) {
     $$015$lcssa = $6;
     label = 4;
     break;
    } else {
     $$01518 = $6;$22 = $7;
    }
   }
  }
 } while(0);
 if ((label|0) == 4) {
  $$0 = $$015$lcssa;
  while(1) {
   $10 = HEAP32[$$0>>2]|0;
   $11 = (($10) + -16843009)|0;
   $12 = $10 & -2139062144;
   $13 = $12 ^ -2139062144;
   $14 = $13 & $11;
   $15 = ($14|0)==(0);
   $16 = ((($$0)) + 4|0);
   if ($15) {
    $$0 = $16;
   } else {
    break;
   }
  }
  $17 = $10&255;
  $18 = ($17<<24>>24)==(0);
  if ($18) {
   $$1$lcssa = $$0;
  } else {
   $$pn29 = $$0;
   while(1) {
    $19 = ((($$pn29)) + 1|0);
    $$pre = HEAP8[$19>>0]|0;
    $20 = ($$pre<<24>>24)==(0);
    if ($20) {
     $$1$lcssa = $19;
     break;
    } else {
     $$pn29 = $19;
    }
   }
  }
  $21 = $$1$lcssa;
  $$pn = $21;
 }
 $$014 = (($$pn) - ($1))|0;
 return ($$014|0);
}
function _memcmp($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$01318 = 0, $$01417 = 0, $$019 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($2|0)==(0);
 L1: do {
  if ($3) {
   $14 = 0;
  } else {
   $$01318 = $0;$$01417 = $2;$$019 = $1;
   while(1) {
    $4 = HEAP8[$$01318>>0]|0;
    $5 = HEAP8[$$019>>0]|0;
    $6 = ($4<<24>>24)==($5<<24>>24);
    if (!($6)) {
     break;
    }
    $7 = (($$01417) + -1)|0;
    $8 = ((($$01318)) + 1|0);
    $9 = ((($$019)) + 1|0);
    $10 = ($7|0)==(0);
    if ($10) {
     $14 = 0;
     break L1;
    } else {
     $$01318 = $8;$$01417 = $7;$$019 = $9;
    }
   }
   $11 = $4&255;
   $12 = $5&255;
   $13 = (($11) - ($12))|0;
   $14 = $13;
  }
 } while(0);
 return ($14|0);
}
function _stat($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $2 = $0;
 $3 = $1;
 HEAP32[$vararg_buffer>>2] = $2;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $3;
 $4 = (___syscall195(195,($vararg_buffer|0))|0);
 $5 = (___syscall_ret($4)|0);
 STACKTOP = sp;return ($5|0);
}
function _strcmp($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$011 = 0, $$0710 = 0, $$lcssa = 0, $$lcssa8 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $2 = HEAP8[$0>>0]|0;
 $3 = HEAP8[$1>>0]|0;
 $4 = ($2<<24>>24)!=($3<<24>>24);
 $5 = ($2<<24>>24)==(0);
 $or$cond9 = $5 | $4;
 if ($or$cond9) {
  $$lcssa = $3;$$lcssa8 = $2;
 } else {
  $$011 = $1;$$0710 = $0;
  while(1) {
   $6 = ((($$0710)) + 1|0);
   $7 = ((($$011)) + 1|0);
   $8 = HEAP8[$6>>0]|0;
   $9 = HEAP8[$7>>0]|0;
   $10 = ($8<<24>>24)!=($9<<24>>24);
   $11 = ($8<<24>>24)==(0);
   $or$cond = $11 | $10;
   if ($or$cond) {
    $$lcssa = $9;$$lcssa8 = $8;
    break;
   } else {
    $$011 = $7;$$0710 = $6;
   }
  }
 }
 $12 = $$lcssa8&255;
 $13 = $$lcssa&255;
 $14 = (($12) - ($13))|0;
 return ($14|0);
}
function _wcrtomb($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $not$ = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($0|0)==(0|0);
 do {
  if ($3) {
   $$0 = 1;
  } else {
   $4 = ($1>>>0)<(128);
   if ($4) {
    $5 = $1&255;
    HEAP8[$0>>0] = $5;
    $$0 = 1;
    break;
   }
   $6 = (_pthread_self()|0);
   $7 = ((($6)) + 188|0);
   $8 = HEAP32[$7>>2]|0;
   $9 = HEAP32[$8>>2]|0;
   $not$ = ($9|0)==(0|0);
   if ($not$) {
    $10 = $1 & -128;
    $11 = ($10|0)==(57216);
    if ($11) {
     $13 = $1&255;
     HEAP8[$0>>0] = $13;
     $$0 = 1;
     break;
    } else {
     $12 = (___errno_location()|0);
     HEAP32[$12>>2] = 84;
     $$0 = -1;
     break;
    }
   }
   $14 = ($1>>>0)<(2048);
   if ($14) {
    $15 = $1 >>> 6;
    $16 = $15 | 192;
    $17 = $16&255;
    $18 = ((($0)) + 1|0);
    HEAP8[$0>>0] = $17;
    $19 = $1 & 63;
    $20 = $19 | 128;
    $21 = $20&255;
    HEAP8[$18>>0] = $21;
    $$0 = 2;
    break;
   }
   $22 = ($1>>>0)<(55296);
   $23 = $1 & -8192;
   $24 = ($23|0)==(57344);
   $or$cond = $22 | $24;
   if ($or$cond) {
    $25 = $1 >>> 12;
    $26 = $25 | 224;
    $27 = $26&255;
    $28 = ((($0)) + 1|0);
    HEAP8[$0>>0] = $27;
    $29 = $1 >>> 6;
    $30 = $29 & 63;
    $31 = $30 | 128;
    $32 = $31&255;
    $33 = ((($0)) + 2|0);
    HEAP8[$28>>0] = $32;
    $34 = $1 & 63;
    $35 = $34 | 128;
    $36 = $35&255;
    HEAP8[$33>>0] = $36;
    $$0 = 3;
    break;
   }
   $37 = (($1) + -65536)|0;
   $38 = ($37>>>0)<(1048576);
   if ($38) {
    $39 = $1 >>> 18;
    $40 = $39 | 240;
    $41 = $40&255;
    $42 = ((($0)) + 1|0);
    HEAP8[$0>>0] = $41;
    $43 = $1 >>> 12;
    $44 = $43 & 63;
    $45 = $44 | 128;
    $46 = $45&255;
    $47 = ((($0)) + 2|0);
    HEAP8[$42>>0] = $46;
    $48 = $1 >>> 6;
    $49 = $48 & 63;
    $50 = $49 | 128;
    $51 = $50&255;
    $52 = ((($0)) + 3|0);
    HEAP8[$47>>0] = $51;
    $53 = $1 & 63;
    $54 = $53 | 128;
    $55 = $54&255;
    HEAP8[$52>>0] = $55;
    $$0 = 4;
    break;
   } else {
    $56 = (___errno_location()|0);
    HEAP32[$56>>2] = 84;
    $$0 = -1;
    break;
   }
  }
 } while(0);
 return ($$0|0);
}
function _wctomb($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($0|0)==(0|0);
 if ($2) {
  $$0 = 0;
 } else {
  $3 = (_wcrtomb($0,$1,0)|0);
  $$0 = $3;
 }
 return ($$0|0);
}
function _strchr($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (___strchrnul($0,$1)|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = $1&255;
 $5 = ($3<<24>>24)==($4<<24>>24);
 $6 = $5 ? $2 : 0;
 return ($6|0);
}
function _isspace($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(32);
 $2 = (($0) + -9)|0;
 $3 = ($2>>>0)<(5);
 $4 = $1 | $3;
 $5 = $4&1;
 return ($5|0);
}
function _memchr($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0$lcssa = 0, $$035$lcssa = 0, $$035$lcssa65 = 0, $$03555 = 0, $$036$lcssa = 0, $$036$lcssa64 = 0, $$03654 = 0, $$046 = 0, $$137$lcssa = 0, $$13745 = 0, $$140 = 0, $$2 = 0, $$23839 = 0, $$3 = 0, $$lcssa = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0;
 var $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond53 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = $1 & 255;
 $4 = $0;
 $5 = $4 & 3;
 $6 = ($5|0)!=(0);
 $7 = ($2|0)!=(0);
 $or$cond53 = $7 & $6;
 L1: do {
  if ($or$cond53) {
   $8 = $1&255;
   $$03555 = $0;$$03654 = $2;
   while(1) {
    $9 = HEAP8[$$03555>>0]|0;
    $10 = ($9<<24>>24)==($8<<24>>24);
    if ($10) {
     $$035$lcssa65 = $$03555;$$036$lcssa64 = $$03654;
     label = 6;
     break L1;
    }
    $11 = ((($$03555)) + 1|0);
    $12 = (($$03654) + -1)|0;
    $13 = $11;
    $14 = $13 & 3;
    $15 = ($14|0)!=(0);
    $16 = ($12|0)!=(0);
    $or$cond = $16 & $15;
    if ($or$cond) {
     $$03555 = $11;$$03654 = $12;
    } else {
     $$035$lcssa = $11;$$036$lcssa = $12;$$lcssa = $16;
     label = 5;
     break;
    }
   }
  } else {
   $$035$lcssa = $0;$$036$lcssa = $2;$$lcssa = $7;
   label = 5;
  }
 } while(0);
 if ((label|0) == 5) {
  if ($$lcssa) {
   $$035$lcssa65 = $$035$lcssa;$$036$lcssa64 = $$036$lcssa;
   label = 6;
  } else {
   $$2 = $$035$lcssa;$$3 = 0;
  }
 }
 L8: do {
  if ((label|0) == 6) {
   $17 = HEAP8[$$035$lcssa65>>0]|0;
   $18 = $1&255;
   $19 = ($17<<24>>24)==($18<<24>>24);
   if ($19) {
    $$2 = $$035$lcssa65;$$3 = $$036$lcssa64;
   } else {
    $20 = Math_imul($3, 16843009)|0;
    $21 = ($$036$lcssa64>>>0)>(3);
    L11: do {
     if ($21) {
      $$046 = $$035$lcssa65;$$13745 = $$036$lcssa64;
      while(1) {
       $22 = HEAP32[$$046>>2]|0;
       $23 = $22 ^ $20;
       $24 = (($23) + -16843009)|0;
       $25 = $23 & -2139062144;
       $26 = $25 ^ -2139062144;
       $27 = $26 & $24;
       $28 = ($27|0)==(0);
       if (!($28)) {
        break;
       }
       $29 = ((($$046)) + 4|0);
       $30 = (($$13745) + -4)|0;
       $31 = ($30>>>0)>(3);
       if ($31) {
        $$046 = $29;$$13745 = $30;
       } else {
        $$0$lcssa = $29;$$137$lcssa = $30;
        label = 11;
        break L11;
       }
      }
      $$140 = $$046;$$23839 = $$13745;
     } else {
      $$0$lcssa = $$035$lcssa65;$$137$lcssa = $$036$lcssa64;
      label = 11;
     }
    } while(0);
    if ((label|0) == 11) {
     $32 = ($$137$lcssa|0)==(0);
     if ($32) {
      $$2 = $$0$lcssa;$$3 = 0;
      break;
     } else {
      $$140 = $$0$lcssa;$$23839 = $$137$lcssa;
     }
    }
    while(1) {
     $33 = HEAP8[$$140>>0]|0;
     $34 = ($33<<24>>24)==($18<<24>>24);
     if ($34) {
      $$2 = $$140;$$3 = $$23839;
      break L8;
     }
     $35 = ((($$140)) + 1|0);
     $36 = (($$23839) + -1)|0;
     $37 = ($36|0)==(0);
     if ($37) {
      $$2 = $35;$$3 = 0;
      break;
     } else {
      $$140 = $35;$$23839 = $36;
     }
    }
   }
  }
 } while(0);
 $38 = ($$3|0)!=(0);
 $39 = $38 ? $$2 : 0;
 return ($39|0);
}
function ___strchrnul($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$029$lcssa = 0, $$02936 = 0, $$030$lcssa = 0, $$03039 = 0, $$1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond33 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = $1 & 255;
 $3 = ($2|0)==(0);
 L1: do {
  if ($3) {
   $8 = (_strlen($0)|0);
   $9 = (($0) + ($8)|0);
   $$0 = $9;
  } else {
   $4 = $0;
   $5 = $4 & 3;
   $6 = ($5|0)==(0);
   if ($6) {
    $$030$lcssa = $0;
   } else {
    $7 = $1&255;
    $$03039 = $0;
    while(1) {
     $10 = HEAP8[$$03039>>0]|0;
     $11 = ($10<<24>>24)==(0);
     $12 = ($10<<24>>24)==($7<<24>>24);
     $or$cond = $11 | $12;
     if ($or$cond) {
      $$0 = $$03039;
      break L1;
     }
     $13 = ((($$03039)) + 1|0);
     $14 = $13;
     $15 = $14 & 3;
     $16 = ($15|0)==(0);
     if ($16) {
      $$030$lcssa = $13;
      break;
     } else {
      $$03039 = $13;
     }
    }
   }
   $17 = Math_imul($2, 16843009)|0;
   $18 = HEAP32[$$030$lcssa>>2]|0;
   $19 = (($18) + -16843009)|0;
   $20 = $18 & -2139062144;
   $21 = $20 ^ -2139062144;
   $22 = $21 & $19;
   $23 = ($22|0)==(0);
   L10: do {
    if ($23) {
     $$02936 = $$030$lcssa;$25 = $18;
     while(1) {
      $24 = $25 ^ $17;
      $26 = (($24) + -16843009)|0;
      $27 = $24 & -2139062144;
      $28 = $27 ^ -2139062144;
      $29 = $28 & $26;
      $30 = ($29|0)==(0);
      if (!($30)) {
       $$029$lcssa = $$02936;
       break L10;
      }
      $31 = ((($$02936)) + 4|0);
      $32 = HEAP32[$31>>2]|0;
      $33 = (($32) + -16843009)|0;
      $34 = $32 & -2139062144;
      $35 = $34 ^ -2139062144;
      $36 = $35 & $33;
      $37 = ($36|0)==(0);
      if ($37) {
       $$02936 = $31;$25 = $32;
      } else {
       $$029$lcssa = $31;
       break;
      }
     }
    } else {
     $$029$lcssa = $$030$lcssa;
    }
   } while(0);
   $38 = $1&255;
   $$1 = $$029$lcssa;
   while(1) {
    $39 = HEAP8[$$1>>0]|0;
    $40 = ($39<<24>>24)==(0);
    $41 = ($39<<24>>24)==($38<<24>>24);
    $or$cond33 = $40 | $41;
    $42 = ((($$1)) + 1|0);
    if ($or$cond33) {
     $$0 = $$1;
     break;
    } else {
     $$1 = $42;
    }
   }
  }
 } while(0);
 return ($$0|0);
}
function ___lockfile($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function ___unlockfile($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function ___uflow($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 $2 = (___toread($0)|0);
 $3 = ($2|0)==(0);
 if ($3) {
  $4 = ((($0)) + 32|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = (FUNCTION_TABLE_iiii[$5 & 15]($0,$1,1)|0);
  $7 = ($6|0)==(1);
  if ($7) {
   $8 = HEAP8[$1>>0]|0;
   $9 = $8&255;
   $$0 = $9;
  } else {
   $$0 = -1;
  }
 } else {
  $$0 = -1;
 }
 STACKTOP = sp;return ($$0|0);
}
function ___toread($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $sext = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 74|0);
 $2 = HEAP8[$1>>0]|0;
 $3 = $2 << 24 >> 24;
 $4 = (($3) + 255)|0;
 $5 = $4 | $3;
 $6 = $5&255;
 HEAP8[$1>>0] = $6;
 $7 = ((($0)) + 20|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($0)) + 28|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($8>>>0)>($10>>>0);
 if ($11) {
  $12 = ((($0)) + 36|0);
  $13 = HEAP32[$12>>2]|0;
  (FUNCTION_TABLE_iiii[$13 & 15]($0,0,0)|0);
 }
 $14 = ((($0)) + 16|0);
 HEAP32[$14>>2] = 0;
 HEAP32[$9>>2] = 0;
 HEAP32[$7>>2] = 0;
 $15 = HEAP32[$0>>2]|0;
 $16 = $15 & 4;
 $17 = ($16|0)==(0);
 if ($17) {
  $19 = ((($0)) + 44|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = ((($0)) + 48|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = (($20) + ($22)|0);
  $24 = ((($0)) + 8|0);
  HEAP32[$24>>2] = $23;
  $25 = ((($0)) + 4|0);
  HEAP32[$25>>2] = $23;
  $26 = $15 << 27;
  $sext = $26 >> 31;
  $$0 = $sext;
 } else {
  $18 = $15 | 32;
  HEAP32[$0>>2] = $18;
  $$0 = -1;
 }
 return ($$0|0);
}
function _strcpy($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 (___stpcpy($0,$1)|0);
 return ($0|0);
}
function ___stpcpy($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0$lcssa = 0, $$025$lcssa = 0, $$02536 = 0, $$026$lcssa = 0, $$02642 = 0, $$027$lcssa = 0, $$02741 = 0, $$029 = 0, $$037 = 0, $$1$ph = 0, $$128$ph = 0, $$12834 = 0, $$135 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = $1;
 $3 = $0;
 $4 = $2 ^ $3;
 $5 = $4 & 3;
 $6 = ($5|0)==(0);
 L1: do {
  if ($6) {
   $7 = $2 & 3;
   $8 = ($7|0)==(0);
   if ($8) {
    $$026$lcssa = $1;$$027$lcssa = $0;
   } else {
    $$02642 = $1;$$02741 = $0;
    while(1) {
     $9 = HEAP8[$$02642>>0]|0;
     HEAP8[$$02741>>0] = $9;
     $10 = ($9<<24>>24)==(0);
     if ($10) {
      $$029 = $$02741;
      break L1;
     }
     $11 = ((($$02642)) + 1|0);
     $12 = ((($$02741)) + 1|0);
     $13 = $11;
     $14 = $13 & 3;
     $15 = ($14|0)==(0);
     if ($15) {
      $$026$lcssa = $11;$$027$lcssa = $12;
      break;
     } else {
      $$02642 = $11;$$02741 = $12;
     }
    }
   }
   $16 = HEAP32[$$026$lcssa>>2]|0;
   $17 = (($16) + -16843009)|0;
   $18 = $16 & -2139062144;
   $19 = $18 ^ -2139062144;
   $20 = $19 & $17;
   $21 = ($20|0)==(0);
   if ($21) {
    $$02536 = $$027$lcssa;$$037 = $$026$lcssa;$24 = $16;
    while(1) {
     $22 = ((($$037)) + 4|0);
     $23 = ((($$02536)) + 4|0);
     HEAP32[$$02536>>2] = $24;
     $25 = HEAP32[$22>>2]|0;
     $26 = (($25) + -16843009)|0;
     $27 = $25 & -2139062144;
     $28 = $27 ^ -2139062144;
     $29 = $28 & $26;
     $30 = ($29|0)==(0);
     if ($30) {
      $$02536 = $23;$$037 = $22;$24 = $25;
     } else {
      $$0$lcssa = $22;$$025$lcssa = $23;
      break;
     }
    }
   } else {
    $$0$lcssa = $$026$lcssa;$$025$lcssa = $$027$lcssa;
   }
   $$1$ph = $$0$lcssa;$$128$ph = $$025$lcssa;
   label = 8;
  } else {
   $$1$ph = $1;$$128$ph = $0;
   label = 8;
  }
 } while(0);
 if ((label|0) == 8) {
  $31 = HEAP8[$$1$ph>>0]|0;
  HEAP8[$$128$ph>>0] = $31;
  $32 = ($31<<24>>24)==(0);
  if ($32) {
   $$029 = $$128$ph;
  } else {
   $$12834 = $$128$ph;$$135 = $$1$ph;
   while(1) {
    $33 = ((($$135)) + 1|0);
    $34 = ((($$12834)) + 1|0);
    $35 = HEAP8[$33>>0]|0;
    HEAP8[$34>>0] = $35;
    $36 = ($35<<24>>24)==(0);
    if ($36) {
     $$029 = $34;
     break;
    } else {
     $$12834 = $34;$$135 = $33;
    }
   }
  }
 }
 return ($$029|0);
}
function _vsnprintf($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$$015 = 0, $$0 = 0, $$014 = 0, $$015 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(128|0);
 $4 = sp + 124|0;
 $5 = sp;
 dest=$5; src=1396; stop=dest+124|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $6 = (($1) + -1)|0;
 $7 = ($6>>>0)>(2147483646);
 if ($7) {
  $8 = ($1|0)==(0);
  if ($8) {
   $$014 = $4;$$015 = 1;
   label = 4;
  } else {
   $9 = (___errno_location()|0);
   HEAP32[$9>>2] = 75;
   $$0 = -1;
  }
 } else {
  $$014 = $0;$$015 = $1;
  label = 4;
 }
 if ((label|0) == 4) {
  $10 = $$014;
  $11 = (-2 - ($10))|0;
  $12 = ($$015>>>0)>($11>>>0);
  $$$015 = $12 ? $11 : $$015;
  $13 = ((($5)) + 48|0);
  HEAP32[$13>>2] = $$$015;
  $14 = ((($5)) + 20|0);
  HEAP32[$14>>2] = $$014;
  $15 = ((($5)) + 44|0);
  HEAP32[$15>>2] = $$014;
  $16 = (($$014) + ($$$015)|0);
  $17 = ((($5)) + 16|0);
  HEAP32[$17>>2] = $16;
  $18 = ((($5)) + 28|0);
  HEAP32[$18>>2] = $16;
  $19 = (_vfprintf($5,$2,$3)|0);
  $20 = ($$$015|0)==(0);
  if ($20) {
   $$0 = $19;
  } else {
   $21 = HEAP32[$14>>2]|0;
   $22 = HEAP32[$17>>2]|0;
   $23 = ($21|0)==($22|0);
   $24 = $23 << 31 >> 31;
   $25 = (($21) + ($24)|0);
   HEAP8[$25>>0] = 0;
   $$0 = $19;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function _vfprintf($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$ = 0, $$0 = 0, $$1 = 0, $$1$ = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $vacopy_currentptr = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(224|0);
 $3 = sp + 120|0;
 $4 = sp + 80|0;
 $5 = sp;
 $6 = sp + 136|0;
 dest=$4; stop=dest+40|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $vacopy_currentptr = HEAP32[$2>>2]|0;
 HEAP32[$3>>2] = $vacopy_currentptr;
 $7 = (_printf_core(0,$1,$3,$5,$4)|0);
 $8 = ($7|0)<(0);
 if ($8) {
  $$0 = -1;
 } else {
  $9 = ((($0)) + 76|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ($10|0)>(-1);
  if ($11) {
   $12 = (___lockfile($0)|0);
   $39 = $12;
  } else {
   $39 = 0;
  }
  $13 = HEAP32[$0>>2]|0;
  $14 = $13 & 32;
  $15 = ((($0)) + 74|0);
  $16 = HEAP8[$15>>0]|0;
  $17 = ($16<<24>>24)<(1);
  if ($17) {
   $18 = $13 & -33;
   HEAP32[$0>>2] = $18;
  }
  $19 = ((($0)) + 48|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = ($20|0)==(0);
  if ($21) {
   $23 = ((($0)) + 44|0);
   $24 = HEAP32[$23>>2]|0;
   HEAP32[$23>>2] = $6;
   $25 = ((($0)) + 28|0);
   HEAP32[$25>>2] = $6;
   $26 = ((($0)) + 20|0);
   HEAP32[$26>>2] = $6;
   HEAP32[$19>>2] = 80;
   $27 = ((($6)) + 80|0);
   $28 = ((($0)) + 16|0);
   HEAP32[$28>>2] = $27;
   $29 = (_printf_core($0,$1,$3,$5,$4)|0);
   $30 = ($24|0)==(0|0);
   if ($30) {
    $$1 = $29;
   } else {
    $31 = ((($0)) + 36|0);
    $32 = HEAP32[$31>>2]|0;
    (FUNCTION_TABLE_iiii[$32 & 15]($0,0,0)|0);
    $33 = HEAP32[$26>>2]|0;
    $34 = ($33|0)==(0|0);
    $$ = $34 ? -1 : $29;
    HEAP32[$23>>2] = $24;
    HEAP32[$19>>2] = 0;
    HEAP32[$28>>2] = 0;
    HEAP32[$25>>2] = 0;
    HEAP32[$26>>2] = 0;
    $$1 = $$;
   }
  } else {
   $22 = (_printf_core($0,$1,$3,$5,$4)|0);
   $$1 = $22;
  }
  $35 = HEAP32[$0>>2]|0;
  $36 = $35 & 32;
  $37 = ($36|0)==(0);
  $$1$ = $37 ? $$1 : -1;
  $38 = $35 | $14;
  HEAP32[$0>>2] = $38;
  $40 = ($39|0)==(0);
  if (!($40)) {
   ___unlockfile($0);
  }
  $$0 = $$1$;
 }
 STACKTOP = sp;return ($$0|0);
}
function _printf_core($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$ = 0, $$$0259 = 0, $$$0262 = 0, $$$0269 = 0, $$$3484$i = 0, $$$3484704$i = 0, $$$3484705$i = 0, $$$3501$i = 0, $$$4266 = 0, $$$4502$i = 0, $$$5 = 0, $$$i = 0, $$0 = 0, $$0$i = 0, $$0$lcssa$i300 = 0, $$0228 = 0, $$0229396 = 0, $$0232 = 0, $$0235 = 0, $$0237 = 0;
 var $$0240$lcssa = 0, $$0240$lcssa460 = 0, $$0240395 = 0, $$0243 = 0, $$0247 = 0, $$0249$lcssa = 0, $$0249383 = 0, $$0252 = 0, $$0253 = 0, $$0254 = 0, $$0254$ = 0, $$0259 = 0, $$0262342 = 0, $$0262390 = 0, $$0269 = 0, $$0269$phi = 0, $$0321 = 0, $$0463$lcssa$i = 0, $$0463593$i = 0, $$0464602$i = 0;
 var $$0466$i = 0.0, $$0470$i = 0, $$0471$i = 0.0, $$0479$i = 0, $$0487651$i = 0, $$0488$i = 0, $$0488662$i = 0, $$0488664$i = 0, $$0496$$9$i = 0, $$0497663$i = 0, $$0498$i = 0, $$05$lcssa$i = 0, $$0509591$i = 0.0, $$0510$i = 0, $$0511$i = 0, $$0514646$i = 0, $$0520$i = 0, $$0521$$i = 0, $$0521$i = 0, $$0523$i = 0;
 var $$0525$i = 0, $$0527$i = 0, $$0527638$i = 0, $$0527640$i = 0, $$0530645$i = 0, $$056$i = 0, $$06$i = 0, $$06$i290 = 0, $$06$i298 = 0, $$1 = 0, $$1230407 = 0, $$1233 = 0, $$1236 = 0, $$1238 = 0, $$1241406 = 0, $$1244394 = 0, $$1248 = 0, $$1250 = 0, $$1255 = 0, $$1260 = 0;
 var $$1263 = 0, $$1263$ = 0, $$1270 = 0, $$1322 = 0, $$1465$i = 0, $$1467$i = 0.0, $$1469$i = 0.0, $$1472$i = 0.0, $$1480$i = 0, $$1482$lcssa$i = 0, $$1482670$i = 0, $$1489650$i = 0, $$1499$lcssa$i = 0, $$1499669$i = 0, $$1508592$i = 0, $$1512$lcssa$i = 0, $$1512616$i = 0, $$1515$i = 0, $$1524$i = 0, $$1526$i = 0;
 var $$1528623$i = 0, $$1531$lcssa$i = 0, $$1531639$i = 0, $$1606$i = 0, $$2 = 0, $$2$i = 0, $$2234 = 0, $$2239 = 0, $$2242381 = 0, $$2245 = 0, $$2251 = 0, $$2256 = 0, $$2256$ = 0, $$2261 = 0, $$2271 = 0, $$2323$lcssa = 0, $$2323382 = 0, $$2473$i = 0.0, $$2476$$544$i = 0, $$2476$$546$i = 0;
 var $$2476$i = 0, $$2483$ph$i = 0, $$2490$lcssa$i = 0, $$2490631$i = 0, $$2500$i = 0, $$2513$i = 0, $$2516627$i = 0, $$2529$i = 0, $$2532626$i = 0, $$3$i = 0.0, $$3257 = 0, $$3265 = 0, $$3272 = 0, $$331 = 0, $$332 = 0, $$333 = 0, $$3379 = 0, $$3477$i = 0, $$3484$lcssa$i = 0, $$3484657$i = 0;
 var $$3501$lcssa$i = 0, $$3501656$i = 0, $$3533622$i = 0, $$4$i = 0.0, $$4258458 = 0, $$4266 = 0, $$4325 = 0, $$4478$lcssa$i = 0, $$4478599$i = 0, $$4492$i = 0, $$4502$i = 0, $$4518$i = 0, $$5 = 0, $$5$lcssa$i = 0, $$536$i = 0, $$537$$i = 0, $$537$i = 0, $$540$i = 0.0, $$543$i = 0, $$545$i = 0;
 var $$5486$lcssa$i = 0, $$5486632$i = 0, $$5493605$i = 0, $$5519$ph$i = 0, $$552$i = 0, $$553$i = 0, $$556$i = 0.0, $$5610$i = 0, $$6 = 0, $$6$i = 0, $$6268 = 0, $$6494598$i = 0, $$7 = 0, $$7495609$i = 0, $$7505$$i = 0, $$7505$i = 0, $$7505$ph$i = 0, $$8$i = 0, $$9$ph$i = 0, $$lcssa682$i = 0;
 var $$neg$i = 0, $$neg571$i = 0, $$pn$i = 0, $$pr = 0, $$pr$i = 0, $$pr570$i = 0, $$pre = 0, $$pre$i = 0, $$pre$phi703$iZ2D = 0, $$pre452 = 0, $$pre453 = 0, $$pre454 = 0, $$pre696$i = 0, $$pre699$i = 0, $$pre702$i = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0;
 var $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0;
 var $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0;
 var $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0;
 var $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0;
 var $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0;
 var $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0;
 var $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0;
 var $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0;
 var $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0;
 var $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0;
 var $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0;
 var $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0;
 var $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0;
 var $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0;
 var $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0.0, $372 = 0, $373 = 0, $374 = 0, $375 = 0.0, $376 = 0;
 var $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0;
 var $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0.0, $404 = 0.0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0;
 var $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0.0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0.0, $424 = 0.0, $425 = 0.0, $426 = 0.0, $427 = 0.0, $428 = 0.0, $429 = 0, $43 = 0, $430 = 0;
 var $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0;
 var $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0.0, $455 = 0.0, $456 = 0.0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0;
 var $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0;
 var $486 = 0, $487 = 0.0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0.0, $494 = 0.0, $495 = 0.0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0;
 var $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0;
 var $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0;
 var $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0;
 var $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0;
 var $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0;
 var $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0.0, $606 = 0.0, $607 = 0, $608 = 0.0, $609 = 0, $61 = 0, $610 = 0;
 var $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0;
 var $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0;
 var $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0;
 var $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0;
 var $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0;
 var $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0;
 var $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0;
 var $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0;
 var $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0;
 var $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0;
 var $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $arglist_current = 0, $arglist_current2 = 0, $arglist_next = 0, $arglist_next3 = 0, $exitcond$i = 0, $expanded = 0, $expanded10 = 0, $expanded11 = 0, $expanded13 = 0, $expanded14 = 0, $expanded15 = 0, $expanded4 = 0, $expanded6 = 0, $expanded7 = 0, $expanded8 = 0, $isdigit = 0, $isdigit$i = 0, $isdigit$i292 = 0, $isdigit275 = 0, $isdigit277 = 0;
 var $isdigit5$i = 0, $isdigit5$i288 = 0, $isdigittmp = 0, $isdigittmp$ = 0, $isdigittmp$i = 0, $isdigittmp$i291 = 0, $isdigittmp274 = 0, $isdigittmp276 = 0, $isdigittmp4$i = 0, $isdigittmp4$i287 = 0, $isdigittmp7$i = 0, $isdigittmp7$i289 = 0, $notlhs$i = 0, $notrhs$i = 0, $or$cond = 0, $or$cond$i = 0, $or$cond280 = 0, $or$cond282 = 0, $or$cond285 = 0, $or$cond3$not$i = 0;
 var $or$cond412 = 0, $or$cond539$i = 0, $or$cond542$i = 0, $or$cond551$i = 0, $or$cond6$i = 0, $scevgep693$i = 0, $scevgep693694$i = 0, $storemerge = 0, $storemerge273345 = 0, $storemerge273389 = 0, $storemerge278 = 0, $sum = 0, $trunc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 624|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(624|0);
 $5 = sp + 24|0;
 $6 = sp + 16|0;
 $7 = sp + 588|0;
 $8 = sp + 576|0;
 $9 = sp;
 $10 = sp + 536|0;
 $11 = sp + 8|0;
 $12 = sp + 528|0;
 $13 = ($0|0)!=(0|0);
 $14 = ((($10)) + 40|0);
 $15 = $14;
 $16 = ((($10)) + 39|0);
 $17 = ((($11)) + 4|0);
 $18 = $7;
 $19 = (0 - ($18))|0;
 $20 = ((($8)) + 12|0);
 $21 = ((($8)) + 11|0);
 $22 = $20;
 $23 = (($22) - ($18))|0;
 $24 = (-2 - ($18))|0;
 $25 = (($22) + 2)|0;
 $26 = ((($5)) + 288|0);
 $27 = ((($7)) + 9|0);
 $28 = $27;
 $29 = ((($7)) + 8|0);
 $$0243 = 0;$$0247 = 0;$$0269 = 0;$$0321 = $1;
 L1: while(1) {
  $30 = ($$0247|0)>(-1);
  do {
   if ($30) {
    $31 = (2147483647 - ($$0247))|0;
    $32 = ($$0243|0)>($31|0);
    if ($32) {
     $33 = (___errno_location()|0);
     HEAP32[$33>>2] = 75;
     $$1248 = -1;
     break;
    } else {
     $34 = (($$0243) + ($$0247))|0;
     $$1248 = $34;
     break;
    }
   } else {
    $$1248 = $$0247;
   }
  } while(0);
  $35 = HEAP8[$$0321>>0]|0;
  $36 = ($35<<24>>24)==(0);
  if ($36) {
   label = 243;
   break;
  } else {
   $$1322 = $$0321;$37 = $35;
  }
  L9: while(1) {
   switch ($37<<24>>24) {
   case 37:  {
    $$0249383 = $$1322;$$2323382 = $$1322;
    label = 9;
    break L9;
    break;
   }
   case 0:  {
    $$0249$lcssa = $$1322;$$2323$lcssa = $$1322;
    break L9;
    break;
   }
   default: {
   }
   }
   $38 = ((($$1322)) + 1|0);
   $$pre = HEAP8[$38>>0]|0;
   $$1322 = $38;$37 = $$pre;
  }
  L12: do {
   if ((label|0) == 9) {
    while(1) {
     label = 0;
     $39 = ((($$2323382)) + 1|0);
     $40 = HEAP8[$39>>0]|0;
     $41 = ($40<<24>>24)==(37);
     if (!($41)) {
      $$0249$lcssa = $$0249383;$$2323$lcssa = $$2323382;
      break L12;
     }
     $42 = ((($$0249383)) + 1|0);
     $43 = ((($$2323382)) + 2|0);
     $44 = HEAP8[$43>>0]|0;
     $45 = ($44<<24>>24)==(37);
     if ($45) {
      $$0249383 = $42;$$2323382 = $43;
      label = 9;
     } else {
      $$0249$lcssa = $42;$$2323$lcssa = $43;
      break;
     }
    }
   }
  } while(0);
  $46 = $$0249$lcssa;
  $47 = $$0321;
  $48 = (($46) - ($47))|0;
  if ($13) {
   $49 = HEAP32[$0>>2]|0;
   $50 = $49 & 32;
   $51 = ($50|0)==(0);
   if ($51) {
    (___fwritex($$0321,$48,$0)|0);
   }
  }
  $52 = ($48|0)==(0);
  if (!($52)) {
   $$0269$phi = $$0269;$$0243 = $48;$$0247 = $$1248;$$0321 = $$2323$lcssa;$$0269 = $$0269$phi;
   continue;
  }
  $53 = ((($$2323$lcssa)) + 1|0);
  $54 = HEAP8[$53>>0]|0;
  $55 = $54 << 24 >> 24;
  $isdigittmp = (($55) + -48)|0;
  $isdigit = ($isdigittmp>>>0)<(10);
  if ($isdigit) {
   $56 = ((($$2323$lcssa)) + 2|0);
   $57 = HEAP8[$56>>0]|0;
   $58 = ($57<<24>>24)==(36);
   $59 = ((($$2323$lcssa)) + 3|0);
   $$331 = $58 ? $59 : $53;
   $$$0269 = $58 ? 1 : $$0269;
   $isdigittmp$ = $58 ? $isdigittmp : -1;
   $$pre452 = HEAP8[$$331>>0]|0;
   $$0253 = $isdigittmp$;$$1270 = $$$0269;$61 = $$pre452;$storemerge = $$331;
  } else {
   $$0253 = -1;$$1270 = $$0269;$61 = $54;$storemerge = $53;
  }
  $60 = $61 << 24 >> 24;
  $62 = (($60) + -32)|0;
  $63 = ($62>>>0)<(32);
  L25: do {
   if ($63) {
    $$0262390 = 0;$65 = $62;$69 = $61;$storemerge273389 = $storemerge;
    while(1) {
     $64 = 1 << $65;
     $66 = $64 & 75913;
     $67 = ($66|0)==(0);
     if ($67) {
      $$0262342 = $$0262390;$78 = $69;$storemerge273345 = $storemerge273389;
      break L25;
     }
     $68 = $69 << 24 >> 24;
     $70 = (($68) + -32)|0;
     $71 = 1 << $70;
     $72 = $71 | $$0262390;
     $73 = ((($storemerge273389)) + 1|0);
     $74 = HEAP8[$73>>0]|0;
     $75 = $74 << 24 >> 24;
     $76 = (($75) + -32)|0;
     $77 = ($76>>>0)<(32);
     if ($77) {
      $$0262390 = $72;$65 = $76;$69 = $74;$storemerge273389 = $73;
     } else {
      $$0262342 = $72;$78 = $74;$storemerge273345 = $73;
      break;
     }
    }
   } else {
    $$0262342 = 0;$78 = $61;$storemerge273345 = $storemerge;
   }
  } while(0);
  $79 = ($78<<24>>24)==(42);
  do {
   if ($79) {
    $80 = ((($storemerge273345)) + 1|0);
    $81 = HEAP8[$80>>0]|0;
    $82 = $81 << 24 >> 24;
    $isdigittmp276 = (($82) + -48)|0;
    $isdigit277 = ($isdigittmp276>>>0)<(10);
    if ($isdigit277) {
     $83 = ((($storemerge273345)) + 2|0);
     $84 = HEAP8[$83>>0]|0;
     $85 = ($84<<24>>24)==(36);
     if ($85) {
      $86 = (($4) + ($isdigittmp276<<2)|0);
      HEAP32[$86>>2] = 10;
      $87 = HEAP8[$80>>0]|0;
      $88 = $87 << 24 >> 24;
      $89 = (($88) + -48)|0;
      $90 = (($3) + ($89<<3)|0);
      $91 = $90;
      $92 = $91;
      $93 = HEAP32[$92>>2]|0;
      $94 = (($91) + 4)|0;
      $95 = $94;
      $96 = HEAP32[$95>>2]|0;
      $97 = ((($storemerge273345)) + 3|0);
      $$0259 = $93;$$2271 = 1;$storemerge278 = $97;
     } else {
      label = 24;
     }
    } else {
     label = 24;
    }
    if ((label|0) == 24) {
     label = 0;
     $98 = ($$1270|0)==(0);
     if (!($98)) {
      $$0 = -1;
      break L1;
     }
     if (!($13)) {
      $$1260 = 0;$$1263 = $$0262342;$$3272 = 0;$$4325 = $80;$$pr = $81;
      break;
     }
     $arglist_current = HEAP32[$2>>2]|0;
     $99 = $arglist_current;
     $100 = ((0) + 4|0);
     $expanded4 = $100;
     $expanded = (($expanded4) - 1)|0;
     $101 = (($99) + ($expanded))|0;
     $102 = ((0) + 4|0);
     $expanded8 = $102;
     $expanded7 = (($expanded8) - 1)|0;
     $expanded6 = $expanded7 ^ -1;
     $103 = $101 & $expanded6;
     $104 = $103;
     $105 = HEAP32[$104>>2]|0;
     $arglist_next = ((($104)) + 4|0);
     HEAP32[$2>>2] = $arglist_next;
     $$0259 = $105;$$2271 = 0;$storemerge278 = $80;
    }
    $106 = ($$0259|0)<(0);
    $107 = $$0262342 | 8192;
    $108 = (0 - ($$0259))|0;
    $$$0262 = $106 ? $107 : $$0262342;
    $$$0259 = $106 ? $108 : $$0259;
    $$pre453 = HEAP8[$storemerge278>>0]|0;
    $$1260 = $$$0259;$$1263 = $$$0262;$$3272 = $$2271;$$4325 = $storemerge278;$$pr = $$pre453;
   } else {
    $109 = $78 << 24 >> 24;
    $isdigittmp4$i = (($109) + -48)|0;
    $isdigit5$i = ($isdigittmp4$i>>>0)<(10);
    if ($isdigit5$i) {
     $$06$i = 0;$113 = $storemerge273345;$isdigittmp7$i = $isdigittmp4$i;
     while(1) {
      $110 = ($$06$i*10)|0;
      $111 = (($110) + ($isdigittmp7$i))|0;
      $112 = ((($113)) + 1|0);
      $114 = HEAP8[$112>>0]|0;
      $115 = $114 << 24 >> 24;
      $isdigittmp$i = (($115) + -48)|0;
      $isdigit$i = ($isdigittmp$i>>>0)<(10);
      if ($isdigit$i) {
       $$06$i = $111;$113 = $112;$isdigittmp7$i = $isdigittmp$i;
      } else {
       break;
      }
     }
     $116 = ($111|0)<(0);
     if ($116) {
      $$0 = -1;
      break L1;
     } else {
      $$1260 = $111;$$1263 = $$0262342;$$3272 = $$1270;$$4325 = $112;$$pr = $114;
     }
    } else {
     $$1260 = 0;$$1263 = $$0262342;$$3272 = $$1270;$$4325 = $storemerge273345;$$pr = $78;
    }
   }
  } while(0);
  $117 = ($$pr<<24>>24)==(46);
  L45: do {
   if ($117) {
    $118 = ((($$4325)) + 1|0);
    $119 = HEAP8[$118>>0]|0;
    $120 = ($119<<24>>24)==(42);
    if (!($120)) {
     $147 = $119 << 24 >> 24;
     $isdigittmp4$i287 = (($147) + -48)|0;
     $isdigit5$i288 = ($isdigittmp4$i287>>>0)<(10);
     if ($isdigit5$i288) {
      $$06$i290 = 0;$151 = $118;$isdigittmp7$i289 = $isdigittmp4$i287;
     } else {
      $$0254 = 0;$$6 = $118;
      break;
     }
     while(1) {
      $148 = ($$06$i290*10)|0;
      $149 = (($148) + ($isdigittmp7$i289))|0;
      $150 = ((($151)) + 1|0);
      $152 = HEAP8[$150>>0]|0;
      $153 = $152 << 24 >> 24;
      $isdigittmp$i291 = (($153) + -48)|0;
      $isdigit$i292 = ($isdigittmp$i291>>>0)<(10);
      if ($isdigit$i292) {
       $$06$i290 = $149;$151 = $150;$isdigittmp7$i289 = $isdigittmp$i291;
      } else {
       $$0254 = $149;$$6 = $150;
       break L45;
      }
     }
    }
    $121 = ((($$4325)) + 2|0);
    $122 = HEAP8[$121>>0]|0;
    $123 = $122 << 24 >> 24;
    $isdigittmp274 = (($123) + -48)|0;
    $isdigit275 = ($isdigittmp274>>>0)<(10);
    if ($isdigit275) {
     $124 = ((($$4325)) + 3|0);
     $125 = HEAP8[$124>>0]|0;
     $126 = ($125<<24>>24)==(36);
     if ($126) {
      $127 = (($4) + ($isdigittmp274<<2)|0);
      HEAP32[$127>>2] = 10;
      $128 = HEAP8[$121>>0]|0;
      $129 = $128 << 24 >> 24;
      $130 = (($129) + -48)|0;
      $131 = (($3) + ($130<<3)|0);
      $132 = $131;
      $133 = $132;
      $134 = HEAP32[$133>>2]|0;
      $135 = (($132) + 4)|0;
      $136 = $135;
      $137 = HEAP32[$136>>2]|0;
      $138 = ((($$4325)) + 4|0);
      $$0254 = $134;$$6 = $138;
      break;
     }
    }
    $139 = ($$3272|0)==(0);
    if (!($139)) {
     $$0 = -1;
     break L1;
    }
    if ($13) {
     $arglist_current2 = HEAP32[$2>>2]|0;
     $140 = $arglist_current2;
     $141 = ((0) + 4|0);
     $expanded11 = $141;
     $expanded10 = (($expanded11) - 1)|0;
     $142 = (($140) + ($expanded10))|0;
     $143 = ((0) + 4|0);
     $expanded15 = $143;
     $expanded14 = (($expanded15) - 1)|0;
     $expanded13 = $expanded14 ^ -1;
     $144 = $142 & $expanded13;
     $145 = $144;
     $146 = HEAP32[$145>>2]|0;
     $arglist_next3 = ((($145)) + 4|0);
     HEAP32[$2>>2] = $arglist_next3;
     $$0254 = $146;$$6 = $121;
    } else {
     $$0254 = 0;$$6 = $121;
    }
   } else {
    $$0254 = -1;$$6 = $$4325;
   }
  } while(0);
  $$0252 = 0;$$7 = $$6;
  while(1) {
   $154 = HEAP8[$$7>>0]|0;
   $155 = $154 << 24 >> 24;
   $156 = (($155) + -65)|0;
   $157 = ($156>>>0)>(57);
   if ($157) {
    $$0 = -1;
    break L1;
   }
   $158 = ((($$7)) + 1|0);
   $159 = ((7413 + (($$0252*58)|0)|0) + ($156)|0);
   $160 = HEAP8[$159>>0]|0;
   $161 = $160&255;
   $162 = (($161) + -1)|0;
   $163 = ($162>>>0)<(8);
   if ($163) {
    $$0252 = $161;$$7 = $158;
   } else {
    break;
   }
  }
  $164 = ($160<<24>>24)==(0);
  if ($164) {
   $$0 = -1;
   break;
  }
  $165 = ($160<<24>>24)==(19);
  $166 = ($$0253|0)>(-1);
  do {
   if ($165) {
    if ($166) {
     $$0 = -1;
     break L1;
    } else {
     label = 51;
    }
   } else {
    if ($166) {
     $167 = (($4) + ($$0253<<2)|0);
     HEAP32[$167>>2] = $161;
     $168 = (($3) + ($$0253<<3)|0);
     $169 = $168;
     $170 = $169;
     $171 = HEAP32[$170>>2]|0;
     $172 = (($169) + 4)|0;
     $173 = $172;
     $174 = HEAP32[$173>>2]|0;
     $175 = $9;
     $176 = $175;
     HEAP32[$176>>2] = $171;
     $177 = (($175) + 4)|0;
     $178 = $177;
     HEAP32[$178>>2] = $174;
     label = 51;
     break;
    }
    if (!($13)) {
     $$0 = 0;
     break L1;
    }
    _pop_arg_602($9,$161,$2);
   }
  } while(0);
  if ((label|0) == 51) {
   label = 0;
   if (!($13)) {
    $$0243 = 0;$$0247 = $$1248;$$0269 = $$3272;$$0321 = $158;
    continue;
   }
  }
  $179 = HEAP8[$$7>>0]|0;
  $180 = $179 << 24 >> 24;
  $181 = ($$0252|0)!=(0);
  $182 = $180 & 15;
  $183 = ($182|0)==(3);
  $or$cond280 = $181 & $183;
  $184 = $180 & -33;
  $$0235 = $or$cond280 ? $184 : $180;
  $185 = $$1263 & 8192;
  $186 = ($185|0)==(0);
  $187 = $$1263 & -65537;
  $$1263$ = $186 ? $$1263 : $187;
  L74: do {
   switch ($$0235|0) {
   case 110:  {
    $trunc = $$0252&255;
    switch ($trunc<<24>>24) {
    case 0:  {
     $194 = HEAP32[$9>>2]|0;
     HEAP32[$194>>2] = $$1248;
     $$0243 = 0;$$0247 = $$1248;$$0269 = $$3272;$$0321 = $158;
     continue L1;
     break;
    }
    case 1:  {
     $195 = HEAP32[$9>>2]|0;
     HEAP32[$195>>2] = $$1248;
     $$0243 = 0;$$0247 = $$1248;$$0269 = $$3272;$$0321 = $158;
     continue L1;
     break;
    }
    case 2:  {
     $196 = ($$1248|0)<(0);
     $197 = $196 << 31 >> 31;
     $198 = HEAP32[$9>>2]|0;
     $199 = $198;
     $200 = $199;
     HEAP32[$200>>2] = $$1248;
     $201 = (($199) + 4)|0;
     $202 = $201;
     HEAP32[$202>>2] = $197;
     $$0243 = 0;$$0247 = $$1248;$$0269 = $$3272;$$0321 = $158;
     continue L1;
     break;
    }
    case 3:  {
     $203 = $$1248&65535;
     $204 = HEAP32[$9>>2]|0;
     HEAP16[$204>>1] = $203;
     $$0243 = 0;$$0247 = $$1248;$$0269 = $$3272;$$0321 = $158;
     continue L1;
     break;
    }
    case 4:  {
     $205 = $$1248&255;
     $206 = HEAP32[$9>>2]|0;
     HEAP8[$206>>0] = $205;
     $$0243 = 0;$$0247 = $$1248;$$0269 = $$3272;$$0321 = $158;
     continue L1;
     break;
    }
    case 6:  {
     $207 = HEAP32[$9>>2]|0;
     HEAP32[$207>>2] = $$1248;
     $$0243 = 0;$$0247 = $$1248;$$0269 = $$3272;$$0321 = $158;
     continue L1;
     break;
    }
    case 7:  {
     $208 = ($$1248|0)<(0);
     $209 = $208 << 31 >> 31;
     $210 = HEAP32[$9>>2]|0;
     $211 = $210;
     $212 = $211;
     HEAP32[$212>>2] = $$1248;
     $213 = (($211) + 4)|0;
     $214 = $213;
     HEAP32[$214>>2] = $209;
     $$0243 = 0;$$0247 = $$1248;$$0269 = $$3272;$$0321 = $158;
     continue L1;
     break;
    }
    default: {
     $$0243 = 0;$$0247 = $$1248;$$0269 = $$3272;$$0321 = $158;
     continue L1;
    }
    }
    break;
   }
   case 112:  {
    $215 = ($$0254>>>0)>(8);
    $216 = $215 ? $$0254 : 8;
    $217 = $$1263$ | 8;
    $$1236 = 120;$$1255 = $216;$$3265 = $217;
    label = 63;
    break;
   }
   case 88: case 120:  {
    $$1236 = $$0235;$$1255 = $$0254;$$3265 = $$1263$;
    label = 63;
    break;
   }
   case 111:  {
    $257 = $9;
    $258 = $257;
    $259 = HEAP32[$258>>2]|0;
    $260 = (($257) + 4)|0;
    $261 = $260;
    $262 = HEAP32[$261>>2]|0;
    $263 = ($259|0)==(0);
    $264 = ($262|0)==(0);
    $265 = $263 & $264;
    if ($265) {
     $$0$lcssa$i300 = $14;
    } else {
     $$06$i298 = $14;$267 = $259;$271 = $262;
     while(1) {
      $266 = $267 & 7;
      $268 = $266 | 48;
      $269 = $268&255;
      $270 = ((($$06$i298)) + -1|0);
      HEAP8[$270>>0] = $269;
      $272 = (_bitshift64Lshr(($267|0),($271|0),3)|0);
      $273 = tempRet0;
      $274 = ($272|0)==(0);
      $275 = ($273|0)==(0);
      $276 = $274 & $275;
      if ($276) {
       $$0$lcssa$i300 = $270;
       break;
      } else {
       $$06$i298 = $270;$267 = $272;$271 = $273;
      }
     }
    }
    $277 = $$1263$ & 8;
    $278 = ($277|0)==(0);
    if ($278) {
     $$0228 = $$0$lcssa$i300;$$1233 = 0;$$1238 = 7893;$$2256 = $$0254;$$4266 = $$1263$;
     label = 76;
    } else {
     $279 = $$0$lcssa$i300;
     $280 = (($15) - ($279))|0;
     $281 = ($$0254|0)>($280|0);
     $282 = (($280) + 1)|0;
     $$0254$ = $281 ? $$0254 : $282;
     $$0228 = $$0$lcssa$i300;$$1233 = 0;$$1238 = 7893;$$2256 = $$0254$;$$4266 = $$1263$;
     label = 76;
    }
    break;
   }
   case 105: case 100:  {
    $283 = $9;
    $284 = $283;
    $285 = HEAP32[$284>>2]|0;
    $286 = (($283) + 4)|0;
    $287 = $286;
    $288 = HEAP32[$287>>2]|0;
    $289 = ($288|0)<(0);
    if ($289) {
     $290 = (_i64Subtract(0,0,($285|0),($288|0))|0);
     $291 = tempRet0;
     $292 = $9;
     $293 = $292;
     HEAP32[$293>>2] = $290;
     $294 = (($292) + 4)|0;
     $295 = $294;
     HEAP32[$295>>2] = $291;
     $$0232 = 1;$$0237 = 7893;$300 = $290;$301 = $291;
     label = 75;
     break L74;
    }
    $296 = $$1263$ & 2048;
    $297 = ($296|0)==(0);
    if ($297) {
     $298 = $$1263$ & 1;
     $299 = ($298|0)==(0);
     $$ = $299 ? 7893 : (7895);
     $$0232 = $298;$$0237 = $$;$300 = $285;$301 = $288;
     label = 75;
    } else {
     $$0232 = 1;$$0237 = (7894);$300 = $285;$301 = $288;
     label = 75;
    }
    break;
   }
   case 117:  {
    $188 = $9;
    $189 = $188;
    $190 = HEAP32[$189>>2]|0;
    $191 = (($188) + 4)|0;
    $192 = $191;
    $193 = HEAP32[$192>>2]|0;
    $$0232 = 0;$$0237 = 7893;$300 = $190;$301 = $193;
    label = 75;
    break;
   }
   case 99:  {
    $321 = $9;
    $322 = $321;
    $323 = HEAP32[$322>>2]|0;
    $324 = (($321) + 4)|0;
    $325 = $324;
    $326 = HEAP32[$325>>2]|0;
    $327 = $323&255;
    HEAP8[$16>>0] = $327;
    $$2 = $16;$$2234 = 0;$$2239 = 7893;$$2251 = $14;$$5 = 1;$$6268 = $187;
    break;
   }
   case 109:  {
    $328 = (___errno_location()|0);
    $329 = HEAP32[$328>>2]|0;
    $330 = (_strerror($329)|0);
    $$1 = $330;
    label = 81;
    break;
   }
   case 115:  {
    $331 = HEAP32[$9>>2]|0;
    $332 = ($331|0)!=(0|0);
    $333 = $332 ? $331 : 7903;
    $$1 = $333;
    label = 81;
    break;
   }
   case 67:  {
    $340 = $9;
    $341 = $340;
    $342 = HEAP32[$341>>2]|0;
    $343 = (($340) + 4)|0;
    $344 = $343;
    $345 = HEAP32[$344>>2]|0;
    HEAP32[$11>>2] = $342;
    HEAP32[$17>>2] = 0;
    HEAP32[$9>>2] = $11;
    $$4258458 = -1;$809 = $11;
    label = 85;
    break;
   }
   case 83:  {
    $$pre454 = HEAP32[$9>>2]|0;
    $346 = ($$0254|0)==(0);
    if ($346) {
     _pad($0,32,$$1260,0,$$1263$);
     $$0240$lcssa460 = 0;
     label = 96;
    } else {
     $$4258458 = $$0254;$809 = $$pre454;
     label = 85;
    }
    break;
   }
   case 65: case 71: case 70: case 69: case 97: case 103: case 102: case 101:  {
    $371 = +HEAPF64[$9>>3];
    HEAP32[$6>>2] = 0;
    HEAPF64[tempDoublePtr>>3] = $371;$372 = HEAP32[tempDoublePtr>>2]|0;
    $373 = HEAP32[tempDoublePtr+4>>2]|0;
    $374 = ($373|0)<(0);
    if ($374) {
     $375 = -$371;
     $$0471$i = $375;$$0520$i = 1;$$0521$i = 7910;
    } else {
     $376 = $$1263$ & 2048;
     $377 = ($376|0)==(0);
     $378 = $$1263$ & 1;
     if ($377) {
      $379 = ($378|0)==(0);
      $$$i = $379 ? (7911) : (7916);
      $$0471$i = $371;$$0520$i = $378;$$0521$i = $$$i;
     } else {
      $$0471$i = $371;$$0520$i = 1;$$0521$i = (7913);
     }
    }
    HEAPF64[tempDoublePtr>>3] = $$0471$i;$380 = HEAP32[tempDoublePtr>>2]|0;
    $381 = HEAP32[tempDoublePtr+4>>2]|0;
    $382 = $381 & 2146435072;
    $383 = ($382>>>0)<(2146435072);
    $384 = (0)<(0);
    $385 = ($382|0)==(2146435072);
    $386 = $385 & $384;
    $387 = $383 | $386;
    do {
     if ($387) {
      $403 = (+_frexpl($$0471$i,$6));
      $404 = $403 * 2.0;
      $405 = $404 != 0.0;
      if ($405) {
       $406 = HEAP32[$6>>2]|0;
       $407 = (($406) + -1)|0;
       HEAP32[$6>>2] = $407;
      }
      $408 = $$0235 | 32;
      $409 = ($408|0)==(97);
      if ($409) {
       $410 = $$0235 & 32;
       $411 = ($410|0)==(0);
       $412 = ((($$0521$i)) + 9|0);
       $$0521$$i = $411 ? $$0521$i : $412;
       $413 = $$0520$i | 2;
       $414 = ($$0254>>>0)>(11);
       $415 = (12 - ($$0254))|0;
       $416 = ($415|0)==(0);
       $417 = $414 | $416;
       do {
        if ($417) {
         $$1472$i = $404;
        } else {
         $$0509591$i = 8.0;$$1508592$i = $415;
         while(1) {
          $418 = (($$1508592$i) + -1)|0;
          $419 = $$0509591$i * 16.0;
          $420 = ($418|0)==(0);
          if ($420) {
           break;
          } else {
           $$0509591$i = $419;$$1508592$i = $418;
          }
         }
         $421 = HEAP8[$$0521$$i>>0]|0;
         $422 = ($421<<24>>24)==(45);
         if ($422) {
          $423 = -$404;
          $424 = $423 - $419;
          $425 = $419 + $424;
          $426 = -$425;
          $$1472$i = $426;
          break;
         } else {
          $427 = $404 + $419;
          $428 = $427 - $419;
          $$1472$i = $428;
          break;
         }
        }
       } while(0);
       $429 = HEAP32[$6>>2]|0;
       $430 = ($429|0)<(0);
       $431 = (0 - ($429))|0;
       $432 = $430 ? $431 : $429;
       $433 = ($432|0)<(0);
       $434 = $433 << 31 >> 31;
       $435 = (_fmt_u($432,$434,$20)|0);
       $436 = ($435|0)==($20|0);
       if ($436) {
        HEAP8[$21>>0] = 48;
        $$0511$i = $21;
       } else {
        $$0511$i = $435;
       }
       $437 = $429 >> 31;
       $438 = $437 & 2;
       $439 = (($438) + 43)|0;
       $440 = $439&255;
       $441 = ((($$0511$i)) + -1|0);
       HEAP8[$441>>0] = $440;
       $442 = (($$0235) + 15)|0;
       $443 = $442&255;
       $444 = ((($$0511$i)) + -2|0);
       HEAP8[$444>>0] = $443;
       $notrhs$i = ($$0254|0)<(1);
       $445 = $$1263$ & 8;
       $446 = ($445|0)==(0);
       $$0523$i = $7;$$2473$i = $$1472$i;
       while(1) {
        $447 = (~~(($$2473$i)));
        $448 = (7877 + ($447)|0);
        $449 = HEAP8[$448>>0]|0;
        $450 = $449&255;
        $451 = $450 | $410;
        $452 = $451&255;
        $453 = ((($$0523$i)) + 1|0);
        HEAP8[$$0523$i>>0] = $452;
        $454 = (+($447|0));
        $455 = $$2473$i - $454;
        $456 = $455 * 16.0;
        $457 = $453;
        $458 = (($457) - ($18))|0;
        $459 = ($458|0)==(1);
        do {
         if ($459) {
          $notlhs$i = $456 == 0.0;
          $or$cond3$not$i = $notrhs$i & $notlhs$i;
          $or$cond$i = $446 & $or$cond3$not$i;
          if ($or$cond$i) {
           $$1524$i = $453;
           break;
          }
          $460 = ((($$0523$i)) + 2|0);
          HEAP8[$453>>0] = 46;
          $$1524$i = $460;
         } else {
          $$1524$i = $453;
         }
        } while(0);
        $461 = $456 != 0.0;
        if ($461) {
         $$0523$i = $$1524$i;$$2473$i = $456;
        } else {
         break;
        }
       }
       $462 = ($$0254|0)!=(0);
       $$pre699$i = $$1524$i;
       $463 = (($24) + ($$pre699$i))|0;
       $464 = ($463|0)<($$0254|0);
       $or$cond412 = $462 & $464;
       $465 = $444;
       $466 = (($25) + ($$0254))|0;
       $467 = (($466) - ($465))|0;
       $468 = (($23) - ($465))|0;
       $469 = (($468) + ($$pre699$i))|0;
       $$0525$i = $or$cond412 ? $467 : $469;
       $470 = (($$0525$i) + ($413))|0;
       _pad($0,32,$$1260,$470,$$1263$);
       $471 = HEAP32[$0>>2]|0;
       $472 = $471 & 32;
       $473 = ($472|0)==(0);
       if ($473) {
        (___fwritex($$0521$$i,$413,$0)|0);
       }
       $474 = $$1263$ ^ 65536;
       _pad($0,48,$$1260,$470,$474);
       $475 = (($$pre699$i) - ($18))|0;
       $476 = HEAP32[$0>>2]|0;
       $477 = $476 & 32;
       $478 = ($477|0)==(0);
       if ($478) {
        (___fwritex($7,$475,$0)|0);
       }
       $479 = (($22) - ($465))|0;
       $sum = (($475) + ($479))|0;
       $480 = (($$0525$i) - ($sum))|0;
       _pad($0,48,$480,0,0);
       $481 = HEAP32[$0>>2]|0;
       $482 = $481 & 32;
       $483 = ($482|0)==(0);
       if ($483) {
        (___fwritex($444,$479,$0)|0);
       }
       $484 = $$1263$ ^ 8192;
       _pad($0,32,$$1260,$470,$484);
       $485 = ($470|0)<($$1260|0);
       $$536$i = $485 ? $$1260 : $470;
       $$0470$i = $$536$i;
       break;
      }
      $486 = ($$0254|0)<(0);
      $$537$i = $486 ? 6 : $$0254;
      if ($405) {
       $487 = $404 * 268435456.0;
       $488 = HEAP32[$6>>2]|0;
       $489 = (($488) + -28)|0;
       HEAP32[$6>>2] = $489;
       $$3$i = $487;$$pr$i = $489;
      } else {
       $$pre696$i = HEAP32[$6>>2]|0;
       $$3$i = $404;$$pr$i = $$pre696$i;
      }
      $490 = ($$pr$i|0)<(0);
      $$553$i = $490 ? $5 : $26;
      $$0498$i = $$553$i;$$4$i = $$3$i;
      while(1) {
       $491 = (~~(($$4$i))>>>0);
       HEAP32[$$0498$i>>2] = $491;
       $492 = ((($$0498$i)) + 4|0);
       $493 = (+($491>>>0));
       $494 = $$4$i - $493;
       $495 = $494 * 1.0E+9;
       $496 = $495 != 0.0;
       if ($496) {
        $$0498$i = $492;$$4$i = $495;
       } else {
        break;
       }
      }
      $497 = ($$pr$i|0)>(0);
      if ($497) {
       $$1482670$i = $$553$i;$$1499669$i = $492;$498 = $$pr$i;
       while(1) {
        $499 = ($498|0)>(29);
        $500 = $499 ? 29 : $498;
        $$0488662$i = ((($$1499669$i)) + -4|0);
        $501 = ($$0488662$i>>>0)<($$1482670$i>>>0);
        do {
         if ($501) {
          $$2483$ph$i = $$1482670$i;
         } else {
          $$0488664$i = $$0488662$i;$$0497663$i = 0;
          while(1) {
           $502 = HEAP32[$$0488664$i>>2]|0;
           $503 = (_bitshift64Shl(($502|0),0,($500|0))|0);
           $504 = tempRet0;
           $505 = (_i64Add(($503|0),($504|0),($$0497663$i|0),0)|0);
           $506 = tempRet0;
           $507 = (___uremdi3(($505|0),($506|0),1000000000,0)|0);
           $508 = tempRet0;
           HEAP32[$$0488664$i>>2] = $507;
           $509 = (___udivdi3(($505|0),($506|0),1000000000,0)|0);
           $510 = tempRet0;
           $$0488$i = ((($$0488664$i)) + -4|0);
           $511 = ($$0488$i>>>0)<($$1482670$i>>>0);
           if ($511) {
            break;
           } else {
            $$0488664$i = $$0488$i;$$0497663$i = $509;
           }
          }
          $512 = ($509|0)==(0);
          if ($512) {
           $$2483$ph$i = $$1482670$i;
           break;
          }
          $513 = ((($$1482670$i)) + -4|0);
          HEAP32[$513>>2] = $509;
          $$2483$ph$i = $513;
         }
        } while(0);
        $$2500$i = $$1499669$i;
        while(1) {
         $514 = ($$2500$i>>>0)>($$2483$ph$i>>>0);
         if (!($514)) {
          break;
         }
         $515 = ((($$2500$i)) + -4|0);
         $516 = HEAP32[$515>>2]|0;
         $517 = ($516|0)==(0);
         if ($517) {
          $$2500$i = $515;
         } else {
          break;
         }
        }
        $518 = HEAP32[$6>>2]|0;
        $519 = (($518) - ($500))|0;
        HEAP32[$6>>2] = $519;
        $520 = ($519|0)>(0);
        if ($520) {
         $$1482670$i = $$2483$ph$i;$$1499669$i = $$2500$i;$498 = $519;
        } else {
         $$1482$lcssa$i = $$2483$ph$i;$$1499$lcssa$i = $$2500$i;$$pr570$i = $519;
         break;
        }
       }
      } else {
       $$1482$lcssa$i = $$553$i;$$1499$lcssa$i = $492;$$pr570$i = $$pr$i;
      }
      $521 = ($$pr570$i|0)<(0);
      if ($521) {
       $522 = (($$537$i) + 25)|0;
       $523 = (($522|0) / 9)&-1;
       $524 = (($523) + 1)|0;
       $525 = ($408|0)==(102);
       $$3484657$i = $$1482$lcssa$i;$$3501656$i = $$1499$lcssa$i;$527 = $$pr570$i;
       while(1) {
        $526 = (0 - ($527))|0;
        $528 = ($526|0)>(9);
        $529 = $528 ? 9 : $526;
        $530 = ($$3484657$i>>>0)<($$3501656$i>>>0);
        do {
         if ($530) {
          $534 = 1 << $529;
          $535 = (($534) + -1)|0;
          $536 = 1000000000 >>> $529;
          $$0487651$i = 0;$$1489650$i = $$3484657$i;
          while(1) {
           $537 = HEAP32[$$1489650$i>>2]|0;
           $538 = $537 & $535;
           $539 = $537 >>> $529;
           $540 = (($539) + ($$0487651$i))|0;
           HEAP32[$$1489650$i>>2] = $540;
           $541 = Math_imul($538, $536)|0;
           $542 = ((($$1489650$i)) + 4|0);
           $543 = ($542>>>0)<($$3501656$i>>>0);
           if ($543) {
            $$0487651$i = $541;$$1489650$i = $542;
           } else {
            break;
           }
          }
          $544 = HEAP32[$$3484657$i>>2]|0;
          $545 = ($544|0)==(0);
          $546 = ((($$3484657$i)) + 4|0);
          $$$3484$i = $545 ? $546 : $$3484657$i;
          $547 = ($541|0)==(0);
          if ($547) {
           $$$3484705$i = $$$3484$i;$$4502$i = $$3501656$i;
           break;
          }
          $548 = ((($$3501656$i)) + 4|0);
          HEAP32[$$3501656$i>>2] = $541;
          $$$3484705$i = $$$3484$i;$$4502$i = $548;
         } else {
          $531 = HEAP32[$$3484657$i>>2]|0;
          $532 = ($531|0)==(0);
          $533 = ((($$3484657$i)) + 4|0);
          $$$3484704$i = $532 ? $533 : $$3484657$i;
          $$$3484705$i = $$$3484704$i;$$4502$i = $$3501656$i;
         }
        } while(0);
        $549 = $525 ? $$553$i : $$$3484705$i;
        $550 = $$4502$i;
        $551 = $549;
        $552 = (($550) - ($551))|0;
        $553 = $552 >> 2;
        $554 = ($553|0)>($524|0);
        $555 = (($549) + ($524<<2)|0);
        $$$4502$i = $554 ? $555 : $$4502$i;
        $556 = HEAP32[$6>>2]|0;
        $557 = (($556) + ($529))|0;
        HEAP32[$6>>2] = $557;
        $558 = ($557|0)<(0);
        if ($558) {
         $$3484657$i = $$$3484705$i;$$3501656$i = $$$4502$i;$527 = $557;
        } else {
         $$3484$lcssa$i = $$$3484705$i;$$3501$lcssa$i = $$$4502$i;
         break;
        }
       }
      } else {
       $$3484$lcssa$i = $$1482$lcssa$i;$$3501$lcssa$i = $$1499$lcssa$i;
      }
      $559 = ($$3484$lcssa$i>>>0)<($$3501$lcssa$i>>>0);
      $560 = $$553$i;
      do {
       if ($559) {
        $561 = $$3484$lcssa$i;
        $562 = (($560) - ($561))|0;
        $563 = $562 >> 2;
        $564 = ($563*9)|0;
        $565 = HEAP32[$$3484$lcssa$i>>2]|0;
        $566 = ($565>>>0)<(10);
        if ($566) {
         $$1515$i = $564;
         break;
        } else {
         $$0514646$i = $564;$$0530645$i = 10;
        }
        while(1) {
         $567 = ($$0530645$i*10)|0;
         $568 = (($$0514646$i) + 1)|0;
         $569 = ($565>>>0)<($567>>>0);
         if ($569) {
          $$1515$i = $568;
          break;
         } else {
          $$0514646$i = $568;$$0530645$i = $567;
         }
        }
       } else {
        $$1515$i = 0;
       }
      } while(0);
      $570 = ($408|0)!=(102);
      $571 = $570 ? $$1515$i : 0;
      $572 = (($$537$i) - ($571))|0;
      $573 = ($408|0)==(103);
      $574 = ($$537$i|0)!=(0);
      $575 = $574 & $573;
      $$neg$i = $575 << 31 >> 31;
      $576 = (($572) + ($$neg$i))|0;
      $577 = $$3501$lcssa$i;
      $578 = (($577) - ($560))|0;
      $579 = $578 >> 2;
      $580 = ($579*9)|0;
      $581 = (($580) + -9)|0;
      $582 = ($576|0)<($581|0);
      if ($582) {
       $583 = ((($$553$i)) + 4|0);
       $584 = (($576) + 9216)|0;
       $585 = (($584|0) / 9)&-1;
       $586 = (($585) + -1024)|0;
       $587 = (($583) + ($586<<2)|0);
       $588 = (($584|0) % 9)&-1;
       $$0527638$i = (($588) + 1)|0;
       $589 = ($$0527638$i|0)<(9);
       if ($589) {
        $$0527640$i = $$0527638$i;$$1531639$i = 10;
        while(1) {
         $590 = ($$1531639$i*10)|0;
         $$0527$i = (($$0527640$i) + 1)|0;
         $exitcond$i = ($$0527$i|0)==(9);
         if ($exitcond$i) {
          $$1531$lcssa$i = $590;
          break;
         } else {
          $$0527640$i = $$0527$i;$$1531639$i = $590;
         }
        }
       } else {
        $$1531$lcssa$i = 10;
       }
       $591 = HEAP32[$587>>2]|0;
       $592 = (($591>>>0) % ($$1531$lcssa$i>>>0))&-1;
       $593 = ($592|0)==(0);
       $594 = ((($587)) + 4|0);
       $595 = ($594|0)==($$3501$lcssa$i|0);
       $or$cond539$i = $595 & $593;
       do {
        if ($or$cond539$i) {
         $$4492$i = $587;$$4518$i = $$1515$i;$$8$i = $$3484$lcssa$i;
        } else {
         $596 = (($591>>>0) / ($$1531$lcssa$i>>>0))&-1;
         $597 = $596 & 1;
         $598 = ($597|0)==(0);
         $$540$i = $598 ? 9007199254740992.0 : 9007199254740994.0;
         $599 = (($$1531$lcssa$i|0) / 2)&-1;
         $600 = ($592>>>0)<($599>>>0);
         if ($600) {
          $$0466$i = 0.5;
         } else {
          $601 = ($592|0)==($599|0);
          $or$cond542$i = $595 & $601;
          $$556$i = $or$cond542$i ? 1.0 : 1.5;
          $$0466$i = $$556$i;
         }
         $602 = ($$0520$i|0)==(0);
         do {
          if ($602) {
           $$1467$i = $$0466$i;$$1469$i = $$540$i;
          } else {
           $603 = HEAP8[$$0521$i>>0]|0;
           $604 = ($603<<24>>24)==(45);
           if (!($604)) {
            $$1467$i = $$0466$i;$$1469$i = $$540$i;
            break;
           }
           $605 = -$$540$i;
           $606 = -$$0466$i;
           $$1467$i = $606;$$1469$i = $605;
          }
         } while(0);
         $607 = (($591) - ($592))|0;
         HEAP32[$587>>2] = $607;
         $608 = $$1469$i + $$1467$i;
         $609 = $608 != $$1469$i;
         if (!($609)) {
          $$4492$i = $587;$$4518$i = $$1515$i;$$8$i = $$3484$lcssa$i;
          break;
         }
         $610 = (($607) + ($$1531$lcssa$i))|0;
         HEAP32[$587>>2] = $610;
         $611 = ($610>>>0)>(999999999);
         if ($611) {
          $$2490631$i = $587;$$5486632$i = $$3484$lcssa$i;
          while(1) {
           $612 = ((($$2490631$i)) + -4|0);
           HEAP32[$$2490631$i>>2] = 0;
           $613 = ($612>>>0)<($$5486632$i>>>0);
           if ($613) {
            $614 = ((($$5486632$i)) + -4|0);
            HEAP32[$614>>2] = 0;
            $$6$i = $614;
           } else {
            $$6$i = $$5486632$i;
           }
           $615 = HEAP32[$612>>2]|0;
           $616 = (($615) + 1)|0;
           HEAP32[$612>>2] = $616;
           $617 = ($616>>>0)>(999999999);
           if ($617) {
            $$2490631$i = $612;$$5486632$i = $$6$i;
           } else {
            $$2490$lcssa$i = $612;$$5486$lcssa$i = $$6$i;
            break;
           }
          }
         } else {
          $$2490$lcssa$i = $587;$$5486$lcssa$i = $$3484$lcssa$i;
         }
         $618 = $$5486$lcssa$i;
         $619 = (($560) - ($618))|0;
         $620 = $619 >> 2;
         $621 = ($620*9)|0;
         $622 = HEAP32[$$5486$lcssa$i>>2]|0;
         $623 = ($622>>>0)<(10);
         if ($623) {
          $$4492$i = $$2490$lcssa$i;$$4518$i = $621;$$8$i = $$5486$lcssa$i;
          break;
         } else {
          $$2516627$i = $621;$$2532626$i = 10;
         }
         while(1) {
          $624 = ($$2532626$i*10)|0;
          $625 = (($$2516627$i) + 1)|0;
          $626 = ($622>>>0)<($624>>>0);
          if ($626) {
           $$4492$i = $$2490$lcssa$i;$$4518$i = $625;$$8$i = $$5486$lcssa$i;
           break;
          } else {
           $$2516627$i = $625;$$2532626$i = $624;
          }
         }
        }
       } while(0);
       $627 = ((($$4492$i)) + 4|0);
       $628 = ($$3501$lcssa$i>>>0)>($627>>>0);
       $$$3501$i = $628 ? $627 : $$3501$lcssa$i;
       $$5519$ph$i = $$4518$i;$$7505$ph$i = $$$3501$i;$$9$ph$i = $$8$i;
      } else {
       $$5519$ph$i = $$1515$i;$$7505$ph$i = $$3501$lcssa$i;$$9$ph$i = $$3484$lcssa$i;
      }
      $629 = (0 - ($$5519$ph$i))|0;
      $$7505$i = $$7505$ph$i;
      while(1) {
       $630 = ($$7505$i>>>0)>($$9$ph$i>>>0);
       if (!($630)) {
        $$lcssa682$i = 0;
        break;
       }
       $631 = ((($$7505$i)) + -4|0);
       $632 = HEAP32[$631>>2]|0;
       $633 = ($632|0)==(0);
       if ($633) {
        $$7505$i = $631;
       } else {
        $$lcssa682$i = 1;
        break;
       }
      }
      do {
       if ($573) {
        $634 = $574&1;
        $635 = $634 ^ 1;
        $$537$$i = (($635) + ($$537$i))|0;
        $636 = ($$537$$i|0)>($$5519$ph$i|0);
        $637 = ($$5519$ph$i|0)>(-5);
        $or$cond6$i = $636 & $637;
        if ($or$cond6$i) {
         $638 = (($$0235) + -1)|0;
         $$neg571$i = (($$537$$i) + -1)|0;
         $639 = (($$neg571$i) - ($$5519$ph$i))|0;
         $$0479$i = $638;$$2476$i = $639;
        } else {
         $640 = (($$0235) + -2)|0;
         $641 = (($$537$$i) + -1)|0;
         $$0479$i = $640;$$2476$i = $641;
        }
        $642 = $$1263$ & 8;
        $643 = ($642|0)==(0);
        if (!($643)) {
         $$1480$i = $$0479$i;$$3477$i = $$2476$i;$$pre$phi703$iZ2D = $642;
         break;
        }
        do {
         if ($$lcssa682$i) {
          $644 = ((($$7505$i)) + -4|0);
          $645 = HEAP32[$644>>2]|0;
          $646 = ($645|0)==(0);
          if ($646) {
           $$2529$i = 9;
           break;
          }
          $647 = (($645>>>0) % 10)&-1;
          $648 = ($647|0)==(0);
          if ($648) {
           $$1528623$i = 0;$$3533622$i = 10;
          } else {
           $$2529$i = 0;
           break;
          }
          while(1) {
           $649 = ($$3533622$i*10)|0;
           $650 = (($$1528623$i) + 1)|0;
           $651 = (($645>>>0) % ($649>>>0))&-1;
           $652 = ($651|0)==(0);
           if ($652) {
            $$1528623$i = $650;$$3533622$i = $649;
           } else {
            $$2529$i = $650;
            break;
           }
          }
         } else {
          $$2529$i = 9;
         }
        } while(0);
        $653 = $$0479$i | 32;
        $654 = ($653|0)==(102);
        $655 = $$7505$i;
        $656 = (($655) - ($560))|0;
        $657 = $656 >> 2;
        $658 = ($657*9)|0;
        $659 = (($658) + -9)|0;
        if ($654) {
         $660 = (($659) - ($$2529$i))|0;
         $661 = ($660|0)<(0);
         $$543$i = $661 ? 0 : $660;
         $662 = ($$2476$i|0)<($$543$i|0);
         $$2476$$544$i = $662 ? $$2476$i : $$543$i;
         $$1480$i = $$0479$i;$$3477$i = $$2476$$544$i;$$pre$phi703$iZ2D = 0;
         break;
        } else {
         $663 = (($659) + ($$5519$ph$i))|0;
         $664 = (($663) - ($$2529$i))|0;
         $665 = ($664|0)<(0);
         $$545$i = $665 ? 0 : $664;
         $666 = ($$2476$i|0)<($$545$i|0);
         $$2476$$546$i = $666 ? $$2476$i : $$545$i;
         $$1480$i = $$0479$i;$$3477$i = $$2476$$546$i;$$pre$phi703$iZ2D = 0;
         break;
        }
       } else {
        $$pre702$i = $$1263$ & 8;
        $$1480$i = $$0235;$$3477$i = $$537$i;$$pre$phi703$iZ2D = $$pre702$i;
       }
      } while(0);
      $667 = $$3477$i | $$pre$phi703$iZ2D;
      $668 = ($667|0)!=(0);
      $669 = $668&1;
      $670 = $$1480$i | 32;
      $671 = ($670|0)==(102);
      if ($671) {
       $672 = ($$5519$ph$i|0)>(0);
       $673 = $672 ? $$5519$ph$i : 0;
       $$2513$i = 0;$$pn$i = $673;
      } else {
       $674 = ($$5519$ph$i|0)<(0);
       $675 = $674 ? $629 : $$5519$ph$i;
       $676 = ($675|0)<(0);
       $677 = $676 << 31 >> 31;
       $678 = (_fmt_u($675,$677,$20)|0);
       $679 = $678;
       $680 = (($22) - ($679))|0;
       $681 = ($680|0)<(2);
       if ($681) {
        $$1512616$i = $678;
        while(1) {
         $682 = ((($$1512616$i)) + -1|0);
         HEAP8[$682>>0] = 48;
         $683 = $682;
         $684 = (($22) - ($683))|0;
         $685 = ($684|0)<(2);
         if ($685) {
          $$1512616$i = $682;
         } else {
          $$1512$lcssa$i = $682;
          break;
         }
        }
       } else {
        $$1512$lcssa$i = $678;
       }
       $686 = $$5519$ph$i >> 31;
       $687 = $686 & 2;
       $688 = (($687) + 43)|0;
       $689 = $688&255;
       $690 = ((($$1512$lcssa$i)) + -1|0);
       HEAP8[$690>>0] = $689;
       $691 = $$1480$i&255;
       $692 = ((($$1512$lcssa$i)) + -2|0);
       HEAP8[$692>>0] = $691;
       $693 = $692;
       $694 = (($22) - ($693))|0;
       $$2513$i = $692;$$pn$i = $694;
      }
      $695 = (($$0520$i) + 1)|0;
      $696 = (($695) + ($$3477$i))|0;
      $$1526$i = (($696) + ($669))|0;
      $697 = (($$1526$i) + ($$pn$i))|0;
      _pad($0,32,$$1260,$697,$$1263$);
      $698 = HEAP32[$0>>2]|0;
      $699 = $698 & 32;
      $700 = ($699|0)==(0);
      if ($700) {
       (___fwritex($$0521$i,$$0520$i,$0)|0);
      }
      $701 = $$1263$ ^ 65536;
      _pad($0,48,$$1260,$697,$701);
      do {
       if ($671) {
        $702 = ($$9$ph$i>>>0)>($$553$i>>>0);
        $$0496$$9$i = $702 ? $$553$i : $$9$ph$i;
        $$5493605$i = $$0496$$9$i;
        while(1) {
         $703 = HEAP32[$$5493605$i>>2]|0;
         $704 = (_fmt_u($703,0,$27)|0);
         $705 = ($$5493605$i|0)==($$0496$$9$i|0);
         do {
          if ($705) {
           $711 = ($704|0)==($27|0);
           if (!($711)) {
            $$1465$i = $704;
            break;
           }
           HEAP8[$29>>0] = 48;
           $$1465$i = $29;
          } else {
           $706 = ($704>>>0)>($7>>>0);
           if (!($706)) {
            $$1465$i = $704;
            break;
           }
           $707 = $704;
           $708 = (($707) - ($18))|0;
           _memset(($7|0),48,($708|0))|0;
           $$0464602$i = $704;
           while(1) {
            $709 = ((($$0464602$i)) + -1|0);
            $710 = ($709>>>0)>($7>>>0);
            if ($710) {
             $$0464602$i = $709;
            } else {
             $$1465$i = $709;
             break;
            }
           }
          }
         } while(0);
         $712 = HEAP32[$0>>2]|0;
         $713 = $712 & 32;
         $714 = ($713|0)==(0);
         if ($714) {
          $715 = $$1465$i;
          $716 = (($28) - ($715))|0;
          (___fwritex($$1465$i,$716,$0)|0);
         }
         $717 = ((($$5493605$i)) + 4|0);
         $718 = ($717>>>0)>($$553$i>>>0);
         if ($718) {
          break;
         } else {
          $$5493605$i = $717;
         }
        }
        $719 = ($667|0)==(0);
        do {
         if (!($719)) {
          $720 = HEAP32[$0>>2]|0;
          $721 = $720 & 32;
          $722 = ($721|0)==(0);
          if (!($722)) {
           break;
          }
          (___fwritex(7945,1,$0)|0);
         }
        } while(0);
        $723 = ($717>>>0)<($$7505$i>>>0);
        $724 = ($$3477$i|0)>(0);
        $725 = $724 & $723;
        if ($725) {
         $$4478599$i = $$3477$i;$$6494598$i = $717;
         while(1) {
          $726 = HEAP32[$$6494598$i>>2]|0;
          $727 = (_fmt_u($726,0,$27)|0);
          $728 = ($727>>>0)>($7>>>0);
          if ($728) {
           $729 = $727;
           $730 = (($729) - ($18))|0;
           _memset(($7|0),48,($730|0))|0;
           $$0463593$i = $727;
           while(1) {
            $731 = ((($$0463593$i)) + -1|0);
            $732 = ($731>>>0)>($7>>>0);
            if ($732) {
             $$0463593$i = $731;
            } else {
             $$0463$lcssa$i = $731;
             break;
            }
           }
          } else {
           $$0463$lcssa$i = $727;
          }
          $733 = HEAP32[$0>>2]|0;
          $734 = $733 & 32;
          $735 = ($734|0)==(0);
          if ($735) {
           $736 = ($$4478599$i|0)>(9);
           $737 = $736 ? 9 : $$4478599$i;
           (___fwritex($$0463$lcssa$i,$737,$0)|0);
          }
          $738 = ((($$6494598$i)) + 4|0);
          $739 = (($$4478599$i) + -9)|0;
          $740 = ($738>>>0)<($$7505$i>>>0);
          $741 = ($$4478599$i|0)>(9);
          $742 = $741 & $740;
          if ($742) {
           $$4478599$i = $739;$$6494598$i = $738;
          } else {
           $$4478$lcssa$i = $739;
           break;
          }
         }
        } else {
         $$4478$lcssa$i = $$3477$i;
        }
        $743 = (($$4478$lcssa$i) + 9)|0;
        _pad($0,48,$743,9,0);
       } else {
        $744 = ((($$9$ph$i)) + 4|0);
        $$7505$$i = $$lcssa682$i ? $$7505$i : $744;
        $745 = ($$3477$i|0)>(-1);
        if ($745) {
         $746 = ($$pre$phi703$iZ2D|0)==(0);
         $$5610$i = $$3477$i;$$7495609$i = $$9$ph$i;
         while(1) {
          $747 = HEAP32[$$7495609$i>>2]|0;
          $748 = (_fmt_u($747,0,$27)|0);
          $749 = ($748|0)==($27|0);
          if ($749) {
           HEAP8[$29>>0] = 48;
           $$0$i = $29;
          } else {
           $$0$i = $748;
          }
          $750 = ($$7495609$i|0)==($$9$ph$i|0);
          do {
           if ($750) {
            $754 = ((($$0$i)) + 1|0);
            $755 = HEAP32[$0>>2]|0;
            $756 = $755 & 32;
            $757 = ($756|0)==(0);
            if ($757) {
             (___fwritex($$0$i,1,$0)|0);
            }
            $758 = ($$5610$i|0)<(1);
            $or$cond551$i = $746 & $758;
            if ($or$cond551$i) {
             $$2$i = $754;
             break;
            }
            $759 = HEAP32[$0>>2]|0;
            $760 = $759 & 32;
            $761 = ($760|0)==(0);
            if (!($761)) {
             $$2$i = $754;
             break;
            }
            (___fwritex(7945,1,$0)|0);
            $$2$i = $754;
           } else {
            $751 = ($$0$i>>>0)>($7>>>0);
            if (!($751)) {
             $$2$i = $$0$i;
             break;
            }
            $scevgep693$i = (($$0$i) + ($19)|0);
            $scevgep693694$i = $scevgep693$i;
            _memset(($7|0),48,($scevgep693694$i|0))|0;
            $$1606$i = $$0$i;
            while(1) {
             $752 = ((($$1606$i)) + -1|0);
             $753 = ($752>>>0)>($7>>>0);
             if ($753) {
              $$1606$i = $752;
             } else {
              $$2$i = $752;
              break;
             }
            }
           }
          } while(0);
          $762 = $$2$i;
          $763 = (($28) - ($762))|0;
          $764 = HEAP32[$0>>2]|0;
          $765 = $764 & 32;
          $766 = ($765|0)==(0);
          if ($766) {
           $767 = ($$5610$i|0)>($763|0);
           $768 = $767 ? $763 : $$5610$i;
           (___fwritex($$2$i,$768,$0)|0);
          }
          $769 = (($$5610$i) - ($763))|0;
          $770 = ((($$7495609$i)) + 4|0);
          $771 = ($770>>>0)<($$7505$$i>>>0);
          $772 = ($769|0)>(-1);
          $773 = $771 & $772;
          if ($773) {
           $$5610$i = $769;$$7495609$i = $770;
          } else {
           $$5$lcssa$i = $769;
           break;
          }
         }
        } else {
         $$5$lcssa$i = $$3477$i;
        }
        $774 = (($$5$lcssa$i) + 18)|0;
        _pad($0,48,$774,18,0);
        $775 = HEAP32[$0>>2]|0;
        $776 = $775 & 32;
        $777 = ($776|0)==(0);
        if (!($777)) {
         break;
        }
        $778 = $$2513$i;
        $779 = (($22) - ($778))|0;
        (___fwritex($$2513$i,$779,$0)|0);
       }
      } while(0);
      $780 = $$1263$ ^ 8192;
      _pad($0,32,$$1260,$697,$780);
      $781 = ($697|0)<($$1260|0);
      $$552$i = $781 ? $$1260 : $697;
      $$0470$i = $$552$i;
     } else {
      $388 = $$0235 & 32;
      $389 = ($388|0)!=(0);
      $390 = $389 ? 7929 : 7933;
      $391 = ($$0471$i != $$0471$i) | (0.0 != 0.0);
      $392 = $389 ? 7937 : 7941;
      $$0510$i = $391 ? $392 : $390;
      $393 = (($$0520$i) + 3)|0;
      _pad($0,32,$$1260,$393,$187);
      $394 = HEAP32[$0>>2]|0;
      $395 = $394 & 32;
      $396 = ($395|0)==(0);
      if ($396) {
       (___fwritex($$0521$i,$$0520$i,$0)|0);
       $$pre$i = HEAP32[$0>>2]|0;
       $398 = $$pre$i;
      } else {
       $398 = $394;
      }
      $397 = $398 & 32;
      $399 = ($397|0)==(0);
      if ($399) {
       (___fwritex($$0510$i,3,$0)|0);
      }
      $400 = $$1263$ ^ 8192;
      _pad($0,32,$$1260,$393,$400);
      $401 = ($393|0)<($$1260|0);
      $402 = $401 ? $$1260 : $393;
      $$0470$i = $402;
     }
    } while(0);
    $$0243 = $$0470$i;$$0247 = $$1248;$$0269 = $$3272;$$0321 = $158;
    continue L1;
    break;
   }
   default: {
    $$2 = $$0321;$$2234 = 0;$$2239 = 7893;$$2251 = $14;$$5 = $$0254;$$6268 = $$1263$;
   }
   }
  } while(0);
  L310: do {
   if ((label|0) == 63) {
    label = 0;
    $218 = $9;
    $219 = $218;
    $220 = HEAP32[$219>>2]|0;
    $221 = (($218) + 4)|0;
    $222 = $221;
    $223 = HEAP32[$222>>2]|0;
    $224 = $$1236 & 32;
    $225 = ($220|0)==(0);
    $226 = ($223|0)==(0);
    $227 = $225 & $226;
    if ($227) {
     $$05$lcssa$i = $14;$248 = 0;$250 = 0;
    } else {
     $$056$i = $14;$229 = $220;$236 = $223;
     while(1) {
      $228 = $229 & 15;
      $230 = (7877 + ($228)|0);
      $231 = HEAP8[$230>>0]|0;
      $232 = $231&255;
      $233 = $232 | $224;
      $234 = $233&255;
      $235 = ((($$056$i)) + -1|0);
      HEAP8[$235>>0] = $234;
      $237 = (_bitshift64Lshr(($229|0),($236|0),4)|0);
      $238 = tempRet0;
      $239 = ($237|0)==(0);
      $240 = ($238|0)==(0);
      $241 = $239 & $240;
      if ($241) {
       break;
      } else {
       $$056$i = $235;$229 = $237;$236 = $238;
      }
     }
     $242 = $9;
     $243 = $242;
     $244 = HEAP32[$243>>2]|0;
     $245 = (($242) + 4)|0;
     $246 = $245;
     $247 = HEAP32[$246>>2]|0;
     $$05$lcssa$i = $235;$248 = $244;$250 = $247;
    }
    $249 = ($248|0)==(0);
    $251 = ($250|0)==(0);
    $252 = $249 & $251;
    $253 = $$3265 & 8;
    $254 = ($253|0)==(0);
    $or$cond282 = $254 | $252;
    $255 = $$1236 >> 4;
    $256 = (7893 + ($255)|0);
    $$332 = $or$cond282 ? 7893 : $256;
    $$333 = $or$cond282 ? 0 : 2;
    $$0228 = $$05$lcssa$i;$$1233 = $$333;$$1238 = $$332;$$2256 = $$1255;$$4266 = $$3265;
    label = 76;
   }
   else if ((label|0) == 75) {
    label = 0;
    $302 = (_fmt_u($300,$301,$14)|0);
    $$0228 = $302;$$1233 = $$0232;$$1238 = $$0237;$$2256 = $$0254;$$4266 = $$1263$;
    label = 76;
   }
   else if ((label|0) == 81) {
    label = 0;
    $334 = (_memchr($$1,0,$$0254)|0);
    $335 = ($334|0)==(0|0);
    $336 = $334;
    $337 = $$1;
    $338 = (($336) - ($337))|0;
    $339 = (($$1) + ($$0254)|0);
    $$3257 = $335 ? $$0254 : $338;
    $$1250 = $335 ? $339 : $334;
    $$2 = $$1;$$2234 = 0;$$2239 = 7893;$$2251 = $$1250;$$5 = $$3257;$$6268 = $187;
   }
   else if ((label|0) == 85) {
    label = 0;
    $$0229396 = $809;$$0240395 = 0;$$1244394 = 0;
    while(1) {
     $347 = HEAP32[$$0229396>>2]|0;
     $348 = ($347|0)==(0);
     if ($348) {
      $$0240$lcssa = $$0240395;$$2245 = $$1244394;
      break;
     }
     $349 = (_wctomb($12,$347)|0);
     $350 = ($349|0)<(0);
     $351 = (($$4258458) - ($$0240395))|0;
     $352 = ($349>>>0)>($351>>>0);
     $or$cond285 = $350 | $352;
     if ($or$cond285) {
      $$0240$lcssa = $$0240395;$$2245 = $349;
      break;
     }
     $353 = ((($$0229396)) + 4|0);
     $354 = (($349) + ($$0240395))|0;
     $355 = ($$4258458>>>0)>($354>>>0);
     if ($355) {
      $$0229396 = $353;$$0240395 = $354;$$1244394 = $349;
     } else {
      $$0240$lcssa = $354;$$2245 = $349;
      break;
     }
    }
    $356 = ($$2245|0)<(0);
    if ($356) {
     $$0 = -1;
     break L1;
    }
    _pad($0,32,$$1260,$$0240$lcssa,$$1263$);
    $357 = ($$0240$lcssa|0)==(0);
    if ($357) {
     $$0240$lcssa460 = 0;
     label = 96;
    } else {
     $$1230407 = $809;$$1241406 = 0;
     while(1) {
      $358 = HEAP32[$$1230407>>2]|0;
      $359 = ($358|0)==(0);
      if ($359) {
       $$0240$lcssa460 = $$0240$lcssa;
       label = 96;
       break L310;
      }
      $360 = ((($$1230407)) + 4|0);
      $361 = (_wctomb($12,$358)|0);
      $362 = (($361) + ($$1241406))|0;
      $363 = ($362|0)>($$0240$lcssa|0);
      if ($363) {
       $$0240$lcssa460 = $$0240$lcssa;
       label = 96;
       break L310;
      }
      $364 = HEAP32[$0>>2]|0;
      $365 = $364 & 32;
      $366 = ($365|0)==(0);
      if ($366) {
       (___fwritex($12,$361,$0)|0);
      }
      $367 = ($362>>>0)<($$0240$lcssa>>>0);
      if ($367) {
       $$1230407 = $360;$$1241406 = $362;
      } else {
       $$0240$lcssa460 = $$0240$lcssa;
       label = 96;
       break;
      }
     }
    }
   }
  } while(0);
  if ((label|0) == 96) {
   label = 0;
   $368 = $$1263$ ^ 8192;
   _pad($0,32,$$1260,$$0240$lcssa460,$368);
   $369 = ($$1260|0)>($$0240$lcssa460|0);
   $370 = $369 ? $$1260 : $$0240$lcssa460;
   $$0243 = $370;$$0247 = $$1248;$$0269 = $$3272;$$0321 = $158;
   continue;
  }
  if ((label|0) == 76) {
   label = 0;
   $303 = ($$2256|0)>(-1);
   $304 = $$4266 & -65537;
   $$$4266 = $303 ? $304 : $$4266;
   $305 = $9;
   $306 = $305;
   $307 = HEAP32[$306>>2]|0;
   $308 = (($305) + 4)|0;
   $309 = $308;
   $310 = HEAP32[$309>>2]|0;
   $311 = ($307|0)!=(0);
   $312 = ($310|0)!=(0);
   $313 = $311 | $312;
   $314 = ($$2256|0)!=(0);
   $or$cond = $314 | $313;
   if ($or$cond) {
    $315 = $$0228;
    $316 = (($15) - ($315))|0;
    $317 = $313&1;
    $318 = $317 ^ 1;
    $319 = (($318) + ($316))|0;
    $320 = ($$2256|0)>($319|0);
    $$2256$ = $320 ? $$2256 : $319;
    $$2 = $$0228;$$2234 = $$1233;$$2239 = $$1238;$$2251 = $14;$$5 = $$2256$;$$6268 = $$$4266;
   } else {
    $$2 = $14;$$2234 = $$1233;$$2239 = $$1238;$$2251 = $14;$$5 = 0;$$6268 = $$$4266;
   }
  }
  $782 = $$2251;
  $783 = $$2;
  $784 = (($782) - ($783))|0;
  $785 = ($$5|0)<($784|0);
  $$$5 = $785 ? $784 : $$5;
  $786 = (($$$5) + ($$2234))|0;
  $787 = ($$1260|0)<($786|0);
  $$2261 = $787 ? $786 : $$1260;
  _pad($0,32,$$2261,$786,$$6268);
  $788 = HEAP32[$0>>2]|0;
  $789 = $788 & 32;
  $790 = ($789|0)==(0);
  if ($790) {
   (___fwritex($$2239,$$2234,$0)|0);
  }
  $791 = $$6268 ^ 65536;
  _pad($0,48,$$2261,$786,$791);
  _pad($0,48,$$$5,$784,0);
  $792 = HEAP32[$0>>2]|0;
  $793 = $792 & 32;
  $794 = ($793|0)==(0);
  if ($794) {
   (___fwritex($$2,$784,$0)|0);
  }
  $795 = $$6268 ^ 8192;
  _pad($0,32,$$2261,$786,$795);
  $$0243 = $$2261;$$0247 = $$1248;$$0269 = $$3272;$$0321 = $158;
 }
 L345: do {
  if ((label|0) == 243) {
   $796 = ($0|0)==(0|0);
   if ($796) {
    $797 = ($$0269|0)==(0);
    if ($797) {
     $$0 = 0;
    } else {
     $$2242381 = 1;
     while(1) {
      $798 = (($4) + ($$2242381<<2)|0);
      $799 = HEAP32[$798>>2]|0;
      $800 = ($799|0)==(0);
      if ($800) {
       $$3379 = $$2242381;
       break;
      }
      $801 = (($3) + ($$2242381<<3)|0);
      _pop_arg_602($801,$799,$2);
      $802 = (($$2242381) + 1)|0;
      $803 = ($802|0)<(10);
      if ($803) {
       $$2242381 = $802;
      } else {
       $$0 = 1;
       break L345;
      }
     }
     while(1) {
      $806 = (($4) + ($$3379<<2)|0);
      $807 = HEAP32[$806>>2]|0;
      $808 = ($807|0)==(0);
      $804 = (($$3379) + 1)|0;
      if (!($808)) {
       $$0 = -1;
       break L345;
      }
      $805 = ($804|0)<(10);
      if ($805) {
       $$3379 = $804;
      } else {
       $$0 = 1;
       break;
      }
     }
    }
   } else {
    $$0 = $$1248;
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function ___fwritex($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$038 = 0, $$042 = 0, $$1 = 0, $$139 = 0, $$141 = 0, $$143 = 0, $$pre = 0, $$pre47 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($2)) + 16|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0|0);
 if ($5) {
  $7 = (___towrite($2)|0);
  $8 = ($7|0)==(0);
  if ($8) {
   $$pre = HEAP32[$3>>2]|0;
   $12 = $$pre;
   label = 5;
  } else {
   $$1 = 0;
  }
 } else {
  $6 = $4;
  $12 = $6;
  label = 5;
 }
 L5: do {
  if ((label|0) == 5) {
   $9 = ((($2)) + 20|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = (($12) - ($10))|0;
   $13 = ($11>>>0)<($1>>>0);
   $14 = $10;
   if ($13) {
    $15 = ((($2)) + 36|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = (FUNCTION_TABLE_iiii[$16 & 15]($2,$0,$1)|0);
    $$1 = $17;
    break;
   }
   $18 = ((($2)) + 75|0);
   $19 = HEAP8[$18>>0]|0;
   $20 = ($19<<24>>24)>(-1);
   L10: do {
    if ($20) {
     $$038 = $1;
     while(1) {
      $21 = ($$038|0)==(0);
      if ($21) {
       $$139 = 0;$$141 = $0;$$143 = $1;$31 = $14;
       break L10;
      }
      $22 = (($$038) + -1)|0;
      $23 = (($0) + ($22)|0);
      $24 = HEAP8[$23>>0]|0;
      $25 = ($24<<24>>24)==(10);
      if ($25) {
       break;
      } else {
       $$038 = $22;
      }
     }
     $26 = ((($2)) + 36|0);
     $27 = HEAP32[$26>>2]|0;
     $28 = (FUNCTION_TABLE_iiii[$27 & 15]($2,$0,$$038)|0);
     $29 = ($28>>>0)<($$038>>>0);
     if ($29) {
      $$1 = $28;
      break L5;
     }
     $30 = (($0) + ($$038)|0);
     $$042 = (($1) - ($$038))|0;
     $$pre47 = HEAP32[$9>>2]|0;
     $$139 = $$038;$$141 = $30;$$143 = $$042;$31 = $$pre47;
    } else {
     $$139 = 0;$$141 = $0;$$143 = $1;$31 = $14;
    }
   } while(0);
   _memcpy(($31|0),($$141|0),($$143|0))|0;
   $32 = HEAP32[$9>>2]|0;
   $33 = (($32) + ($$143)|0);
   HEAP32[$9>>2] = $33;
   $34 = (($$139) + ($$143))|0;
   $$1 = $34;
  }
 } while(0);
 return ($$1|0);
}
function _pop_arg_602($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$mask = 0, $$mask31 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0.0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0.0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $arglist_current = 0, $arglist_current11 = 0, $arglist_current14 = 0, $arglist_current17 = 0;
 var $arglist_current2 = 0, $arglist_current20 = 0, $arglist_current23 = 0, $arglist_current26 = 0, $arglist_current5 = 0, $arglist_current8 = 0, $arglist_next = 0, $arglist_next12 = 0, $arglist_next15 = 0, $arglist_next18 = 0, $arglist_next21 = 0, $arglist_next24 = 0, $arglist_next27 = 0, $arglist_next3 = 0, $arglist_next6 = 0, $arglist_next9 = 0, $expanded = 0, $expanded28 = 0, $expanded30 = 0, $expanded31 = 0;
 var $expanded32 = 0, $expanded34 = 0, $expanded35 = 0, $expanded37 = 0, $expanded38 = 0, $expanded39 = 0, $expanded41 = 0, $expanded42 = 0, $expanded44 = 0, $expanded45 = 0, $expanded46 = 0, $expanded48 = 0, $expanded49 = 0, $expanded51 = 0, $expanded52 = 0, $expanded53 = 0, $expanded55 = 0, $expanded56 = 0, $expanded58 = 0, $expanded59 = 0;
 var $expanded60 = 0, $expanded62 = 0, $expanded63 = 0, $expanded65 = 0, $expanded66 = 0, $expanded67 = 0, $expanded69 = 0, $expanded70 = 0, $expanded72 = 0, $expanded73 = 0, $expanded74 = 0, $expanded76 = 0, $expanded77 = 0, $expanded79 = 0, $expanded80 = 0, $expanded81 = 0, $expanded83 = 0, $expanded84 = 0, $expanded86 = 0, $expanded87 = 0;
 var $expanded88 = 0, $expanded90 = 0, $expanded91 = 0, $expanded93 = 0, $expanded94 = 0, $expanded95 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($1>>>0)>(20);
 L1: do {
  if (!($3)) {
   do {
    switch ($1|0) {
    case 9:  {
     $arglist_current = HEAP32[$2>>2]|0;
     $4 = $arglist_current;
     $5 = ((0) + 4|0);
     $expanded28 = $5;
     $expanded = (($expanded28) - 1)|0;
     $6 = (($4) + ($expanded))|0;
     $7 = ((0) + 4|0);
     $expanded32 = $7;
     $expanded31 = (($expanded32) - 1)|0;
     $expanded30 = $expanded31 ^ -1;
     $8 = $6 & $expanded30;
     $9 = $8;
     $10 = HEAP32[$9>>2]|0;
     $arglist_next = ((($9)) + 4|0);
     HEAP32[$2>>2] = $arglist_next;
     HEAP32[$0>>2] = $10;
     break L1;
     break;
    }
    case 10:  {
     $arglist_current2 = HEAP32[$2>>2]|0;
     $11 = $arglist_current2;
     $12 = ((0) + 4|0);
     $expanded35 = $12;
     $expanded34 = (($expanded35) - 1)|0;
     $13 = (($11) + ($expanded34))|0;
     $14 = ((0) + 4|0);
     $expanded39 = $14;
     $expanded38 = (($expanded39) - 1)|0;
     $expanded37 = $expanded38 ^ -1;
     $15 = $13 & $expanded37;
     $16 = $15;
     $17 = HEAP32[$16>>2]|0;
     $arglist_next3 = ((($16)) + 4|0);
     HEAP32[$2>>2] = $arglist_next3;
     $18 = ($17|0)<(0);
     $19 = $18 << 31 >> 31;
     $20 = $0;
     $21 = $20;
     HEAP32[$21>>2] = $17;
     $22 = (($20) + 4)|0;
     $23 = $22;
     HEAP32[$23>>2] = $19;
     break L1;
     break;
    }
    case 11:  {
     $arglist_current5 = HEAP32[$2>>2]|0;
     $24 = $arglist_current5;
     $25 = ((0) + 4|0);
     $expanded42 = $25;
     $expanded41 = (($expanded42) - 1)|0;
     $26 = (($24) + ($expanded41))|0;
     $27 = ((0) + 4|0);
     $expanded46 = $27;
     $expanded45 = (($expanded46) - 1)|0;
     $expanded44 = $expanded45 ^ -1;
     $28 = $26 & $expanded44;
     $29 = $28;
     $30 = HEAP32[$29>>2]|0;
     $arglist_next6 = ((($29)) + 4|0);
     HEAP32[$2>>2] = $arglist_next6;
     $31 = $0;
     $32 = $31;
     HEAP32[$32>>2] = $30;
     $33 = (($31) + 4)|0;
     $34 = $33;
     HEAP32[$34>>2] = 0;
     break L1;
     break;
    }
    case 12:  {
     $arglist_current8 = HEAP32[$2>>2]|0;
     $35 = $arglist_current8;
     $36 = ((0) + 8|0);
     $expanded49 = $36;
     $expanded48 = (($expanded49) - 1)|0;
     $37 = (($35) + ($expanded48))|0;
     $38 = ((0) + 8|0);
     $expanded53 = $38;
     $expanded52 = (($expanded53) - 1)|0;
     $expanded51 = $expanded52 ^ -1;
     $39 = $37 & $expanded51;
     $40 = $39;
     $41 = $40;
     $42 = $41;
     $43 = HEAP32[$42>>2]|0;
     $44 = (($41) + 4)|0;
     $45 = $44;
     $46 = HEAP32[$45>>2]|0;
     $arglist_next9 = ((($40)) + 8|0);
     HEAP32[$2>>2] = $arglist_next9;
     $47 = $0;
     $48 = $47;
     HEAP32[$48>>2] = $43;
     $49 = (($47) + 4)|0;
     $50 = $49;
     HEAP32[$50>>2] = $46;
     break L1;
     break;
    }
    case 13:  {
     $arglist_current11 = HEAP32[$2>>2]|0;
     $51 = $arglist_current11;
     $52 = ((0) + 4|0);
     $expanded56 = $52;
     $expanded55 = (($expanded56) - 1)|0;
     $53 = (($51) + ($expanded55))|0;
     $54 = ((0) + 4|0);
     $expanded60 = $54;
     $expanded59 = (($expanded60) - 1)|0;
     $expanded58 = $expanded59 ^ -1;
     $55 = $53 & $expanded58;
     $56 = $55;
     $57 = HEAP32[$56>>2]|0;
     $arglist_next12 = ((($56)) + 4|0);
     HEAP32[$2>>2] = $arglist_next12;
     $58 = $57&65535;
     $59 = $58 << 16 >> 16;
     $60 = ($59|0)<(0);
     $61 = $60 << 31 >> 31;
     $62 = $0;
     $63 = $62;
     HEAP32[$63>>2] = $59;
     $64 = (($62) + 4)|0;
     $65 = $64;
     HEAP32[$65>>2] = $61;
     break L1;
     break;
    }
    case 14:  {
     $arglist_current14 = HEAP32[$2>>2]|0;
     $66 = $arglist_current14;
     $67 = ((0) + 4|0);
     $expanded63 = $67;
     $expanded62 = (($expanded63) - 1)|0;
     $68 = (($66) + ($expanded62))|0;
     $69 = ((0) + 4|0);
     $expanded67 = $69;
     $expanded66 = (($expanded67) - 1)|0;
     $expanded65 = $expanded66 ^ -1;
     $70 = $68 & $expanded65;
     $71 = $70;
     $72 = HEAP32[$71>>2]|0;
     $arglist_next15 = ((($71)) + 4|0);
     HEAP32[$2>>2] = $arglist_next15;
     $$mask31 = $72 & 65535;
     $73 = $0;
     $74 = $73;
     HEAP32[$74>>2] = $$mask31;
     $75 = (($73) + 4)|0;
     $76 = $75;
     HEAP32[$76>>2] = 0;
     break L1;
     break;
    }
    case 15:  {
     $arglist_current17 = HEAP32[$2>>2]|0;
     $77 = $arglist_current17;
     $78 = ((0) + 4|0);
     $expanded70 = $78;
     $expanded69 = (($expanded70) - 1)|0;
     $79 = (($77) + ($expanded69))|0;
     $80 = ((0) + 4|0);
     $expanded74 = $80;
     $expanded73 = (($expanded74) - 1)|0;
     $expanded72 = $expanded73 ^ -1;
     $81 = $79 & $expanded72;
     $82 = $81;
     $83 = HEAP32[$82>>2]|0;
     $arglist_next18 = ((($82)) + 4|0);
     HEAP32[$2>>2] = $arglist_next18;
     $84 = $83&255;
     $85 = $84 << 24 >> 24;
     $86 = ($85|0)<(0);
     $87 = $86 << 31 >> 31;
     $88 = $0;
     $89 = $88;
     HEAP32[$89>>2] = $85;
     $90 = (($88) + 4)|0;
     $91 = $90;
     HEAP32[$91>>2] = $87;
     break L1;
     break;
    }
    case 16:  {
     $arglist_current20 = HEAP32[$2>>2]|0;
     $92 = $arglist_current20;
     $93 = ((0) + 4|0);
     $expanded77 = $93;
     $expanded76 = (($expanded77) - 1)|0;
     $94 = (($92) + ($expanded76))|0;
     $95 = ((0) + 4|0);
     $expanded81 = $95;
     $expanded80 = (($expanded81) - 1)|0;
     $expanded79 = $expanded80 ^ -1;
     $96 = $94 & $expanded79;
     $97 = $96;
     $98 = HEAP32[$97>>2]|0;
     $arglist_next21 = ((($97)) + 4|0);
     HEAP32[$2>>2] = $arglist_next21;
     $$mask = $98 & 255;
     $99 = $0;
     $100 = $99;
     HEAP32[$100>>2] = $$mask;
     $101 = (($99) + 4)|0;
     $102 = $101;
     HEAP32[$102>>2] = 0;
     break L1;
     break;
    }
    case 17:  {
     $arglist_current23 = HEAP32[$2>>2]|0;
     $103 = $arglist_current23;
     $104 = ((0) + 8|0);
     $expanded84 = $104;
     $expanded83 = (($expanded84) - 1)|0;
     $105 = (($103) + ($expanded83))|0;
     $106 = ((0) + 8|0);
     $expanded88 = $106;
     $expanded87 = (($expanded88) - 1)|0;
     $expanded86 = $expanded87 ^ -1;
     $107 = $105 & $expanded86;
     $108 = $107;
     $109 = +HEAPF64[$108>>3];
     $arglist_next24 = ((($108)) + 8|0);
     HEAP32[$2>>2] = $arglist_next24;
     HEAPF64[$0>>3] = $109;
     break L1;
     break;
    }
    case 18:  {
     $arglist_current26 = HEAP32[$2>>2]|0;
     $110 = $arglist_current26;
     $111 = ((0) + 8|0);
     $expanded91 = $111;
     $expanded90 = (($expanded91) - 1)|0;
     $112 = (($110) + ($expanded90))|0;
     $113 = ((0) + 8|0);
     $expanded95 = $113;
     $expanded94 = (($expanded95) - 1)|0;
     $expanded93 = $expanded94 ^ -1;
     $114 = $112 & $expanded93;
     $115 = $114;
     $116 = +HEAPF64[$115>>3];
     $arglist_next27 = ((($115)) + 8|0);
     HEAP32[$2>>2] = $arglist_next27;
     HEAPF64[$0>>3] = $116;
     break L1;
     break;
    }
    default: {
     break L1;
    }
    }
   } while(0);
  }
 } while(0);
 return;
}
function _fmt_u($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$010$lcssa$off0 = 0, $$012 = 0, $$09$lcssa = 0, $$0914 = 0, $$1$lcssa = 0, $$111 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($1>>>0)>(0);
 $4 = ($0>>>0)>(4294967295);
 $5 = ($1|0)==(0);
 $6 = $5 & $4;
 $7 = $3 | $6;
 if ($7) {
  $$0914 = $2;$8 = $0;$9 = $1;
  while(1) {
   $10 = (___uremdi3(($8|0),($9|0),10,0)|0);
   $11 = tempRet0;
   $12 = $10 | 48;
   $13 = $12&255;
   $14 = ((($$0914)) + -1|0);
   HEAP8[$14>>0] = $13;
   $15 = (___udivdi3(($8|0),($9|0),10,0)|0);
   $16 = tempRet0;
   $17 = ($9>>>0)>(9);
   $18 = ($8>>>0)>(4294967295);
   $19 = ($9|0)==(9);
   $20 = $19 & $18;
   $21 = $17 | $20;
   if ($21) {
    $$0914 = $14;$8 = $15;$9 = $16;
   } else {
    break;
   }
  }
  $$010$lcssa$off0 = $15;$$09$lcssa = $14;
 } else {
  $$010$lcssa$off0 = $0;$$09$lcssa = $2;
 }
 $22 = ($$010$lcssa$off0|0)==(0);
 if ($22) {
  $$1$lcssa = $$09$lcssa;
 } else {
  $$012 = $$010$lcssa$off0;$$111 = $$09$lcssa;
  while(1) {
   $23 = (($$012>>>0) % 10)&-1;
   $24 = $23 | 48;
   $25 = $24&255;
   $26 = ((($$111)) + -1|0);
   HEAP8[$26>>0] = $25;
   $27 = (($$012>>>0) / 10)&-1;
   $28 = ($$012>>>0)<(10);
   if ($28) {
    $$1$lcssa = $26;
    break;
   } else {
    $$012 = $27;$$111 = $26;
   }
  }
 }
 return ($$1$lcssa|0);
}
function _strerror($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_pthread_self()|0);
 $2 = ((($1)) + 188|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (___strerror_l($0,$3)|0);
 return ($4|0);
}
function _pad($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0$lcssa16 = 0, $$012 = 0, $$pre = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(256|0);
 $5 = sp;
 $6 = $4 & 73728;
 $7 = ($6|0)==(0);
 $8 = ($2|0)>($3|0);
 $or$cond = $8 & $7;
 do {
  if ($or$cond) {
   $9 = (($2) - ($3))|0;
   $10 = ($9>>>0)>(256);
   $11 = $10 ? 256 : $9;
   _memset(($5|0),($1|0),($11|0))|0;
   $12 = ($9>>>0)>(255);
   $13 = HEAP32[$0>>2]|0;
   $14 = $13 & 32;
   $15 = ($14|0)==(0);
   if ($12) {
    $16 = (($2) - ($3))|0;
    $$012 = $9;$23 = $13;$24 = $15;
    while(1) {
     if ($24) {
      (___fwritex($5,256,$0)|0);
      $$pre = HEAP32[$0>>2]|0;
      $20 = $$pre;
     } else {
      $20 = $23;
     }
     $17 = (($$012) + -256)|0;
     $18 = ($17>>>0)>(255);
     $19 = $20 & 32;
     $21 = ($19|0)==(0);
     if ($18) {
      $$012 = $17;$23 = $20;$24 = $21;
     } else {
      break;
     }
    }
    $22 = $16 & 255;
    if ($21) {
     $$0$lcssa16 = $22;
    } else {
     break;
    }
   } else {
    if ($15) {
     $$0$lcssa16 = $9;
    } else {
     break;
    }
   }
   (___fwritex($5,$$0$lcssa16,$0)|0);
  }
 } while(0);
 STACKTOP = sp;return;
}
function _frexpl($0,$1) {
 $0 = +$0;
 $1 = $1|0;
 var $2 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (+_frexp($0,$1));
 return (+$2);
}
function _frexp($0,$1) {
 $0 = +$0;
 $1 = $1|0;
 var $$0 = 0.0, $$016 = 0.0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0.0, $9 = 0.0, $storemerge = 0, $trunc$clear = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $0;$2 = HEAP32[tempDoublePtr>>2]|0;
 $3 = HEAP32[tempDoublePtr+4>>2]|0;
 $4 = (_bitshift64Lshr(($2|0),($3|0),52)|0);
 $5 = tempRet0;
 $6 = $4&65535;
 $trunc$clear = $6 & 2047;
 switch ($trunc$clear<<16>>16) {
 case 0:  {
  $7 = $0 != 0.0;
  if ($7) {
   $8 = $0 * 1.8446744073709552E+19;
   $9 = (+_frexp($8,$1));
   $10 = HEAP32[$1>>2]|0;
   $11 = (($10) + -64)|0;
   $$016 = $9;$storemerge = $11;
  } else {
   $$016 = $0;$storemerge = 0;
  }
  HEAP32[$1>>2] = $storemerge;
  $$0 = $$016;
  break;
 }
 case 2047:  {
  $$0 = $0;
  break;
 }
 default: {
  $12 = $4 & 2047;
  $13 = (($12) + -1022)|0;
  HEAP32[$1>>2] = $13;
  $14 = $3 & -2146435073;
  $15 = $14 | 1071644672;
  HEAP32[tempDoublePtr>>2] = $2;HEAP32[tempDoublePtr+4>>2] = $15;$16 = +HEAPF64[tempDoublePtr>>3];
  $$0 = $16;
 }
 }
 return (+$$0);
}
function ___strerror_l($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$012$lcssa = 0, $$01214 = 0, $$016 = 0, $$113 = 0, $$115 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $$016 = 0;
 while(1) {
  $3 = (7947 + ($$016)|0);
  $4 = HEAP8[$3>>0]|0;
  $5 = $4&255;
  $6 = ($5|0)==($0|0);
  if ($6) {
   label = 2;
   break;
  }
  $7 = (($$016) + 1)|0;
  $8 = ($7|0)==(87);
  if ($8) {
   $$01214 = 8035;$$115 = 87;
   label = 5;
   break;
  } else {
   $$016 = $7;
  }
 }
 if ((label|0) == 2) {
  $2 = ($$016|0)==(0);
  if ($2) {
   $$012$lcssa = 8035;
  } else {
   $$01214 = 8035;$$115 = $$016;
   label = 5;
  }
 }
 if ((label|0) == 5) {
  while(1) {
   label = 0;
   $$113 = $$01214;
   while(1) {
    $9 = HEAP8[$$113>>0]|0;
    $10 = ($9<<24>>24)==(0);
    $11 = ((($$113)) + 1|0);
    if ($10) {
     break;
    } else {
     $$113 = $11;
    }
   }
   $12 = (($$115) + -1)|0;
   $13 = ($12|0)==(0);
   if ($13) {
    $$012$lcssa = $11;
    break;
   } else {
    $$01214 = $11;$$115 = $12;
    label = 5;
   }
  }
 }
 $14 = ((($1)) + 20|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = (___lctrans($$012$lcssa,$15)|0);
 return ($16|0);
}
function ___lctrans($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (___lctrans_impl($0,$1)|0);
 return ($2|0);
}
function ___lctrans_impl($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($1|0)==(0|0);
 if ($2) {
  $$0 = 0;
 } else {
  $3 = HEAP32[$1>>2]|0;
  $4 = ((($1)) + 4|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = (___mo_lookup($3,$5,$0)|0);
  $$0 = $6;
 }
 $7 = ($$0|0)!=(0|0);
 $8 = $7 ? $$0 : $0;
 return ($8|0);
}
function ___mo_lookup($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$ = 0, $$$i = 0, $$$i105 = 0, $$$i106 = 0, $$$i107 = 0, $$$i108 = 0, $$$i109 = 0, $$$i110 = 0, $$090 = 0, $$094 = 0, $$191 = 0, $$195 = 0, $$4 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond102 = 0, $or$cond104 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = HEAP32[$0>>2]|0;
 $4 = ((($0)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($3|0)==(-1794895138);
 $7 = (_llvm_bswap_i32(($5|0))|0);
 $$$i = $6 ? $5 : $7;
 $8 = ((($0)) + 12|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (_llvm_bswap_i32(($9|0))|0);
 $$$i110 = $6 ? $9 : $10;
 $11 = ((($0)) + 16|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (_llvm_bswap_i32(($12|0))|0);
 $$$i109 = $6 ? $12 : $13;
 $14 = $1 >>> 2;
 $15 = ($$$i>>>0)<($14>>>0);
 L1: do {
  if ($15) {
   $16 = $$$i << 2;
   $17 = (($1) - ($16))|0;
   $18 = ($$$i110>>>0)<($17>>>0);
   $19 = ($$$i109>>>0)<($17>>>0);
   $or$cond = $18 & $19;
   if ($or$cond) {
    $20 = $$$i109 | $$$i110;
    $21 = $20 & 3;
    $22 = ($21|0)==(0);
    if ($22) {
     $23 = $$$i110 >>> 2;
     $24 = $$$i109 >>> 2;
     $$090 = 0;$$094 = $$$i;
     while(1) {
      $25 = $$094 >>> 1;
      $26 = (($$090) + ($25))|0;
      $27 = $26 << 1;
      $28 = (($27) + ($23))|0;
      $29 = (($0) + ($28<<2)|0);
      $30 = HEAP32[$29>>2]|0;
      $31 = (_llvm_bswap_i32(($30|0))|0);
      $$$i108 = $6 ? $30 : $31;
      $32 = (($28) + 1)|0;
      $33 = (($0) + ($32<<2)|0);
      $34 = HEAP32[$33>>2]|0;
      $35 = (_llvm_bswap_i32(($34|0))|0);
      $$$i107 = $6 ? $34 : $35;
      $36 = ($$$i107>>>0)<($1>>>0);
      $37 = (($1) - ($$$i107))|0;
      $38 = ($$$i108>>>0)<($37>>>0);
      $or$cond102 = $36 & $38;
      if (!($or$cond102)) {
       $$4 = 0;
       break L1;
      }
      $39 = (($$$i107) + ($$$i108))|0;
      $40 = (($0) + ($39)|0);
      $41 = HEAP8[$40>>0]|0;
      $42 = ($41<<24>>24)==(0);
      if (!($42)) {
       $$4 = 0;
       break L1;
      }
      $43 = (($0) + ($$$i107)|0);
      $44 = (_strcmp($2,$43)|0);
      $45 = ($44|0)==(0);
      if ($45) {
       break;
      }
      $62 = ($$094|0)==(1);
      if ($62) {
       $$4 = 0;
       break L1;
      }
      $63 = (($$094) - ($25))|0;
      $64 = ($44|0)<(0);
      $$195 = $64 ? $25 : $63;
      $$191 = $64 ? $$090 : $26;
      $$090 = $$191;$$094 = $$195;
     }
     $46 = (($27) + ($24))|0;
     $47 = (($0) + ($46<<2)|0);
     $48 = HEAP32[$47>>2]|0;
     $49 = (_llvm_bswap_i32(($48|0))|0);
     $$$i106 = $6 ? $48 : $49;
     $50 = (($46) + 1)|0;
     $51 = (($0) + ($50<<2)|0);
     $52 = HEAP32[$51>>2]|0;
     $53 = (_llvm_bswap_i32(($52|0))|0);
     $$$i105 = $6 ? $52 : $53;
     $54 = ($$$i105>>>0)<($1>>>0);
     $55 = (($1) - ($$$i105))|0;
     $56 = ($$$i106>>>0)<($55>>>0);
     $or$cond104 = $54 & $56;
     if ($or$cond104) {
      $57 = (($0) + ($$$i105)|0);
      $58 = (($$$i105) + ($$$i106))|0;
      $59 = (($0) + ($58)|0);
      $60 = HEAP8[$59>>0]|0;
      $61 = ($60<<24>>24)==(0);
      $$ = $61 ? $57 : 0;
      $$4 = $$;
     } else {
      $$4 = 0;
     }
    } else {
     $$4 = 0;
    }
   } else {
    $$4 = 0;
   }
  } else {
   $$4 = 0;
  }
 } while(0);
 return ($$4|0);
}
function ___towrite($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 74|0);
 $2 = HEAP8[$1>>0]|0;
 $3 = $2 << 24 >> 24;
 $4 = (($3) + 255)|0;
 $5 = $4 | $3;
 $6 = $5&255;
 HEAP8[$1>>0] = $6;
 $7 = HEAP32[$0>>2]|0;
 $8 = $7 & 8;
 $9 = ($8|0)==(0);
 if ($9) {
  $11 = ((($0)) + 8|0);
  HEAP32[$11>>2] = 0;
  $12 = ((($0)) + 4|0);
  HEAP32[$12>>2] = 0;
  $13 = ((($0)) + 44|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = ((($0)) + 28|0);
  HEAP32[$15>>2] = $14;
  $16 = ((($0)) + 20|0);
  HEAP32[$16>>2] = $14;
  $17 = $14;
  $18 = ((($0)) + 48|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = (($17) + ($19)|0);
  $21 = ((($0)) + 16|0);
  HEAP32[$21>>2] = $20;
  $$0 = 0;
 } else {
  $10 = $7 | 32;
  HEAP32[$0>>2] = $10;
  $$0 = -1;
 }
 return ($$0|0);
}
function _sn_write($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$ = 0, $$cast = 0, $10 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 16|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($0)) + 20|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($4) - ($6))|0;
 $8 = ($7>>>0)>($2>>>0);
 $$ = $8 ? $2 : $7;
 $$cast = $6;
 _memcpy(($$cast|0),($1|0),($$|0))|0;
 $9 = HEAP32[$5>>2]|0;
 $10 = (($9) + ($$)|0);
 HEAP32[$5>>2] = $10;
 return ($2|0);
}
function _sprintf($0,$1,$varargs) {
 $0 = $0|0;
 $1 = $1|0;
 $varargs = $varargs|0;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 HEAP32[$2>>2] = $varargs;
 $3 = (_vsprintf($0,$1,$2)|0);
 STACKTOP = sp;return ($3|0);
}
function _vsprintf($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (_vsnprintf($0,2147483647,$1,$2)|0);
 return ($3|0);
}
function _fprintf($0,$1,$varargs) {
 $0 = $0|0;
 $1 = $1|0;
 $varargs = $varargs|0;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 HEAP32[$2>>2] = $varargs;
 $3 = (_vfprintf($0,$1,$2)|0);
 STACKTOP = sp;return ($3|0);
}
function ___strdup($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_strlen($0)|0);
 $2 = (($1) + 1)|0;
 $3 = (_malloc($2)|0);
 $4 = ($3|0)==(0|0);
 if ($4) {
  $$0 = 0;
 } else {
  _memcpy(($3|0),($0|0),($2|0))|0;
  $$0 = $3;
 }
 return ($$0|0);
}
function _strcat($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (_strlen($0)|0);
 $3 = (($0) + ($2)|0);
 (_strcpy($3,$1)|0);
 return ($0|0);
}
function _fclose($0) {
 $0 = $0|0;
 var $$pre = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 76|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)>(-1);
 if ($3) {
  $4 = (___lockfile($0)|0);
  $29 = $4;
 } else {
  $29 = 0;
 }
 ___unlist_locked_file($0);
 $5 = HEAP32[$0>>2]|0;
 $6 = $5 & 1;
 $7 = ($6|0)!=(0);
 if (!($7)) {
  $8 = (___ofl_lock()|0);
  $9 = ((($0)) + 52|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ($10|0)==(0|0);
  $12 = $10;
  $$pre = ((($0)) + 56|0);
  if (!($11)) {
   $13 = HEAP32[$$pre>>2]|0;
   $14 = ((($10)) + 56|0);
   HEAP32[$14>>2] = $13;
  }
  $15 = HEAP32[$$pre>>2]|0;
  $16 = ($15|0)==(0|0);
  $17 = $15;
  if (!($16)) {
   $18 = ((($15)) + 52|0);
   HEAP32[$18>>2] = $12;
  }
  $19 = HEAP32[$8>>2]|0;
  $20 = ($19|0)==($0|0);
  if ($20) {
   HEAP32[$8>>2] = $17;
  }
  ___ofl_unlock();
 }
 $21 = (_fflush($0)|0);
 $22 = ((($0)) + 12|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = (FUNCTION_TABLE_ii[$23 & 7]($0)|0);
 $25 = $24 | $21;
 $26 = ((($0)) + 92|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = ($27|0)==(0|0);
 if (!($28)) {
  _free($27);
 }
 if ($7) {
  $30 = ($29|0)==(0);
  if (!($30)) {
   ___unlockfile($0);
  }
 } else {
  _free($0);
 }
 return ($25|0);
}
function ___unlist_locked_file($0) {
 $0 = $0|0;
 var $$pre = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 68|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0);
 do {
  if (!($3)) {
   $4 = ((($0)) + 116|0);
   $5 = HEAP32[$4>>2]|0;
   $6 = ($5|0)==(0|0);
   $7 = $5;
   $$pre = ((($0)) + 112|0);
   if (!($6)) {
    $8 = HEAP32[$$pre>>2]|0;
    $9 = ((($5)) + 112|0);
    HEAP32[$9>>2] = $8;
   }
   $10 = HEAP32[$$pre>>2]|0;
   $11 = ($10|0)==(0|0);
   if ($11) {
    $13 = (_pthread_self()|0);
    $14 = ((($13)) + 232|0);
    HEAP32[$14>>2] = $7;
    break;
   } else {
    $12 = ((($10)) + 116|0);
    HEAP32[$12>>2] = $7;
    break;
   }
  }
 } while(0);
 return;
}
function ___ofl_lock() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 ___lock((52304|0));
 return (52312|0);
}
function ___ofl_unlock() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 ___unlock((52304|0));
 return;
}
function _fflush($0) {
 $0 = $0|0;
 var $$0 = 0, $$023 = 0, $$02325 = 0, $$02327 = 0, $$024$lcssa = 0, $$02426 = 0, $$1 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 do {
  if ($1) {
   $8 = HEAP32[316]|0;
   $9 = ($8|0)==(0|0);
   if ($9) {
    $29 = 0;
   } else {
    $10 = HEAP32[316]|0;
    $11 = (_fflush($10)|0);
    $29 = $11;
   }
   $12 = (___ofl_lock()|0);
   $$02325 = HEAP32[$12>>2]|0;
   $13 = ($$02325|0)==(0|0);
   if ($13) {
    $$024$lcssa = $29;
   } else {
    $$02327 = $$02325;$$02426 = $29;
    while(1) {
     $14 = ((($$02327)) + 76|0);
     $15 = HEAP32[$14>>2]|0;
     $16 = ($15|0)>(-1);
     if ($16) {
      $17 = (___lockfile($$02327)|0);
      $25 = $17;
     } else {
      $25 = 0;
     }
     $18 = ((($$02327)) + 20|0);
     $19 = HEAP32[$18>>2]|0;
     $20 = ((($$02327)) + 28|0);
     $21 = HEAP32[$20>>2]|0;
     $22 = ($19>>>0)>($21>>>0);
     if ($22) {
      $23 = (___fflush_unlocked($$02327)|0);
      $24 = $23 | $$02426;
      $$1 = $24;
     } else {
      $$1 = $$02426;
     }
     $26 = ($25|0)==(0);
     if (!($26)) {
      ___unlockfile($$02327);
     }
     $27 = ((($$02327)) + 56|0);
     $$023 = HEAP32[$27>>2]|0;
     $28 = ($$023|0)==(0|0);
     if ($28) {
      $$024$lcssa = $$1;
      break;
     } else {
      $$02327 = $$023;$$02426 = $$1;
     }
    }
   }
   ___ofl_unlock();
   $$0 = $$024$lcssa;
  } else {
   $2 = ((($0)) + 76|0);
   $3 = HEAP32[$2>>2]|0;
   $4 = ($3|0)>(-1);
   if (!($4)) {
    $5 = (___fflush_unlocked($0)|0);
    $$0 = $5;
    break;
   }
   $6 = (___lockfile($0)|0);
   $phitmp = ($6|0)==(0);
   $7 = (___fflush_unlocked($0)|0);
   if ($phitmp) {
    $$0 = $7;
   } else {
    ___unlockfile($0);
    $$0 = $7;
   }
  }
 } while(0);
 return ($$0|0);
}
function ___fflush_unlocked($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 20|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($0)) + 28|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($2>>>0)>($4>>>0);
 if ($5) {
  $6 = ((($0)) + 36|0);
  $7 = HEAP32[$6>>2]|0;
  (FUNCTION_TABLE_iiii[$7 & 15]($0,0,0)|0);
  $8 = HEAP32[$1>>2]|0;
  $9 = ($8|0)==(0|0);
  if ($9) {
   $$0 = -1;
  } else {
   label = 3;
  }
 } else {
  label = 3;
 }
 if ((label|0) == 3) {
  $10 = ((($0)) + 4|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ((($0)) + 8|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ($11>>>0)<($13>>>0);
  if ($14) {
   $15 = ((($0)) + 40|0);
   $16 = HEAP32[$15>>2]|0;
   $17 = $11;
   $18 = $13;
   $19 = (($17) - ($18))|0;
   (FUNCTION_TABLE_iiii[$16 & 15]($0,$19,1)|0);
  }
  $20 = ((($0)) + 16|0);
  HEAP32[$20>>2] = 0;
  HEAP32[$3>>2] = 0;
  HEAP32[$1>>2] = 0;
  HEAP32[$12>>2] = 0;
  HEAP32[$10>>2] = 0;
  $$0 = 0;
 }
 return ($$0|0);
}
function ___fdopen($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$pre = 0, $$pre31 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $memchr = 0, $vararg_buffer = 0, $vararg_buffer12 = 0, $vararg_buffer3 = 0, $vararg_buffer7 = 0, $vararg_ptr1 = 0, $vararg_ptr10 = 0, $vararg_ptr11 = 0, $vararg_ptr15 = 0, $vararg_ptr16 = 0, $vararg_ptr2 = 0, $vararg_ptr6 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $vararg_buffer12 = sp + 40|0;
 $vararg_buffer7 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $2 = sp + 56|0;
 $3 = HEAP8[$1>>0]|0;
 $4 = $3 << 24 >> 24;
 $memchr = (_memchr(9839,$4,4)|0);
 $5 = ($memchr|0)==(0|0);
 if ($5) {
  $6 = (___errno_location()|0);
  HEAP32[$6>>2] = 22;
  $$0 = 0;
 } else {
  $7 = (_malloc(1156)|0);
  $8 = ($7|0)==(0|0);
  if ($8) {
   $$0 = 0;
  } else {
   dest=$7; stop=dest+124|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
   $9 = (_strchr($1,43)|0);
   $10 = ($9|0)==(0|0);
   if ($10) {
    $11 = ($3<<24>>24)==(114);
    $12 = $11 ? 8 : 4;
    HEAP32[$7>>2] = $12;
   }
   $13 = (_strchr($1,101)|0);
   $14 = ($13|0)==(0|0);
   if ($14) {
    $15 = $3;
   } else {
    HEAP32[$vararg_buffer>>2] = $0;
    $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
    HEAP32[$vararg_ptr1>>2] = 2;
    $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
    HEAP32[$vararg_ptr2>>2] = 1;
    (___syscall221(221,($vararg_buffer|0))|0);
    $$pre = HEAP8[$1>>0]|0;
    $15 = $$pre;
   }
   $16 = ($15<<24>>24)==(97);
   if ($16) {
    HEAP32[$vararg_buffer3>>2] = $0;
    $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
    HEAP32[$vararg_ptr6>>2] = 3;
    $17 = (___syscall221(221,($vararg_buffer3|0))|0);
    $18 = $17 & 1024;
    $19 = ($18|0)==(0);
    if ($19) {
     $20 = $17 | 1024;
     HEAP32[$vararg_buffer7>>2] = $0;
     $vararg_ptr10 = ((($vararg_buffer7)) + 4|0);
     HEAP32[$vararg_ptr10>>2] = 4;
     $vararg_ptr11 = ((($vararg_buffer7)) + 8|0);
     HEAP32[$vararg_ptr11>>2] = $20;
     (___syscall221(221,($vararg_buffer7|0))|0);
    }
    $21 = HEAP32[$7>>2]|0;
    $22 = $21 | 128;
    HEAP32[$7>>2] = $22;
    $29 = $22;
   } else {
    $$pre31 = HEAP32[$7>>2]|0;
    $29 = $$pre31;
   }
   $23 = ((($7)) + 60|0);
   HEAP32[$23>>2] = $0;
   $24 = ((($7)) + 132|0);
   $25 = ((($7)) + 44|0);
   HEAP32[$25>>2] = $24;
   $26 = ((($7)) + 48|0);
   HEAP32[$26>>2] = 1024;
   $27 = ((($7)) + 75|0);
   HEAP8[$27>>0] = -1;
   $28 = $29 & 8;
   $30 = ($28|0)==(0);
   if ($30) {
    $31 = $2;
    HEAP32[$vararg_buffer12>>2] = $0;
    $vararg_ptr15 = ((($vararg_buffer12)) + 4|0);
    HEAP32[$vararg_ptr15>>2] = 21523;
    $vararg_ptr16 = ((($vararg_buffer12)) + 8|0);
    HEAP32[$vararg_ptr16>>2] = $31;
    $32 = (___syscall54(54,($vararg_buffer12|0))|0);
    $33 = ($32|0)==(0);
    if ($33) {
     HEAP8[$27>>0] = 10;
    }
   }
   $34 = ((($7)) + 32|0);
   HEAP32[$34>>2] = 11;
   $35 = ((($7)) + 36|0);
   HEAP32[$35>>2] = 9;
   $36 = ((($7)) + 40|0);
   HEAP32[$36>>2] = 8;
   $37 = ((($7)) + 12|0);
   HEAP32[$37>>2] = 6;
   $38 = HEAP32[(52244)>>2]|0;
   $39 = ($38|0)==(0);
   if ($39) {
    $40 = ((($7)) + 76|0);
    HEAP32[$40>>2] = -1;
   }
   $41 = (___ofl_add($7)|0);
   $$0 = $41;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function ___ofl_add($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (___ofl_lock()|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($0)) + 56|0);
 HEAP32[$3>>2] = $2;
 $4 = HEAP32[$1>>2]|0;
 $5 = ($4|0)==(0|0);
 if (!($5)) {
  $6 = ((($4)) + 52|0);
  HEAP32[$6>>2] = $0;
 }
 HEAP32[$1>>2] = $0;
 ___ofl_unlock();
 return ($0|0);
}
function _fopen($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $memchr = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, $vararg_buffer8 = 0, $vararg_ptr1 = 0;
 var $vararg_ptr2 = 0, $vararg_ptr6 = 0, $vararg_ptr7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $vararg_buffer8 = sp + 32|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $2 = HEAP8[$1>>0]|0;
 $3 = $2 << 24 >> 24;
 $memchr = (_memchr(9839,$3,4)|0);
 $4 = ($memchr|0)==(0|0);
 if ($4) {
  $5 = (___errno_location()|0);
  HEAP32[$5>>2] = 22;
  $$0 = 0;
 } else {
  $6 = (___fmodeflags($1)|0);
  $7 = $0;
  $8 = $6 | 32768;
  HEAP32[$vararg_buffer>>2] = $7;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $8;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr2>>2] = 438;
  $9 = (___syscall5(5,($vararg_buffer|0))|0);
  $10 = (___syscall_ret($9)|0);
  $11 = ($10|0)<(0);
  if ($11) {
   $$0 = 0;
  } else {
   $12 = $6 & 524288;
   $13 = ($12|0)==(0);
   if (!($13)) {
    HEAP32[$vararg_buffer3>>2] = $10;
    $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
    HEAP32[$vararg_ptr6>>2] = 2;
    $vararg_ptr7 = ((($vararg_buffer3)) + 8|0);
    HEAP32[$vararg_ptr7>>2] = 1;
    (___syscall221(221,($vararg_buffer3|0))|0);
   }
   $14 = (___fdopen($10,$1)|0);
   $15 = ($14|0)==(0|0);
   if ($15) {
    HEAP32[$vararg_buffer8>>2] = $10;
    (___syscall6(6,($vararg_buffer8|0))|0);
    $$0 = 0;
   } else {
    $$0 = $14;
   }
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function ___fmodeflags($0) {
 $0 = $0|0;
 var $$ = 0, $$$4 = 0, $$0 = 0, $$0$ = 0, $$2 = 0, $$2$ = 0, $$4 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_strchr($0,43)|0);
 $2 = ($1|0)==(0|0);
 $3 = HEAP8[$0>>0]|0;
 $not$ = ($3<<24>>24)!=(114);
 $$ = $not$&1;
 $$0 = $2 ? $$ : 2;
 $4 = (_strchr($0,120)|0);
 $5 = ($4|0)==(0|0);
 $6 = $$0 | 128;
 $$0$ = $5 ? $$0 : $6;
 $7 = (_strchr($0,101)|0);
 $8 = ($7|0)==(0|0);
 $9 = $$0$ | 524288;
 $$2 = $8 ? $$0$ : $9;
 $10 = ($3<<24>>24)==(114);
 $11 = $$2 | 64;
 $$2$ = $10 ? $$2 : $11;
 $12 = ($3<<24>>24)==(119);
 $13 = $$2$ | 512;
 $$4 = $12 ? $13 : $$2$;
 $14 = ($3<<24>>24)==(97);
 $15 = $$4 | 1024;
 $$$4 = $14 ? $15 : $$4;
 return ($$$4|0);
}
function _fgetc($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 76|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)<(0);
 if ($3) {
  label = 3;
 } else {
  $4 = (___lockfile($0)|0);
  $5 = ($4|0)==(0);
  if ($5) {
   label = 3;
  } else {
   $15 = ((($0)) + 4|0);
   $16 = HEAP32[$15>>2]|0;
   $17 = ((($0)) + 8|0);
   $18 = HEAP32[$17>>2]|0;
   $19 = ($16>>>0)<($18>>>0);
   if ($19) {
    $20 = ((($16)) + 1|0);
    HEAP32[$15>>2] = $20;
    $21 = HEAP8[$16>>0]|0;
    $22 = $21&255;
    $24 = $22;
   } else {
    $23 = (___uflow($0)|0);
    $24 = $23;
   }
   ___unlockfile($0);
   $$0 = $24;
  }
 }
 do {
  if ((label|0) == 3) {
   $6 = ((($0)) + 4|0);
   $7 = HEAP32[$6>>2]|0;
   $8 = ((($0)) + 8|0);
   $9 = HEAP32[$8>>2]|0;
   $10 = ($7>>>0)<($9>>>0);
   if ($10) {
    $11 = ((($7)) + 1|0);
    HEAP32[$6>>2] = $11;
    $12 = HEAP8[$7>>0]|0;
    $13 = $12&255;
    $$0 = $13;
    break;
   } else {
    $14 = (___uflow($0)|0);
    $$0 = $14;
    break;
   }
  }
 } while(0);
 return ($$0|0);
}
function _atoi($0) {
 $0 = $0|0;
 var $$0 = 0, $$010$lcssa = 0, $$01016 = 0, $$011 = 0, $$1$ph = 0, $$112$ph = 0, $$11215 = 0, $$pre = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $isdigit = 0, $isdigit14 = 0, $isdigittmp = 0, $isdigittmp13 = 0, $isdigittmp17 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$011 = $0;
 while(1) {
  $1 = HEAP8[$$011>>0]|0;
  $2 = $1 << 24 >> 24;
  $3 = (_isspace($2)|0);
  $4 = ($3|0)==(0);
  $5 = ((($$011)) + 1|0);
  if ($4) {
   break;
  } else {
   $$011 = $5;
  }
 }
 switch ($2|0) {
 case 45:  {
  $$0 = 1;
  label = 5;
  break;
 }
 case 43:  {
  $$0 = 0;
  label = 5;
  break;
 }
 default: {
  $$1$ph = 0;$$112$ph = $$011;$7 = $1;
 }
 }
 if ((label|0) == 5) {
  $$pre = HEAP8[$5>>0]|0;
  $$1$ph = $$0;$$112$ph = $5;$7 = $$pre;
 }
 $6 = $7 << 24 >> 24;
 $isdigittmp13 = (($6) + -48)|0;
 $isdigit14 = ($isdigittmp13>>>0)<(10);
 if ($isdigit14) {
  $$01016 = 0;$$11215 = $$112$ph;$isdigittmp17 = $isdigittmp13;
  while(1) {
   $8 = ($$01016*10)|0;
   $9 = ((($$11215)) + 1|0);
   $10 = (($8) - ($isdigittmp17))|0;
   $11 = HEAP8[$9>>0]|0;
   $12 = $11 << 24 >> 24;
   $isdigittmp = (($12) + -48)|0;
   $isdigit = ($isdigittmp>>>0)<(10);
   if ($isdigit) {
    $$01016 = $10;$$11215 = $9;$isdigittmp17 = $isdigittmp;
   } else {
    $$010$lcssa = $10;
    break;
   }
  }
 } else {
  $$010$lcssa = 0;
 }
 $13 = ($$1$ph|0)!=(0);
 $14 = (0 - ($$010$lcssa))|0;
 $15 = $13 ? $$010$lcssa : $14;
 return ($15|0);
}
function _malloc($0) {
 $0 = $0|0;
 var $$$0190$i = 0, $$$0191$i = 0, $$$4349$i = 0, $$$i = 0, $$0 = 0, $$0$i$i = 0, $$0$i$i$i = 0, $$0$i17$i = 0, $$0$i18$i = 0, $$01$i$i = 0, $$0187$i = 0, $$0189$i = 0, $$0190$i = 0, $$0191$i = 0, $$0197 = 0, $$0199 = 0, $$0206$i$i = 0, $$0207$i$i = 0, $$0211$i$i = 0, $$0212$i$i = 0;
 var $$024370$i = 0, $$0286$i$i = 0, $$0287$i$i = 0, $$0288$i$i = 0, $$0294$i$i = 0, $$0295$i$i = 0, $$0340$i = 0, $$0342$i = 0, $$0343$i = 0, $$0345$i = 0, $$0351$i = 0, $$0356$i = 0, $$0357$$i = 0, $$0357$i = 0, $$0359$i = 0, $$0360$i = 0, $$0366$i = 0, $$1194$i = 0, $$1196$i = 0, $$124469$i = 0;
 var $$1290$i$i = 0, $$1292$i$i = 0, $$1341$i = 0, $$1346$i = 0, $$1361$i = 0, $$1368$i = 0, $$1372$i = 0, $$2247$ph$i = 0, $$2253$ph$i = 0, $$2353$i = 0, $$3$i = 0, $$3$i$i = 0, $$3$i201 = 0, $$3348$i = 0, $$3370$i = 0, $$4$lcssa$i = 0, $$413$i = 0, $$4349$lcssa$i = 0, $$434912$i = 0, $$4355$$4$i = 0;
 var $$4355$ph$i = 0, $$435511$i = 0, $$5256$i = 0, $$723947$i = 0, $$748$i = 0, $$not$i = 0, $$pre = 0, $$pre$i = 0, $$pre$i$i = 0, $$pre$i19$i = 0, $$pre$i205 = 0, $$pre$i208 = 0, $$pre$phi$i$iZ2D = 0, $$pre$phi$i20$iZ2D = 0, $$pre$phi$i206Z2D = 0, $$pre$phi$iZ2D = 0, $$pre$phi10$i$iZ2D = 0, $$pre$phiZ2D = 0, $$pre9$i$i = 0, $1 = 0;
 var $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0, $1015 = 0, $1016 = 0;
 var $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0, $1033 = 0, $1034 = 0;
 var $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0, $1051 = 0, $1052 = 0;
 var $1053 = 0, $1054 = 0, $1055 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0;
 var $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0;
 var $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0;
 var $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0;
 var $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0;
 var $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0;
 var $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0;
 var $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0;
 var $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0;
 var $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0;
 var $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0;
 var $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0;
 var $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0;
 var $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0;
 var $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0;
 var $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0;
 var $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0;
 var $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0;
 var $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0;
 var $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0;
 var $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0;
 var $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0;
 var $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0;
 var $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0;
 var $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0;
 var $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0;
 var $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0;
 var $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0;
 var $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0;
 var $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0;
 var $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0;
 var $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0;
 var $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0;
 var $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0;
 var $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0;
 var $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0;
 var $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0;
 var $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0;
 var $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0;
 var $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0;
 var $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0;
 var $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0;
 var $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0;
 var $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0;
 var $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0;
 var $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0;
 var $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0;
 var $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0;
 var $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0;
 var $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $cond$i = 0, $cond$i$i = 0, $cond$i204 = 0, $exitcond$i$i = 0, $not$$i$i = 0, $not$$i22$i = 0;
 var $not$7$i = 0, $or$cond$i = 0, $or$cond$i211 = 0, $or$cond1$i = 0, $or$cond1$i210 = 0, $or$cond10$i = 0, $or$cond11$i = 0, $or$cond12$i = 0, $or$cond2$i = 0, $or$cond5$i = 0, $or$cond50$i = 0, $or$cond7$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 $2 = ($0>>>0)<(245);
 do {
  if ($2) {
   $3 = ($0>>>0)<(11);
   $4 = (($0) + 11)|0;
   $5 = $4 & -8;
   $6 = $3 ? 16 : $5;
   $7 = $6 >>> 3;
   $8 = HEAP32[13079]|0;
   $9 = $8 >>> $7;
   $10 = $9 & 3;
   $11 = ($10|0)==(0);
   if (!($11)) {
    $12 = $9 & 1;
    $13 = $12 ^ 1;
    $14 = (($13) + ($7))|0;
    $15 = $14 << 1;
    $16 = (52356 + ($15<<2)|0);
    $17 = ((($16)) + 8|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = ((($18)) + 8|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = ($16|0)==($20|0);
    do {
     if ($21) {
      $22 = 1 << $14;
      $23 = $22 ^ -1;
      $24 = $8 & $23;
      HEAP32[13079] = $24;
     } else {
      $25 = HEAP32[(52332)>>2]|0;
      $26 = ($20>>>0)<($25>>>0);
      if ($26) {
       _abort();
       // unreachable;
      }
      $27 = ((($20)) + 12|0);
      $28 = HEAP32[$27>>2]|0;
      $29 = ($28|0)==($18|0);
      if ($29) {
       HEAP32[$27>>2] = $16;
       HEAP32[$17>>2] = $20;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    } while(0);
    $30 = $14 << 3;
    $31 = $30 | 3;
    $32 = ((($18)) + 4|0);
    HEAP32[$32>>2] = $31;
    $33 = (($18) + ($30)|0);
    $34 = ((($33)) + 4|0);
    $35 = HEAP32[$34>>2]|0;
    $36 = $35 | 1;
    HEAP32[$34>>2] = $36;
    $$0 = $19;
    STACKTOP = sp;return ($$0|0);
   }
   $37 = HEAP32[(52324)>>2]|0;
   $38 = ($6>>>0)>($37>>>0);
   if ($38) {
    $39 = ($9|0)==(0);
    if (!($39)) {
     $40 = $9 << $7;
     $41 = 2 << $7;
     $42 = (0 - ($41))|0;
     $43 = $41 | $42;
     $44 = $40 & $43;
     $45 = (0 - ($44))|0;
     $46 = $44 & $45;
     $47 = (($46) + -1)|0;
     $48 = $47 >>> 12;
     $49 = $48 & 16;
     $50 = $47 >>> $49;
     $51 = $50 >>> 5;
     $52 = $51 & 8;
     $53 = $52 | $49;
     $54 = $50 >>> $52;
     $55 = $54 >>> 2;
     $56 = $55 & 4;
     $57 = $53 | $56;
     $58 = $54 >>> $56;
     $59 = $58 >>> 1;
     $60 = $59 & 2;
     $61 = $57 | $60;
     $62 = $58 >>> $60;
     $63 = $62 >>> 1;
     $64 = $63 & 1;
     $65 = $61 | $64;
     $66 = $62 >>> $64;
     $67 = (($65) + ($66))|0;
     $68 = $67 << 1;
     $69 = (52356 + ($68<<2)|0);
     $70 = ((($69)) + 8|0);
     $71 = HEAP32[$70>>2]|0;
     $72 = ((($71)) + 8|0);
     $73 = HEAP32[$72>>2]|0;
     $74 = ($69|0)==($73|0);
     do {
      if ($74) {
       $75 = 1 << $67;
       $76 = $75 ^ -1;
       $77 = $8 & $76;
       HEAP32[13079] = $77;
       $98 = $77;
      } else {
       $78 = HEAP32[(52332)>>2]|0;
       $79 = ($73>>>0)<($78>>>0);
       if ($79) {
        _abort();
        // unreachable;
       }
       $80 = ((($73)) + 12|0);
       $81 = HEAP32[$80>>2]|0;
       $82 = ($81|0)==($71|0);
       if ($82) {
        HEAP32[$80>>2] = $69;
        HEAP32[$70>>2] = $73;
        $98 = $8;
        break;
       } else {
        _abort();
        // unreachable;
       }
      }
     } while(0);
     $83 = $67 << 3;
     $84 = (($83) - ($6))|0;
     $85 = $6 | 3;
     $86 = ((($71)) + 4|0);
     HEAP32[$86>>2] = $85;
     $87 = (($71) + ($6)|0);
     $88 = $84 | 1;
     $89 = ((($87)) + 4|0);
     HEAP32[$89>>2] = $88;
     $90 = (($87) + ($84)|0);
     HEAP32[$90>>2] = $84;
     $91 = ($37|0)==(0);
     if (!($91)) {
      $92 = HEAP32[(52336)>>2]|0;
      $93 = $37 >>> 3;
      $94 = $93 << 1;
      $95 = (52356 + ($94<<2)|0);
      $96 = 1 << $93;
      $97 = $98 & $96;
      $99 = ($97|0)==(0);
      if ($99) {
       $100 = $98 | $96;
       HEAP32[13079] = $100;
       $$pre = ((($95)) + 8|0);
       $$0199 = $95;$$pre$phiZ2D = $$pre;
      } else {
       $101 = ((($95)) + 8|0);
       $102 = HEAP32[$101>>2]|0;
       $103 = HEAP32[(52332)>>2]|0;
       $104 = ($102>>>0)<($103>>>0);
       if ($104) {
        _abort();
        // unreachable;
       } else {
        $$0199 = $102;$$pre$phiZ2D = $101;
       }
      }
      HEAP32[$$pre$phiZ2D>>2] = $92;
      $105 = ((($$0199)) + 12|0);
      HEAP32[$105>>2] = $92;
      $106 = ((($92)) + 8|0);
      HEAP32[$106>>2] = $$0199;
      $107 = ((($92)) + 12|0);
      HEAP32[$107>>2] = $95;
     }
     HEAP32[(52324)>>2] = $84;
     HEAP32[(52336)>>2] = $87;
     $$0 = $72;
     STACKTOP = sp;return ($$0|0);
    }
    $108 = HEAP32[(52320)>>2]|0;
    $109 = ($108|0)==(0);
    if ($109) {
     $$0197 = $6;
    } else {
     $110 = (0 - ($108))|0;
     $111 = $108 & $110;
     $112 = (($111) + -1)|0;
     $113 = $112 >>> 12;
     $114 = $113 & 16;
     $115 = $112 >>> $114;
     $116 = $115 >>> 5;
     $117 = $116 & 8;
     $118 = $117 | $114;
     $119 = $115 >>> $117;
     $120 = $119 >>> 2;
     $121 = $120 & 4;
     $122 = $118 | $121;
     $123 = $119 >>> $121;
     $124 = $123 >>> 1;
     $125 = $124 & 2;
     $126 = $122 | $125;
     $127 = $123 >>> $125;
     $128 = $127 >>> 1;
     $129 = $128 & 1;
     $130 = $126 | $129;
     $131 = $127 >>> $129;
     $132 = (($130) + ($131))|0;
     $133 = (52620 + ($132<<2)|0);
     $134 = HEAP32[$133>>2]|0;
     $135 = ((($134)) + 4|0);
     $136 = HEAP32[$135>>2]|0;
     $137 = $136 & -8;
     $138 = (($137) - ($6))|0;
     $$0189$i = $134;$$0190$i = $134;$$0191$i = $138;
     while(1) {
      $139 = ((($$0189$i)) + 16|0);
      $140 = HEAP32[$139>>2]|0;
      $141 = ($140|0)==(0|0);
      if ($141) {
       $142 = ((($$0189$i)) + 20|0);
       $143 = HEAP32[$142>>2]|0;
       $144 = ($143|0)==(0|0);
       if ($144) {
        break;
       } else {
        $146 = $143;
       }
      } else {
       $146 = $140;
      }
      $145 = ((($146)) + 4|0);
      $147 = HEAP32[$145>>2]|0;
      $148 = $147 & -8;
      $149 = (($148) - ($6))|0;
      $150 = ($149>>>0)<($$0191$i>>>0);
      $$$0191$i = $150 ? $149 : $$0191$i;
      $$$0190$i = $150 ? $146 : $$0190$i;
      $$0189$i = $146;$$0190$i = $$$0190$i;$$0191$i = $$$0191$i;
     }
     $151 = HEAP32[(52332)>>2]|0;
     $152 = ($$0190$i>>>0)<($151>>>0);
     if ($152) {
      _abort();
      // unreachable;
     }
     $153 = (($$0190$i) + ($6)|0);
     $154 = ($$0190$i>>>0)<($153>>>0);
     if (!($154)) {
      _abort();
      // unreachable;
     }
     $155 = ((($$0190$i)) + 24|0);
     $156 = HEAP32[$155>>2]|0;
     $157 = ((($$0190$i)) + 12|0);
     $158 = HEAP32[$157>>2]|0;
     $159 = ($158|0)==($$0190$i|0);
     do {
      if ($159) {
       $169 = ((($$0190$i)) + 20|0);
       $170 = HEAP32[$169>>2]|0;
       $171 = ($170|0)==(0|0);
       if ($171) {
        $172 = ((($$0190$i)) + 16|0);
        $173 = HEAP32[$172>>2]|0;
        $174 = ($173|0)==(0|0);
        if ($174) {
         $$3$i = 0;
         break;
        } else {
         $$1194$i = $173;$$1196$i = $172;
        }
       } else {
        $$1194$i = $170;$$1196$i = $169;
       }
       while(1) {
        $175 = ((($$1194$i)) + 20|0);
        $176 = HEAP32[$175>>2]|0;
        $177 = ($176|0)==(0|0);
        if (!($177)) {
         $$1194$i = $176;$$1196$i = $175;
         continue;
        }
        $178 = ((($$1194$i)) + 16|0);
        $179 = HEAP32[$178>>2]|0;
        $180 = ($179|0)==(0|0);
        if ($180) {
         break;
        } else {
         $$1194$i = $179;$$1196$i = $178;
        }
       }
       $181 = ($$1196$i>>>0)<($151>>>0);
       if ($181) {
        _abort();
        // unreachable;
       } else {
        HEAP32[$$1196$i>>2] = 0;
        $$3$i = $$1194$i;
        break;
       }
      } else {
       $160 = ((($$0190$i)) + 8|0);
       $161 = HEAP32[$160>>2]|0;
       $162 = ($161>>>0)<($151>>>0);
       if ($162) {
        _abort();
        // unreachable;
       }
       $163 = ((($161)) + 12|0);
       $164 = HEAP32[$163>>2]|0;
       $165 = ($164|0)==($$0190$i|0);
       if (!($165)) {
        _abort();
        // unreachable;
       }
       $166 = ((($158)) + 8|0);
       $167 = HEAP32[$166>>2]|0;
       $168 = ($167|0)==($$0190$i|0);
       if ($168) {
        HEAP32[$163>>2] = $158;
        HEAP32[$166>>2] = $161;
        $$3$i = $158;
        break;
       } else {
        _abort();
        // unreachable;
       }
      }
     } while(0);
     $182 = ($156|0)==(0|0);
     do {
      if (!($182)) {
       $183 = ((($$0190$i)) + 28|0);
       $184 = HEAP32[$183>>2]|0;
       $185 = (52620 + ($184<<2)|0);
       $186 = HEAP32[$185>>2]|0;
       $187 = ($$0190$i|0)==($186|0);
       if ($187) {
        HEAP32[$185>>2] = $$3$i;
        $cond$i = ($$3$i|0)==(0|0);
        if ($cond$i) {
         $188 = 1 << $184;
         $189 = $188 ^ -1;
         $190 = $108 & $189;
         HEAP32[(52320)>>2] = $190;
         break;
        }
       } else {
        $191 = HEAP32[(52332)>>2]|0;
        $192 = ($156>>>0)<($191>>>0);
        if ($192) {
         _abort();
         // unreachable;
        }
        $193 = ((($156)) + 16|0);
        $194 = HEAP32[$193>>2]|0;
        $195 = ($194|0)==($$0190$i|0);
        if ($195) {
         HEAP32[$193>>2] = $$3$i;
        } else {
         $196 = ((($156)) + 20|0);
         HEAP32[$196>>2] = $$3$i;
        }
        $197 = ($$3$i|0)==(0|0);
        if ($197) {
         break;
        }
       }
       $198 = HEAP32[(52332)>>2]|0;
       $199 = ($$3$i>>>0)<($198>>>0);
       if ($199) {
        _abort();
        // unreachable;
       }
       $200 = ((($$3$i)) + 24|0);
       HEAP32[$200>>2] = $156;
       $201 = ((($$0190$i)) + 16|0);
       $202 = HEAP32[$201>>2]|0;
       $203 = ($202|0)==(0|0);
       do {
        if (!($203)) {
         $204 = ($202>>>0)<($198>>>0);
         if ($204) {
          _abort();
          // unreachable;
         } else {
          $205 = ((($$3$i)) + 16|0);
          HEAP32[$205>>2] = $202;
          $206 = ((($202)) + 24|0);
          HEAP32[$206>>2] = $$3$i;
          break;
         }
        }
       } while(0);
       $207 = ((($$0190$i)) + 20|0);
       $208 = HEAP32[$207>>2]|0;
       $209 = ($208|0)==(0|0);
       if (!($209)) {
        $210 = HEAP32[(52332)>>2]|0;
        $211 = ($208>>>0)<($210>>>0);
        if ($211) {
         _abort();
         // unreachable;
        } else {
         $212 = ((($$3$i)) + 20|0);
         HEAP32[$212>>2] = $208;
         $213 = ((($208)) + 24|0);
         HEAP32[$213>>2] = $$3$i;
         break;
        }
       }
      }
     } while(0);
     $214 = ($$0191$i>>>0)<(16);
     if ($214) {
      $215 = (($$0191$i) + ($6))|0;
      $216 = $215 | 3;
      $217 = ((($$0190$i)) + 4|0);
      HEAP32[$217>>2] = $216;
      $218 = (($$0190$i) + ($215)|0);
      $219 = ((($218)) + 4|0);
      $220 = HEAP32[$219>>2]|0;
      $221 = $220 | 1;
      HEAP32[$219>>2] = $221;
     } else {
      $222 = $6 | 3;
      $223 = ((($$0190$i)) + 4|0);
      HEAP32[$223>>2] = $222;
      $224 = $$0191$i | 1;
      $225 = ((($153)) + 4|0);
      HEAP32[$225>>2] = $224;
      $226 = (($153) + ($$0191$i)|0);
      HEAP32[$226>>2] = $$0191$i;
      $227 = ($37|0)==(0);
      if (!($227)) {
       $228 = HEAP32[(52336)>>2]|0;
       $229 = $37 >>> 3;
       $230 = $229 << 1;
       $231 = (52356 + ($230<<2)|0);
       $232 = 1 << $229;
       $233 = $8 & $232;
       $234 = ($233|0)==(0);
       if ($234) {
        $235 = $8 | $232;
        HEAP32[13079] = $235;
        $$pre$i = ((($231)) + 8|0);
        $$0187$i = $231;$$pre$phi$iZ2D = $$pre$i;
       } else {
        $236 = ((($231)) + 8|0);
        $237 = HEAP32[$236>>2]|0;
        $238 = HEAP32[(52332)>>2]|0;
        $239 = ($237>>>0)<($238>>>0);
        if ($239) {
         _abort();
         // unreachable;
        } else {
         $$0187$i = $237;$$pre$phi$iZ2D = $236;
        }
       }
       HEAP32[$$pre$phi$iZ2D>>2] = $228;
       $240 = ((($$0187$i)) + 12|0);
       HEAP32[$240>>2] = $228;
       $241 = ((($228)) + 8|0);
       HEAP32[$241>>2] = $$0187$i;
       $242 = ((($228)) + 12|0);
       HEAP32[$242>>2] = $231;
      }
      HEAP32[(52324)>>2] = $$0191$i;
      HEAP32[(52336)>>2] = $153;
     }
     $243 = ((($$0190$i)) + 8|0);
     $$0 = $243;
     STACKTOP = sp;return ($$0|0);
    }
   } else {
    $$0197 = $6;
   }
  } else {
   $244 = ($0>>>0)>(4294967231);
   if ($244) {
    $$0197 = -1;
   } else {
    $245 = (($0) + 11)|0;
    $246 = $245 & -8;
    $247 = HEAP32[(52320)>>2]|0;
    $248 = ($247|0)==(0);
    if ($248) {
     $$0197 = $246;
    } else {
     $249 = (0 - ($246))|0;
     $250 = $245 >>> 8;
     $251 = ($250|0)==(0);
     if ($251) {
      $$0356$i = 0;
     } else {
      $252 = ($246>>>0)>(16777215);
      if ($252) {
       $$0356$i = 31;
      } else {
       $253 = (($250) + 1048320)|0;
       $254 = $253 >>> 16;
       $255 = $254 & 8;
       $256 = $250 << $255;
       $257 = (($256) + 520192)|0;
       $258 = $257 >>> 16;
       $259 = $258 & 4;
       $260 = $259 | $255;
       $261 = $256 << $259;
       $262 = (($261) + 245760)|0;
       $263 = $262 >>> 16;
       $264 = $263 & 2;
       $265 = $260 | $264;
       $266 = (14 - ($265))|0;
       $267 = $261 << $264;
       $268 = $267 >>> 15;
       $269 = (($266) + ($268))|0;
       $270 = $269 << 1;
       $271 = (($269) + 7)|0;
       $272 = $246 >>> $271;
       $273 = $272 & 1;
       $274 = $273 | $270;
       $$0356$i = $274;
      }
     }
     $275 = (52620 + ($$0356$i<<2)|0);
     $276 = HEAP32[$275>>2]|0;
     $277 = ($276|0)==(0|0);
     L123: do {
      if ($277) {
       $$2353$i = 0;$$3$i201 = 0;$$3348$i = $249;
       label = 86;
      } else {
       $278 = ($$0356$i|0)==(31);
       $279 = $$0356$i >>> 1;
       $280 = (25 - ($279))|0;
       $281 = $278 ? 0 : $280;
       $282 = $246 << $281;
       $$0340$i = 0;$$0345$i = $249;$$0351$i = $276;$$0357$i = $282;$$0360$i = 0;
       while(1) {
        $283 = ((($$0351$i)) + 4|0);
        $284 = HEAP32[$283>>2]|0;
        $285 = $284 & -8;
        $286 = (($285) - ($246))|0;
        $287 = ($286>>>0)<($$0345$i>>>0);
        if ($287) {
         $288 = ($286|0)==(0);
         if ($288) {
          $$413$i = $$0351$i;$$434912$i = 0;$$435511$i = $$0351$i;
          label = 90;
          break L123;
         } else {
          $$1341$i = $$0351$i;$$1346$i = $286;
         }
        } else {
         $$1341$i = $$0340$i;$$1346$i = $$0345$i;
        }
        $289 = ((($$0351$i)) + 20|0);
        $290 = HEAP32[$289>>2]|0;
        $291 = $$0357$i >>> 31;
        $292 = (((($$0351$i)) + 16|0) + ($291<<2)|0);
        $293 = HEAP32[$292>>2]|0;
        $294 = ($290|0)==(0|0);
        $295 = ($290|0)==($293|0);
        $or$cond1$i = $294 | $295;
        $$1361$i = $or$cond1$i ? $$0360$i : $290;
        $296 = ($293|0)==(0|0);
        $297 = $296&1;
        $298 = $297 ^ 1;
        $$0357$$i = $$0357$i << $298;
        if ($296) {
         $$2353$i = $$1361$i;$$3$i201 = $$1341$i;$$3348$i = $$1346$i;
         label = 86;
         break;
        } else {
         $$0340$i = $$1341$i;$$0345$i = $$1346$i;$$0351$i = $293;$$0357$i = $$0357$$i;$$0360$i = $$1361$i;
        }
       }
      }
     } while(0);
     if ((label|0) == 86) {
      $299 = ($$2353$i|0)==(0|0);
      $300 = ($$3$i201|0)==(0|0);
      $or$cond$i = $299 & $300;
      if ($or$cond$i) {
       $301 = 2 << $$0356$i;
       $302 = (0 - ($301))|0;
       $303 = $301 | $302;
       $304 = $247 & $303;
       $305 = ($304|0)==(0);
       if ($305) {
        $$0197 = $246;
        break;
       }
       $306 = (0 - ($304))|0;
       $307 = $304 & $306;
       $308 = (($307) + -1)|0;
       $309 = $308 >>> 12;
       $310 = $309 & 16;
       $311 = $308 >>> $310;
       $312 = $311 >>> 5;
       $313 = $312 & 8;
       $314 = $313 | $310;
       $315 = $311 >>> $313;
       $316 = $315 >>> 2;
       $317 = $316 & 4;
       $318 = $314 | $317;
       $319 = $315 >>> $317;
       $320 = $319 >>> 1;
       $321 = $320 & 2;
       $322 = $318 | $321;
       $323 = $319 >>> $321;
       $324 = $323 >>> 1;
       $325 = $324 & 1;
       $326 = $322 | $325;
       $327 = $323 >>> $325;
       $328 = (($326) + ($327))|0;
       $329 = (52620 + ($328<<2)|0);
       $330 = HEAP32[$329>>2]|0;
       $$4355$ph$i = $330;
      } else {
       $$4355$ph$i = $$2353$i;
      }
      $331 = ($$4355$ph$i|0)==(0|0);
      if ($331) {
       $$4$lcssa$i = $$3$i201;$$4349$lcssa$i = $$3348$i;
      } else {
       $$413$i = $$3$i201;$$434912$i = $$3348$i;$$435511$i = $$4355$ph$i;
       label = 90;
      }
     }
     if ((label|0) == 90) {
      while(1) {
       label = 0;
       $332 = ((($$435511$i)) + 4|0);
       $333 = HEAP32[$332>>2]|0;
       $334 = $333 & -8;
       $335 = (($334) - ($246))|0;
       $336 = ($335>>>0)<($$434912$i>>>0);
       $$$4349$i = $336 ? $335 : $$434912$i;
       $$4355$$4$i = $336 ? $$435511$i : $$413$i;
       $337 = ((($$435511$i)) + 16|0);
       $338 = HEAP32[$337>>2]|0;
       $339 = ($338|0)==(0|0);
       if (!($339)) {
        $$413$i = $$4355$$4$i;$$434912$i = $$$4349$i;$$435511$i = $338;
        label = 90;
        continue;
       }
       $340 = ((($$435511$i)) + 20|0);
       $341 = HEAP32[$340>>2]|0;
       $342 = ($341|0)==(0|0);
       if ($342) {
        $$4$lcssa$i = $$4355$$4$i;$$4349$lcssa$i = $$$4349$i;
        break;
       } else {
        $$413$i = $$4355$$4$i;$$434912$i = $$$4349$i;$$435511$i = $341;
        label = 90;
       }
      }
     }
     $343 = ($$4$lcssa$i|0)==(0|0);
     if ($343) {
      $$0197 = $246;
     } else {
      $344 = HEAP32[(52324)>>2]|0;
      $345 = (($344) - ($246))|0;
      $346 = ($$4349$lcssa$i>>>0)<($345>>>0);
      if ($346) {
       $347 = HEAP32[(52332)>>2]|0;
       $348 = ($$4$lcssa$i>>>0)<($347>>>0);
       if ($348) {
        _abort();
        // unreachable;
       }
       $349 = (($$4$lcssa$i) + ($246)|0);
       $350 = ($$4$lcssa$i>>>0)<($349>>>0);
       if (!($350)) {
        _abort();
        // unreachable;
       }
       $351 = ((($$4$lcssa$i)) + 24|0);
       $352 = HEAP32[$351>>2]|0;
       $353 = ((($$4$lcssa$i)) + 12|0);
       $354 = HEAP32[$353>>2]|0;
       $355 = ($354|0)==($$4$lcssa$i|0);
       do {
        if ($355) {
         $365 = ((($$4$lcssa$i)) + 20|0);
         $366 = HEAP32[$365>>2]|0;
         $367 = ($366|0)==(0|0);
         if ($367) {
          $368 = ((($$4$lcssa$i)) + 16|0);
          $369 = HEAP32[$368>>2]|0;
          $370 = ($369|0)==(0|0);
          if ($370) {
           $$3370$i = 0;
           break;
          } else {
           $$1368$i = $369;$$1372$i = $368;
          }
         } else {
          $$1368$i = $366;$$1372$i = $365;
         }
         while(1) {
          $371 = ((($$1368$i)) + 20|0);
          $372 = HEAP32[$371>>2]|0;
          $373 = ($372|0)==(0|0);
          if (!($373)) {
           $$1368$i = $372;$$1372$i = $371;
           continue;
          }
          $374 = ((($$1368$i)) + 16|0);
          $375 = HEAP32[$374>>2]|0;
          $376 = ($375|0)==(0|0);
          if ($376) {
           break;
          } else {
           $$1368$i = $375;$$1372$i = $374;
          }
         }
         $377 = ($$1372$i>>>0)<($347>>>0);
         if ($377) {
          _abort();
          // unreachable;
         } else {
          HEAP32[$$1372$i>>2] = 0;
          $$3370$i = $$1368$i;
          break;
         }
        } else {
         $356 = ((($$4$lcssa$i)) + 8|0);
         $357 = HEAP32[$356>>2]|0;
         $358 = ($357>>>0)<($347>>>0);
         if ($358) {
          _abort();
          // unreachable;
         }
         $359 = ((($357)) + 12|0);
         $360 = HEAP32[$359>>2]|0;
         $361 = ($360|0)==($$4$lcssa$i|0);
         if (!($361)) {
          _abort();
          // unreachable;
         }
         $362 = ((($354)) + 8|0);
         $363 = HEAP32[$362>>2]|0;
         $364 = ($363|0)==($$4$lcssa$i|0);
         if ($364) {
          HEAP32[$359>>2] = $354;
          HEAP32[$362>>2] = $357;
          $$3370$i = $354;
          break;
         } else {
          _abort();
          // unreachable;
         }
        }
       } while(0);
       $378 = ($352|0)==(0|0);
       do {
        if ($378) {
         $470 = $247;
        } else {
         $379 = ((($$4$lcssa$i)) + 28|0);
         $380 = HEAP32[$379>>2]|0;
         $381 = (52620 + ($380<<2)|0);
         $382 = HEAP32[$381>>2]|0;
         $383 = ($$4$lcssa$i|0)==($382|0);
         if ($383) {
          HEAP32[$381>>2] = $$3370$i;
          $cond$i204 = ($$3370$i|0)==(0|0);
          if ($cond$i204) {
           $384 = 1 << $380;
           $385 = $384 ^ -1;
           $386 = $247 & $385;
           HEAP32[(52320)>>2] = $386;
           $470 = $386;
           break;
          }
         } else {
          $387 = HEAP32[(52332)>>2]|0;
          $388 = ($352>>>0)<($387>>>0);
          if ($388) {
           _abort();
           // unreachable;
          }
          $389 = ((($352)) + 16|0);
          $390 = HEAP32[$389>>2]|0;
          $391 = ($390|0)==($$4$lcssa$i|0);
          if ($391) {
           HEAP32[$389>>2] = $$3370$i;
          } else {
           $392 = ((($352)) + 20|0);
           HEAP32[$392>>2] = $$3370$i;
          }
          $393 = ($$3370$i|0)==(0|0);
          if ($393) {
           $470 = $247;
           break;
          }
         }
         $394 = HEAP32[(52332)>>2]|0;
         $395 = ($$3370$i>>>0)<($394>>>0);
         if ($395) {
          _abort();
          // unreachable;
         }
         $396 = ((($$3370$i)) + 24|0);
         HEAP32[$396>>2] = $352;
         $397 = ((($$4$lcssa$i)) + 16|0);
         $398 = HEAP32[$397>>2]|0;
         $399 = ($398|0)==(0|0);
         do {
          if (!($399)) {
           $400 = ($398>>>0)<($394>>>0);
           if ($400) {
            _abort();
            // unreachable;
           } else {
            $401 = ((($$3370$i)) + 16|0);
            HEAP32[$401>>2] = $398;
            $402 = ((($398)) + 24|0);
            HEAP32[$402>>2] = $$3370$i;
            break;
           }
          }
         } while(0);
         $403 = ((($$4$lcssa$i)) + 20|0);
         $404 = HEAP32[$403>>2]|0;
         $405 = ($404|0)==(0|0);
         if ($405) {
          $470 = $247;
         } else {
          $406 = HEAP32[(52332)>>2]|0;
          $407 = ($404>>>0)<($406>>>0);
          if ($407) {
           _abort();
           // unreachable;
          } else {
           $408 = ((($$3370$i)) + 20|0);
           HEAP32[$408>>2] = $404;
           $409 = ((($404)) + 24|0);
           HEAP32[$409>>2] = $$3370$i;
           $470 = $247;
           break;
          }
         }
        }
       } while(0);
       $410 = ($$4349$lcssa$i>>>0)<(16);
       do {
        if ($410) {
         $411 = (($$4349$lcssa$i) + ($246))|0;
         $412 = $411 | 3;
         $413 = ((($$4$lcssa$i)) + 4|0);
         HEAP32[$413>>2] = $412;
         $414 = (($$4$lcssa$i) + ($411)|0);
         $415 = ((($414)) + 4|0);
         $416 = HEAP32[$415>>2]|0;
         $417 = $416 | 1;
         HEAP32[$415>>2] = $417;
        } else {
         $418 = $246 | 3;
         $419 = ((($$4$lcssa$i)) + 4|0);
         HEAP32[$419>>2] = $418;
         $420 = $$4349$lcssa$i | 1;
         $421 = ((($349)) + 4|0);
         HEAP32[$421>>2] = $420;
         $422 = (($349) + ($$4349$lcssa$i)|0);
         HEAP32[$422>>2] = $$4349$lcssa$i;
         $423 = $$4349$lcssa$i >>> 3;
         $424 = ($$4349$lcssa$i>>>0)<(256);
         if ($424) {
          $425 = $423 << 1;
          $426 = (52356 + ($425<<2)|0);
          $427 = HEAP32[13079]|0;
          $428 = 1 << $423;
          $429 = $427 & $428;
          $430 = ($429|0)==(0);
          if ($430) {
           $431 = $427 | $428;
           HEAP32[13079] = $431;
           $$pre$i205 = ((($426)) + 8|0);
           $$0366$i = $426;$$pre$phi$i206Z2D = $$pre$i205;
          } else {
           $432 = ((($426)) + 8|0);
           $433 = HEAP32[$432>>2]|0;
           $434 = HEAP32[(52332)>>2]|0;
           $435 = ($433>>>0)<($434>>>0);
           if ($435) {
            _abort();
            // unreachable;
           } else {
            $$0366$i = $433;$$pre$phi$i206Z2D = $432;
           }
          }
          HEAP32[$$pre$phi$i206Z2D>>2] = $349;
          $436 = ((($$0366$i)) + 12|0);
          HEAP32[$436>>2] = $349;
          $437 = ((($349)) + 8|0);
          HEAP32[$437>>2] = $$0366$i;
          $438 = ((($349)) + 12|0);
          HEAP32[$438>>2] = $426;
          break;
         }
         $439 = $$4349$lcssa$i >>> 8;
         $440 = ($439|0)==(0);
         if ($440) {
          $$0359$i = 0;
         } else {
          $441 = ($$4349$lcssa$i>>>0)>(16777215);
          if ($441) {
           $$0359$i = 31;
          } else {
           $442 = (($439) + 1048320)|0;
           $443 = $442 >>> 16;
           $444 = $443 & 8;
           $445 = $439 << $444;
           $446 = (($445) + 520192)|0;
           $447 = $446 >>> 16;
           $448 = $447 & 4;
           $449 = $448 | $444;
           $450 = $445 << $448;
           $451 = (($450) + 245760)|0;
           $452 = $451 >>> 16;
           $453 = $452 & 2;
           $454 = $449 | $453;
           $455 = (14 - ($454))|0;
           $456 = $450 << $453;
           $457 = $456 >>> 15;
           $458 = (($455) + ($457))|0;
           $459 = $458 << 1;
           $460 = (($458) + 7)|0;
           $461 = $$4349$lcssa$i >>> $460;
           $462 = $461 & 1;
           $463 = $462 | $459;
           $$0359$i = $463;
          }
         }
         $464 = (52620 + ($$0359$i<<2)|0);
         $465 = ((($349)) + 28|0);
         HEAP32[$465>>2] = $$0359$i;
         $466 = ((($349)) + 16|0);
         $467 = ((($466)) + 4|0);
         HEAP32[$467>>2] = 0;
         HEAP32[$466>>2] = 0;
         $468 = 1 << $$0359$i;
         $469 = $470 & $468;
         $471 = ($469|0)==(0);
         if ($471) {
          $472 = $470 | $468;
          HEAP32[(52320)>>2] = $472;
          HEAP32[$464>>2] = $349;
          $473 = ((($349)) + 24|0);
          HEAP32[$473>>2] = $464;
          $474 = ((($349)) + 12|0);
          HEAP32[$474>>2] = $349;
          $475 = ((($349)) + 8|0);
          HEAP32[$475>>2] = $349;
          break;
         }
         $476 = HEAP32[$464>>2]|0;
         $477 = ($$0359$i|0)==(31);
         $478 = $$0359$i >>> 1;
         $479 = (25 - ($478))|0;
         $480 = $477 ? 0 : $479;
         $481 = $$4349$lcssa$i << $480;
         $$0342$i = $481;$$0343$i = $476;
         while(1) {
          $482 = ((($$0343$i)) + 4|0);
          $483 = HEAP32[$482>>2]|0;
          $484 = $483 & -8;
          $485 = ($484|0)==($$4349$lcssa$i|0);
          if ($485) {
           label = 148;
           break;
          }
          $486 = $$0342$i >>> 31;
          $487 = (((($$0343$i)) + 16|0) + ($486<<2)|0);
          $488 = $$0342$i << 1;
          $489 = HEAP32[$487>>2]|0;
          $490 = ($489|0)==(0|0);
          if ($490) {
           label = 145;
           break;
          } else {
           $$0342$i = $488;$$0343$i = $489;
          }
         }
         if ((label|0) == 145) {
          $491 = HEAP32[(52332)>>2]|0;
          $492 = ($487>>>0)<($491>>>0);
          if ($492) {
           _abort();
           // unreachable;
          } else {
           HEAP32[$487>>2] = $349;
           $493 = ((($349)) + 24|0);
           HEAP32[$493>>2] = $$0343$i;
           $494 = ((($349)) + 12|0);
           HEAP32[$494>>2] = $349;
           $495 = ((($349)) + 8|0);
           HEAP32[$495>>2] = $349;
           break;
          }
         }
         else if ((label|0) == 148) {
          $496 = ((($$0343$i)) + 8|0);
          $497 = HEAP32[$496>>2]|0;
          $498 = HEAP32[(52332)>>2]|0;
          $499 = ($497>>>0)>=($498>>>0);
          $not$7$i = ($$0343$i>>>0)>=($498>>>0);
          $500 = $499 & $not$7$i;
          if ($500) {
           $501 = ((($497)) + 12|0);
           HEAP32[$501>>2] = $349;
           HEAP32[$496>>2] = $349;
           $502 = ((($349)) + 8|0);
           HEAP32[$502>>2] = $497;
           $503 = ((($349)) + 12|0);
           HEAP32[$503>>2] = $$0343$i;
           $504 = ((($349)) + 24|0);
           HEAP32[$504>>2] = 0;
           break;
          } else {
           _abort();
           // unreachable;
          }
         }
        }
       } while(0);
       $505 = ((($$4$lcssa$i)) + 8|0);
       $$0 = $505;
       STACKTOP = sp;return ($$0|0);
      } else {
       $$0197 = $246;
      }
     }
    }
   }
  }
 } while(0);
 $506 = HEAP32[(52324)>>2]|0;
 $507 = ($506>>>0)<($$0197>>>0);
 if (!($507)) {
  $508 = (($506) - ($$0197))|0;
  $509 = HEAP32[(52336)>>2]|0;
  $510 = ($508>>>0)>(15);
  if ($510) {
   $511 = (($509) + ($$0197)|0);
   HEAP32[(52336)>>2] = $511;
   HEAP32[(52324)>>2] = $508;
   $512 = $508 | 1;
   $513 = ((($511)) + 4|0);
   HEAP32[$513>>2] = $512;
   $514 = (($511) + ($508)|0);
   HEAP32[$514>>2] = $508;
   $515 = $$0197 | 3;
   $516 = ((($509)) + 4|0);
   HEAP32[$516>>2] = $515;
  } else {
   HEAP32[(52324)>>2] = 0;
   HEAP32[(52336)>>2] = 0;
   $517 = $506 | 3;
   $518 = ((($509)) + 4|0);
   HEAP32[$518>>2] = $517;
   $519 = (($509) + ($506)|0);
   $520 = ((($519)) + 4|0);
   $521 = HEAP32[$520>>2]|0;
   $522 = $521 | 1;
   HEAP32[$520>>2] = $522;
  }
  $523 = ((($509)) + 8|0);
  $$0 = $523;
  STACKTOP = sp;return ($$0|0);
 }
 $524 = HEAP32[(52328)>>2]|0;
 $525 = ($524>>>0)>($$0197>>>0);
 if ($525) {
  $526 = (($524) - ($$0197))|0;
  HEAP32[(52328)>>2] = $526;
  $527 = HEAP32[(52340)>>2]|0;
  $528 = (($527) + ($$0197)|0);
  HEAP32[(52340)>>2] = $528;
  $529 = $526 | 1;
  $530 = ((($528)) + 4|0);
  HEAP32[$530>>2] = $529;
  $531 = $$0197 | 3;
  $532 = ((($527)) + 4|0);
  HEAP32[$532>>2] = $531;
  $533 = ((($527)) + 8|0);
  $$0 = $533;
  STACKTOP = sp;return ($$0|0);
 }
 $534 = HEAP32[13197]|0;
 $535 = ($534|0)==(0);
 if ($535) {
  HEAP32[(52796)>>2] = 4096;
  HEAP32[(52792)>>2] = 4096;
  HEAP32[(52800)>>2] = -1;
  HEAP32[(52804)>>2] = -1;
  HEAP32[(52808)>>2] = 0;
  HEAP32[(52760)>>2] = 0;
  $536 = $1;
  $537 = $536 & -16;
  $538 = $537 ^ 1431655768;
  HEAP32[$1>>2] = $538;
  HEAP32[13197] = $538;
  $542 = 4096;
 } else {
  $$pre$i208 = HEAP32[(52796)>>2]|0;
  $542 = $$pre$i208;
 }
 $539 = (($$0197) + 48)|0;
 $540 = (($$0197) + 47)|0;
 $541 = (($542) + ($540))|0;
 $543 = (0 - ($542))|0;
 $544 = $541 & $543;
 $545 = ($544>>>0)>($$0197>>>0);
 if (!($545)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $546 = HEAP32[(52756)>>2]|0;
 $547 = ($546|0)==(0);
 if (!($547)) {
  $548 = HEAP32[(52748)>>2]|0;
  $549 = (($548) + ($544))|0;
  $550 = ($549>>>0)<=($548>>>0);
  $551 = ($549>>>0)>($546>>>0);
  $or$cond1$i210 = $550 | $551;
  if ($or$cond1$i210) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $552 = HEAP32[(52760)>>2]|0;
 $553 = $552 & 4;
 $554 = ($553|0)==(0);
 L255: do {
  if ($554) {
   $555 = HEAP32[(52340)>>2]|0;
   $556 = ($555|0)==(0|0);
   L257: do {
    if ($556) {
     label = 172;
    } else {
     $$0$i17$i = (52764);
     while(1) {
      $557 = HEAP32[$$0$i17$i>>2]|0;
      $558 = ($557>>>0)>($555>>>0);
      if (!($558)) {
       $559 = ((($$0$i17$i)) + 4|0);
       $560 = HEAP32[$559>>2]|0;
       $561 = (($557) + ($560)|0);
       $562 = ($561>>>0)>($555>>>0);
       if ($562) {
        break;
       }
      }
      $563 = ((($$0$i17$i)) + 8|0);
      $564 = HEAP32[$563>>2]|0;
      $565 = ($564|0)==(0|0);
      if ($565) {
       label = 172;
       break L257;
      } else {
       $$0$i17$i = $564;
      }
     }
     $588 = (($541) - ($524))|0;
     $589 = $588 & $543;
     $590 = ($589>>>0)<(2147483647);
     if ($590) {
      $591 = (_sbrk(($589|0))|0);
      $592 = HEAP32[$$0$i17$i>>2]|0;
      $593 = HEAP32[$559>>2]|0;
      $594 = (($592) + ($593)|0);
      $595 = ($591|0)==($594|0);
      if ($595) {
       $596 = ($591|0)==((-1)|0);
       if (!($596)) {
        $$723947$i = $589;$$748$i = $591;
        label = 190;
        break L255;
       }
      } else {
       $$2247$ph$i = $591;$$2253$ph$i = $589;
       label = 180;
      }
     }
    }
   } while(0);
   do {
    if ((label|0) == 172) {
     $566 = (_sbrk(0)|0);
     $567 = ($566|0)==((-1)|0);
     if (!($567)) {
      $568 = $566;
      $569 = HEAP32[(52792)>>2]|0;
      $570 = (($569) + -1)|0;
      $571 = $570 & $568;
      $572 = ($571|0)==(0);
      $573 = (($570) + ($568))|0;
      $574 = (0 - ($569))|0;
      $575 = $573 & $574;
      $576 = (($575) - ($568))|0;
      $577 = $572 ? 0 : $576;
      $$$i = (($577) + ($544))|0;
      $578 = HEAP32[(52748)>>2]|0;
      $579 = (($$$i) + ($578))|0;
      $580 = ($$$i>>>0)>($$0197>>>0);
      $581 = ($$$i>>>0)<(2147483647);
      $or$cond$i211 = $580 & $581;
      if ($or$cond$i211) {
       $582 = HEAP32[(52756)>>2]|0;
       $583 = ($582|0)==(0);
       if (!($583)) {
        $584 = ($579>>>0)<=($578>>>0);
        $585 = ($579>>>0)>($582>>>0);
        $or$cond2$i = $584 | $585;
        if ($or$cond2$i) {
         break;
        }
       }
       $586 = (_sbrk(($$$i|0))|0);
       $587 = ($586|0)==($566|0);
       if ($587) {
        $$723947$i = $$$i;$$748$i = $566;
        label = 190;
        break L255;
       } else {
        $$2247$ph$i = $586;$$2253$ph$i = $$$i;
        label = 180;
       }
      }
     }
    }
   } while(0);
   L274: do {
    if ((label|0) == 180) {
     $597 = (0 - ($$2253$ph$i))|0;
     $598 = ($$2247$ph$i|0)!=((-1)|0);
     $599 = ($$2253$ph$i>>>0)<(2147483647);
     $or$cond7$i = $599 & $598;
     $600 = ($539>>>0)>($$2253$ph$i>>>0);
     $or$cond10$i = $600 & $or$cond7$i;
     do {
      if ($or$cond10$i) {
       $601 = HEAP32[(52796)>>2]|0;
       $602 = (($540) - ($$2253$ph$i))|0;
       $603 = (($602) + ($601))|0;
       $604 = (0 - ($601))|0;
       $605 = $603 & $604;
       $606 = ($605>>>0)<(2147483647);
       if ($606) {
        $607 = (_sbrk(($605|0))|0);
        $608 = ($607|0)==((-1)|0);
        if ($608) {
         (_sbrk(($597|0))|0);
         break L274;
        } else {
         $609 = (($605) + ($$2253$ph$i))|0;
         $$5256$i = $609;
         break;
        }
       } else {
        $$5256$i = $$2253$ph$i;
       }
      } else {
       $$5256$i = $$2253$ph$i;
      }
     } while(0);
     $610 = ($$2247$ph$i|0)==((-1)|0);
     if (!($610)) {
      $$723947$i = $$5256$i;$$748$i = $$2247$ph$i;
      label = 190;
      break L255;
     }
    }
   } while(0);
   $611 = HEAP32[(52760)>>2]|0;
   $612 = $611 | 4;
   HEAP32[(52760)>>2] = $612;
   label = 187;
  } else {
   label = 187;
  }
 } while(0);
 if ((label|0) == 187) {
  $613 = ($544>>>0)<(2147483647);
  if ($613) {
   $614 = (_sbrk(($544|0))|0);
   $615 = (_sbrk(0)|0);
   $616 = ($614|0)!=((-1)|0);
   $617 = ($615|0)!=((-1)|0);
   $or$cond5$i = $616 & $617;
   $618 = ($614>>>0)<($615>>>0);
   $or$cond11$i = $618 & $or$cond5$i;
   if ($or$cond11$i) {
    $619 = $615;
    $620 = $614;
    $621 = (($619) - ($620))|0;
    $622 = (($$0197) + 40)|0;
    $$not$i = ($621>>>0)>($622>>>0);
    if ($$not$i) {
     $$723947$i = $621;$$748$i = $614;
     label = 190;
    }
   }
  }
 }
 if ((label|0) == 190) {
  $623 = HEAP32[(52748)>>2]|0;
  $624 = (($623) + ($$723947$i))|0;
  HEAP32[(52748)>>2] = $624;
  $625 = HEAP32[(52752)>>2]|0;
  $626 = ($624>>>0)>($625>>>0);
  if ($626) {
   HEAP32[(52752)>>2] = $624;
  }
  $627 = HEAP32[(52340)>>2]|0;
  $628 = ($627|0)==(0|0);
  do {
   if ($628) {
    $629 = HEAP32[(52332)>>2]|0;
    $630 = ($629|0)==(0|0);
    $631 = ($$748$i>>>0)<($629>>>0);
    $or$cond12$i = $630 | $631;
    if ($or$cond12$i) {
     HEAP32[(52332)>>2] = $$748$i;
    }
    HEAP32[(52764)>>2] = $$748$i;
    HEAP32[(52768)>>2] = $$723947$i;
    HEAP32[(52776)>>2] = 0;
    $632 = HEAP32[13197]|0;
    HEAP32[(52352)>>2] = $632;
    HEAP32[(52348)>>2] = -1;
    $$01$i$i = 0;
    while(1) {
     $633 = $$01$i$i << 1;
     $634 = (52356 + ($633<<2)|0);
     $635 = ((($634)) + 12|0);
     HEAP32[$635>>2] = $634;
     $636 = ((($634)) + 8|0);
     HEAP32[$636>>2] = $634;
     $637 = (($$01$i$i) + 1)|0;
     $exitcond$i$i = ($637|0)==(32);
     if ($exitcond$i$i) {
      break;
     } else {
      $$01$i$i = $637;
     }
    }
    $638 = (($$723947$i) + -40)|0;
    $639 = ((($$748$i)) + 8|0);
    $640 = $639;
    $641 = $640 & 7;
    $642 = ($641|0)==(0);
    $643 = (0 - ($640))|0;
    $644 = $643 & 7;
    $645 = $642 ? 0 : $644;
    $646 = (($$748$i) + ($645)|0);
    $647 = (($638) - ($645))|0;
    HEAP32[(52340)>>2] = $646;
    HEAP32[(52328)>>2] = $647;
    $648 = $647 | 1;
    $649 = ((($646)) + 4|0);
    HEAP32[$649>>2] = $648;
    $650 = (($646) + ($647)|0);
    $651 = ((($650)) + 4|0);
    HEAP32[$651>>2] = 40;
    $652 = HEAP32[(52804)>>2]|0;
    HEAP32[(52344)>>2] = $652;
   } else {
    $$024370$i = (52764);
    while(1) {
     $653 = HEAP32[$$024370$i>>2]|0;
     $654 = ((($$024370$i)) + 4|0);
     $655 = HEAP32[$654>>2]|0;
     $656 = (($653) + ($655)|0);
     $657 = ($$748$i|0)==($656|0);
     if ($657) {
      label = 200;
      break;
     }
     $658 = ((($$024370$i)) + 8|0);
     $659 = HEAP32[$658>>2]|0;
     $660 = ($659|0)==(0|0);
     if ($660) {
      break;
     } else {
      $$024370$i = $659;
     }
    }
    if ((label|0) == 200) {
     $661 = ((($$024370$i)) + 12|0);
     $662 = HEAP32[$661>>2]|0;
     $663 = $662 & 8;
     $664 = ($663|0)==(0);
     if ($664) {
      $665 = ($627>>>0)>=($653>>>0);
      $666 = ($627>>>0)<($$748$i>>>0);
      $or$cond50$i = $666 & $665;
      if ($or$cond50$i) {
       $667 = (($655) + ($$723947$i))|0;
       HEAP32[$654>>2] = $667;
       $668 = HEAP32[(52328)>>2]|0;
       $669 = ((($627)) + 8|0);
       $670 = $669;
       $671 = $670 & 7;
       $672 = ($671|0)==(0);
       $673 = (0 - ($670))|0;
       $674 = $673 & 7;
       $675 = $672 ? 0 : $674;
       $676 = (($627) + ($675)|0);
       $677 = (($$723947$i) - ($675))|0;
       $678 = (($677) + ($668))|0;
       HEAP32[(52340)>>2] = $676;
       HEAP32[(52328)>>2] = $678;
       $679 = $678 | 1;
       $680 = ((($676)) + 4|0);
       HEAP32[$680>>2] = $679;
       $681 = (($676) + ($678)|0);
       $682 = ((($681)) + 4|0);
       HEAP32[$682>>2] = 40;
       $683 = HEAP32[(52804)>>2]|0;
       HEAP32[(52344)>>2] = $683;
       break;
      }
     }
    }
    $684 = HEAP32[(52332)>>2]|0;
    $685 = ($$748$i>>>0)<($684>>>0);
    if ($685) {
     HEAP32[(52332)>>2] = $$748$i;
     $749 = $$748$i;
    } else {
     $749 = $684;
    }
    $686 = (($$748$i) + ($$723947$i)|0);
    $$124469$i = (52764);
    while(1) {
     $687 = HEAP32[$$124469$i>>2]|0;
     $688 = ($687|0)==($686|0);
     if ($688) {
      label = 208;
      break;
     }
     $689 = ((($$124469$i)) + 8|0);
     $690 = HEAP32[$689>>2]|0;
     $691 = ($690|0)==(0|0);
     if ($691) {
      $$0$i$i$i = (52764);
      break;
     } else {
      $$124469$i = $690;
     }
    }
    if ((label|0) == 208) {
     $692 = ((($$124469$i)) + 12|0);
     $693 = HEAP32[$692>>2]|0;
     $694 = $693 & 8;
     $695 = ($694|0)==(0);
     if ($695) {
      HEAP32[$$124469$i>>2] = $$748$i;
      $696 = ((($$124469$i)) + 4|0);
      $697 = HEAP32[$696>>2]|0;
      $698 = (($697) + ($$723947$i))|0;
      HEAP32[$696>>2] = $698;
      $699 = ((($$748$i)) + 8|0);
      $700 = $699;
      $701 = $700 & 7;
      $702 = ($701|0)==(0);
      $703 = (0 - ($700))|0;
      $704 = $703 & 7;
      $705 = $702 ? 0 : $704;
      $706 = (($$748$i) + ($705)|0);
      $707 = ((($686)) + 8|0);
      $708 = $707;
      $709 = $708 & 7;
      $710 = ($709|0)==(0);
      $711 = (0 - ($708))|0;
      $712 = $711 & 7;
      $713 = $710 ? 0 : $712;
      $714 = (($686) + ($713)|0);
      $715 = $714;
      $716 = $706;
      $717 = (($715) - ($716))|0;
      $718 = (($706) + ($$0197)|0);
      $719 = (($717) - ($$0197))|0;
      $720 = $$0197 | 3;
      $721 = ((($706)) + 4|0);
      HEAP32[$721>>2] = $720;
      $722 = ($714|0)==($627|0);
      do {
       if ($722) {
        $723 = HEAP32[(52328)>>2]|0;
        $724 = (($723) + ($719))|0;
        HEAP32[(52328)>>2] = $724;
        HEAP32[(52340)>>2] = $718;
        $725 = $724 | 1;
        $726 = ((($718)) + 4|0);
        HEAP32[$726>>2] = $725;
       } else {
        $727 = HEAP32[(52336)>>2]|0;
        $728 = ($714|0)==($727|0);
        if ($728) {
         $729 = HEAP32[(52324)>>2]|0;
         $730 = (($729) + ($719))|0;
         HEAP32[(52324)>>2] = $730;
         HEAP32[(52336)>>2] = $718;
         $731 = $730 | 1;
         $732 = ((($718)) + 4|0);
         HEAP32[$732>>2] = $731;
         $733 = (($718) + ($730)|0);
         HEAP32[$733>>2] = $730;
         break;
        }
        $734 = ((($714)) + 4|0);
        $735 = HEAP32[$734>>2]|0;
        $736 = $735 & 3;
        $737 = ($736|0)==(1);
        if ($737) {
         $738 = $735 & -8;
         $739 = $735 >>> 3;
         $740 = ($735>>>0)<(256);
         L326: do {
          if ($740) {
           $741 = ((($714)) + 8|0);
           $742 = HEAP32[$741>>2]|0;
           $743 = ((($714)) + 12|0);
           $744 = HEAP32[$743>>2]|0;
           $745 = $739 << 1;
           $746 = (52356 + ($745<<2)|0);
           $747 = ($742|0)==($746|0);
           do {
            if (!($747)) {
             $748 = ($742>>>0)<($749>>>0);
             if ($748) {
              _abort();
              // unreachable;
             }
             $750 = ((($742)) + 12|0);
             $751 = HEAP32[$750>>2]|0;
             $752 = ($751|0)==($714|0);
             if ($752) {
              break;
             }
             _abort();
             // unreachable;
            }
           } while(0);
           $753 = ($744|0)==($742|0);
           if ($753) {
            $754 = 1 << $739;
            $755 = $754 ^ -1;
            $756 = HEAP32[13079]|0;
            $757 = $756 & $755;
            HEAP32[13079] = $757;
            break;
           }
           $758 = ($744|0)==($746|0);
           do {
            if ($758) {
             $$pre9$i$i = ((($744)) + 8|0);
             $$pre$phi10$i$iZ2D = $$pre9$i$i;
            } else {
             $759 = ($744>>>0)<($749>>>0);
             if ($759) {
              _abort();
              // unreachable;
             }
             $760 = ((($744)) + 8|0);
             $761 = HEAP32[$760>>2]|0;
             $762 = ($761|0)==($714|0);
             if ($762) {
              $$pre$phi10$i$iZ2D = $760;
              break;
             }
             _abort();
             // unreachable;
            }
           } while(0);
           $763 = ((($742)) + 12|0);
           HEAP32[$763>>2] = $744;
           HEAP32[$$pre$phi10$i$iZ2D>>2] = $742;
          } else {
           $764 = ((($714)) + 24|0);
           $765 = HEAP32[$764>>2]|0;
           $766 = ((($714)) + 12|0);
           $767 = HEAP32[$766>>2]|0;
           $768 = ($767|0)==($714|0);
           do {
            if ($768) {
             $778 = ((($714)) + 16|0);
             $779 = ((($778)) + 4|0);
             $780 = HEAP32[$779>>2]|0;
             $781 = ($780|0)==(0|0);
             if ($781) {
              $782 = HEAP32[$778>>2]|0;
              $783 = ($782|0)==(0|0);
              if ($783) {
               $$3$i$i = 0;
               break;
              } else {
               $$1290$i$i = $782;$$1292$i$i = $778;
              }
             } else {
              $$1290$i$i = $780;$$1292$i$i = $779;
             }
             while(1) {
              $784 = ((($$1290$i$i)) + 20|0);
              $785 = HEAP32[$784>>2]|0;
              $786 = ($785|0)==(0|0);
              if (!($786)) {
               $$1290$i$i = $785;$$1292$i$i = $784;
               continue;
              }
              $787 = ((($$1290$i$i)) + 16|0);
              $788 = HEAP32[$787>>2]|0;
              $789 = ($788|0)==(0|0);
              if ($789) {
               break;
              } else {
               $$1290$i$i = $788;$$1292$i$i = $787;
              }
             }
             $790 = ($$1292$i$i>>>0)<($749>>>0);
             if ($790) {
              _abort();
              // unreachable;
             } else {
              HEAP32[$$1292$i$i>>2] = 0;
              $$3$i$i = $$1290$i$i;
              break;
             }
            } else {
             $769 = ((($714)) + 8|0);
             $770 = HEAP32[$769>>2]|0;
             $771 = ($770>>>0)<($749>>>0);
             if ($771) {
              _abort();
              // unreachable;
             }
             $772 = ((($770)) + 12|0);
             $773 = HEAP32[$772>>2]|0;
             $774 = ($773|0)==($714|0);
             if (!($774)) {
              _abort();
              // unreachable;
             }
             $775 = ((($767)) + 8|0);
             $776 = HEAP32[$775>>2]|0;
             $777 = ($776|0)==($714|0);
             if ($777) {
              HEAP32[$772>>2] = $767;
              HEAP32[$775>>2] = $770;
              $$3$i$i = $767;
              break;
             } else {
              _abort();
              // unreachable;
             }
            }
           } while(0);
           $791 = ($765|0)==(0|0);
           if ($791) {
            break;
           }
           $792 = ((($714)) + 28|0);
           $793 = HEAP32[$792>>2]|0;
           $794 = (52620 + ($793<<2)|0);
           $795 = HEAP32[$794>>2]|0;
           $796 = ($714|0)==($795|0);
           do {
            if ($796) {
             HEAP32[$794>>2] = $$3$i$i;
             $cond$i$i = ($$3$i$i|0)==(0|0);
             if (!($cond$i$i)) {
              break;
             }
             $797 = 1 << $793;
             $798 = $797 ^ -1;
             $799 = HEAP32[(52320)>>2]|0;
             $800 = $799 & $798;
             HEAP32[(52320)>>2] = $800;
             break L326;
            } else {
             $801 = HEAP32[(52332)>>2]|0;
             $802 = ($765>>>0)<($801>>>0);
             if ($802) {
              _abort();
              // unreachable;
             }
             $803 = ((($765)) + 16|0);
             $804 = HEAP32[$803>>2]|0;
             $805 = ($804|0)==($714|0);
             if ($805) {
              HEAP32[$803>>2] = $$3$i$i;
             } else {
              $806 = ((($765)) + 20|0);
              HEAP32[$806>>2] = $$3$i$i;
             }
             $807 = ($$3$i$i|0)==(0|0);
             if ($807) {
              break L326;
             }
            }
           } while(0);
           $808 = HEAP32[(52332)>>2]|0;
           $809 = ($$3$i$i>>>0)<($808>>>0);
           if ($809) {
            _abort();
            // unreachable;
           }
           $810 = ((($$3$i$i)) + 24|0);
           HEAP32[$810>>2] = $765;
           $811 = ((($714)) + 16|0);
           $812 = HEAP32[$811>>2]|0;
           $813 = ($812|0)==(0|0);
           do {
            if (!($813)) {
             $814 = ($812>>>0)<($808>>>0);
             if ($814) {
              _abort();
              // unreachable;
             } else {
              $815 = ((($$3$i$i)) + 16|0);
              HEAP32[$815>>2] = $812;
              $816 = ((($812)) + 24|0);
              HEAP32[$816>>2] = $$3$i$i;
              break;
             }
            }
           } while(0);
           $817 = ((($811)) + 4|0);
           $818 = HEAP32[$817>>2]|0;
           $819 = ($818|0)==(0|0);
           if ($819) {
            break;
           }
           $820 = HEAP32[(52332)>>2]|0;
           $821 = ($818>>>0)<($820>>>0);
           if ($821) {
            _abort();
            // unreachable;
           } else {
            $822 = ((($$3$i$i)) + 20|0);
            HEAP32[$822>>2] = $818;
            $823 = ((($818)) + 24|0);
            HEAP32[$823>>2] = $$3$i$i;
            break;
           }
          }
         } while(0);
         $824 = (($714) + ($738)|0);
         $825 = (($738) + ($719))|0;
         $$0$i18$i = $824;$$0286$i$i = $825;
        } else {
         $$0$i18$i = $714;$$0286$i$i = $719;
        }
        $826 = ((($$0$i18$i)) + 4|0);
        $827 = HEAP32[$826>>2]|0;
        $828 = $827 & -2;
        HEAP32[$826>>2] = $828;
        $829 = $$0286$i$i | 1;
        $830 = ((($718)) + 4|0);
        HEAP32[$830>>2] = $829;
        $831 = (($718) + ($$0286$i$i)|0);
        HEAP32[$831>>2] = $$0286$i$i;
        $832 = $$0286$i$i >>> 3;
        $833 = ($$0286$i$i>>>0)<(256);
        if ($833) {
         $834 = $832 << 1;
         $835 = (52356 + ($834<<2)|0);
         $836 = HEAP32[13079]|0;
         $837 = 1 << $832;
         $838 = $836 & $837;
         $839 = ($838|0)==(0);
         do {
          if ($839) {
           $840 = $836 | $837;
           HEAP32[13079] = $840;
           $$pre$i19$i = ((($835)) + 8|0);
           $$0294$i$i = $835;$$pre$phi$i20$iZ2D = $$pre$i19$i;
          } else {
           $841 = ((($835)) + 8|0);
           $842 = HEAP32[$841>>2]|0;
           $843 = HEAP32[(52332)>>2]|0;
           $844 = ($842>>>0)<($843>>>0);
           if (!($844)) {
            $$0294$i$i = $842;$$pre$phi$i20$iZ2D = $841;
            break;
           }
           _abort();
           // unreachable;
          }
         } while(0);
         HEAP32[$$pre$phi$i20$iZ2D>>2] = $718;
         $845 = ((($$0294$i$i)) + 12|0);
         HEAP32[$845>>2] = $718;
         $846 = ((($718)) + 8|0);
         HEAP32[$846>>2] = $$0294$i$i;
         $847 = ((($718)) + 12|0);
         HEAP32[$847>>2] = $835;
         break;
        }
        $848 = $$0286$i$i >>> 8;
        $849 = ($848|0)==(0);
        do {
         if ($849) {
          $$0295$i$i = 0;
         } else {
          $850 = ($$0286$i$i>>>0)>(16777215);
          if ($850) {
           $$0295$i$i = 31;
           break;
          }
          $851 = (($848) + 1048320)|0;
          $852 = $851 >>> 16;
          $853 = $852 & 8;
          $854 = $848 << $853;
          $855 = (($854) + 520192)|0;
          $856 = $855 >>> 16;
          $857 = $856 & 4;
          $858 = $857 | $853;
          $859 = $854 << $857;
          $860 = (($859) + 245760)|0;
          $861 = $860 >>> 16;
          $862 = $861 & 2;
          $863 = $858 | $862;
          $864 = (14 - ($863))|0;
          $865 = $859 << $862;
          $866 = $865 >>> 15;
          $867 = (($864) + ($866))|0;
          $868 = $867 << 1;
          $869 = (($867) + 7)|0;
          $870 = $$0286$i$i >>> $869;
          $871 = $870 & 1;
          $872 = $871 | $868;
          $$0295$i$i = $872;
         }
        } while(0);
        $873 = (52620 + ($$0295$i$i<<2)|0);
        $874 = ((($718)) + 28|0);
        HEAP32[$874>>2] = $$0295$i$i;
        $875 = ((($718)) + 16|0);
        $876 = ((($875)) + 4|0);
        HEAP32[$876>>2] = 0;
        HEAP32[$875>>2] = 0;
        $877 = HEAP32[(52320)>>2]|0;
        $878 = 1 << $$0295$i$i;
        $879 = $877 & $878;
        $880 = ($879|0)==(0);
        if ($880) {
         $881 = $877 | $878;
         HEAP32[(52320)>>2] = $881;
         HEAP32[$873>>2] = $718;
         $882 = ((($718)) + 24|0);
         HEAP32[$882>>2] = $873;
         $883 = ((($718)) + 12|0);
         HEAP32[$883>>2] = $718;
         $884 = ((($718)) + 8|0);
         HEAP32[$884>>2] = $718;
         break;
        }
        $885 = HEAP32[$873>>2]|0;
        $886 = ($$0295$i$i|0)==(31);
        $887 = $$0295$i$i >>> 1;
        $888 = (25 - ($887))|0;
        $889 = $886 ? 0 : $888;
        $890 = $$0286$i$i << $889;
        $$0287$i$i = $890;$$0288$i$i = $885;
        while(1) {
         $891 = ((($$0288$i$i)) + 4|0);
         $892 = HEAP32[$891>>2]|0;
         $893 = $892 & -8;
         $894 = ($893|0)==($$0286$i$i|0);
         if ($894) {
          label = 278;
          break;
         }
         $895 = $$0287$i$i >>> 31;
         $896 = (((($$0288$i$i)) + 16|0) + ($895<<2)|0);
         $897 = $$0287$i$i << 1;
         $898 = HEAP32[$896>>2]|0;
         $899 = ($898|0)==(0|0);
         if ($899) {
          label = 275;
          break;
         } else {
          $$0287$i$i = $897;$$0288$i$i = $898;
         }
        }
        if ((label|0) == 275) {
         $900 = HEAP32[(52332)>>2]|0;
         $901 = ($896>>>0)<($900>>>0);
         if ($901) {
          _abort();
          // unreachable;
         } else {
          HEAP32[$896>>2] = $718;
          $902 = ((($718)) + 24|0);
          HEAP32[$902>>2] = $$0288$i$i;
          $903 = ((($718)) + 12|0);
          HEAP32[$903>>2] = $718;
          $904 = ((($718)) + 8|0);
          HEAP32[$904>>2] = $718;
          break;
         }
        }
        else if ((label|0) == 278) {
         $905 = ((($$0288$i$i)) + 8|0);
         $906 = HEAP32[$905>>2]|0;
         $907 = HEAP32[(52332)>>2]|0;
         $908 = ($906>>>0)>=($907>>>0);
         $not$$i22$i = ($$0288$i$i>>>0)>=($907>>>0);
         $909 = $908 & $not$$i22$i;
         if ($909) {
          $910 = ((($906)) + 12|0);
          HEAP32[$910>>2] = $718;
          HEAP32[$905>>2] = $718;
          $911 = ((($718)) + 8|0);
          HEAP32[$911>>2] = $906;
          $912 = ((($718)) + 12|0);
          HEAP32[$912>>2] = $$0288$i$i;
          $913 = ((($718)) + 24|0);
          HEAP32[$913>>2] = 0;
          break;
         } else {
          _abort();
          // unreachable;
         }
        }
       }
      } while(0);
      $1044 = ((($706)) + 8|0);
      $$0 = $1044;
      STACKTOP = sp;return ($$0|0);
     } else {
      $$0$i$i$i = (52764);
     }
    }
    while(1) {
     $914 = HEAP32[$$0$i$i$i>>2]|0;
     $915 = ($914>>>0)>($627>>>0);
     if (!($915)) {
      $916 = ((($$0$i$i$i)) + 4|0);
      $917 = HEAP32[$916>>2]|0;
      $918 = (($914) + ($917)|0);
      $919 = ($918>>>0)>($627>>>0);
      if ($919) {
       break;
      }
     }
     $920 = ((($$0$i$i$i)) + 8|0);
     $921 = HEAP32[$920>>2]|0;
     $$0$i$i$i = $921;
    }
    $922 = ((($918)) + -47|0);
    $923 = ((($922)) + 8|0);
    $924 = $923;
    $925 = $924 & 7;
    $926 = ($925|0)==(0);
    $927 = (0 - ($924))|0;
    $928 = $927 & 7;
    $929 = $926 ? 0 : $928;
    $930 = (($922) + ($929)|0);
    $931 = ((($627)) + 16|0);
    $932 = ($930>>>0)<($931>>>0);
    $933 = $932 ? $627 : $930;
    $934 = ((($933)) + 8|0);
    $935 = ((($933)) + 24|0);
    $936 = (($$723947$i) + -40)|0;
    $937 = ((($$748$i)) + 8|0);
    $938 = $937;
    $939 = $938 & 7;
    $940 = ($939|0)==(0);
    $941 = (0 - ($938))|0;
    $942 = $941 & 7;
    $943 = $940 ? 0 : $942;
    $944 = (($$748$i) + ($943)|0);
    $945 = (($936) - ($943))|0;
    HEAP32[(52340)>>2] = $944;
    HEAP32[(52328)>>2] = $945;
    $946 = $945 | 1;
    $947 = ((($944)) + 4|0);
    HEAP32[$947>>2] = $946;
    $948 = (($944) + ($945)|0);
    $949 = ((($948)) + 4|0);
    HEAP32[$949>>2] = 40;
    $950 = HEAP32[(52804)>>2]|0;
    HEAP32[(52344)>>2] = $950;
    $951 = ((($933)) + 4|0);
    HEAP32[$951>>2] = 27;
    ;HEAP32[$934>>2]=HEAP32[(52764)>>2]|0;HEAP32[$934+4>>2]=HEAP32[(52764)+4>>2]|0;HEAP32[$934+8>>2]=HEAP32[(52764)+8>>2]|0;HEAP32[$934+12>>2]=HEAP32[(52764)+12>>2]|0;
    HEAP32[(52764)>>2] = $$748$i;
    HEAP32[(52768)>>2] = $$723947$i;
    HEAP32[(52776)>>2] = 0;
    HEAP32[(52772)>>2] = $934;
    $$0$i$i = $935;
    while(1) {
     $952 = ((($$0$i$i)) + 4|0);
     HEAP32[$952>>2] = 7;
     $953 = ((($952)) + 4|0);
     $954 = ($953>>>0)<($918>>>0);
     if ($954) {
      $$0$i$i = $952;
     } else {
      break;
     }
    }
    $955 = ($933|0)==($627|0);
    if (!($955)) {
     $956 = $933;
     $957 = $627;
     $958 = (($956) - ($957))|0;
     $959 = HEAP32[$951>>2]|0;
     $960 = $959 & -2;
     HEAP32[$951>>2] = $960;
     $961 = $958 | 1;
     $962 = ((($627)) + 4|0);
     HEAP32[$962>>2] = $961;
     HEAP32[$933>>2] = $958;
     $963 = $958 >>> 3;
     $964 = ($958>>>0)<(256);
     if ($964) {
      $965 = $963 << 1;
      $966 = (52356 + ($965<<2)|0);
      $967 = HEAP32[13079]|0;
      $968 = 1 << $963;
      $969 = $967 & $968;
      $970 = ($969|0)==(0);
      if ($970) {
       $971 = $967 | $968;
       HEAP32[13079] = $971;
       $$pre$i$i = ((($966)) + 8|0);
       $$0211$i$i = $966;$$pre$phi$i$iZ2D = $$pre$i$i;
      } else {
       $972 = ((($966)) + 8|0);
       $973 = HEAP32[$972>>2]|0;
       $974 = HEAP32[(52332)>>2]|0;
       $975 = ($973>>>0)<($974>>>0);
       if ($975) {
        _abort();
        // unreachable;
       } else {
        $$0211$i$i = $973;$$pre$phi$i$iZ2D = $972;
       }
      }
      HEAP32[$$pre$phi$i$iZ2D>>2] = $627;
      $976 = ((($$0211$i$i)) + 12|0);
      HEAP32[$976>>2] = $627;
      $977 = ((($627)) + 8|0);
      HEAP32[$977>>2] = $$0211$i$i;
      $978 = ((($627)) + 12|0);
      HEAP32[$978>>2] = $966;
      break;
     }
     $979 = $958 >>> 8;
     $980 = ($979|0)==(0);
     if ($980) {
      $$0212$i$i = 0;
     } else {
      $981 = ($958>>>0)>(16777215);
      if ($981) {
       $$0212$i$i = 31;
      } else {
       $982 = (($979) + 1048320)|0;
       $983 = $982 >>> 16;
       $984 = $983 & 8;
       $985 = $979 << $984;
       $986 = (($985) + 520192)|0;
       $987 = $986 >>> 16;
       $988 = $987 & 4;
       $989 = $988 | $984;
       $990 = $985 << $988;
       $991 = (($990) + 245760)|0;
       $992 = $991 >>> 16;
       $993 = $992 & 2;
       $994 = $989 | $993;
       $995 = (14 - ($994))|0;
       $996 = $990 << $993;
       $997 = $996 >>> 15;
       $998 = (($995) + ($997))|0;
       $999 = $998 << 1;
       $1000 = (($998) + 7)|0;
       $1001 = $958 >>> $1000;
       $1002 = $1001 & 1;
       $1003 = $1002 | $999;
       $$0212$i$i = $1003;
      }
     }
     $1004 = (52620 + ($$0212$i$i<<2)|0);
     $1005 = ((($627)) + 28|0);
     HEAP32[$1005>>2] = $$0212$i$i;
     $1006 = ((($627)) + 20|0);
     HEAP32[$1006>>2] = 0;
     HEAP32[$931>>2] = 0;
     $1007 = HEAP32[(52320)>>2]|0;
     $1008 = 1 << $$0212$i$i;
     $1009 = $1007 & $1008;
     $1010 = ($1009|0)==(0);
     if ($1010) {
      $1011 = $1007 | $1008;
      HEAP32[(52320)>>2] = $1011;
      HEAP32[$1004>>2] = $627;
      $1012 = ((($627)) + 24|0);
      HEAP32[$1012>>2] = $1004;
      $1013 = ((($627)) + 12|0);
      HEAP32[$1013>>2] = $627;
      $1014 = ((($627)) + 8|0);
      HEAP32[$1014>>2] = $627;
      break;
     }
     $1015 = HEAP32[$1004>>2]|0;
     $1016 = ($$0212$i$i|0)==(31);
     $1017 = $$0212$i$i >>> 1;
     $1018 = (25 - ($1017))|0;
     $1019 = $1016 ? 0 : $1018;
     $1020 = $958 << $1019;
     $$0206$i$i = $1020;$$0207$i$i = $1015;
     while(1) {
      $1021 = ((($$0207$i$i)) + 4|0);
      $1022 = HEAP32[$1021>>2]|0;
      $1023 = $1022 & -8;
      $1024 = ($1023|0)==($958|0);
      if ($1024) {
       label = 304;
       break;
      }
      $1025 = $$0206$i$i >>> 31;
      $1026 = (((($$0207$i$i)) + 16|0) + ($1025<<2)|0);
      $1027 = $$0206$i$i << 1;
      $1028 = HEAP32[$1026>>2]|0;
      $1029 = ($1028|0)==(0|0);
      if ($1029) {
       label = 301;
       break;
      } else {
       $$0206$i$i = $1027;$$0207$i$i = $1028;
      }
     }
     if ((label|0) == 301) {
      $1030 = HEAP32[(52332)>>2]|0;
      $1031 = ($1026>>>0)<($1030>>>0);
      if ($1031) {
       _abort();
       // unreachable;
      } else {
       HEAP32[$1026>>2] = $627;
       $1032 = ((($627)) + 24|0);
       HEAP32[$1032>>2] = $$0207$i$i;
       $1033 = ((($627)) + 12|0);
       HEAP32[$1033>>2] = $627;
       $1034 = ((($627)) + 8|0);
       HEAP32[$1034>>2] = $627;
       break;
      }
     }
     else if ((label|0) == 304) {
      $1035 = ((($$0207$i$i)) + 8|0);
      $1036 = HEAP32[$1035>>2]|0;
      $1037 = HEAP32[(52332)>>2]|0;
      $1038 = ($1036>>>0)>=($1037>>>0);
      $not$$i$i = ($$0207$i$i>>>0)>=($1037>>>0);
      $1039 = $1038 & $not$$i$i;
      if ($1039) {
       $1040 = ((($1036)) + 12|0);
       HEAP32[$1040>>2] = $627;
       HEAP32[$1035>>2] = $627;
       $1041 = ((($627)) + 8|0);
       HEAP32[$1041>>2] = $1036;
       $1042 = ((($627)) + 12|0);
       HEAP32[$1042>>2] = $$0207$i$i;
       $1043 = ((($627)) + 24|0);
       HEAP32[$1043>>2] = 0;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    }
   }
  } while(0);
  $1045 = HEAP32[(52328)>>2]|0;
  $1046 = ($1045>>>0)>($$0197>>>0);
  if ($1046) {
   $1047 = (($1045) - ($$0197))|0;
   HEAP32[(52328)>>2] = $1047;
   $1048 = HEAP32[(52340)>>2]|0;
   $1049 = (($1048) + ($$0197)|0);
   HEAP32[(52340)>>2] = $1049;
   $1050 = $1047 | 1;
   $1051 = ((($1049)) + 4|0);
   HEAP32[$1051>>2] = $1050;
   $1052 = $$0197 | 3;
   $1053 = ((($1048)) + 4|0);
   HEAP32[$1053>>2] = $1052;
   $1054 = ((($1048)) + 8|0);
   $$0 = $1054;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $1055 = (___errno_location()|0);
 HEAP32[$1055>>2] = 12;
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _free($0) {
 $0 = $0|0;
 var $$0211$i = 0, $$0211$in$i = 0, $$0381 = 0, $$0382 = 0, $$0394 = 0, $$0401 = 0, $$1 = 0, $$1380 = 0, $$1385 = 0, $$1388 = 0, $$1396 = 0, $$1400 = 0, $$2 = 0, $$3 = 0, $$3398 = 0, $$pre = 0, $$pre$phi439Z2D = 0, $$pre$phi441Z2D = 0, $$pre$phiZ2D = 0, $$pre438 = 0;
 var $$pre440 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $cond418 = 0, $cond419 = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 if ($1) {
  return;
 }
 $2 = ((($0)) + -8|0);
 $3 = HEAP32[(52332)>>2]|0;
 $4 = ($2>>>0)<($3>>>0);
 if ($4) {
  _abort();
  // unreachable;
 }
 $5 = ((($0)) + -4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = $6 & 3;
 $8 = ($7|0)==(1);
 if ($8) {
  _abort();
  // unreachable;
 }
 $9 = $6 & -8;
 $10 = (($2) + ($9)|0);
 $11 = $6 & 1;
 $12 = ($11|0)==(0);
 do {
  if ($12) {
   $13 = HEAP32[$2>>2]|0;
   $14 = ($7|0)==(0);
   if ($14) {
    return;
   }
   $15 = (0 - ($13))|0;
   $16 = (($2) + ($15)|0);
   $17 = (($13) + ($9))|0;
   $18 = ($16>>>0)<($3>>>0);
   if ($18) {
    _abort();
    // unreachable;
   }
   $19 = HEAP32[(52336)>>2]|0;
   $20 = ($16|0)==($19|0);
   if ($20) {
    $105 = ((($10)) + 4|0);
    $106 = HEAP32[$105>>2]|0;
    $107 = $106 & 3;
    $108 = ($107|0)==(3);
    if (!($108)) {
     $$1 = $16;$$1380 = $17;
     break;
    }
    HEAP32[(52324)>>2] = $17;
    $109 = $106 & -2;
    HEAP32[$105>>2] = $109;
    $110 = $17 | 1;
    $111 = ((($16)) + 4|0);
    HEAP32[$111>>2] = $110;
    $112 = (($16) + ($17)|0);
    HEAP32[$112>>2] = $17;
    return;
   }
   $21 = $13 >>> 3;
   $22 = ($13>>>0)<(256);
   if ($22) {
    $23 = ((($16)) + 8|0);
    $24 = HEAP32[$23>>2]|0;
    $25 = ((($16)) + 12|0);
    $26 = HEAP32[$25>>2]|0;
    $27 = $21 << 1;
    $28 = (52356 + ($27<<2)|0);
    $29 = ($24|0)==($28|0);
    if (!($29)) {
     $30 = ($24>>>0)<($3>>>0);
     if ($30) {
      _abort();
      // unreachable;
     }
     $31 = ((($24)) + 12|0);
     $32 = HEAP32[$31>>2]|0;
     $33 = ($32|0)==($16|0);
     if (!($33)) {
      _abort();
      // unreachable;
     }
    }
    $34 = ($26|0)==($24|0);
    if ($34) {
     $35 = 1 << $21;
     $36 = $35 ^ -1;
     $37 = HEAP32[13079]|0;
     $38 = $37 & $36;
     HEAP32[13079] = $38;
     $$1 = $16;$$1380 = $17;
     break;
    }
    $39 = ($26|0)==($28|0);
    if ($39) {
     $$pre440 = ((($26)) + 8|0);
     $$pre$phi441Z2D = $$pre440;
    } else {
     $40 = ($26>>>0)<($3>>>0);
     if ($40) {
      _abort();
      // unreachable;
     }
     $41 = ((($26)) + 8|0);
     $42 = HEAP32[$41>>2]|0;
     $43 = ($42|0)==($16|0);
     if ($43) {
      $$pre$phi441Z2D = $41;
     } else {
      _abort();
      // unreachable;
     }
    }
    $44 = ((($24)) + 12|0);
    HEAP32[$44>>2] = $26;
    HEAP32[$$pre$phi441Z2D>>2] = $24;
    $$1 = $16;$$1380 = $17;
    break;
   }
   $45 = ((($16)) + 24|0);
   $46 = HEAP32[$45>>2]|0;
   $47 = ((($16)) + 12|0);
   $48 = HEAP32[$47>>2]|0;
   $49 = ($48|0)==($16|0);
   do {
    if ($49) {
     $59 = ((($16)) + 16|0);
     $60 = ((($59)) + 4|0);
     $61 = HEAP32[$60>>2]|0;
     $62 = ($61|0)==(0|0);
     if ($62) {
      $63 = HEAP32[$59>>2]|0;
      $64 = ($63|0)==(0|0);
      if ($64) {
       $$3 = 0;
       break;
      } else {
       $$1385 = $63;$$1388 = $59;
      }
     } else {
      $$1385 = $61;$$1388 = $60;
     }
     while(1) {
      $65 = ((($$1385)) + 20|0);
      $66 = HEAP32[$65>>2]|0;
      $67 = ($66|0)==(0|0);
      if (!($67)) {
       $$1385 = $66;$$1388 = $65;
       continue;
      }
      $68 = ((($$1385)) + 16|0);
      $69 = HEAP32[$68>>2]|0;
      $70 = ($69|0)==(0|0);
      if ($70) {
       break;
      } else {
       $$1385 = $69;$$1388 = $68;
      }
     }
     $71 = ($$1388>>>0)<($3>>>0);
     if ($71) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$$1388>>2] = 0;
      $$3 = $$1385;
      break;
     }
    } else {
     $50 = ((($16)) + 8|0);
     $51 = HEAP32[$50>>2]|0;
     $52 = ($51>>>0)<($3>>>0);
     if ($52) {
      _abort();
      // unreachable;
     }
     $53 = ((($51)) + 12|0);
     $54 = HEAP32[$53>>2]|0;
     $55 = ($54|0)==($16|0);
     if (!($55)) {
      _abort();
      // unreachable;
     }
     $56 = ((($48)) + 8|0);
     $57 = HEAP32[$56>>2]|0;
     $58 = ($57|0)==($16|0);
     if ($58) {
      HEAP32[$53>>2] = $48;
      HEAP32[$56>>2] = $51;
      $$3 = $48;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   } while(0);
   $72 = ($46|0)==(0|0);
   if ($72) {
    $$1 = $16;$$1380 = $17;
   } else {
    $73 = ((($16)) + 28|0);
    $74 = HEAP32[$73>>2]|0;
    $75 = (52620 + ($74<<2)|0);
    $76 = HEAP32[$75>>2]|0;
    $77 = ($16|0)==($76|0);
    if ($77) {
     HEAP32[$75>>2] = $$3;
     $cond418 = ($$3|0)==(0|0);
     if ($cond418) {
      $78 = 1 << $74;
      $79 = $78 ^ -1;
      $80 = HEAP32[(52320)>>2]|0;
      $81 = $80 & $79;
      HEAP32[(52320)>>2] = $81;
      $$1 = $16;$$1380 = $17;
      break;
     }
    } else {
     $82 = HEAP32[(52332)>>2]|0;
     $83 = ($46>>>0)<($82>>>0);
     if ($83) {
      _abort();
      // unreachable;
     }
     $84 = ((($46)) + 16|0);
     $85 = HEAP32[$84>>2]|0;
     $86 = ($85|0)==($16|0);
     if ($86) {
      HEAP32[$84>>2] = $$3;
     } else {
      $87 = ((($46)) + 20|0);
      HEAP32[$87>>2] = $$3;
     }
     $88 = ($$3|0)==(0|0);
     if ($88) {
      $$1 = $16;$$1380 = $17;
      break;
     }
    }
    $89 = HEAP32[(52332)>>2]|0;
    $90 = ($$3>>>0)<($89>>>0);
    if ($90) {
     _abort();
     // unreachable;
    }
    $91 = ((($$3)) + 24|0);
    HEAP32[$91>>2] = $46;
    $92 = ((($16)) + 16|0);
    $93 = HEAP32[$92>>2]|0;
    $94 = ($93|0)==(0|0);
    do {
     if (!($94)) {
      $95 = ($93>>>0)<($89>>>0);
      if ($95) {
       _abort();
       // unreachable;
      } else {
       $96 = ((($$3)) + 16|0);
       HEAP32[$96>>2] = $93;
       $97 = ((($93)) + 24|0);
       HEAP32[$97>>2] = $$3;
       break;
      }
     }
    } while(0);
    $98 = ((($92)) + 4|0);
    $99 = HEAP32[$98>>2]|0;
    $100 = ($99|0)==(0|0);
    if ($100) {
     $$1 = $16;$$1380 = $17;
    } else {
     $101 = HEAP32[(52332)>>2]|0;
     $102 = ($99>>>0)<($101>>>0);
     if ($102) {
      _abort();
      // unreachable;
     } else {
      $103 = ((($$3)) + 20|0);
      HEAP32[$103>>2] = $99;
      $104 = ((($99)) + 24|0);
      HEAP32[$104>>2] = $$3;
      $$1 = $16;$$1380 = $17;
      break;
     }
    }
   }
  } else {
   $$1 = $2;$$1380 = $9;
  }
 } while(0);
 $113 = ($$1>>>0)<($10>>>0);
 if (!($113)) {
  _abort();
  // unreachable;
 }
 $114 = ((($10)) + 4|0);
 $115 = HEAP32[$114>>2]|0;
 $116 = $115 & 1;
 $117 = ($116|0)==(0);
 if ($117) {
  _abort();
  // unreachable;
 }
 $118 = $115 & 2;
 $119 = ($118|0)==(0);
 if ($119) {
  $120 = HEAP32[(52340)>>2]|0;
  $121 = ($10|0)==($120|0);
  if ($121) {
   $122 = HEAP32[(52328)>>2]|0;
   $123 = (($122) + ($$1380))|0;
   HEAP32[(52328)>>2] = $123;
   HEAP32[(52340)>>2] = $$1;
   $124 = $123 | 1;
   $125 = ((($$1)) + 4|0);
   HEAP32[$125>>2] = $124;
   $126 = HEAP32[(52336)>>2]|0;
   $127 = ($$1|0)==($126|0);
   if (!($127)) {
    return;
   }
   HEAP32[(52336)>>2] = 0;
   HEAP32[(52324)>>2] = 0;
   return;
  }
  $128 = HEAP32[(52336)>>2]|0;
  $129 = ($10|0)==($128|0);
  if ($129) {
   $130 = HEAP32[(52324)>>2]|0;
   $131 = (($130) + ($$1380))|0;
   HEAP32[(52324)>>2] = $131;
   HEAP32[(52336)>>2] = $$1;
   $132 = $131 | 1;
   $133 = ((($$1)) + 4|0);
   HEAP32[$133>>2] = $132;
   $134 = (($$1) + ($131)|0);
   HEAP32[$134>>2] = $131;
   return;
  }
  $135 = $115 & -8;
  $136 = (($135) + ($$1380))|0;
  $137 = $115 >>> 3;
  $138 = ($115>>>0)<(256);
  do {
   if ($138) {
    $139 = ((($10)) + 8|0);
    $140 = HEAP32[$139>>2]|0;
    $141 = ((($10)) + 12|0);
    $142 = HEAP32[$141>>2]|0;
    $143 = $137 << 1;
    $144 = (52356 + ($143<<2)|0);
    $145 = ($140|0)==($144|0);
    if (!($145)) {
     $146 = HEAP32[(52332)>>2]|0;
     $147 = ($140>>>0)<($146>>>0);
     if ($147) {
      _abort();
      // unreachable;
     }
     $148 = ((($140)) + 12|0);
     $149 = HEAP32[$148>>2]|0;
     $150 = ($149|0)==($10|0);
     if (!($150)) {
      _abort();
      // unreachable;
     }
    }
    $151 = ($142|0)==($140|0);
    if ($151) {
     $152 = 1 << $137;
     $153 = $152 ^ -1;
     $154 = HEAP32[13079]|0;
     $155 = $154 & $153;
     HEAP32[13079] = $155;
     break;
    }
    $156 = ($142|0)==($144|0);
    if ($156) {
     $$pre438 = ((($142)) + 8|0);
     $$pre$phi439Z2D = $$pre438;
    } else {
     $157 = HEAP32[(52332)>>2]|0;
     $158 = ($142>>>0)<($157>>>0);
     if ($158) {
      _abort();
      // unreachable;
     }
     $159 = ((($142)) + 8|0);
     $160 = HEAP32[$159>>2]|0;
     $161 = ($160|0)==($10|0);
     if ($161) {
      $$pre$phi439Z2D = $159;
     } else {
      _abort();
      // unreachable;
     }
    }
    $162 = ((($140)) + 12|0);
    HEAP32[$162>>2] = $142;
    HEAP32[$$pre$phi439Z2D>>2] = $140;
   } else {
    $163 = ((($10)) + 24|0);
    $164 = HEAP32[$163>>2]|0;
    $165 = ((($10)) + 12|0);
    $166 = HEAP32[$165>>2]|0;
    $167 = ($166|0)==($10|0);
    do {
     if ($167) {
      $178 = ((($10)) + 16|0);
      $179 = ((($178)) + 4|0);
      $180 = HEAP32[$179>>2]|0;
      $181 = ($180|0)==(0|0);
      if ($181) {
       $182 = HEAP32[$178>>2]|0;
       $183 = ($182|0)==(0|0);
       if ($183) {
        $$3398 = 0;
        break;
       } else {
        $$1396 = $182;$$1400 = $178;
       }
      } else {
       $$1396 = $180;$$1400 = $179;
      }
      while(1) {
       $184 = ((($$1396)) + 20|0);
       $185 = HEAP32[$184>>2]|0;
       $186 = ($185|0)==(0|0);
       if (!($186)) {
        $$1396 = $185;$$1400 = $184;
        continue;
       }
       $187 = ((($$1396)) + 16|0);
       $188 = HEAP32[$187>>2]|0;
       $189 = ($188|0)==(0|0);
       if ($189) {
        break;
       } else {
        $$1396 = $188;$$1400 = $187;
       }
      }
      $190 = HEAP32[(52332)>>2]|0;
      $191 = ($$1400>>>0)<($190>>>0);
      if ($191) {
       _abort();
       // unreachable;
      } else {
       HEAP32[$$1400>>2] = 0;
       $$3398 = $$1396;
       break;
      }
     } else {
      $168 = ((($10)) + 8|0);
      $169 = HEAP32[$168>>2]|0;
      $170 = HEAP32[(52332)>>2]|0;
      $171 = ($169>>>0)<($170>>>0);
      if ($171) {
       _abort();
       // unreachable;
      }
      $172 = ((($169)) + 12|0);
      $173 = HEAP32[$172>>2]|0;
      $174 = ($173|0)==($10|0);
      if (!($174)) {
       _abort();
       // unreachable;
      }
      $175 = ((($166)) + 8|0);
      $176 = HEAP32[$175>>2]|0;
      $177 = ($176|0)==($10|0);
      if ($177) {
       HEAP32[$172>>2] = $166;
       HEAP32[$175>>2] = $169;
       $$3398 = $166;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    } while(0);
    $192 = ($164|0)==(0|0);
    if (!($192)) {
     $193 = ((($10)) + 28|0);
     $194 = HEAP32[$193>>2]|0;
     $195 = (52620 + ($194<<2)|0);
     $196 = HEAP32[$195>>2]|0;
     $197 = ($10|0)==($196|0);
     if ($197) {
      HEAP32[$195>>2] = $$3398;
      $cond419 = ($$3398|0)==(0|0);
      if ($cond419) {
       $198 = 1 << $194;
       $199 = $198 ^ -1;
       $200 = HEAP32[(52320)>>2]|0;
       $201 = $200 & $199;
       HEAP32[(52320)>>2] = $201;
       break;
      }
     } else {
      $202 = HEAP32[(52332)>>2]|0;
      $203 = ($164>>>0)<($202>>>0);
      if ($203) {
       _abort();
       // unreachable;
      }
      $204 = ((($164)) + 16|0);
      $205 = HEAP32[$204>>2]|0;
      $206 = ($205|0)==($10|0);
      if ($206) {
       HEAP32[$204>>2] = $$3398;
      } else {
       $207 = ((($164)) + 20|0);
       HEAP32[$207>>2] = $$3398;
      }
      $208 = ($$3398|0)==(0|0);
      if ($208) {
       break;
      }
     }
     $209 = HEAP32[(52332)>>2]|0;
     $210 = ($$3398>>>0)<($209>>>0);
     if ($210) {
      _abort();
      // unreachable;
     }
     $211 = ((($$3398)) + 24|0);
     HEAP32[$211>>2] = $164;
     $212 = ((($10)) + 16|0);
     $213 = HEAP32[$212>>2]|0;
     $214 = ($213|0)==(0|0);
     do {
      if (!($214)) {
       $215 = ($213>>>0)<($209>>>0);
       if ($215) {
        _abort();
        // unreachable;
       } else {
        $216 = ((($$3398)) + 16|0);
        HEAP32[$216>>2] = $213;
        $217 = ((($213)) + 24|0);
        HEAP32[$217>>2] = $$3398;
        break;
       }
      }
     } while(0);
     $218 = ((($212)) + 4|0);
     $219 = HEAP32[$218>>2]|0;
     $220 = ($219|0)==(0|0);
     if (!($220)) {
      $221 = HEAP32[(52332)>>2]|0;
      $222 = ($219>>>0)<($221>>>0);
      if ($222) {
       _abort();
       // unreachable;
      } else {
       $223 = ((($$3398)) + 20|0);
       HEAP32[$223>>2] = $219;
       $224 = ((($219)) + 24|0);
       HEAP32[$224>>2] = $$3398;
       break;
      }
     }
    }
   }
  } while(0);
  $225 = $136 | 1;
  $226 = ((($$1)) + 4|0);
  HEAP32[$226>>2] = $225;
  $227 = (($$1) + ($136)|0);
  HEAP32[$227>>2] = $136;
  $228 = HEAP32[(52336)>>2]|0;
  $229 = ($$1|0)==($228|0);
  if ($229) {
   HEAP32[(52324)>>2] = $136;
   return;
  } else {
   $$2 = $136;
  }
 } else {
  $230 = $115 & -2;
  HEAP32[$114>>2] = $230;
  $231 = $$1380 | 1;
  $232 = ((($$1)) + 4|0);
  HEAP32[$232>>2] = $231;
  $233 = (($$1) + ($$1380)|0);
  HEAP32[$233>>2] = $$1380;
  $$2 = $$1380;
 }
 $234 = $$2 >>> 3;
 $235 = ($$2>>>0)<(256);
 if ($235) {
  $236 = $234 << 1;
  $237 = (52356 + ($236<<2)|0);
  $238 = HEAP32[13079]|0;
  $239 = 1 << $234;
  $240 = $238 & $239;
  $241 = ($240|0)==(0);
  if ($241) {
   $242 = $238 | $239;
   HEAP32[13079] = $242;
   $$pre = ((($237)) + 8|0);
   $$0401 = $237;$$pre$phiZ2D = $$pre;
  } else {
   $243 = ((($237)) + 8|0);
   $244 = HEAP32[$243>>2]|0;
   $245 = HEAP32[(52332)>>2]|0;
   $246 = ($244>>>0)<($245>>>0);
   if ($246) {
    _abort();
    // unreachable;
   } else {
    $$0401 = $244;$$pre$phiZ2D = $243;
   }
  }
  HEAP32[$$pre$phiZ2D>>2] = $$1;
  $247 = ((($$0401)) + 12|0);
  HEAP32[$247>>2] = $$1;
  $248 = ((($$1)) + 8|0);
  HEAP32[$248>>2] = $$0401;
  $249 = ((($$1)) + 12|0);
  HEAP32[$249>>2] = $237;
  return;
 }
 $250 = $$2 >>> 8;
 $251 = ($250|0)==(0);
 if ($251) {
  $$0394 = 0;
 } else {
  $252 = ($$2>>>0)>(16777215);
  if ($252) {
   $$0394 = 31;
  } else {
   $253 = (($250) + 1048320)|0;
   $254 = $253 >>> 16;
   $255 = $254 & 8;
   $256 = $250 << $255;
   $257 = (($256) + 520192)|0;
   $258 = $257 >>> 16;
   $259 = $258 & 4;
   $260 = $259 | $255;
   $261 = $256 << $259;
   $262 = (($261) + 245760)|0;
   $263 = $262 >>> 16;
   $264 = $263 & 2;
   $265 = $260 | $264;
   $266 = (14 - ($265))|0;
   $267 = $261 << $264;
   $268 = $267 >>> 15;
   $269 = (($266) + ($268))|0;
   $270 = $269 << 1;
   $271 = (($269) + 7)|0;
   $272 = $$2 >>> $271;
   $273 = $272 & 1;
   $274 = $273 | $270;
   $$0394 = $274;
  }
 }
 $275 = (52620 + ($$0394<<2)|0);
 $276 = ((($$1)) + 28|0);
 HEAP32[$276>>2] = $$0394;
 $277 = ((($$1)) + 16|0);
 $278 = ((($$1)) + 20|0);
 HEAP32[$278>>2] = 0;
 HEAP32[$277>>2] = 0;
 $279 = HEAP32[(52320)>>2]|0;
 $280 = 1 << $$0394;
 $281 = $279 & $280;
 $282 = ($281|0)==(0);
 do {
  if ($282) {
   $283 = $279 | $280;
   HEAP32[(52320)>>2] = $283;
   HEAP32[$275>>2] = $$1;
   $284 = ((($$1)) + 24|0);
   HEAP32[$284>>2] = $275;
   $285 = ((($$1)) + 12|0);
   HEAP32[$285>>2] = $$1;
   $286 = ((($$1)) + 8|0);
   HEAP32[$286>>2] = $$1;
  } else {
   $287 = HEAP32[$275>>2]|0;
   $288 = ($$0394|0)==(31);
   $289 = $$0394 >>> 1;
   $290 = (25 - ($289))|0;
   $291 = $288 ? 0 : $290;
   $292 = $$2 << $291;
   $$0381 = $292;$$0382 = $287;
   while(1) {
    $293 = ((($$0382)) + 4|0);
    $294 = HEAP32[$293>>2]|0;
    $295 = $294 & -8;
    $296 = ($295|0)==($$2|0);
    if ($296) {
     label = 130;
     break;
    }
    $297 = $$0381 >>> 31;
    $298 = (((($$0382)) + 16|0) + ($297<<2)|0);
    $299 = $$0381 << 1;
    $300 = HEAP32[$298>>2]|0;
    $301 = ($300|0)==(0|0);
    if ($301) {
     label = 127;
     break;
    } else {
     $$0381 = $299;$$0382 = $300;
    }
   }
   if ((label|0) == 127) {
    $302 = HEAP32[(52332)>>2]|0;
    $303 = ($298>>>0)<($302>>>0);
    if ($303) {
     _abort();
     // unreachable;
    } else {
     HEAP32[$298>>2] = $$1;
     $304 = ((($$1)) + 24|0);
     HEAP32[$304>>2] = $$0382;
     $305 = ((($$1)) + 12|0);
     HEAP32[$305>>2] = $$1;
     $306 = ((($$1)) + 8|0);
     HEAP32[$306>>2] = $$1;
     break;
    }
   }
   else if ((label|0) == 130) {
    $307 = ((($$0382)) + 8|0);
    $308 = HEAP32[$307>>2]|0;
    $309 = HEAP32[(52332)>>2]|0;
    $310 = ($308>>>0)>=($309>>>0);
    $not$ = ($$0382>>>0)>=($309>>>0);
    $311 = $310 & $not$;
    if ($311) {
     $312 = ((($308)) + 12|0);
     HEAP32[$312>>2] = $$1;
     HEAP32[$307>>2] = $$1;
     $313 = ((($$1)) + 8|0);
     HEAP32[$313>>2] = $308;
     $314 = ((($$1)) + 12|0);
     HEAP32[$314>>2] = $$0382;
     $315 = ((($$1)) + 24|0);
     HEAP32[$315>>2] = 0;
     break;
    } else {
     _abort();
     // unreachable;
    }
   }
  }
 } while(0);
 $316 = HEAP32[(52348)>>2]|0;
 $317 = (($316) + -1)|0;
 HEAP32[(52348)>>2] = $317;
 $318 = ($317|0)==(0);
 if ($318) {
  $$0211$in$i = (52772);
 } else {
  return;
 }
 while(1) {
  $$0211$i = HEAP32[$$0211$in$i>>2]|0;
  $319 = ($$0211$i|0)==(0|0);
  $320 = ((($$0211$i)) + 8|0);
  if ($319) {
   break;
  } else {
   $$0211$in$i = $320;
  }
 }
 HEAP32[(52348)>>2] = -1;
 return;
}
function _calloc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$ = 0, $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($0|0)==(0);
 if ($2) {
  $$0 = 0;
 } else {
  $3 = Math_imul($1, $0)|0;
  $4 = $1 | $0;
  $5 = ($4>>>0)>(65535);
  if ($5) {
   $6 = (($3>>>0) / ($0>>>0))&-1;
   $7 = ($6|0)==($1|0);
   $$ = $7 ? $3 : -1;
   $$0 = $$;
  } else {
   $$0 = $3;
  }
 }
 $8 = (_malloc($$0)|0);
 $9 = ($8|0)==(0|0);
 if ($9) {
  return ($8|0);
 }
 $10 = ((($8)) + -4|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = $11 & 3;
 $13 = ($12|0)==(0);
 if ($13) {
  return ($8|0);
 }
 _memset(($8|0),0,($$0|0))|0;
 return ($8|0);
}
function _realloc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($0|0)==(0|0);
 if ($2) {
  $3 = (_malloc($1)|0);
  $$1 = $3;
  return ($$1|0);
 }
 $4 = ($1>>>0)>(4294967231);
 if ($4) {
  $5 = (___errno_location()|0);
  HEAP32[$5>>2] = 12;
  $$1 = 0;
  return ($$1|0);
 }
 $6 = ($1>>>0)<(11);
 $7 = (($1) + 11)|0;
 $8 = $7 & -8;
 $9 = $6 ? 16 : $8;
 $10 = ((($0)) + -8|0);
 $11 = (_try_realloc_chunk($10,$9)|0);
 $12 = ($11|0)==(0|0);
 if (!($12)) {
  $13 = ((($11)) + 8|0);
  $$1 = $13;
  return ($$1|0);
 }
 $14 = (_malloc($1)|0);
 $15 = ($14|0)==(0|0);
 if ($15) {
  $$1 = 0;
  return ($$1|0);
 }
 $16 = ((($0)) + -4|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = $17 & -8;
 $19 = $17 & 3;
 $20 = ($19|0)==(0);
 $21 = $20 ? 8 : 4;
 $22 = (($18) - ($21))|0;
 $23 = ($22>>>0)<($1>>>0);
 $24 = $23 ? $22 : $1;
 _memcpy(($14|0),($0|0),($24|0))|0;
 _free($0);
 $$1 = $14;
 return ($$1|0);
}
function _try_realloc_chunk($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$1271 = 0, $$1274 = 0, $$2 = 0, $$3 = 0, $$pre = 0, $$pre$phiZ2D = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0;
 var $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0;
 var $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0;
 var $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0;
 var $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $cond = 0, $notlhs = 0, $notrhs = 0, $or$cond$not = 0, $or$cond3 = 0, $storemerge = 0, $storemerge1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $3 & -8;
 $5 = (($0) + ($4)|0);
 $6 = HEAP32[(52332)>>2]|0;
 $7 = $3 & 3;
 $notlhs = ($0>>>0)>=($6>>>0);
 $notrhs = ($7|0)!=(1);
 $or$cond$not = $notrhs & $notlhs;
 $8 = ($0>>>0)<($5>>>0);
 $or$cond3 = $or$cond$not & $8;
 if (!($or$cond3)) {
  _abort();
  // unreachable;
 }
 $9 = ((($5)) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $10 & 1;
 $12 = ($11|0)==(0);
 if ($12) {
  _abort();
  // unreachable;
 }
 $13 = ($7|0)==(0);
 if ($13) {
  $14 = ($1>>>0)<(256);
  if ($14) {
   $$2 = 0;
   return ($$2|0);
  }
  $15 = (($1) + 4)|0;
  $16 = ($4>>>0)<($15>>>0);
  if (!($16)) {
   $17 = (($4) - ($1))|0;
   $18 = HEAP32[(52796)>>2]|0;
   $19 = $18 << 1;
   $20 = ($17>>>0)>($19>>>0);
   if (!($20)) {
    $$2 = $0;
    return ($$2|0);
   }
  }
  $$2 = 0;
  return ($$2|0);
 }
 $21 = ($4>>>0)<($1>>>0);
 if (!($21)) {
  $22 = (($4) - ($1))|0;
  $23 = ($22>>>0)>(15);
  if (!($23)) {
   $$2 = $0;
   return ($$2|0);
  }
  $24 = (($0) + ($1)|0);
  $25 = $3 & 1;
  $26 = $25 | $1;
  $27 = $26 | 2;
  HEAP32[$2>>2] = $27;
  $28 = ((($24)) + 4|0);
  $29 = $22 | 3;
  HEAP32[$28>>2] = $29;
  $30 = (($24) + ($22)|0);
  $31 = ((($30)) + 4|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = $32 | 1;
  HEAP32[$31>>2] = $33;
  _dispose_chunk($24,$22);
  $$2 = $0;
  return ($$2|0);
 }
 $34 = HEAP32[(52340)>>2]|0;
 $35 = ($5|0)==($34|0);
 if ($35) {
  $36 = HEAP32[(52328)>>2]|0;
  $37 = (($36) + ($4))|0;
  $38 = ($37>>>0)>($1>>>0);
  if (!($38)) {
   $$2 = 0;
   return ($$2|0);
  }
  $39 = (($37) - ($1))|0;
  $40 = (($0) + ($1)|0);
  $41 = $3 & 1;
  $42 = $41 | $1;
  $43 = $42 | 2;
  HEAP32[$2>>2] = $43;
  $44 = ((($40)) + 4|0);
  $45 = $39 | 1;
  HEAP32[$44>>2] = $45;
  HEAP32[(52340)>>2] = $40;
  HEAP32[(52328)>>2] = $39;
  $$2 = $0;
  return ($$2|0);
 }
 $46 = HEAP32[(52336)>>2]|0;
 $47 = ($5|0)==($46|0);
 if ($47) {
  $48 = HEAP32[(52324)>>2]|0;
  $49 = (($48) + ($4))|0;
  $50 = ($49>>>0)<($1>>>0);
  if ($50) {
   $$2 = 0;
   return ($$2|0);
  }
  $51 = (($49) - ($1))|0;
  $52 = ($51>>>0)>(15);
  if ($52) {
   $53 = (($0) + ($1)|0);
   $54 = (($53) + ($51)|0);
   $55 = $3 & 1;
   $56 = $55 | $1;
   $57 = $56 | 2;
   HEAP32[$2>>2] = $57;
   $58 = ((($53)) + 4|0);
   $59 = $51 | 1;
   HEAP32[$58>>2] = $59;
   HEAP32[$54>>2] = $51;
   $60 = ((($54)) + 4|0);
   $61 = HEAP32[$60>>2]|0;
   $62 = $61 & -2;
   HEAP32[$60>>2] = $62;
   $storemerge = $53;$storemerge1 = $51;
  } else {
   $63 = $3 & 1;
   $64 = $63 | $49;
   $65 = $64 | 2;
   HEAP32[$2>>2] = $65;
   $66 = (($0) + ($49)|0);
   $67 = ((($66)) + 4|0);
   $68 = HEAP32[$67>>2]|0;
   $69 = $68 | 1;
   HEAP32[$67>>2] = $69;
   $storemerge = 0;$storemerge1 = 0;
  }
  HEAP32[(52324)>>2] = $storemerge1;
  HEAP32[(52336)>>2] = $storemerge;
  $$2 = $0;
  return ($$2|0);
 }
 $70 = $10 & 2;
 $71 = ($70|0)==(0);
 if (!($71)) {
  $$2 = 0;
  return ($$2|0);
 }
 $72 = $10 & -8;
 $73 = (($72) + ($4))|0;
 $74 = ($73>>>0)<($1>>>0);
 if ($74) {
  $$2 = 0;
  return ($$2|0);
 }
 $75 = (($73) - ($1))|0;
 $76 = $10 >>> 3;
 $77 = ($10>>>0)<(256);
 do {
  if ($77) {
   $78 = ((($5)) + 8|0);
   $79 = HEAP32[$78>>2]|0;
   $80 = ((($5)) + 12|0);
   $81 = HEAP32[$80>>2]|0;
   $82 = $76 << 1;
   $83 = (52356 + ($82<<2)|0);
   $84 = ($79|0)==($83|0);
   if (!($84)) {
    $85 = ($79>>>0)<($6>>>0);
    if ($85) {
     _abort();
     // unreachable;
    }
    $86 = ((($79)) + 12|0);
    $87 = HEAP32[$86>>2]|0;
    $88 = ($87|0)==($5|0);
    if (!($88)) {
     _abort();
     // unreachable;
    }
   }
   $89 = ($81|0)==($79|0);
   if ($89) {
    $90 = 1 << $76;
    $91 = $90 ^ -1;
    $92 = HEAP32[13079]|0;
    $93 = $92 & $91;
    HEAP32[13079] = $93;
    break;
   }
   $94 = ($81|0)==($83|0);
   if ($94) {
    $$pre = ((($81)) + 8|0);
    $$pre$phiZ2D = $$pre;
   } else {
    $95 = ($81>>>0)<($6>>>0);
    if ($95) {
     _abort();
     // unreachable;
    }
    $96 = ((($81)) + 8|0);
    $97 = HEAP32[$96>>2]|0;
    $98 = ($97|0)==($5|0);
    if ($98) {
     $$pre$phiZ2D = $96;
    } else {
     _abort();
     // unreachable;
    }
   }
   $99 = ((($79)) + 12|0);
   HEAP32[$99>>2] = $81;
   HEAP32[$$pre$phiZ2D>>2] = $79;
  } else {
   $100 = ((($5)) + 24|0);
   $101 = HEAP32[$100>>2]|0;
   $102 = ((($5)) + 12|0);
   $103 = HEAP32[$102>>2]|0;
   $104 = ($103|0)==($5|0);
   do {
    if ($104) {
     $114 = ((($5)) + 16|0);
     $115 = ((($114)) + 4|0);
     $116 = HEAP32[$115>>2]|0;
     $117 = ($116|0)==(0|0);
     if ($117) {
      $118 = HEAP32[$114>>2]|0;
      $119 = ($118|0)==(0|0);
      if ($119) {
       $$3 = 0;
       break;
      } else {
       $$1271 = $118;$$1274 = $114;
      }
     } else {
      $$1271 = $116;$$1274 = $115;
     }
     while(1) {
      $120 = ((($$1271)) + 20|0);
      $121 = HEAP32[$120>>2]|0;
      $122 = ($121|0)==(0|0);
      if (!($122)) {
       $$1271 = $121;$$1274 = $120;
       continue;
      }
      $123 = ((($$1271)) + 16|0);
      $124 = HEAP32[$123>>2]|0;
      $125 = ($124|0)==(0|0);
      if ($125) {
       break;
      } else {
       $$1271 = $124;$$1274 = $123;
      }
     }
     $126 = ($$1274>>>0)<($6>>>0);
     if ($126) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$$1274>>2] = 0;
      $$3 = $$1271;
      break;
     }
    } else {
     $105 = ((($5)) + 8|0);
     $106 = HEAP32[$105>>2]|0;
     $107 = ($106>>>0)<($6>>>0);
     if ($107) {
      _abort();
      // unreachable;
     }
     $108 = ((($106)) + 12|0);
     $109 = HEAP32[$108>>2]|0;
     $110 = ($109|0)==($5|0);
     if (!($110)) {
      _abort();
      // unreachable;
     }
     $111 = ((($103)) + 8|0);
     $112 = HEAP32[$111>>2]|0;
     $113 = ($112|0)==($5|0);
     if ($113) {
      HEAP32[$108>>2] = $103;
      HEAP32[$111>>2] = $106;
      $$3 = $103;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   } while(0);
   $127 = ($101|0)==(0|0);
   if (!($127)) {
    $128 = ((($5)) + 28|0);
    $129 = HEAP32[$128>>2]|0;
    $130 = (52620 + ($129<<2)|0);
    $131 = HEAP32[$130>>2]|0;
    $132 = ($5|0)==($131|0);
    if ($132) {
     HEAP32[$130>>2] = $$3;
     $cond = ($$3|0)==(0|0);
     if ($cond) {
      $133 = 1 << $129;
      $134 = $133 ^ -1;
      $135 = HEAP32[(52320)>>2]|0;
      $136 = $135 & $134;
      HEAP32[(52320)>>2] = $136;
      break;
     }
    } else {
     $137 = HEAP32[(52332)>>2]|0;
     $138 = ($101>>>0)<($137>>>0);
     if ($138) {
      _abort();
      // unreachable;
     }
     $139 = ((($101)) + 16|0);
     $140 = HEAP32[$139>>2]|0;
     $141 = ($140|0)==($5|0);
     if ($141) {
      HEAP32[$139>>2] = $$3;
     } else {
      $142 = ((($101)) + 20|0);
      HEAP32[$142>>2] = $$3;
     }
     $143 = ($$3|0)==(0|0);
     if ($143) {
      break;
     }
    }
    $144 = HEAP32[(52332)>>2]|0;
    $145 = ($$3>>>0)<($144>>>0);
    if ($145) {
     _abort();
     // unreachable;
    }
    $146 = ((($$3)) + 24|0);
    HEAP32[$146>>2] = $101;
    $147 = ((($5)) + 16|0);
    $148 = HEAP32[$147>>2]|0;
    $149 = ($148|0)==(0|0);
    do {
     if (!($149)) {
      $150 = ($148>>>0)<($144>>>0);
      if ($150) {
       _abort();
       // unreachable;
      } else {
       $151 = ((($$3)) + 16|0);
       HEAP32[$151>>2] = $148;
       $152 = ((($148)) + 24|0);
       HEAP32[$152>>2] = $$3;
       break;
      }
     }
    } while(0);
    $153 = ((($147)) + 4|0);
    $154 = HEAP32[$153>>2]|0;
    $155 = ($154|0)==(0|0);
    if (!($155)) {
     $156 = HEAP32[(52332)>>2]|0;
     $157 = ($154>>>0)<($156>>>0);
     if ($157) {
      _abort();
      // unreachable;
     } else {
      $158 = ((($$3)) + 20|0);
      HEAP32[$158>>2] = $154;
      $159 = ((($154)) + 24|0);
      HEAP32[$159>>2] = $$3;
      break;
     }
    }
   }
  }
 } while(0);
 $160 = ($75>>>0)<(16);
 if ($160) {
  $161 = $3 & 1;
  $162 = $73 | $161;
  $163 = $162 | 2;
  HEAP32[$2>>2] = $163;
  $164 = (($0) + ($73)|0);
  $165 = ((($164)) + 4|0);
  $166 = HEAP32[$165>>2]|0;
  $167 = $166 | 1;
  HEAP32[$165>>2] = $167;
  $$2 = $0;
  return ($$2|0);
 } else {
  $168 = (($0) + ($1)|0);
  $169 = $3 & 1;
  $170 = $169 | $1;
  $171 = $170 | 2;
  HEAP32[$2>>2] = $171;
  $172 = ((($168)) + 4|0);
  $173 = $75 | 3;
  HEAP32[$172>>2] = $173;
  $174 = (($168) + ($75)|0);
  $175 = ((($174)) + 4|0);
  $176 = HEAP32[$175>>2]|0;
  $177 = $176 | 1;
  HEAP32[$175>>2] = $177;
  _dispose_chunk($168,$75);
  $$2 = $0;
  return ($$2|0);
 }
 return (0)|0;
}
function _dispose_chunk($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0417 = 0, $$0418 = 0, $$0429 = 0, $$0436 = 0, $$1 = 0, $$1416 = 0, $$1424 = 0, $$1427 = 0, $$1431 = 0, $$1435 = 0, $$2 = 0, $$3 = 0, $$3433 = 0, $$pre = 0, $$pre$phi22Z2D = 0, $$pre$phi24Z2D = 0, $$pre$phiZ2D = 0, $$pre21 = 0, $$pre23 = 0, $10 = 0;
 var $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0;
 var $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0;
 var $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0;
 var $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0;
 var $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0;
 var $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0;
 var $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0;
 var $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0;
 var $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0;
 var $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0;
 var $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $cond = 0, $cond16 = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (($0) + ($1)|0);
 $3 = ((($0)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $4 & 1;
 $6 = ($5|0)==(0);
 do {
  if ($6) {
   $7 = HEAP32[$0>>2]|0;
   $8 = $4 & 3;
   $9 = ($8|0)==(0);
   if ($9) {
    return;
   }
   $10 = (0 - ($7))|0;
   $11 = (($0) + ($10)|0);
   $12 = (($7) + ($1))|0;
   $13 = HEAP32[(52332)>>2]|0;
   $14 = ($11>>>0)<($13>>>0);
   if ($14) {
    _abort();
    // unreachable;
   }
   $15 = HEAP32[(52336)>>2]|0;
   $16 = ($11|0)==($15|0);
   if ($16) {
    $101 = ((($2)) + 4|0);
    $102 = HEAP32[$101>>2]|0;
    $103 = $102 & 3;
    $104 = ($103|0)==(3);
    if (!($104)) {
     $$1 = $11;$$1416 = $12;
     break;
    }
    HEAP32[(52324)>>2] = $12;
    $105 = $102 & -2;
    HEAP32[$101>>2] = $105;
    $106 = $12 | 1;
    $107 = ((($11)) + 4|0);
    HEAP32[$107>>2] = $106;
    $108 = (($11) + ($12)|0);
    HEAP32[$108>>2] = $12;
    return;
   }
   $17 = $7 >>> 3;
   $18 = ($7>>>0)<(256);
   if ($18) {
    $19 = ((($11)) + 8|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = ((($11)) + 12|0);
    $22 = HEAP32[$21>>2]|0;
    $23 = $17 << 1;
    $24 = (52356 + ($23<<2)|0);
    $25 = ($20|0)==($24|0);
    if (!($25)) {
     $26 = ($20>>>0)<($13>>>0);
     if ($26) {
      _abort();
      // unreachable;
     }
     $27 = ((($20)) + 12|0);
     $28 = HEAP32[$27>>2]|0;
     $29 = ($28|0)==($11|0);
     if (!($29)) {
      _abort();
      // unreachable;
     }
    }
    $30 = ($22|0)==($20|0);
    if ($30) {
     $31 = 1 << $17;
     $32 = $31 ^ -1;
     $33 = HEAP32[13079]|0;
     $34 = $33 & $32;
     HEAP32[13079] = $34;
     $$1 = $11;$$1416 = $12;
     break;
    }
    $35 = ($22|0)==($24|0);
    if ($35) {
     $$pre23 = ((($22)) + 8|0);
     $$pre$phi24Z2D = $$pre23;
    } else {
     $36 = ($22>>>0)<($13>>>0);
     if ($36) {
      _abort();
      // unreachable;
     }
     $37 = ((($22)) + 8|0);
     $38 = HEAP32[$37>>2]|0;
     $39 = ($38|0)==($11|0);
     if ($39) {
      $$pre$phi24Z2D = $37;
     } else {
      _abort();
      // unreachable;
     }
    }
    $40 = ((($20)) + 12|0);
    HEAP32[$40>>2] = $22;
    HEAP32[$$pre$phi24Z2D>>2] = $20;
    $$1 = $11;$$1416 = $12;
    break;
   }
   $41 = ((($11)) + 24|0);
   $42 = HEAP32[$41>>2]|0;
   $43 = ((($11)) + 12|0);
   $44 = HEAP32[$43>>2]|0;
   $45 = ($44|0)==($11|0);
   do {
    if ($45) {
     $55 = ((($11)) + 16|0);
     $56 = ((($55)) + 4|0);
     $57 = HEAP32[$56>>2]|0;
     $58 = ($57|0)==(0|0);
     if ($58) {
      $59 = HEAP32[$55>>2]|0;
      $60 = ($59|0)==(0|0);
      if ($60) {
       $$3 = 0;
       break;
      } else {
       $$1424 = $59;$$1427 = $55;
      }
     } else {
      $$1424 = $57;$$1427 = $56;
     }
     while(1) {
      $61 = ((($$1424)) + 20|0);
      $62 = HEAP32[$61>>2]|0;
      $63 = ($62|0)==(0|0);
      if (!($63)) {
       $$1424 = $62;$$1427 = $61;
       continue;
      }
      $64 = ((($$1424)) + 16|0);
      $65 = HEAP32[$64>>2]|0;
      $66 = ($65|0)==(0|0);
      if ($66) {
       break;
      } else {
       $$1424 = $65;$$1427 = $64;
      }
     }
     $67 = ($$1427>>>0)<($13>>>0);
     if ($67) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$$1427>>2] = 0;
      $$3 = $$1424;
      break;
     }
    } else {
     $46 = ((($11)) + 8|0);
     $47 = HEAP32[$46>>2]|0;
     $48 = ($47>>>0)<($13>>>0);
     if ($48) {
      _abort();
      // unreachable;
     }
     $49 = ((($47)) + 12|0);
     $50 = HEAP32[$49>>2]|0;
     $51 = ($50|0)==($11|0);
     if (!($51)) {
      _abort();
      // unreachable;
     }
     $52 = ((($44)) + 8|0);
     $53 = HEAP32[$52>>2]|0;
     $54 = ($53|0)==($11|0);
     if ($54) {
      HEAP32[$49>>2] = $44;
      HEAP32[$52>>2] = $47;
      $$3 = $44;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   } while(0);
   $68 = ($42|0)==(0|0);
   if ($68) {
    $$1 = $11;$$1416 = $12;
   } else {
    $69 = ((($11)) + 28|0);
    $70 = HEAP32[$69>>2]|0;
    $71 = (52620 + ($70<<2)|0);
    $72 = HEAP32[$71>>2]|0;
    $73 = ($11|0)==($72|0);
    if ($73) {
     HEAP32[$71>>2] = $$3;
     $cond = ($$3|0)==(0|0);
     if ($cond) {
      $74 = 1 << $70;
      $75 = $74 ^ -1;
      $76 = HEAP32[(52320)>>2]|0;
      $77 = $76 & $75;
      HEAP32[(52320)>>2] = $77;
      $$1 = $11;$$1416 = $12;
      break;
     }
    } else {
     $78 = HEAP32[(52332)>>2]|0;
     $79 = ($42>>>0)<($78>>>0);
     if ($79) {
      _abort();
      // unreachable;
     }
     $80 = ((($42)) + 16|0);
     $81 = HEAP32[$80>>2]|0;
     $82 = ($81|0)==($11|0);
     if ($82) {
      HEAP32[$80>>2] = $$3;
     } else {
      $83 = ((($42)) + 20|0);
      HEAP32[$83>>2] = $$3;
     }
     $84 = ($$3|0)==(0|0);
     if ($84) {
      $$1 = $11;$$1416 = $12;
      break;
     }
    }
    $85 = HEAP32[(52332)>>2]|0;
    $86 = ($$3>>>0)<($85>>>0);
    if ($86) {
     _abort();
     // unreachable;
    }
    $87 = ((($$3)) + 24|0);
    HEAP32[$87>>2] = $42;
    $88 = ((($11)) + 16|0);
    $89 = HEAP32[$88>>2]|0;
    $90 = ($89|0)==(0|0);
    do {
     if (!($90)) {
      $91 = ($89>>>0)<($85>>>0);
      if ($91) {
       _abort();
       // unreachable;
      } else {
       $92 = ((($$3)) + 16|0);
       HEAP32[$92>>2] = $89;
       $93 = ((($89)) + 24|0);
       HEAP32[$93>>2] = $$3;
       break;
      }
     }
    } while(0);
    $94 = ((($88)) + 4|0);
    $95 = HEAP32[$94>>2]|0;
    $96 = ($95|0)==(0|0);
    if ($96) {
     $$1 = $11;$$1416 = $12;
    } else {
     $97 = HEAP32[(52332)>>2]|0;
     $98 = ($95>>>0)<($97>>>0);
     if ($98) {
      _abort();
      // unreachable;
     } else {
      $99 = ((($$3)) + 20|0);
      HEAP32[$99>>2] = $95;
      $100 = ((($95)) + 24|0);
      HEAP32[$100>>2] = $$3;
      $$1 = $11;$$1416 = $12;
      break;
     }
    }
   }
  } else {
   $$1 = $0;$$1416 = $1;
  }
 } while(0);
 $109 = HEAP32[(52332)>>2]|0;
 $110 = ($2>>>0)<($109>>>0);
 if ($110) {
  _abort();
  // unreachable;
 }
 $111 = ((($2)) + 4|0);
 $112 = HEAP32[$111>>2]|0;
 $113 = $112 & 2;
 $114 = ($113|0)==(0);
 if ($114) {
  $115 = HEAP32[(52340)>>2]|0;
  $116 = ($2|0)==($115|0);
  if ($116) {
   $117 = HEAP32[(52328)>>2]|0;
   $118 = (($117) + ($$1416))|0;
   HEAP32[(52328)>>2] = $118;
   HEAP32[(52340)>>2] = $$1;
   $119 = $118 | 1;
   $120 = ((($$1)) + 4|0);
   HEAP32[$120>>2] = $119;
   $121 = HEAP32[(52336)>>2]|0;
   $122 = ($$1|0)==($121|0);
   if (!($122)) {
    return;
   }
   HEAP32[(52336)>>2] = 0;
   HEAP32[(52324)>>2] = 0;
   return;
  }
  $123 = HEAP32[(52336)>>2]|0;
  $124 = ($2|0)==($123|0);
  if ($124) {
   $125 = HEAP32[(52324)>>2]|0;
   $126 = (($125) + ($$1416))|0;
   HEAP32[(52324)>>2] = $126;
   HEAP32[(52336)>>2] = $$1;
   $127 = $126 | 1;
   $128 = ((($$1)) + 4|0);
   HEAP32[$128>>2] = $127;
   $129 = (($$1) + ($126)|0);
   HEAP32[$129>>2] = $126;
   return;
  }
  $130 = $112 & -8;
  $131 = (($130) + ($$1416))|0;
  $132 = $112 >>> 3;
  $133 = ($112>>>0)<(256);
  do {
   if ($133) {
    $134 = ((($2)) + 8|0);
    $135 = HEAP32[$134>>2]|0;
    $136 = ((($2)) + 12|0);
    $137 = HEAP32[$136>>2]|0;
    $138 = $132 << 1;
    $139 = (52356 + ($138<<2)|0);
    $140 = ($135|0)==($139|0);
    if (!($140)) {
     $141 = ($135>>>0)<($109>>>0);
     if ($141) {
      _abort();
      // unreachable;
     }
     $142 = ((($135)) + 12|0);
     $143 = HEAP32[$142>>2]|0;
     $144 = ($143|0)==($2|0);
     if (!($144)) {
      _abort();
      // unreachable;
     }
    }
    $145 = ($137|0)==($135|0);
    if ($145) {
     $146 = 1 << $132;
     $147 = $146 ^ -1;
     $148 = HEAP32[13079]|0;
     $149 = $148 & $147;
     HEAP32[13079] = $149;
     break;
    }
    $150 = ($137|0)==($139|0);
    if ($150) {
     $$pre21 = ((($137)) + 8|0);
     $$pre$phi22Z2D = $$pre21;
    } else {
     $151 = ($137>>>0)<($109>>>0);
     if ($151) {
      _abort();
      // unreachable;
     }
     $152 = ((($137)) + 8|0);
     $153 = HEAP32[$152>>2]|0;
     $154 = ($153|0)==($2|0);
     if ($154) {
      $$pre$phi22Z2D = $152;
     } else {
      _abort();
      // unreachable;
     }
    }
    $155 = ((($135)) + 12|0);
    HEAP32[$155>>2] = $137;
    HEAP32[$$pre$phi22Z2D>>2] = $135;
   } else {
    $156 = ((($2)) + 24|0);
    $157 = HEAP32[$156>>2]|0;
    $158 = ((($2)) + 12|0);
    $159 = HEAP32[$158>>2]|0;
    $160 = ($159|0)==($2|0);
    do {
     if ($160) {
      $170 = ((($2)) + 16|0);
      $171 = ((($170)) + 4|0);
      $172 = HEAP32[$171>>2]|0;
      $173 = ($172|0)==(0|0);
      if ($173) {
       $174 = HEAP32[$170>>2]|0;
       $175 = ($174|0)==(0|0);
       if ($175) {
        $$3433 = 0;
        break;
       } else {
        $$1431 = $174;$$1435 = $170;
       }
      } else {
       $$1431 = $172;$$1435 = $171;
      }
      while(1) {
       $176 = ((($$1431)) + 20|0);
       $177 = HEAP32[$176>>2]|0;
       $178 = ($177|0)==(0|0);
       if (!($178)) {
        $$1431 = $177;$$1435 = $176;
        continue;
       }
       $179 = ((($$1431)) + 16|0);
       $180 = HEAP32[$179>>2]|0;
       $181 = ($180|0)==(0|0);
       if ($181) {
        break;
       } else {
        $$1431 = $180;$$1435 = $179;
       }
      }
      $182 = ($$1435>>>0)<($109>>>0);
      if ($182) {
       _abort();
       // unreachable;
      } else {
       HEAP32[$$1435>>2] = 0;
       $$3433 = $$1431;
       break;
      }
     } else {
      $161 = ((($2)) + 8|0);
      $162 = HEAP32[$161>>2]|0;
      $163 = ($162>>>0)<($109>>>0);
      if ($163) {
       _abort();
       // unreachable;
      }
      $164 = ((($162)) + 12|0);
      $165 = HEAP32[$164>>2]|0;
      $166 = ($165|0)==($2|0);
      if (!($166)) {
       _abort();
       // unreachable;
      }
      $167 = ((($159)) + 8|0);
      $168 = HEAP32[$167>>2]|0;
      $169 = ($168|0)==($2|0);
      if ($169) {
       HEAP32[$164>>2] = $159;
       HEAP32[$167>>2] = $162;
       $$3433 = $159;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    } while(0);
    $183 = ($157|0)==(0|0);
    if (!($183)) {
     $184 = ((($2)) + 28|0);
     $185 = HEAP32[$184>>2]|0;
     $186 = (52620 + ($185<<2)|0);
     $187 = HEAP32[$186>>2]|0;
     $188 = ($2|0)==($187|0);
     if ($188) {
      HEAP32[$186>>2] = $$3433;
      $cond16 = ($$3433|0)==(0|0);
      if ($cond16) {
       $189 = 1 << $185;
       $190 = $189 ^ -1;
       $191 = HEAP32[(52320)>>2]|0;
       $192 = $191 & $190;
       HEAP32[(52320)>>2] = $192;
       break;
      }
     } else {
      $193 = HEAP32[(52332)>>2]|0;
      $194 = ($157>>>0)<($193>>>0);
      if ($194) {
       _abort();
       // unreachable;
      }
      $195 = ((($157)) + 16|0);
      $196 = HEAP32[$195>>2]|0;
      $197 = ($196|0)==($2|0);
      if ($197) {
       HEAP32[$195>>2] = $$3433;
      } else {
       $198 = ((($157)) + 20|0);
       HEAP32[$198>>2] = $$3433;
      }
      $199 = ($$3433|0)==(0|0);
      if ($199) {
       break;
      }
     }
     $200 = HEAP32[(52332)>>2]|0;
     $201 = ($$3433>>>0)<($200>>>0);
     if ($201) {
      _abort();
      // unreachable;
     }
     $202 = ((($$3433)) + 24|0);
     HEAP32[$202>>2] = $157;
     $203 = ((($2)) + 16|0);
     $204 = HEAP32[$203>>2]|0;
     $205 = ($204|0)==(0|0);
     do {
      if (!($205)) {
       $206 = ($204>>>0)<($200>>>0);
       if ($206) {
        _abort();
        // unreachable;
       } else {
        $207 = ((($$3433)) + 16|0);
        HEAP32[$207>>2] = $204;
        $208 = ((($204)) + 24|0);
        HEAP32[$208>>2] = $$3433;
        break;
       }
      }
     } while(0);
     $209 = ((($203)) + 4|0);
     $210 = HEAP32[$209>>2]|0;
     $211 = ($210|0)==(0|0);
     if (!($211)) {
      $212 = HEAP32[(52332)>>2]|0;
      $213 = ($210>>>0)<($212>>>0);
      if ($213) {
       _abort();
       // unreachable;
      } else {
       $214 = ((($$3433)) + 20|0);
       HEAP32[$214>>2] = $210;
       $215 = ((($210)) + 24|0);
       HEAP32[$215>>2] = $$3433;
       break;
      }
     }
    }
   }
  } while(0);
  $216 = $131 | 1;
  $217 = ((($$1)) + 4|0);
  HEAP32[$217>>2] = $216;
  $218 = (($$1) + ($131)|0);
  HEAP32[$218>>2] = $131;
  $219 = HEAP32[(52336)>>2]|0;
  $220 = ($$1|0)==($219|0);
  if ($220) {
   HEAP32[(52324)>>2] = $131;
   return;
  } else {
   $$2 = $131;
  }
 } else {
  $221 = $112 & -2;
  HEAP32[$111>>2] = $221;
  $222 = $$1416 | 1;
  $223 = ((($$1)) + 4|0);
  HEAP32[$223>>2] = $222;
  $224 = (($$1) + ($$1416)|0);
  HEAP32[$224>>2] = $$1416;
  $$2 = $$1416;
 }
 $225 = $$2 >>> 3;
 $226 = ($$2>>>0)<(256);
 if ($226) {
  $227 = $225 << 1;
  $228 = (52356 + ($227<<2)|0);
  $229 = HEAP32[13079]|0;
  $230 = 1 << $225;
  $231 = $229 & $230;
  $232 = ($231|0)==(0);
  if ($232) {
   $233 = $229 | $230;
   HEAP32[13079] = $233;
   $$pre = ((($228)) + 8|0);
   $$0436 = $228;$$pre$phiZ2D = $$pre;
  } else {
   $234 = ((($228)) + 8|0);
   $235 = HEAP32[$234>>2]|0;
   $236 = HEAP32[(52332)>>2]|0;
   $237 = ($235>>>0)<($236>>>0);
   if ($237) {
    _abort();
    // unreachable;
   } else {
    $$0436 = $235;$$pre$phiZ2D = $234;
   }
  }
  HEAP32[$$pre$phiZ2D>>2] = $$1;
  $238 = ((($$0436)) + 12|0);
  HEAP32[$238>>2] = $$1;
  $239 = ((($$1)) + 8|0);
  HEAP32[$239>>2] = $$0436;
  $240 = ((($$1)) + 12|0);
  HEAP32[$240>>2] = $228;
  return;
 }
 $241 = $$2 >>> 8;
 $242 = ($241|0)==(0);
 if ($242) {
  $$0429 = 0;
 } else {
  $243 = ($$2>>>0)>(16777215);
  if ($243) {
   $$0429 = 31;
  } else {
   $244 = (($241) + 1048320)|0;
   $245 = $244 >>> 16;
   $246 = $245 & 8;
   $247 = $241 << $246;
   $248 = (($247) + 520192)|0;
   $249 = $248 >>> 16;
   $250 = $249 & 4;
   $251 = $250 | $246;
   $252 = $247 << $250;
   $253 = (($252) + 245760)|0;
   $254 = $253 >>> 16;
   $255 = $254 & 2;
   $256 = $251 | $255;
   $257 = (14 - ($256))|0;
   $258 = $252 << $255;
   $259 = $258 >>> 15;
   $260 = (($257) + ($259))|0;
   $261 = $260 << 1;
   $262 = (($260) + 7)|0;
   $263 = $$2 >>> $262;
   $264 = $263 & 1;
   $265 = $264 | $261;
   $$0429 = $265;
  }
 }
 $266 = (52620 + ($$0429<<2)|0);
 $267 = ((($$1)) + 28|0);
 HEAP32[$267>>2] = $$0429;
 $268 = ((($$1)) + 16|0);
 $269 = ((($$1)) + 20|0);
 HEAP32[$269>>2] = 0;
 HEAP32[$268>>2] = 0;
 $270 = HEAP32[(52320)>>2]|0;
 $271 = 1 << $$0429;
 $272 = $270 & $271;
 $273 = ($272|0)==(0);
 if ($273) {
  $274 = $270 | $271;
  HEAP32[(52320)>>2] = $274;
  HEAP32[$266>>2] = $$1;
  $275 = ((($$1)) + 24|0);
  HEAP32[$275>>2] = $266;
  $276 = ((($$1)) + 12|0);
  HEAP32[$276>>2] = $$1;
  $277 = ((($$1)) + 8|0);
  HEAP32[$277>>2] = $$1;
  return;
 }
 $278 = HEAP32[$266>>2]|0;
 $279 = ($$0429|0)==(31);
 $280 = $$0429 >>> 1;
 $281 = (25 - ($280))|0;
 $282 = $279 ? 0 : $281;
 $283 = $$2 << $282;
 $$0417 = $283;$$0418 = $278;
 while(1) {
  $284 = ((($$0418)) + 4|0);
  $285 = HEAP32[$284>>2]|0;
  $286 = $285 & -8;
  $287 = ($286|0)==($$2|0);
  if ($287) {
   label = 127;
   break;
  }
  $288 = $$0417 >>> 31;
  $289 = (((($$0418)) + 16|0) + ($288<<2)|0);
  $290 = $$0417 << 1;
  $291 = HEAP32[$289>>2]|0;
  $292 = ($291|0)==(0|0);
  if ($292) {
   label = 124;
   break;
  } else {
   $$0417 = $290;$$0418 = $291;
  }
 }
 if ((label|0) == 124) {
  $293 = HEAP32[(52332)>>2]|0;
  $294 = ($289>>>0)<($293>>>0);
  if ($294) {
   _abort();
   // unreachable;
  }
  HEAP32[$289>>2] = $$1;
  $295 = ((($$1)) + 24|0);
  HEAP32[$295>>2] = $$0418;
  $296 = ((($$1)) + 12|0);
  HEAP32[$296>>2] = $$1;
  $297 = ((($$1)) + 8|0);
  HEAP32[$297>>2] = $$1;
  return;
 }
 else if ((label|0) == 127) {
  $298 = ((($$0418)) + 8|0);
  $299 = HEAP32[$298>>2]|0;
  $300 = HEAP32[(52332)>>2]|0;
  $301 = ($299>>>0)>=($300>>>0);
  $not$ = ($$0418>>>0)>=($300>>>0);
  $302 = $301 & $not$;
  if (!($302)) {
   _abort();
   // unreachable;
  }
  $303 = ((($299)) + 12|0);
  HEAP32[$303>>2] = $$1;
  HEAP32[$298>>2] = $$1;
  $304 = ((($$1)) + 8|0);
  HEAP32[$304>>2] = $299;
  $305 = ((($$1)) + 12|0);
  HEAP32[$305>>2] = $$0418;
  $306 = ((($$1)) + 24|0);
  HEAP32[$306>>2] = 0;
  return;
 }
}
function runPostSets() {
}
function _i64Subtract(a, b, c, d) {
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a - c)>>>0;
    h = (b - d)>>>0;
    h = (b - d - (((c>>>0) > (a>>>0))|0))>>>0; // Borrow one from high word to low word on underflow.
    return ((tempRet0 = h,l|0)|0);
}
function _i64Add(a, b, c, d) {
    /*
      x = a + b*2^32
      y = c + d*2^32
      result = l + h*2^32
    */
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a + c)>>>0;
    h = (b + d + (((l>>>0) < (a>>>0))|0))>>>0; // Add carry from low word to high word on overflow.
    return ((tempRet0 = h,l|0)|0);
}
function _memset(ptr, value, num) {
    ptr = ptr|0; value = value|0; num = num|0;
    var end = 0, aligned_end = 0, block_aligned_end = 0, value4 = 0;
    end = (ptr + num)|0;

    value = value & 0xff;
    if ((num|0) >= 67 /* 64 bytes for an unrolled loop + 3 bytes for unaligned head*/) {
      while ((ptr&3) != 0) {
        HEAP8[((ptr)>>0)]=value;
        ptr = (ptr+1)|0;
      }

      aligned_end = (end & -4)|0;
      block_aligned_end = (aligned_end - 64)|0;
      value4 = value | (value << 8) | (value << 16) | (value << 24);

      while((ptr|0) <= (block_aligned_end|0)) {
        HEAP32[((ptr)>>2)]=value4;
        HEAP32[(((ptr)+(4))>>2)]=value4;
        HEAP32[(((ptr)+(8))>>2)]=value4;
        HEAP32[(((ptr)+(12))>>2)]=value4;
        HEAP32[(((ptr)+(16))>>2)]=value4;
        HEAP32[(((ptr)+(20))>>2)]=value4;
        HEAP32[(((ptr)+(24))>>2)]=value4;
        HEAP32[(((ptr)+(28))>>2)]=value4;
        HEAP32[(((ptr)+(32))>>2)]=value4;
        HEAP32[(((ptr)+(36))>>2)]=value4;
        HEAP32[(((ptr)+(40))>>2)]=value4;
        HEAP32[(((ptr)+(44))>>2)]=value4;
        HEAP32[(((ptr)+(48))>>2)]=value4;
        HEAP32[(((ptr)+(52))>>2)]=value4;
        HEAP32[(((ptr)+(56))>>2)]=value4;
        HEAP32[(((ptr)+(60))>>2)]=value4;
        ptr = (ptr + 64)|0;
      }

      while ((ptr|0) < (aligned_end|0) ) {
        HEAP32[((ptr)>>2)]=value4;
        ptr = (ptr+4)|0;
      }
    }
    // The remaining bytes.
    while ((ptr|0) < (end|0)) {
      HEAP8[((ptr)>>0)]=value;
      ptr = (ptr+1)|0;
    }
    return (end-num)|0;
}
function _bitshift64Lshr(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = high >>> bits;
      return (low >>> bits) | ((high&ander) << (32 - bits));
    }
    tempRet0 = 0;
    return (high >>> (bits - 32))|0;
}
function _bitshift64Shl(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = (high << bits) | ((low&(ander << (32 - bits))) >>> (32 - bits));
      return low << bits;
    }
    tempRet0 = low << (bits - 32);
    return 0;
}
function _llvm_cttz_i32(x) {
    x = x|0;
    var ret = 0;
    ret = ((HEAP8[(((cttz_i8)+(x & 0xff))>>0)])|0);
    if ((ret|0) < 8) return ret|0;
    ret = ((HEAP8[(((cttz_i8)+((x >> 8)&0xff))>>0)])|0);
    if ((ret|0) < 8) return (ret + 8)|0;
    ret = ((HEAP8[(((cttz_i8)+((x >> 16)&0xff))>>0)])|0);
    if ((ret|0) < 8) return (ret + 16)|0;
    return (((HEAP8[(((cttz_i8)+(x >>> 24))>>0)])|0) + 24)|0;
}
function ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) {
    $a$0 = $a$0 | 0;
    $a$1 = $a$1 | 0;
    $b$0 = $b$0 | 0;
    $b$1 = $b$1 | 0;
    $rem = $rem | 0;
    var $n_sroa_0_0_extract_trunc = 0, $n_sroa_1_4_extract_shift$0 = 0, $n_sroa_1_4_extract_trunc = 0, $d_sroa_0_0_extract_trunc = 0, $d_sroa_1_4_extract_shift$0 = 0, $d_sroa_1_4_extract_trunc = 0, $4 = 0, $17 = 0, $37 = 0, $49 = 0, $51 = 0, $57 = 0, $58 = 0, $66 = 0, $78 = 0, $86 = 0, $88 = 0, $89 = 0, $91 = 0, $92 = 0, $95 = 0, $105 = 0, $117 = 0, $119 = 0, $125 = 0, $126 = 0, $130 = 0, $q_sroa_1_1_ph = 0, $q_sroa_0_1_ph = 0, $r_sroa_1_1_ph = 0, $r_sroa_0_1_ph = 0, $sr_1_ph = 0, $d_sroa_0_0_insert_insert99$0 = 0, $d_sroa_0_0_insert_insert99$1 = 0, $137$0 = 0, $137$1 = 0, $carry_0203 = 0, $sr_1202 = 0, $r_sroa_0_1201 = 0, $r_sroa_1_1200 = 0, $q_sroa_0_1199 = 0, $q_sroa_1_1198 = 0, $147 = 0, $149 = 0, $r_sroa_0_0_insert_insert42$0 = 0, $r_sroa_0_0_insert_insert42$1 = 0, $150$1 = 0, $151$0 = 0, $152 = 0, $154$0 = 0, $r_sroa_0_0_extract_trunc = 0, $r_sroa_1_4_extract_trunc = 0, $155 = 0, $carry_0_lcssa$0 = 0, $carry_0_lcssa$1 = 0, $r_sroa_0_1_lcssa = 0, $r_sroa_1_1_lcssa = 0, $q_sroa_0_1_lcssa = 0, $q_sroa_1_1_lcssa = 0, $q_sroa_0_0_insert_ext75$0 = 0, $q_sroa_0_0_insert_ext75$1 = 0, $q_sroa_0_0_insert_insert77$1 = 0, $_0$0 = 0, $_0$1 = 0;
    $n_sroa_0_0_extract_trunc = $a$0;
    $n_sroa_1_4_extract_shift$0 = $a$1;
    $n_sroa_1_4_extract_trunc = $n_sroa_1_4_extract_shift$0;
    $d_sroa_0_0_extract_trunc = $b$0;
    $d_sroa_1_4_extract_shift$0 = $b$1;
    $d_sroa_1_4_extract_trunc = $d_sroa_1_4_extract_shift$0;
    if (($n_sroa_1_4_extract_trunc | 0) == 0) {
      $4 = ($rem | 0) != 0;
      if (($d_sroa_1_4_extract_trunc | 0) == 0) {
        if ($4) {
          HEAP32[$rem >> 2] = ($n_sroa_0_0_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
          HEAP32[$rem + 4 >> 2] = 0;
        }
        $_0$1 = 0;
        $_0$0 = ($n_sroa_0_0_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      } else {
        if (!$4) {
          $_0$1 = 0;
          $_0$0 = 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        HEAP32[$rem >> 2] = $a$0 & -1;
        HEAP32[$rem + 4 >> 2] = $a$1 & 0;
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
    }
    $17 = ($d_sroa_1_4_extract_trunc | 0) == 0;
    do {
      if (($d_sroa_0_0_extract_trunc | 0) == 0) {
        if ($17) {
          if (($rem | 0) != 0) {
            HEAP32[$rem >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
            HEAP32[$rem + 4 >> 2] = 0;
          }
          $_0$1 = 0;
          $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        if (($n_sroa_0_0_extract_trunc | 0) == 0) {
          if (($rem | 0) != 0) {
            HEAP32[$rem >> 2] = 0;
            HEAP32[$rem + 4 >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_1_4_extract_trunc >>> 0);
          }
          $_0$1 = 0;
          $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_1_4_extract_trunc >>> 0) >>> 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        $37 = $d_sroa_1_4_extract_trunc - 1 | 0;
        if (($37 & $d_sroa_1_4_extract_trunc | 0) == 0) {
          if (($rem | 0) != 0) {
            HEAP32[$rem >> 2] = 0 | $a$0 & -1;
            HEAP32[$rem + 4 >> 2] = $37 & $n_sroa_1_4_extract_trunc | $a$1 & 0;
          }
          $_0$1 = 0;
          $_0$0 = $n_sroa_1_4_extract_trunc >>> ((_llvm_cttz_i32($d_sroa_1_4_extract_trunc | 0) | 0) >>> 0);
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        $49 = Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0;
        $51 = $49 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
        if ($51 >>> 0 <= 30) {
          $57 = $51 + 1 | 0;
          $58 = 31 - $51 | 0;
          $sr_1_ph = $57;
          $r_sroa_0_1_ph = $n_sroa_1_4_extract_trunc << $58 | $n_sroa_0_0_extract_trunc >>> ($57 >>> 0);
          $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($57 >>> 0);
          $q_sroa_0_1_ph = 0;
          $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $58;
          break;
        }
        if (($rem | 0) == 0) {
          $_0$1 = 0;
          $_0$0 = 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        HEAP32[$rem >> 2] = 0 | $a$0 & -1;
        HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      } else {
        if (!$17) {
          $117 = Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0;
          $119 = $117 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
          if ($119 >>> 0 <= 31) {
            $125 = $119 + 1 | 0;
            $126 = 31 - $119 | 0;
            $130 = $119 - 31 >> 31;
            $sr_1_ph = $125;
            $r_sroa_0_1_ph = $n_sroa_0_0_extract_trunc >>> ($125 >>> 0) & $130 | $n_sroa_1_4_extract_trunc << $126;
            $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($125 >>> 0) & $130;
            $q_sroa_0_1_ph = 0;
            $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $126;
            break;
          }
          if (($rem | 0) == 0) {
            $_0$1 = 0;
            $_0$0 = 0;
            return (tempRet0 = $_0$1, $_0$0) | 0;
          }
          HEAP32[$rem >> 2] = 0 | $a$0 & -1;
          HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
          $_0$1 = 0;
          $_0$0 = 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        $66 = $d_sroa_0_0_extract_trunc - 1 | 0;
        if (($66 & $d_sroa_0_0_extract_trunc | 0) != 0) {
          $86 = (Math_clz32($d_sroa_0_0_extract_trunc | 0) | 0) + 33 | 0;
          $88 = $86 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
          $89 = 64 - $88 | 0;
          $91 = 32 - $88 | 0;
          $92 = $91 >> 31;
          $95 = $88 - 32 | 0;
          $105 = $95 >> 31;
          $sr_1_ph = $88;
          $r_sroa_0_1_ph = $91 - 1 >> 31 & $n_sroa_1_4_extract_trunc >>> ($95 >>> 0) | ($n_sroa_1_4_extract_trunc << $91 | $n_sroa_0_0_extract_trunc >>> ($88 >>> 0)) & $105;
          $r_sroa_1_1_ph = $105 & $n_sroa_1_4_extract_trunc >>> ($88 >>> 0);
          $q_sroa_0_1_ph = $n_sroa_0_0_extract_trunc << $89 & $92;
          $q_sroa_1_1_ph = ($n_sroa_1_4_extract_trunc << $89 | $n_sroa_0_0_extract_trunc >>> ($95 >>> 0)) & $92 | $n_sroa_0_0_extract_trunc << $91 & $88 - 33 >> 31;
          break;
        }
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = $66 & $n_sroa_0_0_extract_trunc;
          HEAP32[$rem + 4 >> 2] = 0;
        }
        if (($d_sroa_0_0_extract_trunc | 0) == 1) {
          $_0$1 = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
          $_0$0 = 0 | $a$0 & -1;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        } else {
          $78 = _llvm_cttz_i32($d_sroa_0_0_extract_trunc | 0) | 0;
          $_0$1 = 0 | $n_sroa_1_4_extract_trunc >>> ($78 >>> 0);
          $_0$0 = $n_sroa_1_4_extract_trunc << 32 - $78 | $n_sroa_0_0_extract_trunc >>> ($78 >>> 0) | 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
      }
    } while (0);
    if (($sr_1_ph | 0) == 0) {
      $q_sroa_1_1_lcssa = $q_sroa_1_1_ph;
      $q_sroa_0_1_lcssa = $q_sroa_0_1_ph;
      $r_sroa_1_1_lcssa = $r_sroa_1_1_ph;
      $r_sroa_0_1_lcssa = $r_sroa_0_1_ph;
      $carry_0_lcssa$1 = 0;
      $carry_0_lcssa$0 = 0;
    } else {
      $d_sroa_0_0_insert_insert99$0 = 0 | $b$0 & -1;
      $d_sroa_0_0_insert_insert99$1 = $d_sroa_1_4_extract_shift$0 | $b$1 & 0;
      $137$0 = _i64Add($d_sroa_0_0_insert_insert99$0 | 0, $d_sroa_0_0_insert_insert99$1 | 0, -1, -1) | 0;
      $137$1 = tempRet0;
      $q_sroa_1_1198 = $q_sroa_1_1_ph;
      $q_sroa_0_1199 = $q_sroa_0_1_ph;
      $r_sroa_1_1200 = $r_sroa_1_1_ph;
      $r_sroa_0_1201 = $r_sroa_0_1_ph;
      $sr_1202 = $sr_1_ph;
      $carry_0203 = 0;
      while (1) {
        $147 = $q_sroa_0_1199 >>> 31 | $q_sroa_1_1198 << 1;
        $149 = $carry_0203 | $q_sroa_0_1199 << 1;
        $r_sroa_0_0_insert_insert42$0 = 0 | ($r_sroa_0_1201 << 1 | $q_sroa_1_1198 >>> 31);
        $r_sroa_0_0_insert_insert42$1 = $r_sroa_0_1201 >>> 31 | $r_sroa_1_1200 << 1 | 0;
        _i64Subtract($137$0 | 0, $137$1 | 0, $r_sroa_0_0_insert_insert42$0 | 0, $r_sroa_0_0_insert_insert42$1 | 0) | 0;
        $150$1 = tempRet0;
        $151$0 = $150$1 >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1;
        $152 = $151$0 & 1;
        $154$0 = _i64Subtract($r_sroa_0_0_insert_insert42$0 | 0, $r_sroa_0_0_insert_insert42$1 | 0, $151$0 & $d_sroa_0_0_insert_insert99$0 | 0, ((($150$1 | 0) < 0 ? -1 : 0) >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1) & $d_sroa_0_0_insert_insert99$1 | 0) | 0;
        $r_sroa_0_0_extract_trunc = $154$0;
        $r_sroa_1_4_extract_trunc = tempRet0;
        $155 = $sr_1202 - 1 | 0;
        if (($155 | 0) == 0) {
          break;
        } else {
          $q_sroa_1_1198 = $147;
          $q_sroa_0_1199 = $149;
          $r_sroa_1_1200 = $r_sroa_1_4_extract_trunc;
          $r_sroa_0_1201 = $r_sroa_0_0_extract_trunc;
          $sr_1202 = $155;
          $carry_0203 = $152;
        }
      }
      $q_sroa_1_1_lcssa = $147;
      $q_sroa_0_1_lcssa = $149;
      $r_sroa_1_1_lcssa = $r_sroa_1_4_extract_trunc;
      $r_sroa_0_1_lcssa = $r_sroa_0_0_extract_trunc;
      $carry_0_lcssa$1 = 0;
      $carry_0_lcssa$0 = $152;
    }
    $q_sroa_0_0_insert_ext75$0 = $q_sroa_0_1_lcssa;
    $q_sroa_0_0_insert_ext75$1 = 0;
    $q_sroa_0_0_insert_insert77$1 = $q_sroa_1_1_lcssa | $q_sroa_0_0_insert_ext75$1;
    if (($rem | 0) != 0) {
      HEAP32[$rem >> 2] = 0 | $r_sroa_0_1_lcssa;
      HEAP32[$rem + 4 >> 2] = $r_sroa_1_1_lcssa | 0;
    }
    $_0$1 = (0 | $q_sroa_0_0_insert_ext75$0) >>> 31 | $q_sroa_0_0_insert_insert77$1 << 1 | ($q_sroa_0_0_insert_ext75$1 << 1 | $q_sroa_0_0_insert_ext75$0 >>> 31) & 0 | $carry_0_lcssa$1;
    $_0$0 = ($q_sroa_0_0_insert_ext75$0 << 1 | 0 >>> 31) & -2 | $carry_0_lcssa$0;
    return (tempRet0 = $_0$1, $_0$0) | 0;
}
function ___udivdi3($a$0, $a$1, $b$0, $b$1) {
    $a$0 = $a$0 | 0;
    $a$1 = $a$1 | 0;
    $b$0 = $b$0 | 0;
    $b$1 = $b$1 | 0;
    var $1$0 = 0;
    $1$0 = ___udivmoddi4($a$0, $a$1, $b$0, $b$1, 0) | 0;
    return $1$0 | 0;
}
function _sbrk(increment) {
    increment = increment|0;
    var oldDynamicTop = 0;
    var oldDynamicTopOnChange = 0;
    var newDynamicTop = 0;
    var totalMemory = 0;
    increment = ((increment + 15) & -16)|0;
    oldDynamicTop = HEAP32[DYNAMICTOP_PTR>>2]|0;
    newDynamicTop = oldDynamicTop + increment | 0;

    if (((increment|0) > 0 & (newDynamicTop|0) < (oldDynamicTop|0)) // Detect and fail if we would wrap around signed 32-bit int.
      | (newDynamicTop|0) < 0) { // Also underflow, sbrk() should be able to be used to subtract.
      abortOnCannotGrowMemory()|0;
      ___setErrNo(12);
      return -1;
    }

    HEAP32[DYNAMICTOP_PTR>>2] = newDynamicTop;
    totalMemory = getTotalMemory()|0;
    if ((newDynamicTop|0) > (totalMemory|0)) {
      if ((enlargeMemory()|0) == 0) {
        ___setErrNo(12);
        HEAP32[DYNAMICTOP_PTR>>2] = oldDynamicTop;
        return -1;
      }
    }
    return oldDynamicTop|0;
}
function _memcpy(dest, src, num) {
    dest = dest|0; src = src|0; num = num|0;
    var ret = 0;
    var aligned_dest_end = 0;
    var block_aligned_dest_end = 0;
    var dest_end = 0;
    // Test against a benchmarked cutoff limit for when HEAPU8.set() becomes faster to use.
    if ((num|0) >=
      8192
    ) {
      return _emscripten_memcpy_big(dest|0, src|0, num|0)|0;
    }

    ret = dest|0;
    dest_end = (dest + num)|0;
    if ((dest&3) == (src&3)) {
      // The initial unaligned < 4-byte front.
      while (dest & 3) {
        if ((num|0) == 0) return ret|0;
        HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
        dest = (dest+1)|0;
        src = (src+1)|0;
        num = (num-1)|0;
      }
      aligned_dest_end = (dest_end & -4)|0;
      block_aligned_dest_end = (aligned_dest_end - 64)|0;
      while ((dest|0) <= (block_aligned_dest_end|0) ) {
        HEAP32[((dest)>>2)]=((HEAP32[((src)>>2)])|0);
        HEAP32[(((dest)+(4))>>2)]=((HEAP32[(((src)+(4))>>2)])|0);
        HEAP32[(((dest)+(8))>>2)]=((HEAP32[(((src)+(8))>>2)])|0);
        HEAP32[(((dest)+(12))>>2)]=((HEAP32[(((src)+(12))>>2)])|0);
        HEAP32[(((dest)+(16))>>2)]=((HEAP32[(((src)+(16))>>2)])|0);
        HEAP32[(((dest)+(20))>>2)]=((HEAP32[(((src)+(20))>>2)])|0);
        HEAP32[(((dest)+(24))>>2)]=((HEAP32[(((src)+(24))>>2)])|0);
        HEAP32[(((dest)+(28))>>2)]=((HEAP32[(((src)+(28))>>2)])|0);
        HEAP32[(((dest)+(32))>>2)]=((HEAP32[(((src)+(32))>>2)])|0);
        HEAP32[(((dest)+(36))>>2)]=((HEAP32[(((src)+(36))>>2)])|0);
        HEAP32[(((dest)+(40))>>2)]=((HEAP32[(((src)+(40))>>2)])|0);
        HEAP32[(((dest)+(44))>>2)]=((HEAP32[(((src)+(44))>>2)])|0);
        HEAP32[(((dest)+(48))>>2)]=((HEAP32[(((src)+(48))>>2)])|0);
        HEAP32[(((dest)+(52))>>2)]=((HEAP32[(((src)+(52))>>2)])|0);
        HEAP32[(((dest)+(56))>>2)]=((HEAP32[(((src)+(56))>>2)])|0);
        HEAP32[(((dest)+(60))>>2)]=((HEAP32[(((src)+(60))>>2)])|0);
        dest = (dest+64)|0;
        src = (src+64)|0;
      }
      while ((dest|0) < (aligned_dest_end|0) ) {
        HEAP32[((dest)>>2)]=((HEAP32[((src)>>2)])|0);
        dest = (dest+4)|0;
        src = (src+4)|0;
      }
    } else {
      // In the unaligned copy case, unroll a bit as well.
      aligned_dest_end = (dest_end - 4)|0;
      while ((dest|0) < (aligned_dest_end|0) ) {
        HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
        HEAP8[(((dest)+(1))>>0)]=((HEAP8[(((src)+(1))>>0)])|0);
        HEAP8[(((dest)+(2))>>0)]=((HEAP8[(((src)+(2))>>0)])|0);
        HEAP8[(((dest)+(3))>>0)]=((HEAP8[(((src)+(3))>>0)])|0);
        dest = (dest+4)|0;
        src = (src+4)|0;
      }
    }
    // The remaining unaligned < 4 byte tail.
    while ((dest|0) < (dest_end|0)) {
      HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
      dest = (dest+1)|0;
      src = (src+1)|0;
    }
    return ret|0;
}
function _memmove(dest, src, num) {
    dest = dest|0; src = src|0; num = num|0;
    var ret = 0;
    if (((src|0) < (dest|0)) & ((dest|0) < ((src + num)|0))) {
      // Unlikely case: Copy backwards in a safe manner
      ret = dest;
      src = (src + num)|0;
      dest = (dest + num)|0;
      while ((num|0) > 0) {
        dest = (dest - 1)|0;
        src = (src - 1)|0;
        num = (num - 1)|0;
        HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
      }
      dest = ret;
    } else {
      _memcpy(dest, src, num) | 0;
    }
    return dest | 0;
}
function ___uremdi3($a$0, $a$1, $b$0, $b$1) {
    $a$0 = $a$0 | 0;
    $a$1 = $a$1 | 0;
    $b$0 = $b$0 | 0;
    $b$1 = $b$1 | 0;
    var $rem = 0, __stackBase__ = 0;
    __stackBase__ = STACKTOP;
    STACKTOP = STACKTOP + 16 | 0;
    $rem = __stackBase__ | 0;
    ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) | 0;
    STACKTOP = __stackBase__;
    return (tempRet0 = HEAP32[$rem + 4 >> 2] | 0, HEAP32[$rem >> 2] | 0) | 0;
}
function _llvm_bswap_i32(x) {
    x = x|0;
    return (((x&0xff)<<24) | (((x>>8)&0xff)<<16) | (((x>>16)&0xff)<<8) | (x>>>24))|0;
}

  
function dynCall_ii(index,a1) {
  index = index|0;
  a1=a1|0;
  return FUNCTION_TABLE_ii[index&7](a1|0)|0;
}


function jsCall_ii_0(a1) {
  a1=a1|0;
  return jsCall_ii(0,a1|0)|0;
}



function dynCall_iiii(index,a1,a2,a3) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0;
  return FUNCTION_TABLE_iiii[index&15](a1|0,a2|0,a3|0)|0;
}


function jsCall_iiii_0(a1,a2,a3) {
  a1=a1|0; a2=a2|0; a3=a3|0;
  return jsCall_iiii(0,a1|0,a2|0,a3|0)|0;
}



function dynCall_vii(index,a1,a2) {
  index = index|0;
  a1=a1|0; a2=a2|0;
  FUNCTION_TABLE_vii[index&7](a1|0,a2|0);
}


function jsCall_vii_0(a1,a2) {
  a1=a1|0; a2=a2|0;
  jsCall_vii(0,a1|0,a2|0);
}



function dynCall_iii(index,a1,a2) {
  index = index|0;
  a1=a1|0; a2=a2|0;
  return FUNCTION_TABLE_iii[index&7](a1|0,a2|0)|0;
}


function jsCall_iii_0(a1,a2) {
  a1=a1|0; a2=a2|0;
  return jsCall_iii(0,a1|0,a2|0)|0;
}


function b0(p0) {
 p0 = p0|0; nullFunc_ii(0);return 0;
}
function b1(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(1);return 0;
}
function b2(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(2);
}
function b3(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(3);return 0;
}

// EMSCRIPTEN_END_FUNCS
var FUNCTION_TABLE_ii = [b0,b0,jsCall_ii_0,b0,b0,b0,___stdio_close,b0];
var FUNCTION_TABLE_iiii = [b1,b1,jsCall_iiii_0,b1,b1,b1,b1,___stdout_write,___stdio_seek,___stdio_write,_sn_write,___stdio_read,b1,b1,b1,b1];
var FUNCTION_TABLE_vii = [b2,b2,jsCall_vii_0,b2,b2,_defaultLogCallback,b2,b2];
var FUNCTION_TABLE_iii = [b3,b3,jsCall_iii_0,b3,_defaultTableResolver,b3,b3,b3];

  return { _llvm_bswap_i32: _llvm_bswap_i32, _lou_version: _lou_version, _llvm_cttz_i32: _llvm_cttz_i32, _bitshift64Lshr: _bitshift64Lshr, _lou_setLogLevel: _lou_setLogLevel, _lou_logFile: _lou_logFile, ___udivmoddi4: ___udivmoddi4, _lou_translate: _lou_translate, _fflush: _fflush, _lou_logPrint: _lou_logPrint, _lou_logEnd: _lou_logEnd, _memset: _memset, _sbrk: _sbrk, _memcpy: _memcpy, _lou_getDataPath: _lou_getDataPath, _lou_free: _lou_free, _bitshift64Shl: _bitshift64Shl, ___uremdi3: ___uremdi3, _lou_getTypeformForEmphClass: _lou_getTypeformForEmphClass, _lou_setDataPath: _lou_setDataPath, _i64Subtract: _i64Subtract, _lou_backTranslateString: _lou_backTranslateString, _lou_registerLogCallback: _lou_registerLogCallback, _lou_backTranslate: _lou_backTranslate, _i64Add: _i64Add, _emscripten_get_global_libc: _emscripten_get_global_libc, _lou_translateString: _lou_translateString, _lou_charSize: _lou_charSize, ___udivdi3: ___udivdi3, ___errno_location: ___errno_location, _lou_checkTable: _lou_checkTable, _free: _free, _lou_compileString: _lou_compileString, _lou_charToDots: _lou_charToDots, _memmove: _memmove, _malloc: _malloc, _lou_getTable: _lou_getTable, _lou_hyphenate: _lou_hyphenate, _lou_readCharFromFile: _lou_readCharFromFile, _lou_dotsToChar: _lou_dotsToChar, runPostSets: runPostSets, stackAlloc: stackAlloc, stackSave: stackSave, stackRestore: stackRestore, establishStackSpace: establishStackSpace, setTempRet0: setTempRet0, getTempRet0: getTempRet0, setThrew: setThrew, stackAlloc: stackAlloc, stackSave: stackSave, stackRestore: stackRestore, establishStackSpace: establishStackSpace, setThrew: setThrew, setTempRet0: setTempRet0, getTempRet0: getTempRet0, dynCall_ii: dynCall_ii, dynCall_iiii: dynCall_iiii, dynCall_vii: dynCall_vii, dynCall_iii: dynCall_iii };
})
// EMSCRIPTEN_END_ASM
(Module.asmGlobalArg, Module.asmLibraryArg, buffer);

var real__lou_setLogLevel = asm["_lou_setLogLevel"]; asm["_lou_setLogLevel"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__lou_setLogLevel.apply(null, arguments);
};

var real_stackSave = asm["stackSave"]; asm["stackSave"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real_stackSave.apply(null, arguments);
};

var real_getTempRet0 = asm["getTempRet0"]; asm["getTempRet0"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real_getTempRet0.apply(null, arguments);
};

var real_establishStackSpace = asm["establishStackSpace"]; asm["establishStackSpace"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real_establishStackSpace.apply(null, arguments);
};

var real_setThrew = asm["setThrew"]; asm["setThrew"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real_setThrew.apply(null, arguments);
};

var real__bitshift64Lshr = asm["_bitshift64Lshr"]; asm["_bitshift64Lshr"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__bitshift64Lshr.apply(null, arguments);
};

var real__lou_version = asm["_lou_version"]; asm["_lou_version"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__lou_version.apply(null, arguments);
};

var real__lou_logFile = asm["_lou_logFile"]; asm["_lou_logFile"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__lou_logFile.apply(null, arguments);
};

var real__lou_hyphenate = asm["_lou_hyphenate"]; asm["_lou_hyphenate"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__lou_hyphenate.apply(null, arguments);
};

var real__bitshift64Shl = asm["_bitshift64Shl"]; asm["_bitshift64Shl"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__bitshift64Shl.apply(null, arguments);
};

var real__lou_translate = asm["_lou_translate"]; asm["_lou_translate"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__lou_translate.apply(null, arguments);
};

var real__fflush = asm["_fflush"]; asm["_fflush"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__fflush.apply(null, arguments);
};

var real_setTempRet0 = asm["setTempRet0"]; asm["setTempRet0"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real_setTempRet0.apply(null, arguments);
};

var real__lou_logPrint = asm["_lou_logPrint"]; asm["_lou_logPrint"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__lou_logPrint.apply(null, arguments);
};

var real____errno_location = asm["___errno_location"]; asm["___errno_location"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real____errno_location.apply(null, arguments);
};

var real__lou_logEnd = asm["_lou_logEnd"]; asm["_lou_logEnd"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__lou_logEnd.apply(null, arguments);
};

var real__llvm_cttz_i32 = asm["_llvm_cttz_i32"]; asm["_llvm_cttz_i32"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__llvm_cttz_i32.apply(null, arguments);
};

var real__sbrk = asm["_sbrk"]; asm["_sbrk"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__sbrk.apply(null, arguments);
};

var real__lou_getDataPath = asm["_lou_getDataPath"]; asm["_lou_getDataPath"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__lou_getDataPath.apply(null, arguments);
};

var real__lou_free = asm["_lou_free"]; asm["_lou_free"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__lou_free.apply(null, arguments);
};

var real____uremdi3 = asm["___uremdi3"]; asm["___uremdi3"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real____uremdi3.apply(null, arguments);
};

var real__lou_getTypeformForEmphClass = asm["_lou_getTypeformForEmphClass"]; asm["_lou_getTypeformForEmphClass"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__lou_getTypeformForEmphClass.apply(null, arguments);
};

var real__lou_setDataPath = asm["_lou_setDataPath"]; asm["_lou_setDataPath"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__lou_setDataPath.apply(null, arguments);
};

var real__i64Subtract = asm["_i64Subtract"]; asm["_i64Subtract"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__i64Subtract.apply(null, arguments);
};

var real____udivmoddi4 = asm["___udivmoddi4"]; asm["___udivmoddi4"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real____udivmoddi4.apply(null, arguments);
};

var real__lou_registerLogCallback = asm["_lou_registerLogCallback"]; asm["_lou_registerLogCallback"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__lou_registerLogCallback.apply(null, arguments);
};

var real__lou_backTranslate = asm["_lou_backTranslate"]; asm["_lou_backTranslate"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__lou_backTranslate.apply(null, arguments);
};

var real__i64Add = asm["_i64Add"]; asm["_i64Add"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__i64Add.apply(null, arguments);
};

var real__emscripten_get_global_libc = asm["_emscripten_get_global_libc"]; asm["_emscripten_get_global_libc"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__emscripten_get_global_libc.apply(null, arguments);
};

var real__lou_translateString = asm["_lou_translateString"]; asm["_lou_translateString"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__lou_translateString.apply(null, arguments);
};

var real__lou_charSize = asm["_lou_charSize"]; asm["_lou_charSize"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__lou_charSize.apply(null, arguments);
};

var real_stackAlloc = asm["stackAlloc"]; asm["stackAlloc"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real_stackAlloc.apply(null, arguments);
};

var real____udivdi3 = asm["___udivdi3"]; asm["___udivdi3"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real____udivdi3.apply(null, arguments);
};

var real__llvm_bswap_i32 = asm["_llvm_bswap_i32"]; asm["_llvm_bswap_i32"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__llvm_bswap_i32.apply(null, arguments);
};

var real__lou_checkTable = asm["_lou_checkTable"]; asm["_lou_checkTable"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__lou_checkTable.apply(null, arguments);
};

var real__free = asm["_free"]; asm["_free"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__free.apply(null, arguments);
};

var real__lou_compileString = asm["_lou_compileString"]; asm["_lou_compileString"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__lou_compileString.apply(null, arguments);
};

var real__lou_charToDots = asm["_lou_charToDots"]; asm["_lou_charToDots"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__lou_charToDots.apply(null, arguments);
};

var real__memmove = asm["_memmove"]; asm["_memmove"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__memmove.apply(null, arguments);
};

var real_stackRestore = asm["stackRestore"]; asm["stackRestore"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real_stackRestore.apply(null, arguments);
};

var real__malloc = asm["_malloc"]; asm["_malloc"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__malloc.apply(null, arguments);
};

var real__lou_getTable = asm["_lou_getTable"]; asm["_lou_getTable"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__lou_getTable.apply(null, arguments);
};

var real__lou_backTranslateString = asm["_lou_backTranslateString"]; asm["_lou_backTranslateString"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__lou_backTranslateString.apply(null, arguments);
};

var real__lou_readCharFromFile = asm["_lou_readCharFromFile"]; asm["_lou_readCharFromFile"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__lou_readCharFromFile.apply(null, arguments);
};

var real__lou_dotsToChar = asm["_lou_dotsToChar"]; asm["_lou_dotsToChar"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__lou_dotsToChar.apply(null, arguments);
};
var _lou_setLogLevel = Module["_lou_setLogLevel"] = asm["_lou_setLogLevel"];
var stackSave = Module["stackSave"] = asm["stackSave"];
var getTempRet0 = Module["getTempRet0"] = asm["getTempRet0"];
var _memset = Module["_memset"] = asm["_memset"];
var establishStackSpace = Module["establishStackSpace"] = asm["establishStackSpace"];
var setThrew = Module["setThrew"] = asm["setThrew"];
var _bitshift64Lshr = Module["_bitshift64Lshr"] = asm["_bitshift64Lshr"];
var _lou_version = Module["_lou_version"] = asm["_lou_version"];
var _lou_logFile = Module["_lou_logFile"] = asm["_lou_logFile"];
var _lou_hyphenate = Module["_lou_hyphenate"] = asm["_lou_hyphenate"];
var _bitshift64Shl = Module["_bitshift64Shl"] = asm["_bitshift64Shl"];
var _lou_translate = Module["_lou_translate"] = asm["_lou_translate"];
var _fflush = Module["_fflush"] = asm["_fflush"];
var setTempRet0 = Module["setTempRet0"] = asm["setTempRet0"];
var _lou_logPrint = Module["_lou_logPrint"] = asm["_lou_logPrint"];
var ___errno_location = Module["___errno_location"] = asm["___errno_location"];
var _lou_logEnd = Module["_lou_logEnd"] = asm["_lou_logEnd"];
var _llvm_cttz_i32 = Module["_llvm_cttz_i32"] = asm["_llvm_cttz_i32"];
var _sbrk = Module["_sbrk"] = asm["_sbrk"];
var _memcpy = Module["_memcpy"] = asm["_memcpy"];
var _lou_getDataPath = Module["_lou_getDataPath"] = asm["_lou_getDataPath"];
var _lou_free = Module["_lou_free"] = asm["_lou_free"];
var ___uremdi3 = Module["___uremdi3"] = asm["___uremdi3"];
var _lou_getTypeformForEmphClass = Module["_lou_getTypeformForEmphClass"] = asm["_lou_getTypeformForEmphClass"];
var _lou_setDataPath = Module["_lou_setDataPath"] = asm["_lou_setDataPath"];
var _i64Subtract = Module["_i64Subtract"] = asm["_i64Subtract"];
var ___udivmoddi4 = Module["___udivmoddi4"] = asm["___udivmoddi4"];
var _lou_registerLogCallback = Module["_lou_registerLogCallback"] = asm["_lou_registerLogCallback"];
var _lou_backTranslate = Module["_lou_backTranslate"] = asm["_lou_backTranslate"];
var _i64Add = Module["_i64Add"] = asm["_i64Add"];
var _emscripten_get_global_libc = Module["_emscripten_get_global_libc"] = asm["_emscripten_get_global_libc"];
var _lou_translateString = Module["_lou_translateString"] = asm["_lou_translateString"];
var _lou_charSize = Module["_lou_charSize"] = asm["_lou_charSize"];
var stackAlloc = Module["stackAlloc"] = asm["stackAlloc"];
var ___udivdi3 = Module["___udivdi3"] = asm["___udivdi3"];
var _llvm_bswap_i32 = Module["_llvm_bswap_i32"] = asm["_llvm_bswap_i32"];
var _lou_checkTable = Module["_lou_checkTable"] = asm["_lou_checkTable"];
var _free = Module["_free"] = asm["_free"];
var runPostSets = Module["runPostSets"] = asm["runPostSets"];
var _lou_compileString = Module["_lou_compileString"] = asm["_lou_compileString"];
var _lou_charToDots = Module["_lou_charToDots"] = asm["_lou_charToDots"];
var _memmove = Module["_memmove"] = asm["_memmove"];
var stackRestore = Module["stackRestore"] = asm["stackRestore"];
var _malloc = Module["_malloc"] = asm["_malloc"];
var _lou_getTable = Module["_lou_getTable"] = asm["_lou_getTable"];
var _lou_backTranslateString = Module["_lou_backTranslateString"] = asm["_lou_backTranslateString"];
var _lou_readCharFromFile = Module["_lou_readCharFromFile"] = asm["_lou_readCharFromFile"];
var _lou_dotsToChar = Module["_lou_dotsToChar"] = asm["_lou_dotsToChar"];
var dynCall_ii = Module["dynCall_ii"] = asm["dynCall_ii"];
var dynCall_iiii = Module["dynCall_iiii"] = asm["dynCall_iiii"];
var dynCall_vii = Module["dynCall_vii"] = asm["dynCall_vii"];
var dynCall_iii = Module["dynCall_iii"] = asm["dynCall_iii"];
;

Runtime.stackAlloc = Module['stackAlloc'];
Runtime.stackSave = Module['stackSave'];
Runtime.stackRestore = Module['stackRestore'];
Runtime.establishStackSpace = Module['establishStackSpace'];

Runtime.setTempRet0 = Module['setTempRet0'];
Runtime.getTempRet0 = Module['getTempRet0'];



// === Auto-generated postamble setup entry stuff ===

Module['asm'] = asm;

Module["FS"] = FS;



function ExitStatus(status) {
  this.name = "ExitStatus";
  this.message = "Program terminated with exit(" + status + ")";
  this.status = status;
};
ExitStatus.prototype = new Error();
ExitStatus.prototype.constructor = ExitStatus;

var initialStackTop;
var preloadStartTime = null;
var calledMain = false;

dependenciesFulfilled = function runCaller() {
  // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)
  if (!Module['calledRun']) run();
  if (!Module['calledRun']) dependenciesFulfilled = runCaller; // try this again later, after new deps are fulfilled
}

Module['callMain'] = Module.callMain = function callMain(args) {
  assert(runDependencies == 0, 'cannot call main when async dependencies remain! (listen on __ATMAIN__)');
  assert(__ATPRERUN__.length == 0, 'cannot call main when preRun functions remain to be called');

  args = args || [];

  ensureInitRuntime();

  var argc = args.length+1;
  function pad() {
    for (var i = 0; i < 4-1; i++) {
      argv.push(0);
    }
  }
  var argv = [allocate(intArrayFromString(Module['thisProgram']), 'i8', ALLOC_NORMAL) ];
  pad();
  for (var i = 0; i < argc-1; i = i + 1) {
    argv.push(allocate(intArrayFromString(args[i]), 'i8', ALLOC_NORMAL));
    pad();
  }
  argv.push(0);
  argv = allocate(argv, 'i32', ALLOC_NORMAL);


  try {

    var ret = Module['_main'](argc, argv, 0);


    // if we're not running an evented main loop, it's time to exit
    exit(ret, /* implicit = */ true);
  }
  catch(e) {
    if (e instanceof ExitStatus) {
      // exit() throws this once it's done to make sure execution
      // has been stopped completely
      return;
    } else if (e == 'SimulateInfiniteLoop') {
      // running an evented main loop, don't immediately exit
      Module['noExitRuntime'] = true;
      return;
    } else {
      if (e && typeof e === 'object' && e.stack) Module.printErr('exception thrown: ' + [e, e.stack]);
      throw e;
    }
  } finally {
    calledMain = true;
  }
}




function run(args) {
  args = args || Module['arguments'];

  if (preloadStartTime === null) preloadStartTime = Date.now();

  if (runDependencies > 0) {
    Module.printErr('run() called, but dependencies remain, so not running');
    return;
  }

  writeStackCookie();

  preRun();

  if (runDependencies > 0) return; // a preRun added a dependency, run will be called later
  if (Module['calledRun']) return; // run may have just been called through dependencies being fulfilled just in this very frame

  function doRun() {
    if (Module['calledRun']) return; // run may have just been called while the async setStatus time below was happening
    Module['calledRun'] = true;

    if (ABORT) return;

    ensureInitRuntime();

    preMain();

    if (ENVIRONMENT_IS_WEB && preloadStartTime !== null) {
      Module.printErr('pre-main prep time: ' + (Date.now() - preloadStartTime) + ' ms');
    }

    if (Module['onRuntimeInitialized']) Module['onRuntimeInitialized']();

    if (Module['_main'] && shouldRunNow) Module['callMain'](args);

    postRun();
  }

  if (Module['setStatus']) {
    Module['setStatus']('Running...');
    setTimeout(function() {
      setTimeout(function() {
        Module['setStatus']('');
      }, 1);
      doRun();
    }, 1);
  } else {
    doRun();
  }
  checkStackCookie();
}
Module['run'] = Module.run = run;

function exit(status, implicit) {
  if (implicit && Module['noExitRuntime']) {
    Module.printErr('exit(' + status + ') implicitly called by end of main(), but noExitRuntime, so not exiting the runtime (you can use emscripten_force_exit, if you want to force a true shutdown)');
    return;
  }

  if (Module['noExitRuntime']) {
    Module.printErr('exit(' + status + ') called, but noExitRuntime, so halting execution but not exiting the runtime or preventing further async execution (you can use emscripten_force_exit, if you want to force a true shutdown)');
  } else {

    ABORT = true;
    EXITSTATUS = status;
    STACKTOP = initialStackTop;

    exitRuntime();

    if (Module['onExit']) Module['onExit'](status);
  }

  if (ENVIRONMENT_IS_NODE) {
    process['exit'](status);
  } else if (ENVIRONMENT_IS_SHELL && typeof quit === 'function') {
    quit(status);
  }
  // if we reach here, we must throw an exception to halt the current execution
  throw new ExitStatus(status);
}
Module['exit'] = Module.exit = exit;

var abortDecorators = [];

function abort(what) {
  if (what !== undefined) {
    Module.print(what);
    Module.printErr(what);
    what = JSON.stringify(what)
  } else {
    what = '';
  }

  ABORT = true;
  EXITSTATUS = 1;

  var extra = '';

  var output = 'abort(' + what + ') at ' + stackTrace() + extra;
  if (abortDecorators) {
    abortDecorators.forEach(function(decorator) {
      output = decorator(output, what);
    });
  }
  throw output;
}
Module['abort'] = Module.abort = abort;

// {{PRE_RUN_ADDITIONS}}

if (Module['preInit']) {
  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
  while (Module['preInit'].length > 0) {
    Module['preInit'].pop()();
  }
}

// shouldRunNow refers to calling main(), not run().
var shouldRunNow = true;
if (Module['noInitialRun']) {
  shouldRunNow = false;
}


run();

// {{POST_RUN_ADDITIONS}}





// {{MODULE_ADDITIONS}}



this.liblouisBuilds = this.liblouisBuilds || {};

var version;
try {
	version = Module.ccall('lou_version', 'string', [], []);
} catch(e) {
	version = "unknown";
}

this.liblouisBuilds[version] = this.liblouisBuilds[version] || [];
this.liblouisBuilds[version].push(Module);


  return liblouisBuild;
};
